(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"argscheck":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Cordova (https://github.com/apache/cordova-js)

var utils = require('utils');

var moduleExports = module.exports;

var typeMap = {
    'A': 'Array',
    'D': 'Date',
    'N': 'Number',
    'S': 'String',
    'F': 'Function',
    'O': 'Object'
};

function extractParamName(callee, argIndex) {
    return (/.*?\((.*?)\)/).exec(callee)[1].split(', ')[argIndex];
}

function checkArgs(spec, functionName, args, opt_callee) {
    if (!moduleExports.enableChecks) {
        return;
    }
    var errMsg = null;
    var typeName;
    for (var i = 0; i < spec.length; ++i) {
        var c = spec.charAt(i),
            cUpper = c.toUpperCase(),
            arg = args[i];
        // Asterix means allow anything.
        if (c == '*') {
            continue;
        }
        typeName = utils.typeName(arg);
        if ((arg === null || arg === undefined) && c == cUpper) {
            continue;
        }
        if (typeName != typeMap[cUpper]) {
            errMsg = 'Expected ' + typeMap[cUpper];
            break;
        }
    }
    if (errMsg) {
        errMsg += ', but got ' + typeName + '.';
        errMsg = 'Wrong type for parameter "' + extractParamName(opt_callee || args.callee, i) + '" of ' + functionName + ': ' + errMsg;
        throw TypeError(errMsg);
    }
}

function getValue(value, defaultValue) {
    return value === undefined ? defaultValue : value;
}

moduleExports.checkArgs = checkArgs;
moduleExports.getValue = getValue;
moduleExports.enableChecks = true;


},{"utils":"utils"}],1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":3,"get-intrinsic":22}],3:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var setFunctionLength = require('set-function-length');

var $TypeError = require('es-errors/type');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = require('es-define-property');
var $max = GetIntrinsic('%Math.max%');

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"es-define-property":12,"es-errors/type":18,"function-bind":21,"get-intrinsic":22,"set-function-length":31}],4:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
/* global io:false */
var livereload = require('./live-reload-client');
var Messages = require('messages');
var telemetry = require('telemetry-helper');

var cordova;
var socket = io();
var nextExecCacheIndex = 0;

// Details of each plugin that has app-host code is injected when this file is served.
var plugins = {
    'events': require('events'),
'cordova-plugin-device': require('cordova-plugin-device'),
'cordova-plugin-dialogs': require('cordova-plugin-dialogs')
};

var pluginHandlersDefinitions = {
    'cordova-plugin-camera': require('cordova-plugin-camera-handlers'),
'cordova-plugin-inappbrowser': require('cordova-plugin-inappbrowser-handlers')
};

var pluginClobberDefinitions = {
    'cordova-plugin-geolocation': require('cordova-plugin-geolocation-clobbers')
};

var execCache = {};
var pluginMessages = {};
var pluginHandlers = {};
var serviceToPluginMap = {};

function clobber(clobbers, scope, clobberToPluginMap, pluginId) {
    Object.keys(clobbers).forEach(function (key) {
        if (clobberToPluginMap && pluginId) {
            clobberToPluginMap[key] = pluginId;
        }

        if (clobbers[key] && typeof clobbers[key] === 'object') {
            scope[key] = scope[key] || {};
            clobber(clobbers[key], scope[key]);
        } else {
            scope[key] = clobbers[key];
        }
    });
}

function applyPlugins(plugins, clobberScope, clobberToPluginMap) {
    Object.keys(plugins).forEach(function (pluginId) {
        var plugin = plugins[pluginId];
        if (plugin) {
            if (typeof plugin === 'function') {
                pluginMessages[pluginId] = pluginMessages[pluginId] || new Messages(pluginId, socket);
                plugin = plugin(pluginMessages[pluginId], exec);
                plugins[pluginId] = plugin;
            }
            if (clobberScope) {
                clobber(plugin, clobberScope, clobberToPluginMap, pluginId);
            }
        }
    });
}

/*
 * This function is used as setter for window.cordova property. Besides setting
 * the global property, it overrides some cordova definitions and sets up the
 * communication protocol with the server and the sim-host.
 */
function setCordovaAndInitialize(originalCordova) {
    var channel,
        platform,
        platformBootstrap;

    if (cordova) {
        return;
    }

    cordova = originalCordova;

    cordova.define.remove('cordova/exec');
    cordova.define('cordova/exec', function (require, exports, module) {
        module.exports = exec;
    });

    platform = cordova.require('cordova/platform');
    platformBootstrap = platform.bootstrap;
    platform.bootstrap = function () {
    };

    // default Windows bootstrap function tries to load WinJS which is not
    // available and not required in simulation mode so we override bootstrap
    if (cordova.platformId === 'windows') {
        platformBootstrap = function () {
            cordova.require('cordova/modulemapper')
                .clobbers('cordova/exec/proxy', 'cordova.commandProxy');

        };
    }

    channel = cordova.require('cordova/channel');

    // define our own channel to delay the initialization until sim-host tells
    // us everything's ready (fired in 'start' event handler).
    channel.createSticky('onCordovaSimulateReady');
    channel.waitForInitialization('onCordovaSimulateReady');

    socket.on('start-live-reload', function () {
        livereload.start(socket);
    });

    socket.on('init-telemetry', function () {
        telemetry.init(socket);
    });

    socket.on('init-xhr-proxy', function () {
        require('xhr-proxy').init();
    });

    socket.on('init-touch-events', function () {
        require('./touch-events').init();
    });

    socket.on('refresh', function () {
        document.location.reload(true);
    });

    // firing of onNativeReady is delayed until SIM_HOST tells us it's ready
    socket.once('init', function () {
        // sim-host is ready, register exec handlers, fire onNativeReady and send
        // the list of plugins
        socket.on('exec-success', function (data) {
            var execCacheInfo = execCache[data.index];
            if (execCacheInfo && typeof execCacheInfo.success === 'function') {
                execCacheInfo.success(data.result);
            }
        });

        socket.on('exec-failure', function (data) {
            var execCacheInfo = execCache[data.index];
            if (execCacheInfo && typeof execCacheInfo.fail === 'function') {
                execCacheInfo.fail(data.error);
            }
        });

        if (cordova.platformId !== 'browser') {
            channel.onPluginsReady.subscribe(function () {
                var pluginList;
                try {
                    pluginList = cordova.require('cordova/plugin_list').metadata;
                } catch (ex) {
                    // when the app doesn't contain any plugin, the module "cordova/plugin_list"
                    // is not loaded and cordova.require throws an exception
                    pluginList = {};
                }
                socket.emit('app-plugin-list', pluginList);
            });
        } else {
            socket.emit('app-plugin-list', {});
        }

        applyPlugins(plugins);
        applyPlugins(pluginHandlersDefinitions, pluginHandlers, serviceToPluginMap);
        applyPlugins(pluginClobberDefinitions, window);

        telemetry.registerPluginServices(serviceToPluginMap);

        platformBootstrap();

        switch (cordova.platformId) {
            // these platform fire onNativeReady in their bootstrap
            case 'ios':
            case 'browser':
            case 'ubuntu':
                break;
            // windows has an overridden bootstrap which does not fire
            // onNativeReady
            case 'windows':
            // android specified here just to be explicit about it
            /* falls through */
            case 'android':
            default:
                channel.onNativeReady.fire();
                break;
        }

    });

    socket.once('start', function () {
        // all set, fire onCordovaSimulate ready (which up to this point was
        // delaying onDeviceReady).
        channel.onCordovaSimulateReady.fire();
        // an init after start means reload. it is only sent if sim-host was
        // reloaded
        socket.once('init', function () {
            window.location.reload(true);
        });
    });

    // register app-host
    socket.emit('register-app-host');
}

function getCordova() {
    return cordova;
}

function exec(success, fail, service, action, args) {
    // If we have a local handler, call that. Otherwise pass it to the simulation host.
    var handler = pluginHandlers[service] && pluginHandlers[service][action];
    if (handler) {
        telemetry.sendClientTelemetry('exec', { handled: 'app-host', service: service, action: action });

        // Ensure local handlers are executed asynchronously.
        setTimeout(function () {
            handler(success, fail, args);
        }, 0);
    } else {
        var execIndex = nextExecCacheIndex++;
        execCache[execIndex] = { index: execIndex, success: success, fail: fail };
        socket.emit('exec', { index: execIndex, service: service, action: action, args: args, hasSuccess: !!success, hasFail: !!fail });
    }
}

// have this stub function always, some platforms require it
exec.init = function () {
};

// Setup for cordova patching
Object.defineProperty(window, 'cordova', {
    set: setCordovaAndInitialize,
    get: getCordova
});

var originalUserAgent = window.navigator.userAgent;
Object.defineProperty(window.navigator, 'userAgent', {
    get: function () {
        // The user agent is inserted here by the server when this file is served up.
        var userAgent = '/** USER-AGENT **/';
        return userAgent || originalUserAgent;
    }
});

},{"./live-reload-client":5,"./touch-events":6,"cordova-plugin-camera-handlers":"cordova-plugin-camera-handlers","cordova-plugin-device":"cordova-plugin-device","cordova-plugin-dialogs":"cordova-plugin-dialogs","cordova-plugin-geolocation-clobbers":"cordova-plugin-geolocation-clobbers","cordova-plugin-inappbrowser-handlers":"cordova-plugin-inappbrowser-handlers","events":"events","messages":"messages","telemetry-helper":"telemetry-helper","xhr-proxy":"xhr-proxy"}],5:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Vogue (https://github.com/andrewdavey/vogue)

var url = require('url');

var URL_ATTRIB_NAME = 'url';
var HREF_ATTRIB_NAME = 'href';
var SRC_ATTRIB_NAME = 'src';
var referenceAttributes = [
    URL_ATTRIB_NAME,
    HREF_ATTRIB_NAME,
    SRC_ATTRIB_NAME
];

module.exports.start = function (sock) {
    var serverUrl = window.location.protocol + '//' + window.location.host;
    var localUrlPrefixes = [
        serverUrl,
        serverUrl + '/',
        '/',
        ''
    ];
    var socket = sock;

    /**
     * Returns the name of the reference attribute (either "url", "href" or "src") that is defined for the given node.
     * If the node defines more than one, returns the first encountered, in that order.
     *
     * @param {Element} domNode The DOM node to check.
     * @returns {String} "url", "href" or "src", or null if none of these attributes is defined.
     */
    function getReferenceAttributeForNode(domNode) {
        if (domNode.getAttribute(URL_ATTRIB_NAME)) {
            return URL_ATTRIB_NAME;
        }

        if (domNode.getAttribute(HREF_ATTRIB_NAME)) {
            return HREF_ATTRIB_NAME;
        }

        if (domNode.getAttribute(SRC_ATTRIB_NAME)) {
            return SRC_ATTRIB_NAME;
        }

        return null;
    }

    /**
     * Checks whether the given URL corresponds to a given file path from the server.
     *
     * @param {String} url The URL to check.
     * @param {String} fileRelativePath The path of the modified file to check, relative to the webRoot.
     * @returns {boolean} Whether the URL points to the modified file from the server.
     */
    function urlMatchesPath(url, fileRelativePath) {
        return localUrlPrefixes.some(function (prefix) {
            return (prefix + fileRelativePath) === url;
        });
    }

    /**
     * Finds all the DOM elements that have a reference attribute ("url", "href" or "src") pointing to the given
     * relative path. Excludes <script> tags.
     *
     * @param {String} fileRelativePath The URL of the file to check, relative to the webRoot.
     * @returns {{ domNode: Element, referenceAttribute: string }[]} An array of "resources" referencing the given file.
     */
    function findDomNodesForFilePath(fileRelativePath) {
        // To use querySelectorAll to query elements based on their attributes, the selector's syntax is:
        // '[attrib1], [attrib2], ...'.
        var selectorString = '[' + referenceAttributes.join('], [') + ']';
        var rawNodes = document.querySelectorAll(selectorString);
        var filteredNodes = [];

        // querySelectorAll() does not return an array, so we can't use Array.prototype.filter().
        for (var i = 0; i < rawNodes.length; ++i) {
            var currentNode = rawNodes[i];

            // Ignore <script> tags (we need to do a full reload for scripts).
            if (currentNode.tagName.toLowerCase() === 'script') {
                continue;
            }

            // Verify if the node is referencing the modified file
            var referenceAttribute = getReferenceAttributeForNode(currentNode);
            var nodeReference = currentNode.getAttribute(referenceAttribute);

            // If the node's url / href / src doesn't reference the modified file on the server, ignore the node.
            if (!nodeReference || !urlMatchesPath(url.parse(nodeReference).pathname, fileRelativePath)) {
                continue;
            }

            // We care about this node.
            filteredNodes.push({
                domNode: currentNode,
                referenceAttribute: referenceAttribute
            });
        }

        return filteredNodes;
    }

    /**
     * Determines whether the changes form the specified file can be applied to the app without a full page reload.
     * Then, based on that, either updates the reference attribute of the appropriate node, or does a full page
     * reload.
     *
     * @param {String} fileRelativePath The URL of the file that changed, relative to the webRoot.
     */
    function onFileChanged(fileRelativePath) {
        var associatedNodes = findDomNodesForFilePath(fileRelativePath);

        if (associatedNodes.length) {
            refreshFile(fileRelativePath, associatedNodes);
        } else {
            reloadPage();
        }
    }

    /**
     * Refreshes a file by updating the associated nodes' querystring with a new _livereload parameter.
     *
     * @param {String} fileRelativePath The URL of the file to be refreshed, relative to the webRoot.
     */
    function refreshFile(fileRelativePath, nodesToRefresh) {
        nodesToRefresh = nodesToRefresh || findDomNodesForFilePath(fileRelativePath);

        if (!nodesToRefresh) {
            // The modified file doesn't appear to be referenced in the DOM anymore. Do a full reload.
            reloadPage();

            return;
        }

        // Update the nodes' url / href / src attribute with a new _livereload querystring parameter.
        nodesToRefresh.forEach(function (nodeInfo) {
            var previousUrl = nodeInfo.domNode.getAttribute(nodeInfo.referenceAttribute);
            var parsedUrl = url.parse(previousUrl, true);

            parsedUrl.query._livereload = (new Date).getTime();
            delete parsedUrl.search;
            nodeInfo.domNode.setAttribute(nodeInfo.referenceAttribute, url.format(parsedUrl));
        });
    }

    /**
     * Reload the page. Currently, only does a naive window.location.reload().
     */
    function reloadPage() {
        window.location.reload(true);
    }

    socket.on('lr-file-changed', function (data) {
        onFileChanged(data.fileRelativePath);
    });
};

},{"url":38}],6:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

var utils = require('utils');

var _lastMouseEvent,
    _isMouseDown;

// NOTE: missing view, detail, touches, targetTouches, scale and rotation
function _createTouchEvent(type, canBubble, cancelable, eventData) {
    var touchEvent = window.document.createEvent('Event');
    touchEvent.initEvent(type, canBubble, cancelable);
    utils.mixin(eventData, touchEvent);

    return touchEvent;
}

function _simulateTouchEvent(type, mouseevent) {
    if (_lastMouseEvent &&
            mouseevent.type === _lastMouseEvent.type &&
            mouseevent.pageX === _lastMouseEvent.pageX &&
            mouseevent.pageY === _lastMouseEvent.pageY) {
        return;
    }

    _lastMouseEvent = mouseevent;

    var touchObj = {
        clientX: mouseevent.pageX,
        clientY: mouseevent.pageY,
        pageX: mouseevent.pageX,
        pageY: mouseevent.pageY,
        screenX: mouseevent.pageX,
        screenY: mouseevent.pageY,
        target: mouseevent.target,
        identifier: ''
    };

    var eventData = {
        altKey: mouseevent.altKey,
        ctrlKey: mouseevent.ctrlKey,
        shiftKey: mouseevent.shiftKey,
        metaKey: mouseevent.metaKey,
        changedTouches: [touchObj],
        targetTouches: type === 'touchend' ? [] : [touchObj],
        touches: type === 'touchend' ? [] : [touchObj]
    };

    utils.mixin(touchObj, eventData);

    var itemFn = function (index) {
        return this[index];
    };

    eventData.touches.item = itemFn;
    eventData.changedTouches.item = itemFn;
    eventData.targetTouches.item = itemFn;

    var listenerName = 'on' + type,
        simulatedEvent = _createTouchEvent(type, true, true, eventData);

    mouseevent.target.dispatchEvent(simulatedEvent);

    if (typeof mouseevent.target[listenerName] === 'function') {
        mouseevent.target[listenerName].apply(mouseevent.target, [simulatedEvent]);
    }
}

function init() {
    window.document.addEventListener('mousedown', function (event) {
        _isMouseDown = true;
        _simulateTouchEvent('touchstart', event);
    }, true);

    window.document.addEventListener('mousemove', function (event) {
        if (_isMouseDown) {
            _simulateTouchEvent('touchmove', event);
        }
    }, true);

    window.document.addEventListener('mouseup', function (event) {
        _isMouseDown = false;
        _simulateTouchEvent('touchend', event);
    }, true);

    window.Node.prototype.ontouchstart = null;
    window.Node.prototype.ontouchend = null;
    window.Node.prototype.ontouchmove = null;
}

module.exports.init = init;

},{"utils":"utils"}],7:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based on Apache Cordova geolocation plugin's Coordinates implementation.
// See https://github.com/apache/cordova-plugin-geolocation/blob/master/www/Coordinates.js

/**
 * This class contains position information.
 * @param {Object} lat
 * @param {Object} lng
 * @param {Object} alt
 * @param {Object} acc
 * @param {Object} head
 * @param {Object} vel
 * @param {Object} altacc
 * @constructor
 */
var Coordinates = function(lat, lng, alt, acc, head, vel, altacc) {
    /**
     * The latitude of the position.
     */
    this.latitude = lat;
    /**
     * The longitude of the position,
     */
    this.longitude = lng;
    /**
     * The accuracy of the position.
     */
    this.accuracy = acc;
    /**
     * The altitude of the position.
     */
    this.altitude = (alt !== undefined ? alt : null);
    /**
     * The direction the device is moving at the position.
     */
    this.heading = (head !== undefined ? head : null);
    /**
     * The velocity with which the device is moving at the position.
     */
    this.speed = (vel !== undefined ? vel : null);

    if (this.speed === 0 || this.speed === null) {
        this.heading = NaN;
    }

    /**
     * The altitude accuracy of the position.
     */
    this.altitudeAccuracy = (altacc !== undefined) ? altacc : null;
};

module.exports = Coordinates;

},{}],8:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based on Apache Cordova geolocation plugin's Position implementation.
// See https://github.com/apache/cordova-plugin-geolocation/blob/master/www/Position.js

var Coordinates = require('./Coordinates');

var Position = function(coords, timestamp) {
    if (coords) {
        this.coords = new Coordinates(coords.latitude, coords.longitude, coords.altitude, coords.accuracy, coords.heading, coords.velocity, coords.altitudeAccuracy);
    } else {
        this.coords = new Coordinates();
    }
    this.timestamp = (timestamp !== undefined) ? timestamp : new Date();
};

module.exports = Position;

},{"./Coordinates":7}],9:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based on Apache Cordova geolocation plugin's PositionError implementation.
// See https://github.com/apache/cordova-plugin-geolocation/blob/master/www/PositionError.js

/**
 * Position error object
 *
 * @constructor
 * @param code
 * @param message
 */
var PositionError = function(code, message) {
    this.code = code || null;
    this.message = message || '';
};

PositionError.prototype.PERMISSION_DENIED = PositionError.PERMISSION_DENIED = 1;
PositionError.prototype.POSITION_UNAVAILABLE = PositionError.POSITION_UNAVAILABLE = 2;
PositionError.prototype.TIMEOUT = PositionError.TIMEOUT = 3;

module.exports = PositionError;

},{}],10:[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

// Events taken from cordova-plugin-inappbrowser implementation, and iframe approach
// based from https://github.com/apache/cordova-plugin-inappbrowser/blob/master/src/browser/InAppBrowserProxy.js

/*global cordova: false */

var utils = require('utils');

var _defaultInAppBrowserType = 'iframe';

/**
 * @param {string} url
 * @param {Array} options
 * @param {function} success
 * @param {function} fail
 * @constructor
 */
function InAppBrowser(url, options, success, fail) {
    this._url = this._prepareUrl(url);
    this._options = {};
    this._callbacks = {
        success: success,
        fail: fail
    };

    options = (options.trim() === '') ? [] : options.split(';');

    // prepare options object
    options.forEach(function (option) {
        var prop = option.split('='); // "theOption=value"
        this._options[prop[0]] = prop[1];
    }.bind(this));

    if (this._options.hidden !== 'yes') {
        this.show();
    }
}

/**
 * @enum
 */
InAppBrowser.Events = {
    LOAD_START: 'loadstart',
    LOAD_STOP: 'loadstop',
    LOAD_ERROR: 'loaderror',
    EXIT: 'exit'
};

InAppBrowser.prototype._prepareUrl = function (url) {
    var queryParameter = 'cdvsim-enabled=false',
        updatedUrl = url;

    if (utils.isSameOriginRequest(url)) {
        url = utils.parseUrl(url);
        updatedUrl += (url.search.length > 0) ? '&' : '?';
        updatedUrl += queryParameter;
    }

    return updatedUrl;
};

InAppBrowser.prototype.getCurrentUrl = function () {};

/**
 * JavaScript implementation of the Native call to show. The simulator browser should be
 * displayed.
 * Subclasses must implement this.
 */
InAppBrowser.prototype.show = function () {};

/**
 * Hide the simulator browser.
 * Subclasses must implement this.
 */
InAppBrowser.prototype.close = function () {};

InAppBrowser.prototype.injectScriptCode = function (callback, args) {
    console.error('InAppBrowser "injectScriptCode" simulation not supported');
};

InAppBrowser.prototype.injectScriptFile = function (callback, args) {
    console.error('InAppBrowser "injectScriptFile" simulation not supported');
};

InAppBrowser.prototype.injectStyleCode = function (callback, args) {
    console.error('InAppBrowser "injectStyleCode" simulation not supported');
};

InAppBrowser.prototype.injectStyleFile = function (callback, args) {
    console.error('InAppBrowser "injectScriptFile" simulation not supported');
};

/**
 * Execute the success callback specified at the native "open" call.
 * @param {string} eventName
 * @private
 */
InAppBrowser.prototype._success = function (eventName) {
    this._callbacks.success({
        type: eventName,
        url: this.getCurrentUrl()
    });
};

/**
 * Implementation of the System browser simulation. This uses a new browser window
 * as the system browser.
 * @param {string} url
 * @param {Array} options
 * @param {function} success
 * @param {function} fail
 * @constructor
 */
function SystemBrowser(url, options, success, fail) {
    InAppBrowser.call(this, url, options, success, fail);

    this._window = null;
}

SystemBrowser.prototype = Object.create(InAppBrowser.prototype);
SystemBrowser.prototype.constructor = SystemBrowser;
SystemBrowser.prototype.parentClass = InAppBrowser.prototype;

SystemBrowser.prototype.getCurrentUrl = function () {
    return (this._window ? this._window.location.href : '');
};

SystemBrowser.prototype.show = function () {
    if (!this._window) {
        var modulemapper = cordova.require('cordova/modulemapper'),
            windowOpen = modulemapper.getOriginalSymbol(window, 'window.open');

        this._success(InAppBrowser.Events.LOAD_START);

        this._window = windowOpen.call(window, this._url, '_blank');
    }
};

SystemBrowser.prototype.close = function () {
    if (this._window) {
        this._window.close();
        this._window = null;

        this._success(InAppBrowser.Events.EXIT);
    }
};

/**
 * Implementation of the WebView type of InAppBrowser plugin. This creates an iframe
 * that simulates the embedded WebView.
 * @param {string} url
 * @param {Array} options
 * @param {function} success
 * @param {function} fail
 * @constructor
 */
function IframeBrowser(url, options, success, fail) {
    this._container = null;
    this._iframe = null;
    this._resizeCallback = this._resizeContainer.bind(this);
    this._isVisible = false;

    InAppBrowser.call(this, url, options, success, fail);
}

IframeBrowser.prototype = Object.create(InAppBrowser.prototype);
IframeBrowser.prototype.constructor = IframeBrowser;
IframeBrowser.prototype.parentClass = InAppBrowser.prototype;

IframeBrowser.prototype.getCurrentUrl = function () {
    return (this._iframe ? this._iframe.src : '');
};

IframeBrowser.prototype.show = function () {
    if (!this._container) {
        this._createFrame();
    }

    this._isVisible = true;

    this._iframe.src = this._url;
    this._container.style.display = 'block';

    this._resizeContainer();

    this._success(InAppBrowser.Events.LOAD_START);
};

IframeBrowser.prototype.close = function () {
    if (this._container) {
        this._container.parentNode.removeChild(this._container);
        this._container = null;
        this._isVisible = false;

        this._success(InAppBrowser.Events.EXIT);

        this._iframe = null;

        window.removeEventListener('resize', this._resizeCallback);
    }
};

IframeBrowser.prototype.hide = function () {
    if (this._container && this._isVisible) {
        this._container.style.display = 'none';
        this._isVisible = false;
    }
};

IframeBrowser.prototype.injectScriptCode = function (callback, args) {
    if (this._container && this._iframe) {
        var code = args[0].replace(/\r?\n|\r/g, ''),
            hasCallback = args[1];

        try {
            var result = this._injectCode(code);
            if (hasCallback) {
                callback(result);
            }
        } catch (error) {
            console.error('Error occured while trying to inject script', error);
        }
    }
};

IframeBrowser.prototype.injectScriptFile = function (callback, args) {
    var file = args[0];
    var code = '(function () {' +
        'var head = document.getElementsByTagName("head")[0];' +
        'var script = document.createElement("script");' +
        'script.type = "text/javascript";' +
        'script.id = "inappbrowser-inject-script";' +
        'script.src = "' + file + '";' +
        'head.appendChild(script);' +
        '}());';

    args[0] = code;

    this.injectScriptCode(callback, args);
};

IframeBrowser.prototype.injectStyleCode = function (callback, args) {
    if (this._container && this._iframe) {
        var css = args[0].replace(/\r?\n|\r/g, ''),
            hasCallback = args[1];

        var code = '(function () {' +
            'var head = document.getElementsByTagName("head")[0];' +
            'var style = document.createElement("style");' +
            'style.type = "text/css";' +
            'if (style.styleSheet) {' +
            'style.styleSheet.cssText = "' + css + '";' +
            '} else {' +
            'style.appendChild(document.createTextNode("' + css + '"));}' +
            'head.appendChild(style);' +
            '}());';

        try {
            var result = this._injectCode(code);
            if (hasCallback) {
                callback(result);
            }
        } catch (error) {
            console.error('Error occured while trying to inject style', error);
        }
    }
};

IframeBrowser.prototype.injectStyleFile = function (callback, args) {
    if (this._container && this._iframe) {
        var file = args[0],
            hasCallback = args[1];

        var code = '(function () {' +
            'var head = document.getElementsByTagName("head")[0];' +
            'var link = document.createElement("link");' +
            'link.type = "text/css";' +
            'link.rel = "stylesheet";' +
            'link.href = "' + file + '";' +
            'head.appendChild(link);' +
            '}());';

        try {
            var result = this._injectCode(code);
            if (hasCallback) {
                callback(result);
            }
        } catch (error) {
            console.error('Error occured while trying to inject a style file', error);
        }
    }
};

/**
 * @private
 */
IframeBrowser.prototype._createFrame = function () {
    this._container = document.createElement('div');
    this._iframe = document.createElement('iframe');
    this._iframe.sandbox = 'allow-modals allow-popups';

    // container style
    var style = this._container.style;
    style.position = 'absolute';
    style.top = style.left = '0';
    style.border = '0';
    style.backgroundColor = '#ffffff';
    style.zIndex = '10000';
    style.width = document.body.clientWidth + 'px';
    style.height = document.body.clientHeight + 'px';
    style.minHeight = style.minWidth = '100%';

    // iframe style
    style = this._iframe.style;
    style.border = '0';
    style.width = '100%';

    if (!this._options.location || this._options.location === 'yes') {
        style.height = 'calc(100% - 35px)';

        this._container.appendChild(this._createNavigationBar());
    } else {
        style.height = '100%';
    }

    this._container.appendChild(this._iframe);

    document.body.appendChild(this._container);

    this._iframe.addEventListener('pageshow', this._success.bind(this, InAppBrowser.Events.LOAD_START));
    this._iframe.addEventListener('load', this._success.bind(this, InAppBrowser.Events.LOAD_STOP));
    this._iframe.addEventListener('error', this._success.bind(this, InAppBrowser.Events.LOAD_ERROR));
    this._iframe.addEventListener('abort', this._success.bind(this, InAppBrowser.Events.LOAD_ERROR));

    window.addEventListener('resize', this._resizeCallback);
};

/**
 * Creates a fake browser's navigation bar, that only contains a button to remove the iframe.
 * @private
 */
IframeBrowser.prototype._createNavigationBar = function () {
    var navigationDiv = document.createElement('div'),
        closeSpan = document.createElement('span');

    navigationDiv.style.height = '30px';
    navigationDiv.style.padding = '2px';
    navigationDiv.style.backgroundColor = '#404040';

    closeSpan.innerHTML = '✖';
    closeSpan.style.width = '30px';
    closeSpan.style.height = '25px';
    closeSpan.style.color = '#ffffff';
    closeSpan.style.fontSize = '22px';
    closeSpan.style.marginLeft = '5px';
    closeSpan.style.cursor = 'pointer';

    closeSpan.addEventListener('click', function (e) {
        setTimeout(function () {
            this.close();
        }.bind(this), 0);
    }.bind(this));

    navigationDiv.appendChild(closeSpan);

    return navigationDiv;
};

/**
 * Resize the main container with the document.body size, only when it is visible.
 * @private
 */
IframeBrowser.prototype._resizeContainer = function () {
    if (this._container && this._isVisible) {
        var body = document.body;

        this._container.style.width = body.clientWidth + 'px';
        this._container.style.height = body.clientHeight + 'px';
    }
};

/**
 * Execute the given code in the iframe context whenever it's possible. This may
 * throw an error when the URL loaded in the iframe is not in the same domain than
 * the application.
 * @throws It throws an error when the eval call from the iframe fails.
 * @private
 */
IframeBrowser.prototype._injectCode = function (code) {
    var result = this._iframe.contentWindow.eval(code);

    return result ? [result] : [];
};

/**
 * Create an instance of InAppBrowser based on the target type. When the type is '_system',
 * an instance of the system browser is created, when the type is '_blank', an instance of
 * a browser based on iframe is created. For any other target type, including '_self',
 * the current window will navigate to the given URL.
 * @param {function} success
 * @param {function} fail
 * @param {Array} args
 * @return {object}
 */
function create(success, fail, args) {
    // args[0]: url, args[1]: target, args[2]: options
    var Constructor;

    switch (args[1]) {
        case '_system':
            // open in a new browser tab
            Constructor = SystemBrowser;
            break;
        case '_self':
            // use the current window
            window.location = args[0];
            return;
        default:
            if (_defaultInAppBrowserType === 'iframe') {
                // "_blank" and any other option, use the iframe browser
                Constructor = IframeBrowser;
            } else {
                // new browser window
                Constructor = SystemBrowser;
            }
    }

    return new Constructor(args[0], args[2], success, fail);
}

function setDefaultInAppBrowser(value) {
    _defaultInAppBrowserType = value;
}

module.exports.create = create;
module.exports.setDefaultInAppBrowser = setDefaultInAppBrowser;

},{"utils":"utils"}],11:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');

var gopd = require('gopd');

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};

},{"es-define-property":12,"es-errors/syntax":17,"es-errors/type":18,"gopd":23}],12:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

/** @type {import('.')} */
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;

},{"get-intrinsic":22}],13:[function(require,module,exports){
'use strict';

/** @type {import('./eval')} */
module.exports = EvalError;

},{}],14:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Error;

},{}],15:[function(require,module,exports){
'use strict';

/** @type {import('./range')} */
module.exports = RangeError;

},{}],16:[function(require,module,exports){
'use strict';

/** @type {import('./ref')} */
module.exports = ReferenceError;

},{}],17:[function(require,module,exports){
'use strict';

/** @type {import('./syntax')} */
module.exports = SyntaxError;

},{}],18:[function(require,module,exports){
'use strict';

/** @type {import('./type')} */
module.exports = TypeError;

},{}],19:[function(require,module,exports){
'use strict';

/** @type {import('./uri')} */
module.exports = URIError;

},{}],20:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],21:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":20}],22:[function(require,module,exports){
'use strict';

var undefined;

var $Error = require('es-errors');
var $EvalError = require('es-errors/eval');
var $RangeError = require('es-errors/range');
var $ReferenceError = require('es-errors/ref');
var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');
var $URIError = require('es-errors/uri');

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();
var hasProto = require('has-proto')();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('hasown');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"es-errors":14,"es-errors/eval":13,"es-errors/range":15,"es-errors/ref":16,"es-errors/syntax":17,"es-errors/type":18,"es-errors/uri":19,"function-bind":21,"has-proto":25,"has-symbols":26,"hasown":28}],23:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":22}],24:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;

},{"es-define-property":12}],25:[function(require,module,exports){
'use strict';

var test = {
	__proto__: null,
	foo: {}
};

var $Object = Object;

/** @type {import('.')} */
module.exports = function hasProto() {
	// @ts-expect-error: TS errors on an inherited property for some reason
	return { __proto__: test }.foo === test.foo
		&& !(test instanceof $Object);
};

},{}],26:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":27}],27:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],28:[function(require,module,exports){
'use strict';

var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require('function-bind');

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);

},{"function-bind":21}],29:[function(require,module,exports){
(function (global){(function (){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var utilInspect = require('./util.inspect');
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
            mapForEach.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
        }
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
            setForEach.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
        }
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */
    if (typeof window !== 'undefined' && obj === window) {
        return '{ [object Window] }';
    }
    if (obj === global) {
        return '{ [object globalThis] }';
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./util.inspect":1}],30:[function(require,module,exports){
(function (global){(function (){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],31:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');
var define = require('define-data-property');
var hasDescriptors = require('has-property-descriptors')();
var gOPD = require('gopd');

var $TypeError = require('es-errors/type');
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};

},{"define-data-property":11,"es-errors/type":18,"get-intrinsic":22,"gopd":23,"has-property-descriptors":24}],32:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');
var callBound = require('call-bind/callBound');
var inspect = require('object-inspect');

var $TypeError = require('es-errors/type');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);

var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
*/
/** @type {import('.').listGetNode} */
var listGetNode = function (list, key) { // eslint-disable-line consistent-return
	/** @type {typeof list | NonNullable<(typeof list)['next']>} */
	var prev = list;
	/** @type {(typeof list)['next']} */
	var curr;
	for (; (curr = prev.next) !== null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			// eslint-disable-next-line no-extra-parens
			curr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);
			list.next = curr; // eslint-disable-line no-param-reassign
			return curr;
		}
	}
};

/** @type {import('.').listGet} */
var listGet = function (objects, key) {
	var node = listGetNode(objects, key);
	return node && node.value;
};
/** @type {import('.').listSet} */
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		// Prepend the new node to the beginning of the list
		objects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens
			key: key,
			next: objects.next,
			value: value
		});
	}
};
/** @type {import('.').listHas} */
var listHas = function (objects, key) {
	return !!listGetNode(objects, key);
};

/** @type {import('.')} */
module.exports = function getSideChannel() {
	/** @type {WeakMap<object, unknown>} */ var $wm;
	/** @type {Map<object, unknown>} */ var $m;
	/** @type {import('.').RootNode<unknown>} */ var $o;

	/** @type {import('.').Channel} */
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		get: function (key) { // eslint-disable-line consistent-return
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapGet($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapGet($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listGet($o, key);
				}
			}
		},
		has: function (key) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapHas($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapHas($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listHas($o, key);
				}
			}
			return false;
		},
		set: function (key, value) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if (!$wm) {
					$wm = new $WeakMap();
				}
				$weakMapSet($wm, key, value);
			} else if ($Map) {
				if (!$m) {
					$m = new $Map();
				}
				$mapSet($m, key, value);
			} else {
				if (!$o) {
					// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
					$o = { key: {}, next: null };
				}
				listSet($o, key, value);
			}
		}
	};
	return channel;
};

},{"call-bind/callBound":2,"es-errors/type":18,"get-intrinsic":22,"object-inspect":29}],33:[function(require,module,exports){
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var Format = {
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

module.exports = {
    'default': Format.RFC3986,
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};

},{}],34:[function(require,module,exports){
'use strict';

var stringify = require('./stringify');
var parse = require('./parse');
var formats = require('./formats');

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"./formats":33,"./parse":35,"./stringify":36}],35:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    duplicates: 'combine',
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};

var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};

var parseArrayValue = function (val, options) {
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
        return val.split(',');
    }

    return val;
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
    var obj = { __proto__: null };

    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                } else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }

    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, 'key');
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
            val = utils.maybeMap(
                parseArrayValue(part.slice(pos + 1), options),
                function (encodedVal) {
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                }
            );
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }

        if (part.indexOf('[]=') > -1) {
            val = isArray(val) ? [val] : val;
        }

        var existing = has.call(obj, key);
        if (existing && options.duplicates === 'combine') {
            obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === 'last') {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
            obj = options.allowEmptyArrays && leaf === '' ? [] : [].concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;
            var index = parseInt(decodedRoot, 10);
            if (!options.parseArrays && decodedRoot === '') {
                obj = { 0: leaf };
            } else if (
                !isNaN(index)
                && root !== decodedRoot
                && String(index) === decodedRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else if (decodedRoot !== '__proto__') {
                obj[decodedRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }

    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {
        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');
    }

    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;

    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {
        throw new TypeError('The duplicates option must be either combine, first, or last');
    }

    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

    return {
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
        duplicates: duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils.merge(obj, newObj, options);
    }

    if (options.allowSparse === true) {
        return obj;
    }

    return utils.compact(obj);
};

},{"./utils":37}],36:[function(require,module,exports){
'use strict';

var getSideChannel = require('side-channel');
var utils = require('./utils');
var formats = require('./formats');
var has = Object.prototype.hasOwnProperty;

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;

var defaultFormat = formats['default'];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: 'indices',
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encodeDotInKeys: false,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === 'string'
        || typeof v === 'number'
        || typeof v === 'boolean'
        || typeof v === 'symbol'
        || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(
    object,
    prefix,
    generateArrayPrefix,
    commaRoundTrip,
    allowEmptyArrays,
    strictNullHandling,
    skipNulls,
    encodeDotInKeys,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    format,
    formatter,
    encodeValuesOnly,
    charset,
    sideChannel
) {
    var obj = object;

    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== 'undefined') {
            if (pos === step) {
                throw new RangeError('Cyclic object value');
            } else {
                findFlag = true; // Break while
            }
        }
        if (typeof tmpSc.get(sentinel) === 'undefined') {
            step = 0;
        }
    }

    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = utils.maybeMap(obj, function (value) {
            if (value instanceof Date) {
                return serializeDate(value);
            }
            return value;
        });
    }

    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
        }

        obj = '';
    }

    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (generateArrayPrefix === 'comma' && isArray(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) {
            obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
    } else if (isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, '%2E') : prefix;

    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;

    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + '[]';
    }

    for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

        if (skipNulls && value === null) {
            continue;
        }

        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, '%2E') : key;
        var keyPrefix = isArray(obj)
            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix
            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');

        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(
            value,
            keyPrefix,
            generateArrayPrefix,
            commaRoundTrip,
            allowEmptyArrays,
            strictNullHandling,
            skipNulls,
            encodeDotInKeys,
            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
        ));
    }

    return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }

    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {
        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');
    }

    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];

    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }

    var arrayFormat;
    if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    } else if ('indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = defaults.arrayFormat;
    }

    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
    }

    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat: arrayFormat,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);

    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (options.sort) {
        objKeys.sort(options.sort);
    }

    var sideChannel = getSideChannel();
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(
            obj[key],
            key,
            generateArrayPrefix,
            commaRoundTrip,
            options.allowEmptyArrays,
            options.strictNullHandling,
            options.skipNulls,
            options.encodeDotInKeys,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
        ));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        } else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }

    return joined.length > 0 ? prefix + joined : '';
};

},{"./formats":33,"./utils":37,"side-channel":32}],37:[function(require,module,exports){
'use strict';

var formats = require('./formats');

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }
};

var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        } else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }

    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};

var limit = 1024;

/* eslint operator-linebreak: [2, "before"] */

var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = str;
    if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== 'string') {
        string = String(str);
    }

    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }

    var out = '';
    for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];

        for (var i = 0; i < segment.length; ++i) {
            var c = segment.charCodeAt(i);
            if (
                c === 0x2D // -
                || c === 0x2E // .
                || c === 0x5F // _
                || c === 0x7E // ~
                || (c >= 0x30 && c <= 0x39) // 0-9
                || (c >= 0x41 && c <= 0x5A) // a-z
                || (c >= 0x61 && c <= 0x7A) // A-Z
                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
            ) {
                arr[arr.length] = segment.charAt(i);
                continue;
            }

            if (c < 0x80) {
                arr[arr.length] = hexTable[c];
                continue;
            }

            if (c < 0x800) {
                arr[arr.length] = hexTable[0xC0 | (c >> 6)]
                    + hexTable[0x80 | (c & 0x3F)];
                continue;
            }

            if (c < 0xD800 || c >= 0xE000) {
                arr[arr.length] = hexTable[0xE0 | (c >> 12)]
                    + hexTable[0x80 | ((c >> 6) & 0x3F)]
                    + hexTable[0x80 | (c & 0x3F)];
                continue;
            }

            i += 1;
            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));

            arr[arr.length] = hexTable[0xF0 | (c >> 18)]
                + hexTable[0x80 | ((c >> 12) & 0x3F)]
                + hexTable[0x80 | ((c >> 6) & 0x3F)]
                + hexTable[0x80 | (c & 0x3F)];
        }

        out += arr.join('');
    }

    return out;
};

var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    compactQueue(queue);

    return value;
};

var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
    return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
        }
        return mapped;
    }
    return fn(val);
};

module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};

},{"./formats":33}],38:[function(require,module,exports){
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

'use strict';

var punycode = require('punycode');

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

/*
 * define these here so at least they only have to be
 * compiled once on the first module load.
 */
var protocolPattern = /^([a-z0-9.+-]+:)/i,
  portPattern = /:[0-9]*$/,

  // Special case for a simple path URL
  simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,

  /*
   * RFC 2396: characters reserved for delimiting URLs.
   * We actually just auto-escape these.
   */
  delims = [
    '<', '>', '"', '`', ' ', '\r', '\n', '\t'
  ],

  // RFC 2396: characters not allowed for various reasons.
  unwise = [
    '{', '}', '|', '\\', '^', '`'
  ].concat(delims),

  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  autoEscape = ['\''].concat(unwise),
  /*
   * Characters that are never ever allowed in a hostname.
   * Note that any invalid chars are also handled, but these
   * are the ones that are *expected* to be seen, so we fast-path
   * them.
   */
  nonHostChars = [
    '%', '/', '?', ';', '#'
  ].concat(autoEscape),
  hostEndingChars = [
    '/', '?', '#'
  ],
  hostnameMaxLen = 255,
  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
  // protocols that can allow "unsafe" and "unwise" chars.
  unsafeProtocol = {
    javascript: true,
    'javascript:': true
  },
  // protocols that never have a hostname.
  hostlessProtocol = {
    javascript: true,
    'javascript:': true
  },
  // protocols that always contain a // bit.
  slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  },
  querystring = require('qs');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof url === 'object' && url instanceof Url) { return url; }

  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  /*
   * Copy chrome, IE, opera backslash-handling behavior.
   * Back slashes before the query string get converted to forward slashes
   * See: https://code.google.com/p/chromium/issues/detail?id=25916
   */
  var queryIndex = url.indexOf('?'),
    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
    uSplit = url.split(splitter),
    slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  /*
   * trim before proceeding.
   * This is to support parse stuff like "  http://foo.com  \n"
   */
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  /*
   * figure out if it's got a host
   * user@server is *always* interpreted as a hostname, and url
   * resolution will treat //foo/bar as host=foo,path=bar because that's
   * how the browser resolves relative URLs.
   */
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {

    /*
     * there's a hostname.
     * the first instance of /, ?, ;, or # ends the host.
     *
     * If there is an @ in the hostname, then non-host chars *are* allowed
     * to the left of the last @ sign, unless some host-ending character
     * comes *before* the @-sign.
     * URLs are obnoxious.
     *
     * ex:
     * http://a@b@c/ => user:a@b host:c
     * http://a@b?@c => user:a host:c path:/?@c
     */

    /*
     * v0.12 TODO(isaacs): This is not quite how Chrome does things.
     * Review our test case against browsers more comprehensively.
     */

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }
    }

    /*
     * at this point, either we have an explicit point where the
     * auth portion cannot go past, or the last @ char is the decider.
     */
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      /*
       * atSign must be in auth portion.
       * http://a@b/c@d => host:b auth:a path:/c@d
       */
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    /*
     * Now we have a portion which is definitely the auth.
     * Pull that off.
     */
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) { hostEnd = rest.length; }

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    /*
     * we've indicated that there is a hostname,
     * so even if it's empty, it has to be present.
     */
    this.hostname = this.hostname || '';

    /*
     * if hostname begins with [ and ends with ]
     * assume that it's an IPv6 address.
     */
    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) { continue; }
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              /*
               * we replace non-ASCII char with a temporary placeholder
               * we need this to make sure size of hostname is not
               * broken by replacing non-ASCII by nothing
               */
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      /*
       * IDNA Support: Returns a punycoded representation of "domain".
       * It only converts parts of the domain name that
       * have non-ASCII characters, i.e. it doesn't matter if
       * you call it with a domain that already is ASCII-only.
       */
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    /*
     * strip [ and ] from the hostname
     * the host field still retains them, though
     */
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  /*
   * now rest is set to the post-host stuff.
   * chop off any delim chars.
   */
  if (!unsafeProtocol[lowerProto]) {

    /*
     * First, make 100% sure that any "autoEscape" chars get
     * escaped, even if encodeURIComponent doesn't think they
     * need to be.
     */
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) { continue; }
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) { this.pathname = rest; }
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  // to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  /*
   * ensure it's an object, and not a string url.
   * If it's an obj, this is a no-op.
   * this way, you can call url_format() on strings
   * to clean up potentially wonky urls.
   */
  if (typeof obj === 'string') { obj = urlParse(obj); }
  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
    pathname = this.pathname || '',
    hash = this.hash || '',
    host = false,
    query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {
    query = querystring.stringify(this.query, {
      arrayFormat: 'repeat',
      addQueryPrefix: false
    });
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }

  /*
   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
   * unless they had them to begin with.
   */
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }
  if (search && search.charAt(0) !== '?') { search = '?' + search; }

  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) { return relative; }
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (typeof relative === 'string') {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  /*
   * hash is always overridden, no matter what.
   * even href="" will remove it.
   */
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') { result[rkey] = relative[rkey]; }
    }

    // urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.pathname = '/';
      result.path = result.pathname;
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    /*
     * if it's a known url protocol, then changing
     * the protocol does weird things
     * first, if it's not file:, then we MUST have a host,
     * and if there was a path
     * to begin with, then we MUST have a path.
     * if it is file:, then the host is dropped,
     * because that's known to be hostless.
     * anything else is assumed to be absolute.
     */
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift())) { }
      if (!relative.host) { relative.host = ''; }
      if (!relative.hostname) { relative.hostname = ''; }
      if (relPath[0] !== '') { relPath.unshift(''); }
      if (relPath.length < 2) { relPath.unshift(''); }
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
    mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),
    removeAllDots = mustEndAbs,
    srcPath = result.pathname && result.pathname.split('/') || [],
    relPath = relative.pathname && relative.pathname.split('/') || [],
    psychotic = result.protocol && !slashedProtocol[result.protocol];

  /*
   * if the url is a non-slashed url, then relative
   * links like ../.. should be able
   * to crawl up to the hostname, as well.  This is strange.
   * result.protocol has already been set by now.
   * Later on, put the first path part into the host field.
   */
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') { srcPath[0] = result.host; } else { srcPath.unshift(result.host); }
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') { relPath[0] = relative.host; } else { relPath.unshift(relative.host); }
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    /*
     * it's relative
     * throw away the existing file, and take the new path instead.
     */
    if (!srcPath) { srcPath = []; }
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (relative.search != null) {
    /*
     * just pull out the search.
     * like href='?foo'.
     * Put this after the other two cases because it simplifies the booleans
     */
    if (psychotic) {
      result.host = srcPath.shift();
      result.hostname = result.host;
      /*
       * occationaly the auth can get stuck only in host
       * this especially happens in cases like
       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
       */
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.hostname = authInHost.shift();
        result.host = result.hostname;
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    // to support http.request
    if (result.pathname !== null || result.search !== null) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    /*
     * no path at all.  easy.
     * we've already handled the other stuff above.
     */
    result.pathname = null;
    // to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  /*
   * if a url ENDs in . or .., then it must get a trailing slash.
   * however, if it ends in anything else non-slashy,
   * then it must NOT get a trailing slash.
   */
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  /*
   * strip single dots, resolve double dots to parent dir
   * if the path tries to go above the root, `up` ends up > 0
   */
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    result.host = result.hostname;
    /*
     * occationaly the auth can get stuck only in host
     * this especially happens in cases like
     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
     */
    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.hostname = authInHost.shift();
      result.host = result.hostname;
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (srcPath.length > 0) {
    result.pathname = srcPath.join('/');
  } else {
    result.pathname = null;
    result.path = null;
  }

  // to support request.http
  if (result.pathname !== null || result.search !== null) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) { this.hostname = host; }
};

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

},{"punycode":30,"qs":34}],"cordova-plugin-camera-handlers":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

module.exports = function (messages) {
    return  {
        Camera: {
            takePicture: function (success, fail, args) {
                messages.call('takePicture', args).then(function (result) {
                    if (args && args[1] === 0) {
                        /* Destination type is DATA_URL */
                        success(result);
                    } else {
                        // 'result' should be {data: <ArrayBuffer>, type: <mimeType>}, from which we'll create a blob
                        var blob = new Blob([result.data], { type: result.type });
                        success(URL.createObjectURL(blob));
                    }
                }, function (error) {
                    fail(error);
                });
            }
        }
    };
};

},{}],"cordova-plugin-device":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

module.exports = function(messages) {
    messages.register('cordova-version', function (callback) {
        if (window.cordova) {
            callback(null, window.cordova.version);
        } else {
            callback(null, 'You must have cordova.js included in your projects, to be able to get cordova version');
        }
    });
};

},{}],"cordova-plugin-dialogs":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

// https://github.com/apache/cordova-plugin-dialogs/

module.exports = function (messages) {
    messages.register('alert', function (event, callback) {
        var args = event;
        var title = args[1];
        var text = args[0];
        var buttonName = args[2];
        createDialog(title, text, [buttonName], false, null, callback);
    });

    messages.register('confirm', function (event, callback) {
        var args = event;
        var title = args[1];
        var text = args[0];
        var buttons = args[2];
        createDialog(title, text, buttons, false, null, callback);
    });

    messages.register('prompt', function (event, callback) {
        var args = event;
        var title = args[1];
        var text = args[0];
        var buttons = args[2];
        var defaultText = args[3];
        createDialog(title, text, buttons, true, defaultText, callback);
    });

    messages.register('beep', function (event, callback) {
        var times = event;
        for (var i = 0; i < times; i++) {
            // 1700ms below is the beep sound duration
            setTimeout(makeBeep, 1700 * i);
        }
        // call callback when beep(s) is done
        setTimeout(callback, 1700 * times);
    });

    function makeBeep() {
        var audio = document.createElement('audio');
        audio.src = 'data:audio/wav;base64,' +
            '/v/78+XUwKiQdl1GMR4QBgICBxEfMkdfeJGqwdXm8/v//ffr3MiymoFoTzkmFgoDAQQMGSo+VW2HoLfN4O75/v/68ePRvKSLcllCLRwOBQECCBMiNUtjfJWuxNjp9fz//fXp2cWuln1jSzYjEwgCAQUOGy1BWXGLpLvQ4vD6//757+DOuKCHblU+KhkMBAEDChUlOE9ngJmyyNvr9v3//PPn1sGqknhfSDIgEQcCAgYQHjBFXXaPqL/U5fL7//737N3KtJyDalE7JxcLAwEECxgoPFNrhZ62y97t+P7/+/Lk0r6mjXRbRC8dDwYBAggSITNJYXqTrMPX5/T8//326trHsJh/ZU03JBQJAwEFDRorQFdviaK5z+Hv+f7++fDhz7qiiXBXQCwaDQUBAwkUJDdNZX6XsMba6vb9//z06NfDrJR6YUk0IRIIAgEGDx0uQ1t0jaa90uTx+v/++O3ezLaehWxTPCgYDAQBAwsWJzpRaYKctMrd7Pf+//vy5dS/qI92XUYwHhAGAgIHER8yR194karB1ebz/P/99+vcyLKagWdPOSUVCgMBBAwZKj5VbYeguM3g7vn+//rx49G8pItyWUItHA4FAQIIEyI1S2N8la7F2On1/P/89enZxa6WfGNLNSITCAIBBQ4bLUJZcouku9Hi8Pr//vnu4M24oIduVT4qGQwEAQMKFSU5T2eAmrLI2+v3/f/88+bVwaqReF9HMiARBwICBhAeMEVddo+ov9Tl8vv//vfs3cq0nINpUTsnFwsDAQQLGCg8U2uFnrbM3u34/v/78eTSvaaNdFtELx0PBgECCBIhNElhepOsw9fo9Pz//fbq2sawmH5lTTckFAkDAQUNGitAV3CJorrP4e/5/v757+HPuqKJcFdAKxoNBQEDCRQkN01lfpiwxtrq9v3//PTo18Osk3phSTQhEggCAQYPHS9EW3SNpr3S5PH7//747d7Mtp6Fa1M8KBgLBAEDCxcnO1Fpg5y0yt3s9/7/+/Ll1L+oj3ZdRTAeEAYCAgcRIDJHX3iRqsHV5vP8//3369vIspqAZ085JRUKAwEEDBkqPlVuh6C4zeDu+f7/+vDi0buki3JZQi0bDgUBAggTIjVLY3yWrsXZ6fX8//z16djFrpV8Y0s1IhMIAgEFDhwtQllyi6S80ePx+v/++e7gzbigh21VPioZDAQBAwoWJTlPZ4Gassjc6/f9//zz5tXBqpF4X0cyHxEHAgIGEB4wRl12j6i/1OXy+//+9+zdyrScgmlROicWCwMBBAwYKDxTbIWetsze7fj+//rx5NK9po10W0MuHQ8GAQIIEiE0SWF6lKzD1+j0/P/99uraxrCXfmVNNyQUCQMBBQ0aLEBXcImius/h8Pn+/vnv4c+5oolvV0ArGg0FAQMJFCQ3TWV/mLDH2ur2/f/89OfXw6yTemFJMyESCAIBBg8dL0RbdI2mvtLk8vv//vjt3su2noRrUzwoGAsEAQMLFyc7UWqDnLTK3ez3/v/78uXUv6iPdl1FMB4QBgICBxEgMkhfeJKqwdbn8/z//fbr28iymYBnTzglFQoDAQQMGSo+VW6HoLjO4O/5/v/68OLQu6SLcVlBLRsOBQECCBMjNktjfZauxdnp9f3//PXp2MSulXxjSzUiEwgCAQUOHC1CWXKLpLzR4/H6//757uDNt6CGbVU+KhkMBAEDChYmOU9ogZqyyNzr9/3/+/Pm1cGqkXhfRzIfEQcCAgYQHjFGXXaQqMDU5fP7//737N3KtJuCaVE6JhYKAwEEDBgpPVNshZ62zN/u+P7/+vHk0r2mjXNbQy4dDwYBAggSITRKYnuUrMPX6PT8//326trGsJd+ZU03IxQJAwEFDRssQFdwiaK6z+Hw+f7++e/hz7miiW9WPysaDQUBAwkVJDdOZn+YsMfa6vb9//z059fCrJN6YUkzIRIHAgEGDx0vRFt0jqe+0+Ty+//++O3ey7WdhGtSPCgXCwQBAwsXJztRaoOctMrd7ff+//vy5dO/qI91XEUwHhAGAQIHESAySGB5kqvB1ufz/P/99uvbyLGZgGdPOCUVCgMBBA0ZKj9VboeguM7g7/n+//rw4tC7o4txWEEtGw4FAQIJEyM2TGR9lq/F2en1/f/89ejYxK2VfGNLNSITCAIBBQ4cLUJacoylvNHj8fr//vju3823n4ZtVD4pGQwEAQMKFiY5UGiBmrPJ3Ov3/f/78+bVwKmRd15HMR8RBwICBxAfMUZed5CpwNTl8/v//ffs3Mmzm4JpUDomFgoDAQQMGCk9VGyFn7bM3+74/v/68ePSvaWNc1pDLhwPBgECCBIhNEpie5Stw9fo9Pz//fbq2savl35lTDYjFAkCAQUNGyxAWHCKo7rP4vD6/v757+HOuaGIb1Y/KxoNBQEDCRUkOE5mf5ixx9rq9v3//PTn1sKrk3lgSTMgEgcCAQYPHS9EXHWOp77T5PL7//747d7LtZ2Ea1I8KBcLBAEDCxcnO1Jqg521yt3t+P7/+/Ll07+nj3VcRTAeEAYBAgcRIDJIYHmSq8LW5/T8//3269vIsZmAZ044JRUKAwEEDRkqP1ZuiKG4zuDv+f7++vDi0LujinFYQSwbDgUBAgkUIzZMZH2Wr8XZ6fX9//z16NjErZV7Yko1IhMIAgEFDhwuQlpzjKW80ePx+v/++O7fzbefhm1UPSkZDAQBAwoWJjlQaIGbs8nc7Pf9//vz5tXAqZF3XkcxHxEHAgIHEB8xRl53kKnA1Obz+//99+zcybObgmlQOiYWCgMBBAwYKT1UbIaft8zf7vj+//rx49K9pYxzWkMuHA8GAQIIEyI0SmJ7lK3E2Oj0/P/99enZxq+XfmRMNiMUCQIBBQ4bLEFYcYqjutDi8Pr+/vnv4c65oYhvVj8rGg0EAQMJFSQ4TmZ/mbHH2+v2/f/89OfWwquTeWBIMyASBwIBBg8dL0RcdY6nvtPk8vv//vjt3su1nYRrUjsoFwsEAQQLFyc7UmqEnbXL3u34/v/78uXTvqeOdVxFLx4QBgECBxIgM0hgeZKrwtbn9Pz//fbr28exmYBmTjglFQkDAQQNGis/Vm+IobnO4O/5/v768OLQu6OKcVhBLBsOBQECCRQjNkxkfZevxdnp9f3//PXo2MStlXtiSjQiEwgCAQUPHC5DWnOMpbzR4/H6//747t/Mt5+GbVQ9KRgMBAEDChYmOlBogpuzydzs9/3/+/Pm1cCpkHdeRjEfEQcCAgcRHzFGXneQqcDV5vP7//337NzJs5uCaFA6JhYKAwEEDBgpPVRthp+3zN/u+P7/+vHj0byljHNaQy4cDwUBAggTIjRKYnuVrcTY6PX8//316dnFr5d9ZEw2IxQJAgEFDhssQVhxiqO70OLw+v7++e/gzrmhiG9WPysaDQQBAwkVJThOZoCZscfb6/b9//z059bCq5J5YEgzIBIHAgEGEB4vRVx1jqe+0+Xy+//++O3ey7WdhGpSOycXCwQBBAsXKDtSa4Sdtcve7fj+//vy5NO+p451XEQvHQ8GAQIHEiAzSGB5k6vC1uf0/P/9';
        audio.play();
    } 

    function createDialog (title, message, buttons, addInput, defaultText, callback) {
        var dlgWrap = document.createElement('div');
        dlgWrap.style.position = 'absolute';
        dlgWrap.style.width = '100%';
        dlgWrap.style.height = '100%';
        dlgWrap.style.backgroundColor = 'rgba(0,0,0,0.25)';
        dlgWrap.style.zIndex = '100000';
        dlgWrap.style.top = '0';
        dlgWrap.style.left = '0';
        dlgWrap.style.margin = '0';
        dlgWrap.style.padding = '0';

        var dlg = document.createElement('div');
        dlg.style.height = 'auto';
        dlg.style.overflow = 'auto';
        dlg.style.backgroundColor = 'white';
        dlg.style.position = 'relative';
        dlg.style.lineHeight = '2';

        dlg.style.top = '50%'; // center vertically
        dlg.style.transform = 'translateY(-50%)';
        dlg.style.margin = '0px 30%';
        dlg.style.padding = '10px';
        dlg.style.boxShadow = '2px 2px 5px 1px rgba(0, 0, 0, 0.2)';
        dlg.style.borderRadius = '2px';

        var titleStyle = 'border-top-left-radius: 2px; border-top-right-radius: 2px; position: relative; background-color: #03a9f4; color: #fff; font-size: 16px; padding: 7px 10px; height: 24px; text-transform: none; font-family: \'Helvetica Neue\', \'Roboto\', \'Segoe UI\', \'sans-serif\'; line-height: 24px;';
        // needed to remove white line at the top of the title container
        if (addInput) {
            titleStyle += 'margin: -11px -10px -10px;';
        } else {
            titleStyle += 'margin: -10px;';
        }

        // dialog layout template
        var dlgHtml = '<section id="lbl-title" style="' + titleStyle + '"></section>' +
        '<section id="lbl-message" style="color: #3c8b9e; text-transform: none; font-size: 14px; margin: 20px 0 0 0; font-family: \'Helvetica Neue\', \'Roboto\', \'Segoe UI\', \'sans-serif\';"></section>';

        if (addInput) {
            dlgHtml += '<input id="prompt-input" style="width: 97.5%; border: 1px solid #d3d3d3; font-weight: normal; color: #555; padding: 1%;"/>';
        }
        dlg.innerHTML = dlgHtml;

        dlg.querySelector('#lbl-title').appendChild(document.createTextNode(title));
        dlg.querySelector('#lbl-message').appendChild(document.createTextNode(message));
        if (addInput) {
            dlg.querySelector('#prompt-input').setAttribute('placeholder', defaultText);
        }

        function makeButtonCallback(idx) {
            return function () {
                var value;
                if (addInput) {
                    value = dlg.querySelector('#prompt-input').value;
                }
                
                dlgWrap.parentNode.removeChild(dlgWrap);

                if (callback) {
                    if (addInput) {
                        callback(false, { input1: value, buttonIndex: idx });
                    } else {
                        callback(false, idx);
                    }
                }
            };
        }

        function addButton(idx, label) {
            var button = document.createElement('button');
            button.style.float = 'right';
            button.style.minWidth = '112px';
            button.style.display = 'inline-block';
            button.style.textAlign = 'center';
            button.style.zoom = '1';
            button.style.fontFamily = '\'Helvetica Neue\', \'Roboto\', \'Segoe UI\', \'sans-serif\'';
            button.style.overflow = 'visible';
            button.style.border = '1px solid #d3d3d3';
            button.style.background = '#e6e6e6';
            button.style.fontWeight = 'normal';
            button.style.color = '#555';
            button.style.margin = '10px 0 10px 10px';
            button.style.cursor = 'pointer';
            button.style.fontSize = '14px';
            button.style.minHeight = '30px';
            button.tabIndex = idx;
            button.onclick = makeButtonCallback(idx + 1);
            button.appendChild(document.createTextNode(label));
            dlg.appendChild(button);
        }

        // reverse order is used since we align buttons to the right
        for (var idx = buttons.length - 1; idx >= 0; idx--) {
            addButton(idx, buttons[idx]);
        }

        dlgWrap.appendChild(dlg);
        document.body.appendChild(dlgWrap);

        // make sure input field is under focus
        if (addInput) {
            setTimeout(function() {
                dlg.querySelector('#prompt-input').focus();
            });
        }

        return dlgWrap;
    }
};

},{}],"cordova-plugin-geolocation-clobbers":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based on Apache Cordova geolocation plugin's navigator.geolocation implementation.
// See https://github.com/apache/cordova-plugin-geolocation/blob/master/www/geolocation.js

var utils = require('utils'),
    PositionError = require('./PositionError'),
    Position = require('./Position');

var timers = {};   // list of timers in use

// Returns default params, overrides if provided with values
function parseParameters(options) {
    var opt = {
        maximumAge: 0,
        enableHighAccuracy: false,
        timeout: Infinity
    };

    if (options) {
        if (options.maximumAge !== undefined && !isNaN(options.maximumAge) && options.maximumAge > 0) {
            opt.maximumAge = options.maximumAge;
        }
        if (options.enableHighAccuracy !== undefined) {
            opt.enableHighAccuracy = options.enableHighAccuracy;
        }
        if (options.timeout !== undefined && !isNaN(options.timeout)) {
            if (options.timeout < 0) {
                opt.timeout = 0;
            } else {
                opt.timeout = options.timeout;
            }
        }
    }

    return opt;
}

// Returns a timeout failure, closed over a specified timeout value and error callback.
function createTimeout(errorCallback, timeout) {
    var t = setTimeout(function () {
        clearTimeout(t);
        t = null;
        errorCallback({
            code: PositionError.TIMEOUT,
            message: 'Position retrieval timed out.'
        });
    }, timeout);
    return t;
}

module.exports = function (messages, exec) {
    var geolocation = {
        lastPosition: null, // reference to last known (cached) position returned

        /**
         * Asynchronously acquires the current position.
         *
         * @param {Function} successCallback    The function to call when the position data is available
         * @param {Function} errorCallback      The function to call when there is an error getting the heading position. (OPTIONAL)
         * @param {PositionOptions} options     The options for getting the position data. (OPTIONAL)
         */
        getCurrentPosition: function (successCallback, errorCallback, options) {
            options = parseParameters(options);

            // Timer var that will fire an error callback if no position is retrieved from native
            // before the "timeout" param provided expires
            var timeoutTimer = {timer: null};

            var win = function (p) {
                clearTimeout(timeoutTimer.timer);
                if (!(timeoutTimer.timer)) {
                    // Timeout already happened, or native fired error callback for
                    // this geo request.
                    // Don't continue with success callback.
                    return;
                }
                var pos = new Position(
                    {
                        latitude: p.latitude,
                        longitude: p.longitude,
                        altitude: p.altitude,
                        accuracy: p.accuracy,
                        heading: p.heading,
                        velocity: p.velocity,
                        altitudeAccuracy: p.altitudeAccuracy
                    },
                    (p.timestamp === undefined ? new Date() : ((p.timestamp instanceof Date) ? p.timestamp : new Date(p.timestamp)))
                );
                geolocation.lastPosition = pos;
                successCallback(pos);
            };
            var fail = function (e) {
                clearTimeout(timeoutTimer.timer);
                timeoutTimer.timer = null;
                var err = new PositionError(e.code, e.message);
                if (errorCallback) {
                    errorCallback(err);
                }
            };

            // Check our cached position, if its timestamp difference with current time is less than the maximumAge, then just
            // fire the success callback with the cached position.
            if (geolocation.lastPosition && options.maximumAge && (((new Date()).getTime() - geolocation.lastPosition.timestamp.getTime()) <= options.maximumAge)) {
                successCallback(geolocation.lastPosition);
                // If the cached position check failed and the timeout was set to 0, error out with a TIMEOUT error object.
            } else if (options.timeout === 0) {
                fail({
                    code: PositionError.TIMEOUT,
                    message: 'timeout value in PositionOptions set to 0 and no cached Position object available, or cached Position object\'s age exceeds provided PositionOptions.maximumAge parameter.'
                });
                // Otherwise we have to call into native to retrieve a position.
            } else {
                if (options.timeout !== Infinity) {
                    // If the timeout value was not set to Infinity (default), then
                    // set up a timeout function that will fire the error callback
                    // if no successful position was retrieved before timeout expired.
                    timeoutTimer.timer = createTimeout(fail, options.timeout);
                } else {
                    // This is here so the check in the win function doesn't mess stuff up
                    // may seem weird but this guarantees timeoutTimer is
                    // always truthy before we call into native
                    timeoutTimer.timer = true;
                }
                exec(win, fail, 'Geolocation', 'getLocation', [options.enableHighAccuracy, options.maximumAge]);
            }
            return timeoutTimer;
        },
        /**
         * Asynchronously watches the geolocation for changes to geolocation.  When a change occurs,
         * the successCallback is called with the new location.
         *
         * @param {Function} successCallback    The function to call each time the location data is available
         * @param {Function} errorCallback      The function to call when there is an error getting the location data. (OPTIONAL)
         * @param {PositionOptions} options     The options for getting the location data such as frequency. (OPTIONAL)
         * @return String                       The watch id that must be passed to #clearWatch to stop watching.
         */
        watchPosition: function (successCallback, errorCallback, options) {
            options = parseParameters(options);

            var id = utils.createUUID();

            // Tell device to get a position ASAP, and also retrieve a reference to the timeout timer generated in getCurrentPosition
            timers[id] = geolocation.getCurrentPosition(successCallback, errorCallback, options);

            var fail = function (e) {
                clearTimeout(timers[id].timer);
                var err = new PositionError(e.code, e.message);
                if (errorCallback) {
                    errorCallback(err);
                }
            };

            var win = function (p) {
                clearTimeout(timers[id].timer);
                if (options.timeout !== Infinity) {
                    timers[id].timer = createTimeout(fail, options.timeout);
                }
                var pos = new Position(
                    {
                        latitude: p.latitude,
                        longitude: p.longitude,
                        altitude: p.altitude,
                        accuracy: p.accuracy,
                        heading: p.heading,
                        velocity: p.velocity,
                        altitudeAccuracy: p.altitudeAccuracy
                    },
                    (p.timestamp === undefined ? new Date() : ((p.timestamp instanceof Date) ? p.timestamp : new Date(p.timestamp)))
                );
                geolocation.lastPosition = pos;
                successCallback(pos);
            };

            exec(win, fail, 'Geolocation', 'addWatch', [id, options.enableHighAccuracy]);

            return id;
        },
        /**
         * Clears the specified heading watch.
         *
         * @param {String} id       The ID of the watch returned from #watchPosition
         */
        clearWatch: function (id) {
            if (id && timers[id] !== undefined) {
                clearTimeout(timers[id].timer);
                timers[id].timer = false;
                exec(null, null, 'Geolocation', 'clearWatch', [id]);
            }
        },

        getPermission: function (success, fail, args) {
            success();
        }
    };

    return {
        navigator: {
            geolocation: geolocation
        }
    };
};

},{"./Position":8,"./PositionError":9,"utils":"utils"}],"cordova-plugin-inappbrowser-handlers":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

module.exports = function (messages) {
    var Browser = require('./inapp-browser'),
        instance;

    messages.call('inAppBrowserSelected')
        .then(function (value) {
            Browser.setDefaultInAppBrowser(value);
        });

    messages.on('inappbrowser-selected', function (event, value) {
        Browser.setDefaultInAppBrowser(value);
    });

    function execute(fnName) {
        if (!instance) {
            return;
        }

        var fn = instance[fnName],
            args;

        if (Object.keys(arguments).length > 1) {
            // remove the first element since it is the "fnName" parameter
            Array.prototype.shift.apply(arguments);
            args = arguments;
        }

        return fn.apply(instance, args);
    }

    return {
        'InAppBrowser': {
            'open': function (success, fail, args) {
                instance = Browser.create(success, fail, args);
            },
            'show': function () {
                execute('show');
            },
            'close': function () {
                execute('close');
                instance = null;
            },
            'injectScriptCode': function (success, fail, args) {
                execute('injectScriptCode', success, args);
            },
            'injectScriptFile': function (success, fail, args) {
                execute('injectScriptFile', success, args);
            },
            'injectStyleCode': function (success, fail, args) {
                execute('injectStyleCode', success, args);
            },
            'injectStyleFile': function (success, fail, args) {
                execute('injectStyleFile', success, args);
            }
        }
    };
};

},{"./inapp-browser":10}],"db":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

var utils = require('utils'),
    constants = require('sim-constants'),
    event = require('event'),
    DB_NAME = 'ripple',
    cache,
    self,
    opendb;

// TODO: This could use some refactoring..

function saveToStorage() {
    localStorage[DB_NAME] = JSON.stringify(cache);
}

function validateAndSetPrefix(prefix) {
    if (prefix) {
        utils.validateArgumentType(prefix, 'string');
    }

    return prefix || constants.COMMON.PREFIX;
}

function createKey(key, prefix) {
    return validateAndSetPrefix(prefix) + key;
}

function createItem(key, value, prefix) {
    return {
        id: createKey(key, prefix),
        key: key,
        value: value,
        prefix: validateAndSetPrefix(prefix)
    };
}

function save(key, value, prefix, callback) {
    var item = createItem(key, value, prefix);
    cache[item.id] = item;

    if (!window.openDatabase) {
        saveToStorage();
        if (callback) { callback(); }
    } else {
        opendb.transaction(function (tx) {
            tx.executeSql('REPLACE INTO persistence (id, key, value, prefix) VALUES (?, ?, ?, ?)', [item.id, item.key, item.value, item.prefix], function () {
                return callback && callback();
            });
        });
    }
}

function retrieve(key, prefix) {
    var item = cache[createKey(key, prefix)];
    return item ? item.value : undefined;
}

function retrieveAll(prefix, callback) {
    var result = {};

    if (prefix) {
        utils.forEach(cache, function (value) {
            if (value.prefix === prefix) {
                result[value.key] = value.value;
            }
        });
    }

    if (callback) { callback(result); }
}

function remove(key, prefix, callback) {
    var id = createKey(key, prefix);

    delete cache[id];

    if (!window.openDatabase) {
        saveToStorage();
        if (callback) { callback(); }
    } else {
        opendb.transaction(function (tx) {
            tx.executeSql('DELETE FROM persistence WHERE key = ? AND prefix = ?', [key, validateAndSetPrefix(prefix)], function () {
                return callback && callback();
            });
        });
    }
}

function removeAll(callback) {
    cache = {};

    if (!window.openDatabase) {
        delete localStorage[DB_NAME];
        saveToStorage();
    } else {
        opendb.transaction(function (tx) {
            tx.executeSql('DELETE FROM persistence', [], function () {
                return callback && callback();
            });
        });
    }
}

self = {
    save: function (key, value, prefix, callback) {
        save(key, value, prefix, callback);
        event.trigger('StorageUpdatedEvent');
    },

    saveObject: function (key, obj, prefix, callback) {
        save(key, JSON.stringify(obj), prefix, callback);
        event.trigger('StorageUpdatedEvent');
    },

    retrieve: function (key, prefix) {
        return retrieve(key, prefix);
    },

    retrieveObject: function (key, prefix) {
        var retrievedValue = retrieve(key, prefix);
        return retrievedValue ? JSON.parse(retrievedValue) : retrievedValue;
    },

    retrieveAll: function (prefix, callback) {
        return retrieveAll(prefix, callback);
    },

    remove: function (key, prefix, callback) {
        event.trigger('StorageUpdatedEvent');
        remove(key, prefix, callback);
    },

    removeAll: function (callback) {
        removeAll(callback);
        event.trigger('StorageUpdatedEvent');
    },

    initialize: function () {
        return new Promise((resolve) => {
            if (!window.openDatabase) {
                var store = localStorage[DB_NAME];
                cache = store ? JSON.parse(store) : {};
                saveToStorage();
                resolve();
            } else {
                cache = {};
                opendb = openDatabase('tinyHippos', '1.0', 'tiny Hippos persistence', 2 * 1024 * 1024);
                opendb.transaction(function (tx) {
                    tx.executeSql('CREATE TABLE IF NOT EXISTS persistence (id unique, key, value, prefix)');
    
                    tx.executeSql('SELECT id, key, value, prefix FROM persistence', [], function (tx, results) {
                        var len = results.rows.length, i, item;
    
                        for (i = 0; i < len; i++) {
                            item = results.rows.item(i);
                            cache[item.id] = item;
                        }
    
                        resolve();
                    });
                });
            }
        });
    }
};

module.exports = self;

},{"event":"event","sim-constants":"sim-constants","utils":"utils"}],"events":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

module.exports = function(messages) {
    messages.register('event', function (event, callback) {
        if (!window.cordova) {
            callback(null, 'You must have cordova.js included in your projects, to be able to trigger events');
        } else {
            try {
                window.cordova.fireDocumentEvent(event);
                callback(null, event);
            } catch (e) {
                callback(e);
            }
        }
    });
};

},{}],"event":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

var utils = require('utils'),
    exception = require('exception'),
    _listeners = {};

function _on(eventType, listener, scope, once) {
    if (!eventType) {
        throw 'eventType must be truthy';
    }
    _listeners[eventType] = _listeners[eventType] || [];
    _listeners[eventType].push({
        func: listener,
        scope: scope,
        once: !!once
    });
}

function _trigger(listener, args, sync) {
    try {
        if (sync) {
            listener.func.apply(listener.scope, args);
        }
        else {
            setTimeout(function () {
                listener.func.apply(listener.scope, args);
            }, 1);
        }
    }
    catch (e) {
        exception.handle(e);
    }
}

module.exports = {
    on: function (eventType, listener, scope) {
        _on(eventType, listener, scope, false);
    },

    once: function (eventType, listener, scope) {
        _on(eventType, listener, scope, true);
    },

    trigger: function (eventType, args, sync) {
        args = args || [];
        sync = sync || false;

        var listeners = _listeners[eventType];

        if (listeners) {
            listeners.forEach(function (listener) {
                _trigger(listener, args, sync);
            });

            _listeners[eventType] = listeners.filter(function (listener) {
                return !listener.once;
            });
        }
    },

    eventHasSubscriber: function (eventType) {
        return !!_listeners[eventType];
    },

    getEventSubscribers: function (eventType) {
        return utils.copy(_listeners[eventType]) || [];
    },

    clear: function (eventType) {
        if (eventType) {
            delete _listeners[eventType];
        }
    }
};

},{"exception":"exception","utils":"utils"}],"exception":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

function _getStack(depth) {
    var caller,
        stack = '',
        count = 0;

    try {
        /*jshint noarg:false*/ // THIS SHOULD NOT be a common occurrence..
        caller = arguments.callee.caller.arguments.callee.caller;

        while (count <= depth && caller) {
            stack += 'function: ' + caller.toString().match(/function\s?(.*)\{/)[1] + '\n';
            caller = caller.arguments.callee.caller;
            count++;
        }
    } catch (e) {
        stack = 'failed to determine stack trace (' + (e.name || e.type) + ' :: ' + e.message + ')';
    }

    return stack;
}

module.exports = {

    types: {
        Application: 'Application',
        ArgumentLength: 'ArgumentLength',
        ArgumentType: 'ArgumentType',
        Argument: 'Argument',
        NotificationType: 'NotificationType',
        NotificationStateType: 'NotificationStateType',
        DomObjectNotFound: 'DomObjectNotFound',
        LayoutType: 'LayoutType',
        DeviceNotFound: 'DeviceNotFound',
        tinyHipposMaskedException: 'tinyHipposMaskedException',
        Geo: 'Geo',
        Accelerometer: 'Accelerometer',
        MethodNotImplemented: 'MethodNotImplemented',
        InvalidState: 'InvalidState',
        ApplicationState: 'ApplicationState'
    },

    handle: function handle(exception, reThrow) {
        reThrow = reThrow || false;

        var eMsg = exception.message || 'exception caught!',
            msg = eMsg + '\n\n' + (exception.stack || '*no stack provided*') + '\n\n';

        console.error(msg);

        if (reThrow) {
            throw exception;
        }
    },

    raise: function raise(exceptionType, message, customExceptionObject) {
        var obj = customExceptionObject || {
            type: '',
            message: '',

            toString: function () {
                var result = this.name + ': \'' + this.message + '\'';

                if (this.stack) {
                    result += '\n' + this.stack;
                }
                return result;
            }
        };

        message = message || '';

        obj.name = exceptionType;
        obj.type = exceptionType;
        // TODO: include the exception objects original message if exists
        obj.message = message;
        obj.stack = _getStack(5);

        throw obj;
    }
};

},{}],"jquery.min":[function(require,module,exports){
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});

},{}],"messages":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

// Plugin communications layer. Two types of communication are supported:
// 1. Messages - when emitted, any local handlers are notified, and it is also sent across to web sockets connection
//    where any remote handlers are notified. There can be any number of local and/or remote handlers. There is no
//    opportunity to respond.
// 2. Methods - calls across the web socket connection where there can be a single handler that can return a single
//    value or error value.

function Messages(pluginId, socket) {
    this.pluginId = pluginId;
    this.socket = socket;
    this.messages = {};
    this.methods = {};

    var that = this;
    socket.on('plugin-message', function (data) {
        if (data.pluginId === pluginId) {
            notify.call(that, that.messages, data.message, data.data);
        }
    });
    socket.on('plugin-method', function (data, callback) {
        if (data.pluginId === pluginId) {
            var handler = that.methods && that.methods[data.method];
            if (handler) {
                var args = data.args;
                args.push(callback);
                handler.apply(this, args);
            }
        }
    });
}

Messages._globalMessages = {};

function notify(messagesObj, message, data) {
    // Notifies local listeners of a message
    var handlers = messagesObj && messagesObj[message];
    if (handlers) {
        handlers.forEach(function (handler) {
            handler.call(this, message, data);
        });
    }
}

Messages.prototype = {
    // Call and register for methods

    /**
     * @desc Calls the specified method, with any number of parameters. Return a promise.
     * @param method
     */
    call: function (method) {
        return new Promise((resolve, reject) => {
            this.socket.emit('plugin-method', {
                pluginId: this.pluginId,
                method: method,
                args: Array.prototype.slice.call(arguments, 1)
            }, function (err, result) {
                if (err) {
                    reject(err);
                } else {
                    resolve(result);
                }
            });
        });
    },

    register: function(method, handler) {
        // Can only ever have one handler for a method. Cancel by calling with handler null or undefined.
        this.methods[method] = handler;
        return this;
    },

    // Emit and handle messages
    emit: function (message, data, isGlobal) {
        // Pass the message across the socket
        var eventName,
            messagesObj;

        if (isGlobal) {
            eventName = 'global-plugin-message';
            messagesObj = Messages._globalMessages;
        } else {
            eventName = 'plugin-message';
            messagesObj = this.messages;
        }

        this.socket.emit(eventName, {
            pluginId: this.pluginId,
            message: message,
            data: data
        });

        // Notify any local listeners
        notify.call(this, messagesObj, message, data);
    },
    
    // Emit messages destined to external debug-hosts
    emitDebug: function(message, data) {
        this.socket.emit('debug-message', {
            pluginId: this.pluginId,
            message: message,
            data: data
        });
    },

    refreshAppHost: function (device) {
        this.socket.emit('refresh-app-host', device);
    },

    on: function (message, handler, isGlobal) {
        var messagesObj = (!isGlobal) ? this.messages : Messages._globalMessages;

        if (!messagesObj[message]) {
            messagesObj[message] = [handler];
        } else {
            messagesObj[message].push(handler);
        }
        return this;
    },

    off: function (message, handler) {
        var handlers = this.messages[message];
        if (!handlers) {
            // try on the global messages handlers
            handlers = Messages._globalMessages[message];
            if (!handlers) {
                return this;
            }
        }

        var pos = handlers.indexOf(handler);
        while (pos > -1) {
            handlers.splice(pos, 1);
            pos = handlers.indexOf(handler);
        }
    }
};

module.exports = Messages;

},{}],"polyfills":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

if (typeof Object.assign != 'function') {
    (function () {
        Object.assign = function (target) {
            'use strict';
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var source = arguments[index];
                if (source !== undefined && source !== null) {
                    for (var nextKey in source) {
                        if (Object.prototype.hasOwnProperty.call(source, nextKey)) {
                            output[nextKey] = source[nextKey];
                        }
                    }
                }
            }
            return output;
        };
    })();
}

},{}],"sim-constants":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

module.exports = {
    'COMMON': {
        'PREFIX': 'tinyhippos-',
    },

    'GEO': {
        'OPTIONS': {
            'LATITUDE': 'geo-latitude',
            'LONGITUDE': 'geo-longitude',
            'ALTITUDE': 'geo-altitude',
            'CELL_ID': 'geo-cellid',
            'ACCURACY': 'geo-accuracy',
            'ALTITUDE_ACCURACY': 'geo-altitude-accuracy',
            'HEADING': 'geo-heading',
            'SPEED': 'geo-speed',
            'TIME_STAMP': 'geo-timestamp',
            'DELAY': 'geo-delay',
            'DELAY_LABEL': 'geo-delay-label',
            'HEADING_LABEL': 'geo-heading-label',
            'HEADING_MAP_LABEL': 'geo-map-direction-label',
            'IMAGE': 'geo-map-img',
            'MAP_MARKER': 'geo-map-marker',
            'MAP_CONTAINER': 'geo-map-container',
            'TIMEOUT': 'geo-timeout',
            'GPXFILE': 'geo-gpxfile',
            'GPXGO': 'geo-gpx-go',
            'GPXMULTIPLIER': 'geo-gpxmultiplier-select',
            'GPXREPLAYSTATUS': 'geo-gpxreplaystatus'
        },
        'MAP_ZOOM_MAX': 18,
        'MAP_ZOOM_MIN': 0,
        'MAP_ZOOM_LEVEL_CONTAINER': 'geo-map-zoomlevel-value',
        'MAP_ZOOM_KEY': 'geo-map-zoom-key',
        'GPXGO_LABELS': {
            'GO': 'Go',
            'STOP': 'Stop'
        }
    },

    'BATTERY_STATUS': {
        'BATTERY_STATUS_KEY': 'battery-status-key',
        'IS_PLUGGED_KEY': 'is-plugged-key',
        'LEVEL_LABEL': 'battery-level-label',
        'LEVEL_VALUE': 'battery-level',
        'IS_PLUGGED_CHECKBOX': 'is-plugged'
    },
};

},{}],"socket.io":[function(require,module,exports){
(function (global){(function (){
/* @version 1.4.5 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.io=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(_dereq_,module,exports){module.exports=_dereq_("./lib/")},{"./lib/":2}],2:[function(_dereq_,module,exports){module.exports=_dereq_("./socket");module.exports.parser=_dereq_("engine.io-parser")},{"./socket":3,"engine.io-parser":19}],3:[function(_dereq_,module,exports){(function(global){var transports=_dereq_("./transports");var Emitter=_dereq_("component-emitter");var debug=_dereq_("debug")("engine.io-client:socket");var index=_dereq_("indexof");var parser=_dereq_("engine.io-parser");var parseuri=_dereq_("parseuri");var parsejson=_dereq_("parsejson");var parseqs=_dereq_("parseqs");module.exports=Socket;function noop(){}function Socket(uri,opts){if(!(this instanceof Socket))return new Socket(uri,opts);opts=opts||{};if(uri&&"object"==typeof uri){opts=uri;uri=null}if(uri){uri=parseuri(uri);opts.hostname=uri.host;opts.secure=uri.protocol=="https"||uri.protocol=="wss";opts.port=uri.port;if(uri.query)opts.query=uri.query}else if(opts.host){opts.hostname=parseuri(opts.host).host}this.secure=null!=opts.secure?opts.secure:global.location&&"https:"==location.protocol;if(opts.hostname&&!opts.port){opts.port=this.secure?"443":"80"}this.agent=opts.agent||false;this.hostname=opts.hostname||(global.location?location.hostname:"localhost");this.port=opts.port||(global.location&&location.port?location.port:this.secure?443:80);this.query=opts.query||{};if("string"==typeof this.query)this.query=parseqs.decode(this.query);this.upgrade=false!==opts.upgrade;this.path=(opts.path||"/engine.io").replace(/\/$/,"")+"/";this.forceJSONP=!!opts.forceJSONP;this.jsonp=false!==opts.jsonp;this.forceBase64=!!opts.forceBase64;this.enablesXDR=!!opts.enablesXDR;this.timestampParam=opts.timestampParam||"t";this.timestampRequests=opts.timestampRequests;this.transports=opts.transports||["polling","websocket"];this.readyState="";this.writeBuffer=[];this.policyPort=opts.policyPort||843;this.rememberUpgrade=opts.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=opts.onlyBinaryUpgrades;this.perMessageDeflate=false!==opts.perMessageDeflate?opts.perMessageDeflate||{}:false;if(true===this.perMessageDeflate)this.perMessageDeflate={};if(this.perMessageDeflate&&null==this.perMessageDeflate.threshold){this.perMessageDeflate.threshold=1024}this.pfx=opts.pfx||null;this.key=opts.key||null;this.passphrase=opts.passphrase||null;this.cert=opts.cert||null;this.ca=opts.ca||null;this.ciphers=opts.ciphers||null;this.rejectUnauthorized=opts.rejectUnauthorized===undefined?null:opts.rejectUnauthorized;var freeGlobal=typeof global=="object"&&global;if(freeGlobal.global===freeGlobal){if(opts.extraHeaders&&Object.keys(opts.extraHeaders).length>0){this.extraHeaders=opts.extraHeaders}}this.open()}Socket.priorWebsocketSuccess=false;Emitter(Socket.prototype);Socket.protocol=parser.protocol;Socket.Socket=Socket;Socket.Transport=_dereq_("./transport");Socket.transports=_dereq_("./transports");Socket.parser=_dereq_("engine.io-parser");Socket.prototype.createTransport=function(name){debug('creating transport "%s"',name);var query=clone(this.query);query.EIO=parser.protocol;query.transport=name;if(this.id)query.sid=this.id;var transport=new transports[name]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:query,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders});return transport};function clone(obj){var o={};for(var i in obj){if(obj.hasOwnProperty(i)){o[i]=obj[i]}}return o}Socket.prototype.open=function(){var transport;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf("websocket")!=-1){transport="websocket"}else if(0===this.transports.length){var self=this;setTimeout(function(){self.emit("error","No transports available")},0);return}else{transport=this.transports[0]}this.readyState="opening";try{transport=this.createTransport(transport)}catch(e){this.transports.shift();this.open();return}transport.open();this.setTransport(transport)};Socket.prototype.setTransport=function(transport){debug("setting transport %s",transport.name);var self=this;if(this.transport){debug("clearing existing transport %s",this.transport.name);this.transport.removeAllListeners()}this.transport=transport;transport.on("drain",function(){self.onDrain()}).on("packet",function(packet){self.onPacket(packet)}).on("error",function(e){self.onError(e)}).on("close",function(){self.onClose("transport close")})};Socket.prototype.probe=function(name){debug('probing transport "%s"',name);var transport=this.createTransport(name,{probe:1}),failed=false,self=this;Socket.priorWebsocketSuccess=false;function onTransportOpen(){if(self.onlyBinaryUpgrades){var upgradeLosesBinary=!this.supportsBinary&&self.transport.supportsBinary;failed=failed||upgradeLosesBinary}if(failed)return;debug('probe transport "%s" opened',name);transport.send([{type:"ping",data:"probe"}]);transport.once("packet",function(msg){if(failed)return;if("pong"==msg.type&&"probe"==msg.data){debug('probe transport "%s" pong',name);self.upgrading=true;self.emit("upgrading",transport);if(!transport)return;Socket.priorWebsocketSuccess="websocket"==transport.name;debug('pausing current transport "%s"',self.transport.name);self.transport.pause(function(){if(failed)return;if("closed"==self.readyState)return;debug("changing transport and sending upgrade packet");cleanup();self.setTransport(transport);transport.send([{type:"upgrade"}]);self.emit("upgrade",transport);transport=null;self.upgrading=false;self.flush()})}else{debug('probe transport "%s" failed',name);var err=new Error("probe error");err.transport=transport.name;self.emit("upgradeError",err)}})}function freezeTransport(){if(failed)return;failed=true;cleanup();transport.close();transport=null}function onerror(err){var error=new Error("probe error: "+err);error.transport=transport.name;freezeTransport();debug('probe transport "%s" failed because of error: %s',name,err);self.emit("upgradeError",error)}function onTransportClose(){onerror("transport closed")}function onclose(){onerror("socket closed")}function onupgrade(to){if(transport&&to.name!=transport.name){debug('"%s" works - aborting "%s"',to.name,transport.name);freezeTransport()}}function cleanup(){transport.removeListener("open",onTransportOpen);transport.removeListener("error",onerror);transport.removeListener("close",onTransportClose);self.removeListener("close",onclose);self.removeListener("upgrading",onupgrade)}transport.once("open",onTransportOpen);transport.once("error",onerror);transport.once("close",onTransportClose);this.once("close",onclose);this.once("upgrading",onupgrade);transport.open()};Socket.prototype.onOpen=function(){debug("socket open");this.readyState="open";Socket.priorWebsocketSuccess="websocket"==this.transport.name;this.emit("open");this.flush();if("open"==this.readyState&&this.upgrade&&this.transport.pause){debug("starting upgrade probes");for(var i=0,l=this.upgrades.length;i<l;i++){this.probe(this.upgrades[i])}}};Socket.prototype.onPacket=function(packet){if("opening"==this.readyState||"open"==this.readyState){debug('socket receive: type "%s", data "%s"',packet.type,packet.data);this.emit("packet",packet);this.emit("heartbeat");switch(packet.type){case"open":this.onHandshake(parsejson(packet.data));break;case"pong":this.setPing();this.emit("pong");break;case"error":var err=new Error("server error");err.code=packet.data;this.onError(err);break;case"message":this.emit("data",packet.data);this.emit("message",packet.data);break}}else{debug('packet received with socket readyState "%s"',this.readyState)}};Socket.prototype.onHandshake=function(data){this.emit("handshake",data);this.id=data.sid;this.transport.query.sid=data.sid;this.upgrades=this.filterUpgrades(data.upgrades);this.pingInterval=data.pingInterval;this.pingTimeout=data.pingTimeout;this.onOpen();if("closed"==this.readyState)return;this.setPing();this.removeListener("heartbeat",this.onHeartbeat);this.on("heartbeat",this.onHeartbeat)};Socket.prototype.onHeartbeat=function(timeout){clearTimeout(this.pingTimeoutTimer);var self=this;self.pingTimeoutTimer=setTimeout(function(){if("closed"==self.readyState)return;self.onClose("ping timeout")},timeout||self.pingInterval+self.pingTimeout)};Socket.prototype.setPing=function(){var self=this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer=setTimeout(function(){debug("writing ping packet - expecting pong within %sms",self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout)},self.pingInterval)};Socket.prototype.ping=function(){var self=this;this.sendPacket("ping",function(){self.emit("ping")})};Socket.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen);this.prevBufferLen=0;if(0===this.writeBuffer.length){this.emit("drain")}else{this.flush()}};Socket.prototype.flush=function(){if("closed"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){debug("flushing %d packets in socket",this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen=this.writeBuffer.length;this.emit("flush")}};Socket.prototype.write=Socket.prototype.send=function(msg,options,fn){this.sendPacket("message",msg,options,fn);return this};Socket.prototype.sendPacket=function(type,data,options,fn){if("function"==typeof data){fn=data;data=undefined}if("function"==typeof options){fn=options;options=null}if("closing"==this.readyState||"closed"==this.readyState){return}options=options||{};options.compress=false!==options.compress;var packet={type:type,data:data,options:options};this.emit("packetCreate",packet);this.writeBuffer.push(packet);if(fn)this.once("flush",fn);this.flush()};Socket.prototype.close=function(){if("opening"==this.readyState||"open"==this.readyState){this.readyState="closing";var self=this;if(this.writeBuffer.length){this.once("drain",function(){if(this.upgrading){waitForUpgrade()}else{close()}})}else if(this.upgrading){waitForUpgrade()}else{close()}}function close(){self.onClose("forced close");debug("socket closing - telling transport to close");self.transport.close()}function cleanupAndClose(){self.removeListener("upgrade",cleanupAndClose);self.removeListener("upgradeError",cleanupAndClose);close()}function waitForUpgrade(){self.once("upgrade",cleanupAndClose);self.once("upgradeError",cleanupAndClose)}return this};Socket.prototype.onError=function(err){debug("socket error %j",err);Socket.priorWebsocketSuccess=false;this.emit("error",err);this.onClose("transport error",err)};Socket.prototype.onClose=function(reason,desc){if("opening"==this.readyState||"open"==this.readyState||"closing"==this.readyState){debug('socket close with reason: "%s"',reason);var self=this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners("close");this.transport.close();this.transport.removeAllListeners();this.readyState="closed";this.id=null;this.emit("close",reason,desc);self.writeBuffer=[];self.prevBufferLen=0}};Socket.prototype.filterUpgrades=function(upgrades){var filteredUpgrades=[];for(var i=0,j=upgrades.length;i<j;i++){if(~index(this.transports,upgrades[i]))filteredUpgrades.push(upgrades[i])}return filteredUpgrades}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"./transport":4,"./transports":5,"component-emitter":15,debug:17,"engine.io-parser":19,indexof:23,parsejson:26,parseqs:27,parseuri:28}],4:[function(_dereq_,module,exports){var parser=_dereq_("engine.io-parser");var Emitter=_dereq_("component-emitter");module.exports=Transport;function Transport(opts){this.path=opts.path;this.hostname=opts.hostname;this.port=opts.port;this.secure=opts.secure;this.query=opts.query;this.timestampParam=opts.timestampParam;this.timestampRequests=opts.timestampRequests;this.readyState="";this.agent=opts.agent||false;this.socket=opts.socket;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders}Emitter(Transport.prototype);Transport.prototype.onError=function(msg,desc){var err=new Error(msg);err.type="TransportError";err.description=desc;this.emit("error",err);return this};Transport.prototype.open=function(){if("closed"==this.readyState||""==this.readyState){this.readyState="opening";this.doOpen()}return this};Transport.prototype.close=function(){if("opening"==this.readyState||"open"==this.readyState){this.doClose();this.onClose()}return this};Transport.prototype.send=function(packets){if("open"==this.readyState){this.write(packets)}else{throw new Error("Transport not open")}};Transport.prototype.onOpen=function(){this.readyState="open";this.writable=true;this.emit("open")};Transport.prototype.onData=function(data){var packet=parser.decodePacket(data,this.socket.binaryType);this.onPacket(packet)};Transport.prototype.onPacket=function(packet){this.emit("packet",packet)};Transport.prototype.onClose=function(){this.readyState="closed";this.emit("close")}},{"component-emitter":15,"engine.io-parser":19}],5:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_("xmlhttprequest-ssl");var XHR=_dereq_("./polling-xhr");var JSONP=_dereq_("./polling-jsonp");var websocket=_dereq_("./websocket");exports.polling=polling;exports.websocket=websocket;function polling(opts){var xhr;var xd=false;var xs=false;var jsonp=false!==opts.jsonp;if(global.location){var isSSL="https:"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}xd=opts.hostname!=location.hostname||port!=opts.port;xs=opts.secure!=isSSL}opts.xdomain=xd;opts.xscheme=xs;xhr=new XMLHttpRequest(opts);if("open"in xhr&&!opts.forceJSONP){return new XHR(opts)}else{if(!jsonp)throw new Error("JSONP disabled");return new JSONP(opts)}}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"./polling-jsonp":6,"./polling-xhr":7,"./websocket":9,"xmlhttprequest-ssl":10}],6:[function(_dereq_,module,exports){(function(global){var Polling=_dereq_("./polling");var inherit=_dereq_("component-inherit");module.exports=JSONPPolling;var rNewline=/\n/g;var rEscapedNewline=/\\n/g;var callbacks;var index=0;function empty(){}function JSONPPolling(opts){Polling.call(this,opts);this.query=this.query||{};if(!callbacks){if(!global.___eio)global.___eio=[];callbacks=global.___eio}this.index=callbacks.length;var self=this;callbacks.push(function(msg){self.onData(msg)});this.query.j=this.index;if(global.document&&global.addEventListener){global.addEventListener("beforeunload",function(){if(self.script)self.script.onerror=empty},false)}}inherit(JSONPPolling,Polling);JSONPPolling.prototype.supportsBinary=false;JSONPPolling.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null}Polling.prototype.doClose.call(this)};JSONPPolling.prototype.doPoll=function(){var self=this;var script=document.createElement("script");if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}script.async=true;script.src=this.uri();script.onerror=function(e){self.onError("jsonp poll error",e)};var insertAt=document.getElementsByTagName("script")[0];if(insertAt){insertAt.parentNode.insertBefore(script,insertAt)}else{(document.head||document.body).appendChild(script)}this.script=script;var isUAgecko="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);if(isUAgecko){setTimeout(function(){var iframe=document.createElement("iframe");document.body.appendChild(iframe);document.body.removeChild(iframe)},100)}};JSONPPolling.prototype.doWrite=function(data,fn){var self=this;if(!this.form){var form=document.createElement("form");var area=document.createElement("textarea");var id=this.iframeId="eio_iframe_"+this.index;var iframe;form.className="socketio";form.style.position="absolute";form.style.top="-1000px";form.style.left="-1000px";form.target=id;form.method="POST";form.setAttribute("accept-charset","utf-8");area.name="d";form.appendChild(area);document.body.appendChild(form);this.form=form;this.area=area}this.form.action=this.uri();function complete(){initIframe();fn()}function initIframe(){if(self.iframe){try{self.form.removeChild(self.iframe)}catch(e){self.onError("jsonp polling iframe removal error",e)}}try{var html='<iframe src="javascript:0" name="'+self.iframeId+'">';iframe=document.createElement(html)}catch(e){iframe=document.createElement("iframe");iframe.name=self.iframeId;iframe.src="javascript:0"}iframe.id=self.iframeId;self.form.appendChild(iframe);self.iframe=iframe}initIframe();data=data.replace(rEscapedNewline,"\\\n");this.area.value=data.replace(rNewline,"\\n");try{this.form.submit()}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(self.iframe.readyState=="complete"){complete()}}}else{this.iframe.onload=complete}}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"./polling":8,"component-inherit":16}],7:[function(_dereq_,module,exports){(function(global){var XMLHttpRequest=_dereq_("xmlhttprequest-ssl");var Polling=_dereq_("./polling");var Emitter=_dereq_("component-emitter");var inherit=_dereq_("component-inherit");var debug=_dereq_("debug")("engine.io-client:polling-xhr");module.exports=XHR;module.exports.Request=Request;function empty(){}function XHR(opts){Polling.call(this,opts);if(global.location){var isSSL="https:"==location.protocol;var port=location.port;if(!port){port=isSSL?443:80}this.xd=opts.hostname!=global.location.hostname||port!=opts.port;this.xs=opts.secure!=isSSL}else{this.extraHeaders=opts.extraHeaders}}inherit(XHR,Polling);XHR.prototype.supportsBinary=true;XHR.prototype.request=function(opts){opts=opts||{};opts.uri=this.uri();opts.xd=this.xd;opts.xs=this.xs;opts.agent=this.agent||false;opts.supportsBinary=this.supportsBinary;opts.enablesXDR=this.enablesXDR;opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;opts.extraHeaders=this.extraHeaders;return new Request(opts)};XHR.prototype.doWrite=function(data,fn){var isBinary=typeof data!=="string"&&data!==undefined;var req=this.request({method:"POST",data:data,isBinary:isBinary});var self=this;req.on("success",fn);req.on("error",function(err){self.onError("xhr post error",err)});this.sendXhr=req};XHR.prototype.doPoll=function(){debug("xhr poll");var req=this.request();var self=this;req.on("data",function(data){self.onData(data)});req.on("error",function(err){self.onError("xhr poll error",err)});this.pollXhr=req};function Request(opts){this.method=opts.method||"GET";this.uri=opts.uri;this.xd=!!opts.xd;this.xs=!!opts.xs;this.async=false!==opts.async;this.data=undefined!=opts.data?opts.data:null;this.agent=opts.agent;this.isBinary=opts.isBinary;this.supportsBinary=opts.supportsBinary;this.enablesXDR=opts.enablesXDR;this.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.extraHeaders=opts.extraHeaders;this.create()}Emitter(Request.prototype);Request.prototype.create=function(){var opts={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;var xhr=this.xhr=new XMLHttpRequest(opts);var self=this;try{debug("xhr open %s: %s",this.method,this.uri);xhr.open(this.method,this.uri,this.async);try{if(this.extraHeaders){xhr.setDisableHeaderCheck(true);for(var i in this.extraHeaders){if(this.extraHeaders.hasOwnProperty(i)){xhr.setRequestHeader(i,this.extraHeaders[i])}}}}catch(e){}if(this.supportsBinary){xhr.responseType="arraybuffer"}if("POST"==this.method){try{if(this.isBinary){xhr.setRequestHeader("Content-type","application/octet-stream")}else{xhr.setRequestHeader("Content-type","text/plain;charset=UTF-8")}}catch(e){}}if("withCredentials"in xhr){xhr.withCredentials=true}if(this.hasXDR()){xhr.onload=function(){self.onLoad()};xhr.onerror=function(){self.onError(xhr.responseText)}}else{xhr.onreadystatechange=function(){if(4!=xhr.readyState)return;if(200==xhr.status||1223==xhr.status){self.onLoad()}else{setTimeout(function(){self.onError(xhr.status)},0)}}}debug("xhr data %s",this.data);xhr.send(this.data)}catch(e){setTimeout(function(){self.onError(e)},0);return}if(global.document){this.index=Request.requestsCount++;Request.requests[this.index]=this}};Request.prototype.onSuccess=function(){this.emit("success");this.cleanup()};Request.prototype.onData=function(data){this.emit("data",data);this.onSuccess()};Request.prototype.onError=function(err){this.emit("error",err);this.cleanup(true)};Request.prototype.cleanup=function(fromError){if("undefined"==typeof this.xhr||null===this.xhr){return}if(this.hasXDR()){this.xhr.onload=this.xhr.onerror=empty}else{this.xhr.onreadystatechange=empty}if(fromError){try{this.xhr.abort()}catch(e){}}if(global.document){delete Request.requests[this.index]}this.xhr=null};Request.prototype.onLoad=function(){var data;try{var contentType;try{contentType=this.xhr.getResponseHeader("Content-Type").split(";")[0]}catch(e){}if(contentType==="application/octet-stream"){data=this.xhr.response}else{if(!this.supportsBinary){data=this.xhr.responseText}else{try{data=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){var ui8Arr=new Uint8Array(this.xhr.response);var dataArray=[];for(var idx=0,length=ui8Arr.length;idx<length;idx++){dataArray.push(ui8Arr[idx])}data=String.fromCharCode.apply(null,dataArray)}}}}catch(e){this.onError(e)}if(null!=data){this.onData(data)}};Request.prototype.hasXDR=function(){return"undefined"!==typeof global.XDomainRequest&&!this.xs&&this.enablesXDR};Request.prototype.abort=function(){this.cleanup()};if(global.document){Request.requestsCount=0;Request.requests={};if(global.attachEvent){global.attachEvent("onunload",unloadHandler)}else if(global.addEventListener){global.addEventListener("beforeunload",unloadHandler,false)}}function unloadHandler(){for(var i in Request.requests){if(Request.requests.hasOwnProperty(i)){Request.requests[i].abort()}}}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"./polling":8,"component-emitter":15,"component-inherit":16,debug:17,"xmlhttprequest-ssl":10}],8:[function(_dereq_,module,exports){var Transport=_dereq_("../transport");var parseqs=_dereq_("parseqs");var parser=_dereq_("engine.io-parser");var inherit=_dereq_("component-inherit");var yeast=_dereq_("yeast");var debug=_dereq_("debug")("engine.io-client:polling");module.exports=Polling;var hasXHR2=function(){var XMLHttpRequest=_dereq_("xmlhttprequest-ssl");var xhr=new XMLHttpRequest({xdomain:false});return null!=xhr.responseType}();function Polling(opts){var forceBase64=opts&&opts.forceBase64;if(!hasXHR2||forceBase64){this.supportsBinary=false}Transport.call(this,opts)}inherit(Polling,Transport);Polling.prototype.name="polling";Polling.prototype.doOpen=function(){this.poll()};Polling.prototype.pause=function(onPause){var pending=0;var self=this;this.readyState="pausing";function pause(){debug("paused");self.readyState="paused";onPause()}if(this.polling||!this.writable){var total=0;if(this.polling){debug("we are currently polling - waiting to pause");total++;this.once("pollComplete",function(){debug("pre-pause polling complete");--total||pause()})}if(!this.writable){debug("we are currently writing - waiting to pause");total++;this.once("drain",function(){debug("pre-pause writing complete");--total||pause()})}}else{pause()}};Polling.prototype.poll=function(){debug("polling");this.polling=true;this.doPoll();this.emit("poll")};Polling.prototype.onData=function(data){var self=this;debug("polling got data %s",data);var callback=function(packet,index,total){if("opening"==self.readyState){self.onOpen()}if("close"==packet.type){self.onClose();return false}self.onPacket(packet)};parser.decodePayload(data,this.socket.binaryType,callback);if("closed"!=this.readyState){this.polling=false;this.emit("pollComplete");if("open"==this.readyState){this.poll()}else{debug('ignoring poll - transport state "%s"',this.readyState)}}};Polling.prototype.doClose=function(){var self=this;function close(){debug("writing close packet");self.write([{type:"close"}])}if("open"==this.readyState){debug("transport open - closing");close()}else{debug("transport not open - deferring close");this.once("open",close)}};Polling.prototype.write=function(packets){var self=this;this.writable=false;var callbackfn=function(){self.writable=true;self.emit("drain")};var self=this;parser.encodePayload(packets,this.supportsBinary,function(data){self.doWrite(data,callbackfn)})};Polling.prototype.uri=function(){var query=this.query||{};var schema=this.secure?"https":"http";var port="";if(false!==this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary&&!query.sid){query.b64=1}query=parseqs.encode(query);if(this.port&&("https"==schema&&this.port!=443||"http"==schema&&this.port!=80)){port=":"+this.port}if(query.length){query="?"+query}var ipv6=this.hostname.indexOf(":")!==-1;return schema+"://"+(ipv6?"["+this.hostname+"]":this.hostname)+port+this.path+query}},{"../transport":4,"component-inherit":16,debug:17,"engine.io-parser":19,parseqs:27,"xmlhttprequest-ssl":10,yeast:30}],9:[function(_dereq_,module,exports){(function(global){var Transport=_dereq_("../transport");var parser=_dereq_("engine.io-parser");var parseqs=_dereq_("parseqs");var inherit=_dereq_("component-inherit");var yeast=_dereq_("yeast");var debug=_dereq_("debug")("engine.io-client:websocket");var BrowserWebSocket=global.WebSocket||global.MozWebSocket;var WebSocket=BrowserWebSocket;if(!WebSocket&&typeof window==="undefined"){try{WebSocket=_dereq_("ws")}catch(e){}}module.exports=WS;function WS(opts){var forceBase64=opts&&opts.forceBase64;if(forceBase64){this.supportsBinary=false}this.perMessageDeflate=opts.perMessageDeflate;Transport.call(this,opts)}inherit(WS,Transport);WS.prototype.name="websocket";WS.prototype.supportsBinary=true;WS.prototype.doOpen=function(){if(!this.check()){return}var self=this;var uri=this.uri();var protocols=void 0;var opts={agent:this.agent,perMessageDeflate:this.perMessageDeflate};opts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;if(this.extraHeaders){opts.headers=this.extraHeaders}this.ws=BrowserWebSocket?new WebSocket(uri):new WebSocket(uri,protocols,opts);if(this.ws.binaryType===undefined){this.supportsBinary=false}if(this.ws.supports&&this.ws.supports.binary){this.supportsBinary=true;this.ws.binaryType="buffer"}else{this.ws.binaryType="arraybuffer"}this.addEventListeners()};WS.prototype.addEventListeners=function(){var self=this;this.ws.onopen=function(){self.onOpen()};this.ws.onclose=function(){self.onClose()};this.ws.onmessage=function(ev){self.onData(ev.data)};this.ws.onerror=function(e){self.onError("websocket error",e)}};if("undefined"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)){WS.prototype.onData=function(data){var self=this;setTimeout(function(){Transport.prototype.onData.call(self,data)},0)}}WS.prototype.write=function(packets){var self=this;this.writable=false;var total=packets.length;for(var i=0,l=total;i<l;i++){(function(packet){parser.encodePacket(packet,self.supportsBinary,function(data){if(!BrowserWebSocket){var opts={};if(packet.options){opts.compress=packet.options.compress}if(self.perMessageDeflate){var len="string"==typeof data?global.Buffer.byteLength(data):data.length;if(len<self.perMessageDeflate.threshold){opts.compress=false}}}try{if(BrowserWebSocket){self.ws.send(data)}else{self.ws.send(data,opts)}}catch(e){debug("websocket closed before onclose event")}--total||done()})})(packets[i])}function done(){self.emit("flush");setTimeout(function(){self.writable=true;self.emit("drain")},0)}};WS.prototype.onClose=function(){Transport.prototype.onClose.call(this)};WS.prototype.doClose=function(){if(typeof this.ws!=="undefined"){this.ws.close()}};WS.prototype.uri=function(){var query=this.query||{};var schema=this.secure?"wss":"ws";var port="";if(this.port&&("wss"==schema&&this.port!=443||"ws"==schema&&this.port!=80)){port=":"+this.port}if(this.timestampRequests){query[this.timestampParam]=yeast()}if(!this.supportsBinary){query.b64=1}query=parseqs.encode(query);if(query.length){query="?"+query}var ipv6=this.hostname.indexOf(":")!==-1;return schema+"://"+(ipv6?"["+this.hostname+"]":this.hostname)+port+this.path+query};WS.prototype.check=function(){return!!WebSocket&&!("__initialize"in WebSocket&&this.name===WS.prototype.name)}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"../transport":4,"component-inherit":16,debug:17,"engine.io-parser":19,parseqs:27,ws:undefined,yeast:30}],10:[function(_dereq_,module,exports){var hasCORS=_dereq_("has-cors");module.exports=function(opts){var xdomain=opts.xdomain;var xscheme=opts.xscheme;var enablesXDR=opts.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!xdomain||hasCORS)){return new XMLHttpRequest}}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!xscheme&&enablesXDR){return new XDomainRequest}}catch(e){}if(!xdomain){try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}}},{"has-cors":22}],11:[function(_dereq_,module,exports){module.exports=after;function after(count,callback,err_cb){var bail=false;err_cb=err_cb||noop;proxy.count=count;return count===0?callback():proxy;function proxy(err,result){if(proxy.count<=0){throw new Error("after called too many times")}--proxy.count;if(err){bail=true;callback(err);callback=err_cb}else if(proxy.count===0&&!bail){callback(null,result)}}}function noop(){}},{}],12:[function(_dereq_,module,exports){module.exports=function(arraybuffer,start,end){var bytes=arraybuffer.byteLength;start=start||0;end=end||bytes;if(arraybuffer.slice){return arraybuffer.slice(start,end)}if(start<0){start+=bytes}if(end<0){end+=bytes}if(end>bytes){end=bytes}if(start>=bytes||start>=end||bytes===0){return new ArrayBuffer(0)}var abv=new Uint8Array(arraybuffer);var result=new Uint8Array(end-start);for(var i=start,ii=0;i<end;i++,ii++){result[ii]=abv[i]}return result.buffer}},{}],13:[function(_dereq_,module,exports){(function(chars){"use strict";exports.encode=function(arraybuffer){var bytes=new Uint8Array(arraybuffer),i,len=bytes.length,base64="";for(i=0;i<len;i+=3){base64+=chars[bytes[i]>>2];
base64+=chars[(bytes[i]&3)<<4|bytes[i+1]>>4];base64+=chars[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64+=chars[bytes[i+2]&63]}if(len%3===2){base64=base64.substring(0,base64.length-1)+"="}else if(len%3===1){base64=base64.substring(0,base64.length-2)+"=="}return base64};exports.decode=function(base64){var bufferLength=base64.length*.75,len=base64.length,i,p=0,encoded1,encoded2,encoded3,encoded4;if(base64[base64.length-1]==="="){bufferLength--;if(base64[base64.length-2]==="="){bufferLength--}}var arraybuffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(arraybuffer);for(i=0;i<len;i+=4){encoded1=chars.indexOf(base64[i]);encoded2=chars.indexOf(base64[i+1]);encoded3=chars.indexOf(base64[i+2]);encoded4=chars.indexOf(base64[i+3]);bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63}return arraybuffer}})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},{}],14:[function(_dereq_,module,exports){(function(global){var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder;var blobSupported=function(){try{var a=new Blob(["hi"]);return a.size===2}catch(e){return false}}();var blobSupportsArrayBufferView=blobSupported&&function(){try{var b=new Blob([new Uint8Array([1,2])]);return b.size===2}catch(e){return false}}();var blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;function mapArrayBufferViews(ary){for(var i=0;i<ary.length;i++){var chunk=ary[i];if(chunk.buffer instanceof ArrayBuffer){var buf=chunk.buffer;if(chunk.byteLength!==buf.byteLength){var copy=new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf,chunk.byteOffset,chunk.byteLength));buf=copy.buffer}ary[i]=buf}}}function BlobBuilderConstructor(ary,options){options=options||{};var bb=new BlobBuilder;mapArrayBufferViews(ary);for(var i=0;i<ary.length;i++){bb.append(ary[i])}return options.type?bb.getBlob(options.type):bb.getBlob()}function BlobConstructor(ary,options){mapArrayBufferViews(ary);return new Blob(ary,options||{})}module.exports=function(){if(blobSupported){return blobSupportsArrayBufferView?global.Blob:BlobConstructor}else if(blobBuilderSupported){return BlobBuilderConstructor}else{return undefined}}()}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{}],15:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks[event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks[event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],16:[function(_dereq_,module,exports){module.exports=function(a,b){var fn=function(){};fn.prototype=b.prototype;a.prototype=new fn;a.prototype.constructor=a}},{}],17:[function(_dereq_,module,exports){exports=module.exports=_dereq_("./debug");exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:localstorage();exports.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"];function useColors(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}exports.formatters.j=function(v){return JSON.stringify(v)};function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?"%c":"")+this.namespace+(useColors?" %c":" ")+args[0]+(useColors?"%c ":" ")+"+"+exports.humanize(this.diff);if(!useColors)return args;var c="color: "+this.color;args=[args[0],c,"color: inherit"].concat(Array.prototype.slice.call(args,1));var index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if("%%"===match)return;index++;if("%c"===match){lastC=index}});args.splice(lastC,0,c);return args}function log(){return"object"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(namespaces){try{if(null==namespaces){exports.storage.removeItem("debug")}else{exports.storage.debug=namespaces}}catch(e){}}function load(){var r;try{r=exports.storage.debug}catch(e){}return r}exports.enable(load());function localstorage(){try{return window.localStorage}catch(e){}}},{"./debug":18}],18:[function(_dereq_,module,exports){exports=module.exports=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=_dereq_("ms");exports.names=[];exports.skips=[];exports.formatters={};var prevColor=0;var prevTime;function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(namespace){function disabled(){}disabled.enabled=false;function enabled(){var self=enabled;var curr=+new Date;var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;if(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=Array.prototype.slice.call(arguments);args[0]=exports.coerce(args[0]);if("string"!==typeof args[0]){args=["%o"].concat(args)}var index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){if(match==="%%")return match;index++;var formatter=exports.formatters[format];if("function"===typeof formatter){var val=args[index];match=formatter.call(self,val);args.splice(index,1);index--}return match});if("function"===typeof exports.formatArgs){args=exports.formatArgs.apply(self,args)}var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args)}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn}function enable(namespaces){exports.save(namespaces);var split=(namespaces||"").split(/[\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;namespaces=split[i].replace(/\*/g,".*?");if(namespaces[0]==="-"){exports.skips.push(new RegExp("^"+namespaces.substr(1)+"$"))}else{exports.names.push(new RegExp("^"+namespaces+"$"))}}}function disable(){exports.enable("")}function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true}}return false}function coerce(val){if(val instanceof Error)return val.stack||val.message;return val}},{ms:25}],19:[function(_dereq_,module,exports){(function(global){var keys=_dereq_("./keys");var hasBinary=_dereq_("has-binary");var sliceBuffer=_dereq_("arraybuffer.slice");var base64encoder=_dereq_("base64-arraybuffer");var after=_dereq_("after");var utf8=_dereq_("utf8");var isAndroid=navigator.userAgent.match(/Android/i);var isPhantomJS=/PhantomJS/i.test(navigator.userAgent);var dontSendBlobs=isAndroid||isPhantomJS;exports.protocol=3;var packets=exports.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6};var packetslist=keys(packets);var err={type:"error",data:"parser error"};var Blob=_dereq_("blob");exports.encodePacket=function(packet,supportsBinary,utf8encode,callback){if("function"==typeof supportsBinary){callback=supportsBinary;supportsBinary=false}if("function"==typeof utf8encode){callback=utf8encode;utf8encode=null}var data=packet.data===undefined?undefined:packet.data.buffer||packet.data;if(global.ArrayBuffer&&data instanceof ArrayBuffer){return encodeArrayBuffer(packet,supportsBinary,callback)}else if(Blob&&data instanceof global.Blob){return encodeBlob(packet,supportsBinary,callback)}if(data&&data.base64){return encodeBase64Object(packet,callback)}var encoded=packets[packet.type];if(undefined!==packet.data){encoded+=utf8encode?utf8.encode(String(packet.data)):String(packet.data)}return callback(""+encoded)};function encodeBase64Object(packet,callback){var message="b"+exports.packets[packet.type]+packet.data.data;return callback(message)}function encodeArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var data=packet.data;var contentArray=new Uint8Array(data);var resultBuffer=new Uint8Array(1+data.byteLength);resultBuffer[0]=packets[packet.type];for(var i=0;i<contentArray.length;i++){resultBuffer[i+1]=contentArray[i]}return callback(resultBuffer.buffer)}function encodeBlobAsArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}var fr=new FileReader;fr.onload=function(){packet.data=fr.result;exports.encodePacket(packet,supportsBinary,true,callback)};return fr.readAsArrayBuffer(packet.data)}function encodeBlob(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback)}if(dontSendBlobs){return encodeBlobAsArrayBuffer(packet,supportsBinary,callback)}var length=new Uint8Array(1);length[0]=packets[packet.type];var blob=new Blob([length.buffer,packet.data]);return callback(blob)}exports.encodeBase64Packet=function(packet,callback){var message="b"+exports.packets[packet.type];if(Blob&&packet.data instanceof global.Blob){var fr=new FileReader;fr.onload=function(){var b64=fr.result.split(",")[1];callback(message+b64)};return fr.readAsDataURL(packet.data)}var b64data;try{b64data=String.fromCharCode.apply(null,new Uint8Array(packet.data))}catch(e){var typed=new Uint8Array(packet.data);var basic=new Array(typed.length);for(var i=0;i<typed.length;i++){basic[i]=typed[i]}b64data=String.fromCharCode.apply(null,basic)}message+=global.btoa(b64data);return callback(message)};exports.decodePacket=function(data,binaryType,utf8decode){if(typeof data=="string"||data===undefined){if(data.charAt(0)=="b"){return exports.decodeBase64Packet(data.substr(1),binaryType)}if(utf8decode){try{data=utf8.decode(data)}catch(e){return err}}var type=data.charAt(0);if(Number(type)!=type||!packetslist[type]){return err}if(data.length>1){return{type:packetslist[type],data:data.substring(1)}}else{return{type:packetslist[type]}}}var asArray=new Uint8Array(data);var type=asArray[0];var rest=sliceBuffer(data,1);if(Blob&&binaryType==="blob"){rest=new Blob([rest])}return{type:packetslist[type],data:rest}};exports.decodeBase64Packet=function(msg,binaryType){var type=packetslist[msg.charAt(0)];if(!global.ArrayBuffer){return{type:type,data:{base64:true,data:msg.substr(1)}}}var data=base64encoder.decode(msg.substr(1));if(binaryType==="blob"&&Blob){data=new Blob([data])}return{type:type,data:data}};exports.encodePayload=function(packets,supportsBinary,callback){if(typeof supportsBinary=="function"){callback=supportsBinary;supportsBinary=null}var isBinary=hasBinary(packets);if(supportsBinary&&isBinary){if(Blob&&!dontSendBlobs){return exports.encodePayloadAsBlob(packets,callback)}return exports.encodePayloadAsArrayBuffer(packets,callback)}if(!packets.length){return callback("0:")}function setLengthHeader(message){return message.length+":"+message}function encodeOne(packet,doneCallback){exports.encodePacket(packet,!isBinary?false:supportsBinary,true,function(message){doneCallback(null,setLengthHeader(message))})}map(packets,encodeOne,function(err,results){return callback(results.join(""))})};function map(ary,each,done){var result=new Array(ary.length);var next=after(ary.length,done);var eachWithIndex=function(i,el,cb){each(el,function(error,msg){result[i]=msg;cb(error,result)})};for(var i=0;i<ary.length;i++){eachWithIndex(i,ary[i],next)}}exports.decodePayload=function(data,binaryType,callback){if(typeof data!="string"){return exports.decodePayloadAsBinary(data,binaryType,callback)}if(typeof binaryType==="function"){callback=binaryType;binaryType=null}var packet;if(data==""){return callback(err,0,1)}var length="",n,msg;for(var i=0,l=data.length;i<l;i++){var chr=data.charAt(i);if(":"!=chr){length+=chr}else{if(""==length||length!=(n=Number(length))){return callback(err,0,1)}msg=data.substr(i+1,n);if(length!=msg.length){return callback(err,0,1)}if(msg.length){packet=exports.decodePacket(msg,binaryType,true);if(err.type==packet.type&&err.data==packet.data){return callback(err,0,1)}var ret=callback(packet,i+n,l);if(false===ret)return}i+=n;length=""}}if(length!=""){return callback(err,0,1)}};exports.encodePayloadAsArrayBuffer=function(packets,callback){if(!packets.length){return callback(new ArrayBuffer(0))}function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(data){return doneCallback(null,data)})}map(packets,encodeOne,function(err,encodedPackets){var totalLength=encodedPackets.reduce(function(acc,p){var len;if(typeof p==="string"){len=p.length}else{len=p.byteLength}return acc+len.toString().length+len+2},0);var resultArray=new Uint8Array(totalLength);var bufferIndex=0;encodedPackets.forEach(function(p){var isString=typeof p==="string";var ab=p;if(isString){var view=new Uint8Array(p.length);for(var i=0;i<p.length;i++){view[i]=p.charCodeAt(i)}ab=view.buffer}if(isString){resultArray[bufferIndex++]=0}else{resultArray[bufferIndex++]=1}var lenStr=ab.byteLength.toString();for(var i=0;i<lenStr.length;i++){resultArray[bufferIndex++]=parseInt(lenStr[i])}resultArray[bufferIndex++]=255;var view=new Uint8Array(ab);for(var i=0;i<view.length;i++){resultArray[bufferIndex++]=view[i]}});return callback(resultArray.buffer)})};exports.encodePayloadAsBlob=function(packets,callback){function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(encoded){var binaryIdentifier=new Uint8Array(1);binaryIdentifier[0]=1;if(typeof encoded==="string"){var view=new Uint8Array(encoded.length);for(var i=0;i<encoded.length;i++){view[i]=encoded.charCodeAt(i)}encoded=view.buffer;binaryIdentifier[0]=0}var len=encoded instanceof ArrayBuffer?encoded.byteLength:encoded.size;var lenStr=len.toString();var lengthAry=new Uint8Array(lenStr.length+1);for(var i=0;i<lenStr.length;i++){lengthAry[i]=parseInt(lenStr[i])}lengthAry[lenStr.length]=255;if(Blob){var blob=new Blob([binaryIdentifier.buffer,lengthAry.buffer,encoded]);doneCallback(null,blob)}})}map(packets,encodeOne,function(err,results){return callback(new Blob(results))})};exports.decodePayloadAsBinary=function(data,binaryType,callback){if(typeof binaryType==="function"){callback=binaryType;binaryType=null}var bufferTail=data;var buffers=[];var numberTooLong=false;while(bufferTail.byteLength>0){var tailArray=new Uint8Array(bufferTail);var isString=tailArray[0]===0;var msgLength="";for(var i=1;;i++){if(tailArray[i]==255)break;if(msgLength.length>310){numberTooLong=true;break}msgLength+=tailArray[i]}if(numberTooLong)return callback(err,0,1);bufferTail=sliceBuffer(bufferTail,2+msgLength.length);msgLength=parseInt(msgLength);var msg=sliceBuffer(bufferTail,0,msgLength);if(isString){try{msg=String.fromCharCode.apply(null,new Uint8Array(msg))}catch(e){var typed=new Uint8Array(msg);msg="";for(var i=0;i<typed.length;i++){msg+=String.fromCharCode(typed[i])}}}buffers.push(msg);bufferTail=sliceBuffer(bufferTail,msgLength)}var total=buffers.length;buffers.forEach(function(buffer,i){callback(exports.decodePacket(buffer,binaryType,true),i,total)})}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"./keys":20,after:11,"arraybuffer.slice":12,"base64-arraybuffer":13,blob:14,"has-binary":21,utf8:29}],20:[function(_dereq_,module,exports){module.exports=Object.keys||function keys(obj){var arr=[];var has=Object.prototype.hasOwnProperty;for(var i in obj){if(has.call(obj,i)){arr.push(i)}}return arr}},{}],21:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_("isarray");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&"object"==typeof obj){if(obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{isarray:24}],22:[function(_dereq_,module,exports){try{module.exports=typeof XMLHttpRequest!=="undefined"&&"withCredentials"in new XMLHttpRequest}catch(err){module.exports=false}},{}],23:[function(_dereq_,module,exports){var indexOf=[].indexOf;module.exports=function(arr,obj){if(indexOf)return arr.indexOf(obj);for(var i=0;i<arr.length;++i){if(arr[i]===obj)return i}return-1}},{}],24:[function(_dereq_,module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=="[object Array]"}},{}],25:[function(_dereq_,module,exports){var s=1e3;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;module.exports=function(val,options){options=options||{};if("string"==typeof val)return parse(val);return options.long?long(val):short(val)};function parse(str){str=""+str;if(str.length>1e4)return;var match=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);var type=(match[2]||"ms").toLowerCase();switch(type){case"years":case"year":case"yrs":case"yr":case"y":return n*y;case"days":case"day":case"d":return n*d;case"hours":case"hour":case"hrs":case"hr":case"h":return n*h;case"minutes":case"minute":case"mins":case"min":case"m":return n*m;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n}}function short(ms){if(ms>=d)return Math.round(ms/d)+"d";if(ms>=h)return Math.round(ms/h)+"h";if(ms>=m)return Math.round(ms/m)+"m";if(ms>=s)return Math.round(ms/s)+"s";return ms+"ms"}function long(ms){return plural(ms,d,"day")||plural(ms,h,"hour")||plural(ms,m,"minute")||plural(ms,s,"second")||ms+" ms"}function plural(ms,n,name){if(ms<n)return;if(ms<n*1.5)return Math.floor(ms/n)+" "+name;return Math.ceil(ms/n)+" "+name+"s"}},{}],26:[function(_dereq_,module,exports){(function(global){var rvalidchars=/^[\],:{}\s]*$/;var rvalidescape=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var rvalidbraces=/(?:^|:|,)(?:\s*\[)+/g;var rtrimLeft=/^\s+/;var rtrimRight=/\s+$/;module.exports=function parsejson(data){if("string"!=typeof data||!data){return null}data=data.replace(rtrimLeft,"").replace(rtrimRight,"");if(global.JSON&&JSON.parse){return JSON.parse(data)}if(rvalidchars.test(data.replace(rvalidescape,"@").replace(rvalidtokens,"]").replace(rvalidbraces,""))){return new Function("return "+data)()}}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{}],27:[function(_dereq_,module,exports){exports.encode=function(obj){var str="";for(var i in obj){if(obj.hasOwnProperty(i)){if(str.length)str+="&";str+=encodeURIComponent(i)+"="+encodeURIComponent(obj[i])}}return str};exports.decode=function(qs){var qry={};var pairs=qs.split("&");for(var i=0,l=pairs.length;i<l;i++){var pair=pairs[i].split("=");qry[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1])}return qry}},{}],28:[function(_dereq_,module,exports){var re=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;var parts=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];module.exports=function parseuri(str){var src=str,b=str.indexOf("["),e=str.indexOf("]");if(b!=-1&&e!=-1){str=str.substring(0,b)+str.substring(b,e).replace(/:/g,";")+str.substring(e,str.length)}var m=re.exec(str||""),uri={},i=14;while(i--){uri[parts[i]]=m[i]||""}if(b!=-1&&e!=-1){uri.source=src;uri.host=uri.host.substring(1,uri.host.length-1).replace(/;/g,":");uri.authority=uri.authority.replace("[","").replace("]","").replace(/;/g,":");uri.ipv6uri=true}return uri}},{}],29:[function(_dereq_,module,exports){(function(global){(function(root){var freeExports=typeof exports=="object"&&exports;var freeModule=typeof module=="object"&&module&&module.exports==freeExports&&module;var freeGlobal=typeof global=="object"&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal){root=freeGlobal}var stringFromCharCode=String.fromCharCode;function ucs2decode(string){var output=[];var counter=0;var length=string.length;var value;var extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=55296&&value<=56319&&counter<length){extra=string.charCodeAt(counter++);if((extra&64512)==56320){output.push(((value&1023)<<10)+(extra&1023)+65536)}else{output.push(value);counter--}}else{output.push(value)}}return output}function ucs2encode(array){var length=array.length;var index=-1;var value;var output="";while(++index<length){value=array[index];if(value>65535){value-=65536;output+=stringFromCharCode(value>>>10&1023|55296);value=56320|value&1023}output+=stringFromCharCode(value)}return output}function checkScalarValue(codePoint){if(codePoint>=55296&&codePoint<=57343){throw Error("Lone surrogate U+"+codePoint.toString(16).toUpperCase()+" is not a scalar value")}}function createByte(codePoint,shift){return stringFromCharCode(codePoint>>shift&63|128)}function encodeCodePoint(codePoint){if((codePoint&4294967168)==0){return stringFromCharCode(codePoint)}var symbol="";if((codePoint&4294965248)==0){symbol=stringFromCharCode(codePoint>>6&31|192)}else if((codePoint&4294901760)==0){checkScalarValue(codePoint);symbol=stringFromCharCode(codePoint>>12&15|224);symbol+=createByte(codePoint,6)}else if((codePoint&4292870144)==0){symbol=stringFromCharCode(codePoint>>18&7|240);symbol+=createByte(codePoint,12);symbol+=createByte(codePoint,6)}symbol+=stringFromCharCode(codePoint&63|128);return symbol}function utf8encode(string){var codePoints=ucs2decode(string);var length=codePoints.length;var index=-1;var codePoint;var byteString="";while(++index<length){codePoint=codePoints[index];byteString+=encodeCodePoint(codePoint)}return byteString}function readContinuationByte(){if(byteIndex>=byteCount){throw Error("Invalid byte index")}var continuationByte=byteArray[byteIndex]&255;byteIndex++;if((continuationByte&192)==128){return continuationByte&63}throw Error("Invalid continuation byte")}function decodeSymbol(){var byte1;var byte2;var byte3;var byte4;var codePoint;if(byteIndex>byteCount){throw Error("Invalid byte index")}if(byteIndex==byteCount){return false}byte1=byteArray[byteIndex]&255;byteIndex++;if((byte1&128)==0){return byte1}if((byte1&224)==192){var byte2=readContinuationByte();codePoint=(byte1&31)<<6|byte2;if(codePoint>=128){return codePoint}else{throw Error("Invalid continuation byte")}}if((byte1&240)==224){byte2=readContinuationByte();byte3=readContinuationByte();codePoint=(byte1&15)<<12|byte2<<6|byte3;if(codePoint>=2048){checkScalarValue(codePoint);return codePoint}else{throw Error("Invalid continuation byte")}}if((byte1&248)==240){byte2=readContinuationByte();byte3=readContinuationByte();byte4=readContinuationByte();codePoint=(byte1&15)<<18|byte2<<12|byte3<<6|byte4;if(codePoint>=65536&&codePoint<=1114111){return codePoint}}throw Error("Invalid UTF-8 detected")}var byteArray;var byteCount;var byteIndex;function utf8decode(byteString){byteArray=ucs2decode(byteString);byteCount=byteArray.length;byteIndex=0;var codePoints=[];var tmp;while((tmp=decodeSymbol())!==false){codePoints.push(tmp)}return ucs2encode(codePoints)}var utf8={version:"2.0.0",encode:utf8encode,decode:utf8decode};if(typeof define=="function"&&typeof define.amd=="object"&&define.amd){define(function(){return utf8})}else if(freeExports&&!freeExports.nodeType){if(freeModule){freeModule.exports=utf8}else{var object={};var hasOwnProperty=object.hasOwnProperty;for(var key in utf8){hasOwnProperty.call(utf8,key)&&(freeExports[key]=utf8[key])}}}else{root.utf8=utf8}})(this)}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{}],30:[function(_dereq_,module,exports){"use strict";var alphabet="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),length=64,map={},seed=0,i=0,prev;function encode(num){var encoded="";do{encoded=alphabet[num%length]+encoded;num=Math.floor(num/length)}while(num>0);return encoded}function decode(str){var decoded=0;for(i=0;i<str.length;i++){decoded=decoded*length+map[str.charAt(i)]}return decoded}function yeast(){var now=encode(+new Date);if(now!==prev)return seed=0,prev=now;return now+"."+encode(seed++)}for(;i<length;i++)map[alphabet[i]]=i;yeast.encode=encode;yeast.decode=decode;module.exports=yeast},{}],31:[function(_dereq_,module,exports){var url=_dereq_("./url");var parser=_dereq_("socket.io-parser");var Manager=_dereq_("./manager");var debug=_dereq_("debug")("socket.io-client");module.exports=exports=lookup;var cache=exports.managers={};function lookup(uri,opts){if(typeof uri=="object"){opts=uri;uri=undefined}opts=opts||{};var parsed=url(uri);var source=parsed.source;var id=parsed.id;var path=parsed.path;var sameNamespace=cache[id]&&path in cache[id].nsps;var newConnection=opts.forceNew||opts["force new connection"]||false===opts.multiplex||sameNamespace;var io;if(newConnection){debug("ignoring socket cache for %s",source);io=Manager(source,opts)}else{if(!cache[id]){debug("new io instance for %s",source);cache[id]=Manager(source,opts)}io=cache[id]}return io.socket(parsed.path)}exports.protocol=parser.protocol;exports.connect=lookup;exports.Manager=_dereq_("./manager");exports.Socket=_dereq_("./socket")},{"./manager":32,"./socket":34,"./url":35,debug:39,"socket.io-parser":47}],32:[function(_dereq_,module,exports){var eio=_dereq_("engine.io-client");var Socket=_dereq_("./socket");var Emitter=_dereq_("component-emitter");var parser=_dereq_("socket.io-parser");var on=_dereq_("./on");var bind=_dereq_("component-bind");var debug=_dereq_("debug")("socket.io-client:manager");var indexOf=_dereq_("indexof");var Backoff=_dereq_("backo2");var has=Object.prototype.hasOwnProperty;module.exports=Manager;function Manager(uri,opts){if(!(this instanceof Manager))return new Manager(uri,opts);if(uri&&"object"==typeof uri){opts=uri;uri=undefined}opts=opts||{};opts.path=opts.path||"/socket.io";this.nsps={};this.subs=[];this.opts=opts;this.reconnection(opts.reconnection!==false);this.reconnectionAttempts(opts.reconnectionAttempts||Infinity);this.reconnectionDelay(opts.reconnectionDelay||1e3);this.reconnectionDelayMax(opts.reconnectionDelayMax||5e3);this.randomizationFactor(opts.randomizationFactor||.5);this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==opts.timeout?2e4:opts.timeout);this.readyState="closed";this.uri=uri;this.connecting=[];this.lastPing=null;this.encoding=false;this.packetBuffer=[];this.encoder=new parser.Encoder;this.decoder=new parser.Decoder;this.autoConnect=opts.autoConnect!==false;if(this.autoConnect)this.open()}Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].emit.apply(this.nsps[nsp],arguments)}}};Manager.prototype.updateSocketIds=function(){for(var nsp in this.nsps){if(has.call(this.nsps,nsp)){this.nsps[nsp].id=this.engine.id}}};Emitter(Manager.prototype);Manager.prototype.reconnection=function(v){if(!arguments.length)return this._reconnection;this._reconnection=!!v;return this};Manager.prototype.reconnectionAttempts=function(v){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=v;return this};Manager.prototype.reconnectionDelay=function(v){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=v;this.backoff&&this.backoff.setMin(v);return this};Manager.prototype.randomizationFactor=function(v){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=v;this.backoff&&this.backoff.setJitter(v);return this};Manager.prototype.reconnectionDelayMax=function(v){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=v;this.backoff&&this.backoff.setMax(v);return this};Manager.prototype.timeout=function(v){if(!arguments.length)return this._timeout;this._timeout=v;return this};Manager.prototype.maybeReconnectOnOpen=function(){if(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){this.reconnect()}};Manager.prototype.open=Manager.prototype.connect=function(fn){debug("readyState %s",this.readyState);if(~this.readyState.indexOf("open"))return this;debug("opening %s",this.uri);this.engine=eio(this.uri,this.opts);var socket=this.engine;var self=this;this.readyState="opening";this.skipReconnect=false;var openSub=on(socket,"open",function(){self.onopen();fn&&fn()});var errorSub=on(socket,"error",function(data){debug("connect_error");self.cleanup();self.readyState="closed";self.emitAll("connect_error",data);if(fn){var err=new Error("Connection error");err.data=data;fn(err)}else{self.maybeReconnectOnOpen()}});if(false!==this._timeout){var timeout=this._timeout;debug("connect attempt will timeout after %d",timeout);var timer=setTimeout(function(){debug("connect attempt timed out after %d",timeout);openSub.destroy();socket.close();socket.emit("error","timeout");self.emitAll("connect_timeout",timeout)},timeout);this.subs.push({destroy:function(){clearTimeout(timer)}})}this.subs.push(openSub);this.subs.push(errorSub);return this};Manager.prototype.onopen=function(){debug("open");this.cleanup();this.readyState="open";this.emit("open");var socket=this.engine;this.subs.push(on(socket,"data",bind(this,"ondata")));this.subs.push(on(socket,"ping",bind(this,"onping")));this.subs.push(on(socket,"pong",bind(this,"onpong")));this.subs.push(on(socket,"error",bind(this,"onerror")));this.subs.push(on(socket,"close",bind(this,"onclose")));this.subs.push(on(this.decoder,"decoded",bind(this,"ondecoded")))};Manager.prototype.onping=function(){this.lastPing=new Date;this.emitAll("ping")};Manager.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)};Manager.prototype.ondata=function(data){this.decoder.add(data)};Manager.prototype.ondecoded=function(packet){this.emit("packet",packet)};Manager.prototype.onerror=function(err){debug("error",err);this.emitAll("error",err)};Manager.prototype.socket=function(nsp){var socket=this.nsps[nsp];if(!socket){socket=new Socket(this,nsp);this.nsps[nsp]=socket;var self=this;socket.on("connecting",onConnecting);
socket.on("connect",function(){socket.id=self.engine.id});if(this.autoConnect){onConnecting()}}function onConnecting(){if(!~indexOf(self.connecting,socket)){self.connecting.push(socket)}}return socket};Manager.prototype.destroy=function(socket){var index=indexOf(this.connecting,socket);if(~index)this.connecting.splice(index,1);if(this.connecting.length)return;this.close()};Manager.prototype.packet=function(packet){debug("writing packet %j",packet);var self=this;if(!self.encoding){self.encoding=true;this.encoder.encode(packet,function(encodedPackets){for(var i=0;i<encodedPackets.length;i++){self.engine.write(encodedPackets[i],packet.options)}self.encoding=false;self.processPacketQueue()})}else{self.packetBuffer.push(packet)}};Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var pack=this.packetBuffer.shift();this.packet(pack)}};Manager.prototype.cleanup=function(){debug("cleanup");var sub;while(sub=this.subs.shift())sub.destroy();this.packetBuffer=[];this.encoding=false;this.lastPing=null;this.decoder.destroy()};Manager.prototype.close=Manager.prototype.disconnect=function(){debug("disconnect");this.skipReconnect=true;this.reconnecting=false;if("opening"==this.readyState){this.cleanup()}this.backoff.reset();this.readyState="closed";if(this.engine)this.engine.close()};Manager.prototype.onclose=function(reason){debug("onclose");this.cleanup();this.backoff.reset();this.readyState="closed";this.emit("close",reason);if(this._reconnection&&!this.skipReconnect){this.reconnect()}};Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var self=this;if(this.backoff.attempts>=this._reconnectionAttempts){debug("reconnect failed");this.backoff.reset();this.emitAll("reconnect_failed");this.reconnecting=false}else{var delay=this.backoff.duration();debug("will wait %dms before reconnect attempt",delay);this.reconnecting=true;var timer=setTimeout(function(){if(self.skipReconnect)return;debug("attempting reconnect");self.emitAll("reconnect_attempt",self.backoff.attempts);self.emitAll("reconnecting",self.backoff.attempts);if(self.skipReconnect)return;self.open(function(err){if(err){debug("reconnect attempt error");self.reconnecting=false;self.reconnect();self.emitAll("reconnect_error",err.data)}else{debug("reconnect success");self.onreconnect()}})},delay);this.subs.push({destroy:function(){clearTimeout(timer)}})}};Manager.prototype.onreconnect=function(){var attempt=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll("reconnect",attempt)}},{"./on":33,"./socket":34,backo2:36,"component-bind":37,"component-emitter":38,debug:39,"engine.io-client":1,indexof:42,"socket.io-parser":47}],33:[function(_dereq_,module,exports){module.exports=on;function on(obj,ev,fn){obj.on(ev,fn);return{destroy:function(){obj.removeListener(ev,fn)}}}},{}],34:[function(_dereq_,module,exports){var parser=_dereq_("socket.io-parser");var Emitter=_dereq_("component-emitter");var toArray=_dereq_("to-array");var on=_dereq_("./on");var bind=_dereq_("component-bind");var debug=_dereq_("debug")("socket.io-client:socket");var hasBin=_dereq_("has-binary");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};var emit=Emitter.prototype.emit;function Socket(io,nsp){this.io=io;this.nsp=nsp;this.json=this;this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(this.io.autoConnect)this.open()}Emitter(Socket.prototype);Socket.prototype.subEvents=function(){if(this.subs)return;var io=this.io;this.subs=[on(io,"open",bind(this,"onopen")),on(io,"packet",bind(this,"onpacket")),on(io,"close",bind(this,"onclose"))]};Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();if("open"==this.io.readyState)this.onopen();this.emit("connecting");return this};Socket.prototype.send=function(){var args=toArray(arguments);args.unshift("message");this.emit.apply(this,args);return this};Socket.prototype.emit=function(ev){if(events.hasOwnProperty(ev)){emit.apply(this,arguments);return this}var args=toArray(arguments);var parserType=parser.EVENT;if(hasBin(args)){parserType=parser.BINARY_EVENT}var packet={type:parserType,data:args};packet.options={};packet.options.compress=!this.flags||false!==this.flags.compress;if("function"==typeof args[args.length-1]){debug("emitting packet with ack id %d",this.ids);this.acks[this.ids]=args.pop();packet.id=this.ids++}if(this.connected){this.packet(packet)}else{this.sendBuffer.push(packet)}delete this.flags;return this};Socket.prototype.packet=function(packet){packet.nsp=this.nsp;this.io.packet(packet)};Socket.prototype.onopen=function(){debug("transport is open - connecting");if("/"!=this.nsp){this.packet({type:parser.CONNECT})}};Socket.prototype.onclose=function(reason){debug("close (%s)",reason);this.connected=false;this.disconnected=true;delete this.id;this.emit("disconnect",reason)};Socket.prototype.onpacket=function(packet){if(packet.nsp!=this.nsp)return;switch(packet.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit("error",packet.data);break}};Socket.prototype.onevent=function(packet){var args=packet.data||[];debug("emitting event %j",args);if(null!=packet.id){debug("attaching ack callback to event");args.push(this.ack(packet.id))}if(this.connected){emit.apply(this,args)}else{this.receiveBuffer.push(args)}};Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){if(sent)return;sent=true;var args=toArray(arguments);debug("sending ack %j",args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({type:type,id:id,data:args})}};Socket.prototype.onack=function(packet){var ack=this.acks[packet.id];if("function"==typeof ack){debug("calling ack %s with %j",packet.id,packet.data);ack.apply(this,packet.data);delete this.acks[packet.id]}else{debug("bad ack %s",packet.id)}};Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit("connect");this.emitBuffered()};Socket.prototype.emitBuffered=function(){var i;for(i=0;i<this.receiveBuffer.length;i++){emit.apply(this,this.receiveBuffer[i])}this.receiveBuffer=[];for(i=0;i<this.sendBuffer.length;i++){this.packet(this.sendBuffer[i])}this.sendBuffer=[]};Socket.prototype.ondisconnect=function(){debug("server disconnect (%s)",this.nsp);this.destroy();this.onclose("io server disconnect")};Socket.prototype.destroy=function(){if(this.subs){for(var i=0;i<this.subs.length;i++){this.subs[i].destroy()}this.subs=null}this.io.destroy(this)};Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug("performing disconnect (%s)",this.nsp);this.packet({type:parser.DISCONNECT})}this.destroy();if(this.connected){this.onclose("io client disconnect")}return this};Socket.prototype.compress=function(compress){this.flags=this.flags||{};this.flags.compress=compress;return this}},{"./on":33,"component-bind":37,"component-emitter":38,debug:39,"has-binary":41,"socket.io-parser":47,"to-array":51}],35:[function(_dereq_,module,exports){(function(global){var parseuri=_dereq_("parseuri");var debug=_dereq_("debug")("socket.io-client:url");module.exports=url;function url(uri,loc){var obj=uri;var loc=loc||global.location;if(null==uri)uri=loc.protocol+"//"+loc.host;if("string"==typeof uri){if("/"==uri.charAt(0)){if("/"==uri.charAt(1)){uri=loc.protocol+uri}else{uri=loc.host+uri}}if(!/^(https?|wss?):\/\//.test(uri)){debug("protocol-less url %s",uri);if("undefined"!=typeof loc){uri=loc.protocol+"//"+uri}else{uri="https://"+uri}}debug("parse %s",uri);obj=parseuri(uri)}if(!obj.port){if(/^(http|ws)$/.test(obj.protocol)){obj.port="80"}else if(/^(http|ws)s$/.test(obj.protocol)){obj.port="443"}}obj.path=obj.path||"/";var ipv6=obj.host.indexOf(":")!==-1;var host=ipv6?"["+obj.host+"]":obj.host;obj.id=obj.protocol+"://"+host+":"+obj.port;obj.href=obj.protocol+"://"+host+(loc&&loc.port==obj.port?"":":"+obj.port);return obj}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{debug:39,parseuri:45}],36:[function(_dereq_,module,exports){module.exports=Backoff;function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||1e4;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0}Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation}return Math.min(ms,this.max)|0};Backoff.prototype.reset=function(){this.attempts=0};Backoff.prototype.setMin=function(min){this.ms=min};Backoff.prototype.setMax=function(max){this.max=max};Backoff.prototype.setJitter=function(jitter){this.jitter=jitter}},{}],37:[function(_dereq_,module,exports){var slice=[].slice;module.exports=function(obj,fn){if("string"==typeof fn)fn=obj[fn];if("function"!=typeof fn)throw new Error("bind() requires a function");var args=slice.call(arguments,2);return function(){return fn.apply(obj,args.concat(slice.call(arguments)))}}},{}],38:[function(_dereq_,module,exports){module.exports=Emitter;function Emitter(obj){if(obj)return mixin(obj)}function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key]}return obj}Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks["$"+event]=this._callbacks["$"+event]||[]).push(fn);return this};Emitter.prototype.once=function(event,fn){function on(){this.off(event,on);fn.apply(this,arguments)}on.fn=fn;this.on(event,on);return this};Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var callbacks=this._callbacks["$"+event];if(!callbacks)return this;if(1==arguments.length){delete this._callbacks["$"+event];return this}var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break}}return this};Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks["$"+event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args)}}return this};Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks["$"+event]||[]};Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length}},{}],39:[function(_dereq_,module,exports){arguments[4][17][0].apply(exports,arguments)},{"./debug":40,dup:17}],40:[function(_dereq_,module,exports){arguments[4][18][0].apply(exports,arguments)},{dup:18,ms:44}],41:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_("isarray");module.exports=hasBinary;function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true}}}else if(obj&&"object"==typeof obj){if(obj.toJSON&&"function"==typeof obj.toJSON){obj=obj.toJSON()}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true}}}return false}return _hasBinary(data)}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{isarray:43}],42:[function(_dereq_,module,exports){arguments[4][23][0].apply(exports,arguments)},{dup:23}],43:[function(_dereq_,module,exports){arguments[4][24][0].apply(exports,arguments)},{dup:24}],44:[function(_dereq_,module,exports){arguments[4][25][0].apply(exports,arguments)},{dup:25}],45:[function(_dereq_,module,exports){arguments[4][28][0].apply(exports,arguments)},{dup:28}],46:[function(_dereq_,module,exports){(function(global){var isArray=_dereq_("isarray");var isBuf=_dereq_("./is-buffer");exports.deconstructPacket=function(packet){var buffers=[];var packetData=packet.data;function _deconstructPacket(data){if(!data)return data;if(isBuf(data)){var placeholder={_placeholder:true,num:buffers.length};buffers.push(data);return placeholder}else if(isArray(data)){var newData=new Array(data.length);for(var i=0;i<data.length;i++){newData[i]=_deconstructPacket(data[i])}return newData}else if("object"==typeof data&&!(data instanceof Date)){var newData={};for(var key in data){newData[key]=_deconstructPacket(data[key])}return newData}return data}var pack=packet;pack.data=_deconstructPacket(packetData);pack.attachments=buffers.length;return{packet:pack,buffers:buffers}};exports.reconstructPacket=function(packet,buffers){var curPlaceHolder=0;function _reconstructPacket(data){if(data&&data._placeholder){var buf=buffers[data.num];return buf}else if(isArray(data)){for(var i=0;i<data.length;i++){data[i]=_reconstructPacket(data[i])}return data}else if(data&&"object"==typeof data){for(var key in data){data[key]=_reconstructPacket(data[key])}return data}return data}packet.data=_reconstructPacket(packet.data);packet.attachments=undefined;return packet};exports.removeBlobs=function(data,callback){function _removeBlobs(obj,curKey,containingObject){if(!obj)return obj;if(global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){pendingBlobs++;var fileReader=new FileReader;fileReader.onload=function(){if(containingObject){containingObject[curKey]=this.result}else{bloblessData=this.result}if(!--pendingBlobs){callback(bloblessData)}};fileReader.readAsArrayBuffer(obj)}else if(isArray(obj)){for(var i=0;i<obj.length;i++){_removeBlobs(obj[i],i,obj)}}else if(obj&&"object"==typeof obj&&!isBuf(obj)){for(var key in obj){_removeBlobs(obj[key],key,obj)}}}var pendingBlobs=0;var bloblessData=data;_removeBlobs(bloblessData);if(!pendingBlobs){callback(bloblessData)}}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{"./is-buffer":48,isarray:43}],47:[function(_dereq_,module,exports){var debug=_dereq_("debug")("socket.io-parser");var json=_dereq_("json3");var isArray=_dereq_("isarray");var Emitter=_dereq_("component-emitter");var binary=_dereq_("./binary");var isBuf=_dereq_("./is-buffer");exports.protocol=4;exports.types=["CONNECT","DISCONNECT","EVENT","BINARY_EVENT","ACK","BINARY_ACK","ERROR"];exports.CONNECT=0;exports.DISCONNECT=1;exports.EVENT=2;exports.ACK=3;exports.ERROR=4;exports.BINARY_EVENT=5;exports.BINARY_ACK=6;exports.Encoder=Encoder;exports.Decoder=Decoder;function Encoder(){}Encoder.prototype.encode=function(obj,callback){debug("encoding packet %j",obj);if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){encodeAsBinary(obj,callback)}else{var encoding=encodeAsString(obj);callback([encoding])}};function encodeAsString(obj){var str="";var nsp=false;str+=obj.type;if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){str+=obj.attachments;str+="-"}if(obj.nsp&&"/"!=obj.nsp){nsp=true;str+=obj.nsp}if(null!=obj.id){if(nsp){str+=",";nsp=false}str+=obj.id}if(null!=obj.data){if(nsp)str+=",";str+=json.stringify(obj.data)}debug("encoded %j as %s",obj,str);return str}function encodeAsBinary(obj,callback){function writeEncoding(bloblessData){var deconstruction=binary.deconstructPacket(bloblessData);var pack=encodeAsString(deconstruction.packet);var buffers=deconstruction.buffers;buffers.unshift(pack);callback(buffers)}binary.removeBlobs(obj,writeEncoding)}function Decoder(){this.reconstructor=null}Emitter(Decoder.prototype);Decoder.prototype.add=function(obj){var packet;if("string"==typeof obj){packet=decodeString(obj);if(exports.BINARY_EVENT==packet.type||exports.BINARY_ACK==packet.type){this.reconstructor=new BinaryReconstructor(packet);if(this.reconstructor.reconPack.attachments===0){this.emit("decoded",packet)}}else{this.emit("decoded",packet)}}else if(isBuf(obj)||obj.base64){if(!this.reconstructor){throw new Error("got binary data when not reconstructing a packet")}else{packet=this.reconstructor.takeBinaryData(obj);if(packet){this.reconstructor=null;this.emit("decoded",packet)}}}else{throw new Error("Unknown type: "+obj)}};function decodeString(str){var p={};var i=0;p.type=Number(str.charAt(0));if(null==exports.types[p.type])return error();if(exports.BINARY_EVENT==p.type||exports.BINARY_ACK==p.type){var buf="";while(str.charAt(++i)!="-"){buf+=str.charAt(i);if(i==str.length)break}if(buf!=Number(buf)||str.charAt(i)!="-"){throw new Error("Illegal attachments")}p.attachments=Number(buf)}if("/"==str.charAt(i+1)){p.nsp="";while(++i){var c=str.charAt(i);if(","==c)break;p.nsp+=c;if(i==str.length)break}}else{p.nsp="/"}var next=str.charAt(i+1);if(""!==next&&Number(next)==next){p.id="";while(++i){var c=str.charAt(i);if(null==c||Number(c)!=c){--i;break}p.id+=str.charAt(i);if(i==str.length)break}p.id=Number(p.id)}if(str.charAt(++i)){try{p.data=json.parse(str.substr(i))}catch(e){return error()}}debug("decoded %s as %j",str,p);return p}Decoder.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction()}};function BinaryReconstructor(packet){this.reconPack=packet;this.buffers=[]}BinaryReconstructor.prototype.takeBinaryData=function(binData){this.buffers.push(binData);if(this.buffers.length==this.reconPack.attachments){var packet=binary.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return packet}return null};BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[]};function error(data){return{type:exports.ERROR,data:"parser error"}}},{"./binary":46,"./is-buffer":48,"component-emitter":49,debug:39,isarray:43,json3:50}],48:[function(_dereq_,module,exports){(function(global){module.exports=isBuf;function isBuf(obj){return global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer}}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{}],49:[function(_dereq_,module,exports){arguments[4][15][0].apply(exports,arguments)},{dup:15}],50:[function(_dereq_,module,exports){(function(global){(function(){var isLoader=typeof define==="function"&&define.amd;var objectTypes={"function":true,object:true};var freeExports=objectTypes[typeof exports]&&exports&&!exports.nodeType&&exports;var root=objectTypes[typeof window]&&window||this,freeGlobal=freeExports&&objectTypes[typeof module]&&module&&!module.nodeType&&typeof global=="object"&&global;if(freeGlobal&&(freeGlobal["global"]===freeGlobal||freeGlobal["window"]===freeGlobal||freeGlobal["self"]===freeGlobal)){root=freeGlobal}function runInContext(context,exports){context||(context=root["Object"]());exports||(exports=root["Object"]());var Number=context["Number"]||root["Number"],String=context["String"]||root["String"],Object=context["Object"]||root["Object"],Date=context["Date"]||root["Date"],SyntaxError=context["SyntaxError"]||root["SyntaxError"],TypeError=context["TypeError"]||root["TypeError"],Math=context["Math"]||root["Math"],nativeJSON=context["JSON"]||root["JSON"];if(typeof nativeJSON=="object"&&nativeJSON){exports.stringify=nativeJSON.stringify;exports.parse=nativeJSON.parse}var objectProto=Object.prototype,getClass=objectProto.toString,isProperty,forEach,undef;var isExtended=new Date(-0xc782b5b800cec);try{isExtended=isExtended.getUTCFullYear()==-109252&&isExtended.getUTCMonth()===0&&isExtended.getUTCDate()===1&&isExtended.getUTCHours()==10&&isExtended.getUTCMinutes()==37&&isExtended.getUTCSeconds()==6&&isExtended.getUTCMilliseconds()==708}catch(exception){}function has(name){if(has[name]!==undef){return has[name]}var isSupported;if(name=="bug-string-char-index"){isSupported="a"[0]!="a"}else if(name=="json"){isSupported=has("json-stringify")&&has("json-parse")}else{var value,serialized='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if(name=="json-stringify"){var stringify=exports.stringify,stringifySupported=typeof stringify=="function"&&isExtended;if(stringifySupported){(value=function(){return 1}).toJSON=value;try{stringifySupported=stringify(0)==="0"&&stringify(new Number)==="0"&&stringify(new String)=='""'&&stringify(getClass)===undef&&stringify(undef)===undef&&stringify()===undef&&stringify(value)==="1"&&stringify([value])=="[1]"&&stringify([undef])=="[null]"&&stringify(null)=="null"&&stringify([undef,getClass,null])=="[null,null,null]"&&stringify({a:[value,true,false,null,"\x00\b\n\f\r	"]})==serialized&&stringify(null,value)==="1"&&stringify([1,2],null,1)=="[\n 1,\n 2\n]"&&stringify(new Date(-864e13))=='"-271821-04-20T00:00:00.000Z"'&&stringify(new Date(864e13))=='"+275760-09-13T00:00:00.000Z"'&&stringify(new Date(-621987552e5))=='"-000001-01-01T00:00:00.000Z"'&&stringify(new Date(-1))=='"1969-12-31T23:59:59.999Z"'}catch(exception){stringifySupported=false}}isSupported=stringifySupported}if(name=="json-parse"){var parse=exports.parse;if(typeof parse=="function"){try{if(parse("0")===0&&!parse(false)){value=parse(serialized);var parseSupported=value["a"].length==5&&value["a"][0]===1;if(parseSupported){try{parseSupported=!parse('"	"')}catch(exception){}if(parseSupported){try{parseSupported=parse("01")!==1}catch(exception){}}if(parseSupported){try{parseSupported=parse("1.")!==1}catch(exception){}}}}}catch(exception){parseSupported=false}}isSupported=parseSupported}}return has[name]=!!isSupported}if(!has("json")){var functionClass="[object Function]",dateClass="[object Date]",numberClass="[object Number]",stringClass="[object String]",arrayClass="[object Array]",booleanClass="[object Boolean]";var charIndexBuggy=has("bug-string-char-index");if(!isExtended){var floor=Math.floor;var Months=[0,31,59,90,120,151,181,212,243,273,304,334];var getDay=function(year,month){return Months[month]+365*(year-1970)+floor((year-1969+(month=+(month>1)))/4)-floor((year-1901+month)/100)+floor((year-1601+month)/400)}}if(!(isProperty=objectProto.hasOwnProperty)){isProperty=function(property){var members={},constructor;if((members.__proto__=null,members.__proto__={toString:1},members).toString!=getClass){isProperty=function(property){var original=this.__proto__,result=property in(this.__proto__=null,this);this.__proto__=original;return result}}else{constructor=members.constructor;isProperty=function(property){var parent=(this.constructor||constructor).prototype;return property in this&&!(property in parent&&this[property]===parent[property])}}members=null;return isProperty.call(this,property)}}forEach=function(object,callback){var size=0,Properties,members,property;(Properties=function(){this.valueOf=0}).prototype.valueOf=0;members=new Properties;for(property in members){if(isProperty.call(members,property)){size++}}Properties=members=null;if(!size){members=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"];forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,length;var hasProperty=!isFunction&&typeof object.constructor!="function"&&objectTypes[typeof object.hasOwnProperty]&&object.hasOwnProperty||isProperty;for(property in object){if(!(isFunction&&property=="prototype")&&hasProperty.call(object,property)){callback(property)}}for(length=members.length;property=members[--length];hasProperty.call(object,property)&&callback(property));}}else if(size==2){forEach=function(object,callback){var members={},isFunction=getClass.call(object)==functionClass,property;for(property in object){if(!(isFunction&&property=="prototype")&&!isProperty.call(members,property)&&(members[property]=1)&&isProperty.call(object,property)){callback(property)}}}}else{forEach=function(object,callback){var isFunction=getClass.call(object)==functionClass,property,isConstructor;for(property in object){if(!(isFunction&&property=="prototype")&&isProperty.call(object,property)&&!(isConstructor=property==="constructor")){callback(property)}}if(isConstructor||isProperty.call(object,property="constructor")){callback(property)}}}return forEach(object,callback)};if(!has("json-stringify")){var Escapes={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"};var leadingZeroes="000000";var toPaddedString=function(width,value){return(leadingZeroes+(value||0)).slice(-width)};var unicodePrefix="\\u00";var quote=function(value){var result='"',index=0,length=value.length,useCharIndex=!charIndexBuggy||length>10;var symbols=useCharIndex&&(charIndexBuggy?value.split(""):value);for(;index<length;index++){var charCode=value.charCodeAt(index);switch(charCode){case 8:case 9:case 10:case 12:case 13:case 34:case 92:result+=Escapes[charCode];break;default:if(charCode<32){result+=unicodePrefix+toPaddedString(2,charCode.toString(16));break}result+=useCharIndex?symbols[index]:value.charAt(index)}}return result+'"'};var serialize=function(property,object,callback,properties,whitespace,indentation,stack){var value,className,year,month,date,time,hours,minutes,seconds,milliseconds,results,element,index,length,prefix,result;try{value=object[property]}catch(exception){}if(typeof value=="object"&&value){className=getClass.call(value);if(className==dateClass&&!isProperty.call(value,"toJSON")){if(value>-1/0&&value<1/0){if(getDay){date=floor(value/864e5);for(year=floor(date/365.2425)+1970-1;getDay(year+1,0)<=date;year++);for(month=floor((date-getDay(year,0))/30.42);getDay(year,month+1)<=date;month++);date=1+date-getDay(year,month);time=(value%864e5+864e5)%864e5;hours=floor(time/36e5)%24;minutes=floor(time/6e4)%60;seconds=floor(time/1e3)%60;milliseconds=time%1e3}else{year=value.getUTCFullYear();month=value.getUTCMonth();date=value.getUTCDate();hours=value.getUTCHours();minutes=value.getUTCMinutes();seconds=value.getUTCSeconds();milliseconds=value.getUTCMilliseconds()}value=(year<=0||year>=1e4?(year<0?"-":"+")+toPaddedString(6,year<0?-year:year):toPaddedString(4,year))+"-"+toPaddedString(2,month+1)+"-"+toPaddedString(2,date)+"T"+toPaddedString(2,hours)+":"+toPaddedString(2,minutes)+":"+toPaddedString(2,seconds)+"."+toPaddedString(3,milliseconds)+"Z"}else{value=null}}else if(typeof value.toJSON=="function"&&(className!=numberClass&&className!=stringClass&&className!=arrayClass||isProperty.call(value,"toJSON"))){value=value.toJSON(property)}}if(callback){value=callback.call(object,property,value)}if(value===null){return"null"}className=getClass.call(value);if(className==booleanClass){return""+value}else if(className==numberClass){return value>-1/0&&value<1/0?""+value:"null"}else if(className==stringClass){return quote(""+value)}if(typeof value=="object"){for(length=stack.length;length--;){if(stack[length]===value){throw TypeError()}}stack.push(value);results=[];prefix=indentation;indentation+=whitespace;if(className==arrayClass){for(index=0,length=value.length;index<length;index++){element=serialize(index,value,callback,properties,whitespace,indentation,stack);results.push(element===undef?"null":element)}result=results.length?whitespace?"[\n"+indentation+results.join(",\n"+indentation)+"\n"+prefix+"]":"["+results.join(",")+"]":"[]"}else{forEach(properties||value,function(property){var element=serialize(property,value,callback,properties,whitespace,indentation,stack);if(element!==undef){results.push(quote(property)+":"+(whitespace?" ":"")+element)}});result=results.length?whitespace?"{\n"+indentation+results.join(",\n"+indentation)+"\n"+prefix+"}":"{"+results.join(",")+"}":"{}"}stack.pop();return result}};exports.stringify=function(source,filter,width){var whitespace,callback,properties,className;if(objectTypes[typeof filter]&&filter){if((className=getClass.call(filter))==functionClass){callback=filter}else if(className==arrayClass){properties={};for(var index=0,length=filter.length,value;index<length;value=filter[index++],(className=getClass.call(value),className==stringClass||className==numberClass)&&(properties[value]=1));}}if(width){if((className=getClass.call(width))==numberClass){if((width-=width%1)>0){for(whitespace="",width>10&&(width=10);whitespace.length<width;whitespace+=" ");}}else if(className==stringClass){whitespace=width.length<=10?width:width.slice(0,10)}}return serialize("",(value={},value[""]=source,value),callback,properties,whitespace,"",[])}}if(!has("json-parse")){var fromCharCode=String.fromCharCode;var Unescapes={92:"\\",34:'"',47:"/",98:"\b",116:"	",110:"\n",102:"\f",114:"\r"};var Index,Source;var abort=function(){Index=Source=null;throw SyntaxError()};var lex=function(){var source=Source,length=source.length,value,begin,position,isSigned,charCode;while(Index<length){charCode=source.charCodeAt(Index);switch(charCode){case 9:case 10:case 13:case 32:Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:value=charIndexBuggy?source.charAt(Index):source[Index];Index++;return value;case 34:for(value="@",Index++;Index<length;){charCode=source.charCodeAt(Index);if(charCode<32){abort()}else if(charCode==92){charCode=source.charCodeAt(++Index);switch(charCode){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:value+=Unescapes[charCode];Index++;break;case 117:begin=++Index;for(position=Index+4;Index<position;Index++){charCode=source.charCodeAt(Index);if(!(charCode>=48&&charCode<=57||charCode>=97&&charCode<=102||charCode>=65&&charCode<=70)){abort()}}value+=fromCharCode("0x"+source.slice(begin,Index));break;default:abort()}}else{if(charCode==34){break}charCode=source.charCodeAt(Index);begin=Index;while(charCode>=32&&charCode!=92&&charCode!=34){charCode=source.charCodeAt(++Index)}value+=source.slice(begin,Index)}}if(source.charCodeAt(Index)==34){Index++;return value}abort();default:begin=Index;if(charCode==45){isSigned=true;charCode=source.charCodeAt(++Index)}if(charCode>=48&&charCode<=57){if(charCode==48&&(charCode=source.charCodeAt(Index+1),charCode>=48&&charCode<=57)){abort()}isSigned=false;for(;Index<length&&(charCode=source.charCodeAt(Index),charCode>=48&&charCode<=57);Index++);if(source.charCodeAt(Index)==46){position=++Index;for(;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}charCode=source.charCodeAt(Index);if(charCode==101||charCode==69){charCode=source.charCodeAt(++Index);if(charCode==43||charCode==45){Index++}for(position=Index;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++);if(position==Index){abort()}Index=position}return+source.slice(begin,Index)}if(isSigned){abort()}if(source.slice(Index,Index+4)=="true"){Index+=4;return true}else if(source.slice(Index,Index+5)=="false"){Index+=5;return false}else if(source.slice(Index,Index+4)=="null"){Index+=4;return null}abort()}}return"$"};var get=function(value){var results,hasMembers;if(value=="$"){abort()}if(typeof value=="string"){if((charIndexBuggy?value.charAt(0):value[0])=="@"){return value.slice(1)}if(value=="["){results=[];for(;;hasMembers||(hasMembers=true)){value=lex();if(value=="]"){break}if(hasMembers){if(value==","){value=lex();if(value=="]"){abort()}}else{abort()}}if(value==","){abort()}results.push(get(value))}return results}else if(value=="{"){results={};for(;;hasMembers||(hasMembers=true)){value=lex();if(value=="}"){break}if(hasMembers){if(value==","){value=lex();if(value=="}"){abort()}}else{abort()}}if(value==","||typeof value!="string"||(charIndexBuggy?value.charAt(0):value[0])!="@"||lex()!=":"){abort()}results[value.slice(1)]=get(lex())
}return results}abort()}return value};var update=function(source,property,callback){var element=walk(source,property,callback);if(element===undef){delete source[property]}else{source[property]=element}};var walk=function(source,property,callback){var value=source[property],length;if(typeof value=="object"&&value){if(getClass.call(value)==arrayClass){for(length=value.length;length--;){update(value,length,callback)}}else{forEach(value,function(property){update(value,property,callback)})}}return callback.call(source,property,value)};exports.parse=function(source,callback){var result,value;Index=0;Source=""+source;result=get(lex());if(lex()!="$"){abort()}Index=Source=null;return callback&&getClass.call(callback)==functionClass?walk((value={},value[""]=result,value),"",callback):result}}}exports["runInContext"]=runInContext;return exports}if(freeExports&&!isLoader){runInContext(root,freeExports)}else{var nativeJSON=root.JSON,previousJSON=root["JSON3"],isRestored=false;var JSON3=runInContext(root,root["JSON3"]={noConflict:function(){if(!isRestored){isRestored=true;root.JSON=nativeJSON;root["JSON3"]=previousJSON;nativeJSON=previousJSON=null}return JSON3}});root.JSON={parse:JSON3.parse,stringify:JSON3.stringify}}if(isLoader){define(function(){return JSON3})}}).call(this)}).call(this,typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{})},{}],51:[function(_dereq_,module,exports){module.exports=toArray;function toArray(list,index){var array=[];index=index||0;for(var i=index||0;i<list.length;i++){array[i-index]=list[i]}return array}},{}]},{},[31])(31)});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"telemetry-helper":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.

var clientSocket;
var serviceToPluginMap;
var pendingTelemetryEvents = [];

function init(socket) {
    clientSocket = socket;
    trySendPendingEvents();
}

function registerPluginServices(pluginServices) {
    serviceToPluginMap = pluginServices;
    trySendPendingEvents();
}

function trySendPendingEvents() {
    if (!clientSocket) {
        return;
    }

    var unsent = [];

    pendingTelemetryEvents.forEach(function (eventData) {
        if (mustMapServiceToPlugin(eventData) && !serviceToPluginMap) {
            unsent.push(eventData);
        } else {
            sendClientTelemetry(eventData);
        }
    });
    
    pendingTelemetryEvents = unsent;
}

function mustMapServiceToPlugin(eventData) {
    return !!eventData.props.service && !eventData.plugin;
}

function sendClientTelemetry(event, props, piiProps) {
    var eventData = {
        event: event,
        props: props,
        piiProps: piiProps
    };

    if (!clientSocket) {
        pendingTelemetryEvents.push(eventData);
        return;
    }

    if (mustMapServiceToPlugin(eventData)) {
        if (!serviceToPluginMap) {
            pendingTelemetryEvents.push(eventData);
            return;
        }

        eventData.props.plugin = serviceToPluginMap[eventData.props.service] || '_unknown';
    }

    clientSocket.emit('telemetry', eventData);
}

function sendUITelemetry(uiControlData) {
    sendClientTelemetry('plugin-ui-interaction', uiControlData);
}

module.exports.init = init;
module.exports.registerPluginServices = registerPluginServices;
module.exports.sendClientTelemetry = sendClientTelemetry;
module.exports.sendUITelemetry = sendUITelemetry;

},{}],"utils":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

var self,
    exception = require('exception');

self = module.exports = {
    validateArgumentType: function (arg, argType, customExceptionType, customExceptionMessage, customExceptionObject) {
        var invalidArg = false,
            msg;

        switch (argType) {
            case 'array':
                if (!(arg instanceof Array)) {
                    invalidArg = true;
                }
                break;
            case 'date':
                if (!(arg instanceof Date)) {
                    invalidArg = true;
                }
                break;
            case 'integer':
                if (typeof arg === 'number') {
                    if (arg !== Math.floor(arg)) {
                        invalidArg = true;
                    }
                }
                else {
                    invalidArg = true;
                }
                break;
            default:
                if (typeof arg !== argType) {
                    invalidArg = true;
                }
                break;
        }

        if (invalidArg) {
            msg = customExceptionMessage + ('\n\nInvalid Argument type. argument: ' + arg + ' ==> was expected to be of type: ' + argType);
            exception.raise((customExceptionType || exception.types.ArgumentType), msg, customExceptionObject);
        }
    },

    forEach: function (obj, action, scope) {
        if (obj instanceof Array) {
            return obj.forEach(action, scope);
        } else {
            self.map(obj, action, scope);
        }
    },

    map: function (obj, func, scope) {
        var i,
            returnVal = null,
            result    = [];

        //MozHack for NamedNodeMap
        /* jshint ignore:start */
        if (window.MozNamedAttrMap) {
            NamedNodeMap = window.MozNamedAttrMap; // eslint-disable-line no-global-assign
        }
        /* jshint ignore:end */

        if (obj instanceof Array) {
            return obj.map(func, scope);
        } else if (obj instanceof NamedNodeMap) {
            for (i = 0; i < obj.length; i++) {
                returnVal = func.apply(scope, [obj[i], i]);
                result.push(returnVal);
            }
        } else {
            for (i in obj) {
                if (obj.hasOwnProperty(i)) {
                    returnVal = func.apply(scope, [obj[i], i]);
                    result.push(returnVal);
                }
            }
        }

        return result;
    },

    bindAutoSaveEvent: function (selector, saveCallback) {
        var oldSetTimeoutId;
        var node = document.querySelector(selector);

        if (!node) {
            console.log('AUTO SAVE: REINSTATE ONCE WE HAVE ' + selector + ' ELEMENT');
            return;
        }

        node.addEventListener('keyup', function (event) {
            if (event.keyCode !== 9) {
                clearTimeout(oldSetTimeoutId);
                oldSetTimeoutId = window.setTimeout(function () {
                    saveCallback();
                }, 500);
            }
        });
    },

    mixin: function (mixin, to) {
        for (var prop in mixin) {
            if (Object.hasOwnProperty.call(mixin, prop)) {
                to[prop] = mixin[prop];
            }
        }
    },

    copy: function (obj) {
        var i,
            newObj = Array.isArray(obj) ? [] : {};

        if (typeof obj === 'number' ||
            typeof obj === 'string' ||
            typeof obj === 'boolean' ||
            obj === null ||
            obj === undefined) {
            return obj;
        }

        if (obj instanceof Date) {
            return new Date(obj);
        }

        if (obj instanceof RegExp) {
            return new RegExp(obj);
        }

        for (i in obj) {
            if (obj.hasOwnProperty(i)) {
                if (obj[i] && typeof obj[i] === 'object') {
                    if (obj[i] instanceof Date) {
                        newObj[i] = obj[i];
                    }
                    else {
                        newObj[i] = self.copy(obj[i]);
                    }
                }
                else {
                    newObj[i] = obj[i];
                }
            }
        }

        return newObj;
    },

    navHelper: function () {
        return {
            Directions: {
                N: 'N',
                NE: 'NE',
                E: 'E',
                SE: 'SE',
                S: 'S',
                SW: 'SW',
                W: 'W',
                NW: 'NW'
            },

            /**
             * Get the direction according to the heading value.
             * @param {number} heading A number from 0 to 359.99.
             * @return {string} direction It can be one of the following: N, NE, E, SE, S, SW, W or NW.
             */
            getDirection: function (heading) {
                if (heading > 337.5 || (heading >= 0 && heading <= 22.5)) {
                    return this.Directions.N;
                }

                if (heading > 22.5 && heading <= 67.5) {
                    return this.Directions.NE;
                }

                if (heading > 67.5 && heading <= 112.5) {
                    return this.Directions.E;
                }

                if (heading > 112.5 && heading <= 157.5) {
                    return this.Directions.SE;
                }

                if (heading > 157.5 && heading <= 202.5) {
                    return this.Directions.S;
                }

                if (heading > 202.5 && heading <= 247.5) {
                    return this.Directions.SW;
                }

                if (heading > 247.5 && heading <= 292.5) {
                    return this.Directions.W;
                }

                // heading > 292.5 && heading <= 337.5
                return this.Directions.NW;
            },

            getHeading: function (lat1, lon1, lat2, lon2) {
                var dLon  = this.rad(lon2 - lon1),
                    llat1 = this.rad(lat1),
                    llat2 = this.rad(lat2),
                    y     = Math.sin(dLon) * Math.cos(llat2),
                    x     = Math.cos(llat1) * Math.sin(llat2) - Math.sin(llat1) * Math.cos(llat2) * Math.cos(dLon);
                return (this.deg(Math.atan2(y, x)) + 360) % 360;
            },

            getDistance: function (lat1, lon1, lat2, lon2) {
                var dLat = this.rad(lat2 - lat1),
                    dLon = this.rad(lon2 - lon1),
                    a    = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.rad(lat1)) * Math.cos(this.rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2),
                    c    = 2 * Math.asin(Math.sqrt(a)),
                    d    = 6378100 * c;
                return d;
            },

            simulateTravel: function (lat, lon, hdg, dist) {
                var lat1            = this.rad(lat),
                    lon1            = this.rad(lon),
                    brng            = this.rad(hdg),
                    angularDistance = dist / 6378100,
                    lat2            = Math.asin(Math.sin(lat1) * Math.cos(angularDistance) + Math.cos(lat1) * Math.sin(angularDistance) * Math.cos(brng)),
                    lon2            = lon1 + Math.atan2(Math.sin(brng) * Math.sin(angularDistance) * Math.cos(lat1), Math.cos(angularDistance) - Math.sin(lat1) * Math.sin(lat2));
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // Normalize to -180..+180

                return {
                    latitude: this.deg(lat2),
                    longitude: this.deg(lon2)
                };
            },

            deg: function (num) {
                return num * 180 / Math.PI;
            },

            rad: function (num) {
                return num * Math.PI / 180;
            }
        };
    },

    createUUID: function () {
        return createUUIDPart(4) + '-' +
            createUUIDPart(2) + '-' +
            createUUIDPart(2) + '-' +
            createUUIDPart(2) + '-' +
            createUUIDPart(6);
    },

    typeName: function (val) {
        return Object.prototype.toString.call(val).slice(8, -1);
    },

    parseUrl: function (url) {
        var a = document.createElement('a');

        a.href = url;

        return {
            href: a.href,
            host: a.host,
            origin: a.origin,
            port: a.port,
            protocol: a.protocol,
            search: a.search
        };
    },

    isSameOriginRequest: function (url) {
        url = this.parseUrl(url);

        if (url.port !== location.port) {
            return false;
        }

        var sameOrigin = url.href.match(location.origin.replace(/www\./, '')) ||
            !url.href.match(/^https?:\/\/|^file:\/\//);

        return !!sameOrigin;
    },

    isNumber: function (value) {
        var type = typeof value;

        return (type === 'number' || type === 'string') && !isNaN(value - parseFloat(value));
    }
};

function createUUIDPart(length) {
    var uuidpart = '';
    for (var i = 0; i < length; i++) {
        var uuidchar = parseInt((Math.random() * 256), 10).toString(16);
        if (uuidchar.length == 1) {
            uuidchar = '0' + uuidchar;
        }
        uuidpart += uuidchar;
    }
    return uuidpart;
}

},{"exception":"exception"}],"webcomponents.min":[function(require,module,exports){
/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
// @version 0.7.20
!function(){window.WebComponents=window.WebComponents||{flags:{}};var e="webcomponents.js",t=document.querySelector('script[src*="'+e+'"]'),n={};if(!n.noOpts){if(location.search.slice(1).split("&").forEach(function(e){var t,r=e.split("=");r[0]&&(t=r[0].match(/wc-(.+)/))&&(n[t[1]]=r[1]||!0)}),t)for(var r,o=0;r=t.attributes[o];o++)"src"!==r.name&&(n[r.name]=r.value||!0);if(n.log&&n.log.split){var i=n.log.split(",");n.log={},i.forEach(function(e){n.log[e]=!0})}else n.log={}}n.shadow=n.shadow||n.shadowdom||n.polyfill,"native"===n.shadow?n.shadow=!1:n.shadow=n.shadow||!HTMLElement.prototype.createShadowRoot,n.register&&(window.CustomElements=window.CustomElements||{flags:{}},window.CustomElements.flags.register=n.register),WebComponents.flags=n}(),WebComponents.flags.shadow&&("undefined"==typeof WeakMap&&!function(){var e=Object.defineProperty,t=Date.now()%1e9,n=function(){this.name="__st"+(1e9*Math.random()>>>0)+(t++ +"__")};n.prototype={set:function(t,n){var r=t[this.name];return r&&r[0]===t?r[1]=n:e(t,this.name,{value:[t,n],writable:!0}),this},get:function(e){var t;return(t=e[this.name])&&t[0]===e?t[1]:void 0},"delete":function(e){var t=e[this.name];return t&&t[0]===e?(t[0]=t[1]=void 0,!0):!1},has:function(e){var t=e[this.name];return t?t[0]===e:!1}},window.WeakMap=n}(),window.ShadowDOMPolyfill={},function(e){"use strict";function t(){if("undefined"!=typeof chrome&&chrome.app&&chrome.app.runtime)return!1;if(navigator.getDeviceStorage)return!1;try{var e=new Function("return true;");return e()}catch(t){return!1}}function n(e){if(!e)throw new Error("Assertion failed")}function r(e,t){for(var n=W(t),r=0;r<n.length;r++){var o=n[r];A(e,o,F(t,o))}return e}function o(e,t){for(var n=W(t),r=0;r<n.length;r++){var o=n[r];switch(o){case"arguments":case"caller":case"length":case"name":case"prototype":case"toString":continue}A(e,o,F(t,o))}return e}function i(e,t){for(var n=0;n<t.length;n++)if(t[n]in e)return t[n]}function a(e,t,n){U.value=n,A(e,t,U)}function s(e,t){var n=e.__proto__||Object.getPrototypeOf(e);if(q)try{W(n)}catch(r){n=n.__proto__}var o=R.get(n);if(o)return o;var i=s(n),a=E(i);return g(n,a,t),a}function c(e,t){w(e,t,!0)}function l(e,t){w(t,e,!1)}function u(e){return/^on[a-z]+$/.test(e)}function d(e){return/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(e)}function p(e){return k&&d(e)?new Function("return this.__impl4cf1e782hg__."+e):function(){return this.__impl4cf1e782hg__[e]}}function h(e){return k&&d(e)?new Function("v","this.__impl4cf1e782hg__."+e+" = v"):function(t){this.__impl4cf1e782hg__[e]=t}}function f(e){return k&&d(e)?new Function("return this.__impl4cf1e782hg__."+e+".apply(this.__impl4cf1e782hg__, arguments)"):function(){return this.__impl4cf1e782hg__[e].apply(this.__impl4cf1e782hg__,arguments)}}function m(e,t){try{return Object.getOwnPropertyDescriptor(e,t)}catch(n){return B}}function w(t,n,r,o){for(var i=W(t),a=0;a<i.length;a++){var s=i[a];if("polymerBlackList_"!==s&&!(s in n||t.polymerBlackList_&&t.polymerBlackList_[s])){q&&t.__lookupGetter__(s);var c,l,d=m(t,s);if("function"!=typeof d.value){var w=u(s);c=w?e.getEventHandlerGetter(s):p(s),(d.writable||d.set||V)&&(l=w?e.getEventHandlerSetter(s):h(s));var v=V||d.configurable;A(n,s,{get:c,set:l,configurable:v,enumerable:d.enumerable})}else r&&(n[s]=f(s))}}}function v(e,t,n){if(null!=e){var r=e.prototype;g(r,t,n),o(t,e)}}function g(e,t,r){var o=t.prototype;n(void 0===R.get(e)),R.set(e,t),I.set(o,e),c(e,o),r&&l(o,r),a(o,"constructor",t),t.prototype=o}function b(e,t){return R.get(t.prototype)===e}function y(e){var t=Object.getPrototypeOf(e),n=s(t),r=E(n);return g(t,r,e),r}function E(e){function t(t){e.call(this,t)}var n=Object.create(e.prototype);return n.constructor=t,t.prototype=n,t}function _(e){return e&&e.__impl4cf1e782hg__}function S(e){return!_(e)}function T(e){if(null===e)return null;n(S(e));var t=e.__wrapper8e3dd93a60__;return null!=t?t:e.__wrapper8e3dd93a60__=new(s(e,e))(e)}function M(e){return null===e?null:(n(_(e)),e.__impl4cf1e782hg__)}function O(e){return e.__impl4cf1e782hg__}function L(e,t){t.__impl4cf1e782hg__=e,e.__wrapper8e3dd93a60__=t}function N(e){return e&&_(e)?M(e):e}function C(e){return e&&!_(e)?T(e):e}function j(e,t){null!==t&&(n(S(e)),n(void 0===t||_(t)),e.__wrapper8e3dd93a60__=t)}function D(e,t,n){G.get=n,A(e.prototype,t,G)}function H(e,t){D(e,t,function(){return T(this.__impl4cf1e782hg__[t])})}function x(e,t){e.forEach(function(e){t.forEach(function(t){e.prototype[t]=function(){var e=C(this);return e[t].apply(e,arguments)}})})}var R=new WeakMap,I=new WeakMap,P=Object.create(null),k=t(),A=Object.defineProperty,W=Object.getOwnPropertyNames,F=Object.getOwnPropertyDescriptor,U={value:void 0,configurable:!0,enumerable:!1,writable:!0};W(window);var q=/Firefox/.test(navigator.userAgent),B={get:function(){},set:function(e){},configurable:!0,enumerable:!0},V=function(){var e=Object.getOwnPropertyDescriptor(Node.prototype,"nodeType");return e&&!e.get&&!e.set}(),G={get:void 0,configurable:!0,enumerable:!0};e.addForwardingProperties=c,e.assert=n,e.constructorTable=R,e.defineGetter=D,e.defineWrapGetter=H,e.forwardMethodsToWrapper=x,e.isIdentifierName=d,e.isWrapper=_,e.isWrapperFor=b,e.mixin=r,e.nativePrototypeTable=I,e.oneOf=i,e.registerObject=y,e.registerWrapper=v,e.rewrap=j,e.setWrapper=L,e.unsafeUnwrap=O,e.unwrap=M,e.unwrapIfNeeded=N,e.wrap=T,e.wrapIfNeeded=C,e.wrappers=P}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e,t,n){return{index:e,removed:t,addedCount:n}}function n(){}var r=0,o=1,i=2,a=3;n.prototype={calcEditDistances:function(e,t,n,r,o,i){for(var a=i-o+1,s=n-t+1,c=new Array(a),l=0;a>l;l++)c[l]=new Array(s),c[l][0]=l;for(var u=0;s>u;u++)c[0][u]=u;for(var l=1;a>l;l++)for(var u=1;s>u;u++)if(this.equals(e[t+u-1],r[o+l-1]))c[l][u]=c[l-1][u-1];else{var d=c[l-1][u]+1,p=c[l][u-1]+1;c[l][u]=p>d?d:p}return c},spliceOperationsFromEditDistances:function(e){for(var t=e.length-1,n=e[0].length-1,s=e[t][n],c=[];t>0||n>0;)if(0!=t)if(0!=n){var l,u=e[t-1][n-1],d=e[t-1][n],p=e[t][n-1];l=p>d?u>d?d:u:u>p?p:u,l==u?(u==s?c.push(r):(c.push(o),s=u),t--,n--):l==d?(c.push(a),t--,s=d):(c.push(i),n--,s=p)}else c.push(a),t--;else c.push(i),n--;return c.reverse(),c},calcSplices:function(e,n,s,c,l,u){var d=0,p=0,h=Math.min(s-n,u-l);if(0==n&&0==l&&(d=this.sharedPrefix(e,c,h)),s==e.length&&u==c.length&&(p=this.sharedSuffix(e,c,h-d)),n+=d,l+=d,s-=p,u-=p,s-n==0&&u-l==0)return[];if(n==s){for(var f=t(n,[],0);u>l;)f.removed.push(c[l++]);return[f]}if(l==u)return[t(n,[],s-n)];for(var m=this.spliceOperationsFromEditDistances(this.calcEditDistances(e,n,s,c,l,u)),f=void 0,w=[],v=n,g=l,b=0;b<m.length;b++)switch(m[b]){case r:f&&(w.push(f),f=void 0),v++,g++;break;case o:f||(f=t(v,[],0)),f.addedCount++,v++,f.removed.push(c[g]),g++;break;case i:f||(f=t(v,[],0)),f.addedCount++,v++;break;case a:f||(f=t(v,[],0)),f.removed.push(c[g]),g++}return f&&w.push(f),w},sharedPrefix:function(e,t,n){for(var r=0;n>r;r++)if(!this.equals(e[r],t[r]))return r;return n},sharedSuffix:function(e,t,n){for(var r=e.length,o=t.length,i=0;n>i&&this.equals(e[--r],t[--o]);)i++;return i},calculateSplices:function(e,t){return this.calcSplices(e,0,e.length,t,0,t.length)},equals:function(e,t){return e===t}},e.ArraySplice=n}(window.ShadowDOMPolyfill),function(e){"use strict";function t(){a=!1;var e=i.slice(0);i=[];for(var t=0;t<e.length;t++)(0,e[t])()}function n(e){i.push(e),a||(a=!0,r(t,0))}var r,o=window.MutationObserver,i=[],a=!1;if(o){var s=1,c=new o(t),l=document.createTextNode(s);c.observe(l,{characterData:!0}),r=function(){s=(s+1)%2,l.data=s}}else r=window.setTimeout;e.setEndOfMicrotask=n}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){e.scheduled_||(e.scheduled_=!0,f.push(e),m||(u(n),m=!0))}function n(){for(m=!1;f.length;){var e=f;f=[],e.sort(function(e,t){return e.uid_-t.uid_});for(var t=0;t<e.length;t++){var n=e[t];n.scheduled_=!1;var r=n.takeRecords();i(n),r.length&&n.callback_(r,n)}}}function r(e,t){this.type=e,this.target=t,this.addedNodes=new p.NodeList,this.removedNodes=new p.NodeList,this.previousSibling=null,this.nextSibling=null,this.attributeName=null,this.attributeNamespace=null,this.oldValue=null}function o(e,t){for(;e;e=e.parentNode){var n=h.get(e);if(n)for(var r=0;r<n.length;r++){var o=n[r];o.options.subtree&&o.addTransientObserver(t)}}}function i(e){for(var t=0;t<e.nodes_.length;t++){var n=e.nodes_[t],r=h.get(n);if(!r)return;for(var o=0;o<r.length;o++){var i=r[o];i.observer===e&&i.removeTransientObservers()}}}function a(e,n,o){for(var i=Object.create(null),a=Object.create(null),s=e;s;s=s.parentNode){var c=h.get(s);if(c)for(var l=0;l<c.length;l++){var u=c[l],d=u.options;if((s===e||d.subtree)&&("attributes"!==n||d.attributes)&&("attributes"!==n||!d.attributeFilter||null===o.namespace&&-1!==d.attributeFilter.indexOf(o.name))&&("characterData"!==n||d.characterData)&&("childList"!==n||d.childList)){var p=u.observer;i[p.uid_]=p,("attributes"===n&&d.attributeOldValue||"characterData"===n&&d.characterDataOldValue)&&(a[p.uid_]=o.oldValue)}}}for(var f in i){var p=i[f],m=new r(n,e);"name"in o&&"namespace"in o&&(m.attributeName=o.name,m.attributeNamespace=o.namespace),o.addedNodes&&(m.addedNodes=o.addedNodes),o.removedNodes&&(m.removedNodes=o.removedNodes),o.previousSibling&&(m.previousSibling=o.previousSibling),o.nextSibling&&(m.nextSibling=o.nextSibling),void 0!==a[f]&&(m.oldValue=a[f]),t(p),p.records_.push(m)}}function s(e){if(this.childList=!!e.childList,this.subtree=!!e.subtree,"attributes"in e||!("attributeOldValue"in e||"attributeFilter"in e)?this.attributes=!!e.attributes:this.attributes=!0,"characterDataOldValue"in e&&!("characterData"in e)?this.characterData=!0:this.characterData=!!e.characterData,!this.attributes&&(e.attributeOldValue||"attributeFilter"in e)||!this.characterData&&e.characterDataOldValue)throw new TypeError;if(this.characterData=!!e.characterData,this.attributeOldValue=!!e.attributeOldValue,this.characterDataOldValue=!!e.characterDataOldValue,"attributeFilter"in e){if(null==e.attributeFilter||"object"!=typeof e.attributeFilter)throw new TypeError;this.attributeFilter=w.call(e.attributeFilter)}else this.attributeFilter=null}function c(e){this.callback_=e,this.nodes_=[],this.records_=[],this.uid_=++v,this.scheduled_=!1}function l(e,t,n){this.observer=e,this.target=t,this.options=n,this.transientObservedNodes=[]}var u=e.setEndOfMicrotask,d=e.wrapIfNeeded,p=e.wrappers,h=new WeakMap,f=[],m=!1,w=Array.prototype.slice,v=0;c.prototype={constructor:c,observe:function(e,t){e=d(e);var n,r=new s(t),o=h.get(e);o||h.set(e,o=[]);for(var i=0;i<o.length;i++)o[i].observer===this&&(n=o[i],n.removeTransientObservers(),n.options=r);n||(n=new l(this,e,r),o.push(n),this.nodes_.push(e))},disconnect:function(){this.nodes_.forEach(function(e){for(var t=h.get(e),n=0;n<t.length;n++){var r=t[n];if(r.observer===this){t.splice(n,1);break}}},this),this.records_=[]},takeRecords:function(){var e=this.records_;return this.records_=[],e}},l.prototype={addTransientObserver:function(e){if(e!==this.target){t(this.observer),this.transientObservedNodes.push(e);var n=h.get(e);n||h.set(e,n=[]),n.push(this)}},removeTransientObservers:function(){var e=this.transientObservedNodes;this.transientObservedNodes=[];for(var t=0;t<e.length;t++)for(var n=e[t],r=h.get(n),o=0;o<r.length;o++)if(r[o]===this){r.splice(o,1);break}}},e.enqueueMutation=a,e.registerTransientObservers=o,e.wrappers.MutationObserver=c,e.wrappers.MutationRecord=r}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e,t){this.root=e,this.parent=t}function n(e,t){if(e.treeScope_!==t){e.treeScope_=t;for(var r=e.shadowRoot;r;r=r.olderShadowRoot)r.treeScope_.parent=t;for(var o=e.firstChild;o;o=o.nextSibling)n(o,t)}}function r(n){if(n instanceof e.wrappers.Window,n.treeScope_)return n.treeScope_;var o,i=n.parentNode;return o=i?r(i):new t(n,null),n.treeScope_=o}t.prototype={get renderer(){return this.root instanceof e.wrappers.ShadowRoot?e.getRendererForHost(this.root.host):null},contains:function(e){for(;e;e=e.parent)if(e===this)return!0;return!1}},e.TreeScope=t,e.getTreeScope=r,e.setTreeScope=n}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){return e instanceof G.ShadowRoot}function n(e){return A(e).root}function r(e,r){var s=[],c=e;for(s.push(c);c;){var l=a(c);if(l&&l.length>0){for(var u=0;u<l.length;u++){var p=l[u];if(i(p)){var h=n(p),f=h.olderShadowRoot;f&&s.push(f)}s.push(p)}c=l[l.length-1]}else if(t(c)){if(d(e,c)&&o(r))break;c=c.host,s.push(c)}else c=c.parentNode,c&&s.push(c)}return s}function o(e){if(!e)return!1;switch(e.type){case"abort":case"error":case"select":case"change":case"load":case"reset":case"resize":case"scroll":case"selectstart":return!0}return!1}function i(e){return e instanceof HTMLShadowElement}function a(t){return e.getDestinationInsertionPoints(t)}function s(e,t){if(0===e.length)return t;t instanceof G.Window&&(t=t.document);for(var n=A(t),r=e[0],o=A(r),i=l(n,o),a=0;a<e.length;a++){var s=e[a];if(A(s)===i)return s}return e[e.length-1]}function c(e){for(var t=[];e;e=e.parent)t.push(e);return t}function l(e,t){for(var n=c(e),r=c(t),o=null;n.length>0&&r.length>0;){var i=n.pop(),a=r.pop();if(i!==a)break;o=i}return o}function u(e,t,n){t instanceof G.Window&&(t=t.document);var o,i=A(t),a=A(n),s=r(n,e),o=l(i,a);o||(o=a.root);for(var c=o;c;c=c.parent)for(var u=0;u<s.length;u++){var d=s[u];if(A(d)===c)return d}return null}function d(e,t){return A(e)===A(t)}function p(e){if(!K.get(e)&&(K.set(e,!0),f(V(e),V(e.target)),P)){var t=P;throw P=null,t}}function h(e){switch(e.type){case"load":case"beforeunload":case"unload":return!0}return!1}function f(t,n){if($.get(t))throw new Error("InvalidStateError");$.set(t,!0),e.renderAllPending();var o,i,a;if(h(t)&&!t.bubbles){var s=n;s instanceof G.Document&&(a=s.defaultView)&&(i=s,o=[])}if(!o)if(n instanceof G.Window)a=n,o=[];else if(o=r(n,t),!h(t)){var s=o[o.length-1];s instanceof G.Document&&(a=s.defaultView)}return ne.set(t,o),m(t,o,a,i)&&w(t,o,a,i)&&v(t,o,a,i),J.set(t,re),Y["delete"](t,null),$["delete"](t),t.defaultPrevented}function m(e,t,n,r){var o=oe;if(n&&!g(n,e,o,t,r))return!1;for(var i=t.length-1;i>0;i--)if(!g(t[i],e,o,t,r))return!1;return!0}function w(e,t,n,r){var o=ie,i=t[0]||n;return g(i,e,o,t,r)}function v(e,t,n,r){for(var o=ae,i=1;i<t.length;i++)if(!g(t[i],e,o,t,r))return;n&&t.length>0&&g(n,e,o,t,r)}function g(e,t,n,r,o){var i=z.get(e);if(!i)return!0;var a=o||s(r,e);if(a===e){if(n===oe)return!0;n===ae&&(n=ie)}else if(n===ae&&!t.bubbles)return!0;if("relatedTarget"in t){var c=B(t),l=c.relatedTarget;if(l){if(l instanceof Object&&l.addEventListener){var d=V(l),p=u(t,e,d);if(p===a)return!0}else p=null;Z.set(t,p)}}J.set(t,n);var h=t.type,f=!1;X.set(t,a),Y.set(t,e),i.depth++;for(var m=0,w=i.length;w>m;m++){var v=i[m];if(v.removed)f=!0;else if(!(v.type!==h||!v.capture&&n===oe||v.capture&&n===ae))try{if("function"==typeof v.handler?v.handler.call(e,t):v.handler.handleEvent(t),ee.get(t))return!1}catch(g){P||(P=g)}}if(i.depth--,f&&0===i.depth){var b=i.slice();i.length=0;for(var m=0;m<b.length;m++)b[m].removed||i.push(b[m])}return!Q.get(t)}function b(e,t,n){this.type=e,this.handler=t,this.capture=Boolean(n)}function y(e,t){if(!(e instanceof se))return V(T(se,"Event",e,t));var n=e;return be||"beforeunload"!==n.type||this instanceof M?void U(n,this):new M(n)}function E(e){return e&&e.relatedTarget?Object.create(e,{relatedTarget:{value:B(e.relatedTarget)}}):e}function _(e,t,n){var r=window[e],o=function(t,n){return t instanceof r?void U(t,this):V(T(r,e,t,n))};if(o.prototype=Object.create(t.prototype),n&&W(o.prototype,n),r)try{F(r,o,new r("temp"))}catch(i){F(r,o,document.createEvent(e))}return o}function S(e,t){return function(){arguments[t]=B(arguments[t]);var n=B(this);n[e].apply(n,arguments)}}function T(e,t,n,r){if(ve)return new e(n,E(r));var o=B(document.createEvent(t)),i=we[t],a=[n];return Object.keys(i).forEach(function(e){var t=null!=r&&e in r?r[e]:i[e];"relatedTarget"===e&&(t=B(t)),a.push(t)}),o["init"+t].apply(o,a),o}function M(e){y.call(this,e)}function O(e){return"function"==typeof e?!0:e&&e.handleEvent}function L(e){switch(e){case"DOMAttrModified":case"DOMAttributeNameChanged":case"DOMCharacterDataModified":case"DOMElementNameChanged":case"DOMNodeInserted":case"DOMNodeInsertedIntoDocument":case"DOMNodeRemoved":case"DOMNodeRemovedFromDocument":case"DOMSubtreeModified":return!0}return!1}function N(e){U(e,this)}function C(e){return e instanceof G.ShadowRoot&&(e=e.host),B(e)}function j(e,t){var n=z.get(e);if(n)for(var r=0;r<n.length;r++)if(!n[r].removed&&n[r].type===t)return!0;return!1}function D(e,t){for(var n=B(e);n;n=n.parentNode)if(j(V(n),t))return!0;return!1}function H(e){k(e,Ee)}function x(t,n,o,i){e.renderAllPending();var a=V(_e.call(q(n),o,i));if(!a)return null;var c=r(a,null),l=c.lastIndexOf(t);return-1==l?null:(c=c.slice(0,l),s(c,t))}function R(e){return function(){var t=te.get(this);return t&&t[e]&&t[e].value||null}}function I(e){var t=e.slice(2);return function(n){var r=te.get(this);r||(r=Object.create(null),te.set(this,r));var o=r[e];if(o&&this.removeEventListener(t,o.wrapped,!1),"function"==typeof n){var i=function(t){var r=n.call(this,t);r===!1?t.preventDefault():"onbeforeunload"===e&&"string"==typeof r&&(t.returnValue=r)};this.addEventListener(t,i,!1),r[e]={value:n,wrapped:i}}}}var P,k=e.forwardMethodsToWrapper,A=e.getTreeScope,W=e.mixin,F=e.registerWrapper,U=e.setWrapper,q=e.unsafeUnwrap,B=e.unwrap,V=e.wrap,G=e.wrappers,z=(new WeakMap,new WeakMap),K=new WeakMap,$=new WeakMap,X=new WeakMap,Y=new WeakMap,Z=new WeakMap,J=new WeakMap,Q=new WeakMap,ee=new WeakMap,te=new WeakMap,ne=new WeakMap,re=0,oe=1,ie=2,ae=3;b.prototype={equals:function(e){return this.handler===e.handler&&this.type===e.type&&this.capture===e.capture},get removed(){return null===this.handler},remove:function(){this.handler=null}};var se=window.Event;se.prototype.polymerBlackList_={returnValue:!0,keyLocation:!0},y.prototype={get target(){return X.get(this)},get currentTarget(){return Y.get(this)},get eventPhase(){return J.get(this)},get path(){var e=ne.get(this);return e?e.slice():[]},stopPropagation:function(){Q.set(this,!0)},stopImmediatePropagation:function(){Q.set(this,!0),ee.set(this,!0)}};var ce=function(){var e=document.createEvent("Event");return e.initEvent("test",!0,!0),e.preventDefault(),e.defaultPrevented}();ce||(y.prototype.preventDefault=function(){this.cancelable&&(q(this).preventDefault(),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}),F(se,y,document.createEvent("Event"));var le=_("UIEvent",y),ue=_("CustomEvent",y),de={get relatedTarget(){var e=Z.get(this);return void 0!==e?e:V(B(this).relatedTarget)}},pe=W({initMouseEvent:S("initMouseEvent",14)},de),he=W({initFocusEvent:S("initFocusEvent",5)},de),fe=_("MouseEvent",le,pe),me=_("FocusEvent",le,he),we=Object.create(null),ve=function(){try{new window.FocusEvent("focus")}catch(e){return!1}return!0}();if(!ve){var ge=function(e,t,n){if(n){var r=we[n];t=W(W({},r),t)}we[e]=t};ge("Event",{bubbles:!1,cancelable:!1}),ge("CustomEvent",{detail:null},"Event"),ge("UIEvent",{view:null,detail:0},"Event"),ge("MouseEvent",{screenX:0,screenY:0,clientX:0,clientY:0,ctrlKey:!1,altKey:!1,shiftKey:!1,metaKey:!1,button:0,relatedTarget:null},"UIEvent"),ge("FocusEvent",{relatedTarget:null},"UIEvent")}var be=window.BeforeUnloadEvent;M.prototype=Object.create(y.prototype),W(M.prototype,{get returnValue(){return q(this).returnValue},set returnValue(e){q(this).returnValue=e}}),be&&F(be,M);var ye=window.EventTarget,Ee=["addEventListener","removeEventListener","dispatchEvent"];[Node,Window].forEach(function(e){var t=e.prototype;Ee.forEach(function(e){Object.defineProperty(t,e+"_",{value:t[e]})})}),N.prototype={addEventListener:function(e,t,n){if(O(t)&&!L(e)){var r=new b(e,t,n),o=z.get(this);if(o){for(var i=0;i<o.length;i++)if(r.equals(o[i]))return}else o=[],o.depth=0,z.set(this,o);o.push(r);var a=C(this);a.addEventListener_(e,p,!0)}},removeEventListener:function(e,t,n){n=Boolean(n);var r=z.get(this);if(r){for(var o=0,i=!1,a=0;a<r.length;a++)r[a].type===e&&r[a].capture===n&&(o++,r[a].handler===t&&(i=!0,r[a].remove()));if(i&&1===o){var s=C(this);s.removeEventListener_(e,p,!0)}}},dispatchEvent:function(t){var n=B(t),r=n.type;K.set(n,!1),e.renderAllPending();var o;D(this,r)||(o=function(){},this.addEventListener(r,o,!0));try{return B(this).dispatchEvent_(n)}finally{o&&this.removeEventListener(r,o,!0)}}},ye&&F(ye,N);var _e=document.elementFromPoint;e.elementFromPoint=x,e.getEventHandlerGetter=R,e.getEventHandlerSetter=I,e.wrapEventTargetMethods=H,e.wrappers.BeforeUnloadEvent=M,e.wrappers.CustomEvent=ue,e.wrappers.Event=y,e.wrappers.EventTarget=N,e.wrappers.FocusEvent=me,e.wrappers.MouseEvent=fe,e.wrappers.UIEvent=le}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e,t){Object.defineProperty(e,t,m)}function n(e){l(e,this)}function r(){this.length=0,t(this,"length")}function o(e){for(var t=new r,o=0;o<e.length;o++)t[o]=new n(e[o]);return t.length=o,t}function i(e){a.call(this,e)}var a=e.wrappers.UIEvent,s=e.mixin,c=e.registerWrapper,l=e.setWrapper,u=e.unsafeUnwrap,d=e.wrap,p=window.TouchEvent;if(p){var h;try{h=document.createEvent("TouchEvent")}catch(f){return}var m={enumerable:!1};n.prototype={get target(){return d(u(this).target)}};var w={configurable:!0,enumerable:!0,get:null};["clientX","clientY","screenX","screenY","pageX","pageY","identifier","webkitRadiusX","webkitRadiusY","webkitRotationAngle","webkitForce"].forEach(function(e){w.get=function(){return u(this)[e]},Object.defineProperty(n.prototype,e,w)}),r.prototype={item:function(e){return this[e]}},i.prototype=Object.create(a.prototype),s(i.prototype,{get touches(){return o(u(this).touches)},get targetTouches(){return o(u(this).targetTouches)},get changedTouches(){return o(u(this).changedTouches)},initTouchEvent:function(){throw new Error("Not implemented")}}),c(p,i,h),e.wrappers.Touch=n,e.wrappers.TouchEvent=i,e.wrappers.TouchList=r}}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e,t){Object.defineProperty(e,t,s)}function n(){this.length=0,t(this,"length")}function r(e){if(null==e)return e;for(var t=new n,r=0,o=e.length;o>r;r++)t[r]=a(e[r]);return t.length=o,t}function o(e,t){e.prototype[t]=function(){return r(i(this)[t].apply(i(this),arguments))}}var i=e.unsafeUnwrap,a=e.wrap,s={enumerable:!1};n.prototype={item:function(e){return this[e]}},t(n.prototype,"item"),e.wrappers.NodeList=n,e.addWrapNodeListMethod=o,e.wrapNodeList=r}(window.ShadowDOMPolyfill),function(e){"use strict";e.wrapHTMLCollection=e.wrapNodeList,e.wrappers.HTMLCollection=e.wrappers.NodeList}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){O(e instanceof _)}function n(e){var t=new T;return t[0]=e,t.length=1,t}function r(e,t,n){N(t,"childList",{removedNodes:n,previousSibling:e.previousSibling,nextSibling:e.nextSibling})}function o(e,t){N(e,"childList",{removedNodes:t})}function i(e,t,r,o){if(e instanceof DocumentFragment){var i=s(e);U=!0;for(var a=i.length-1;a>=0;a--)e.removeChild(i[a]),i[a].parentNode_=t;U=!1;for(var a=0;a<i.length;a++)i[a].previousSibling_=i[a-1]||r,i[a].nextSibling_=i[a+1]||o;return r&&(r.nextSibling_=i[0]),o&&(o.previousSibling_=i[i.length-1]),i}var i=n(e),c=e.parentNode;return c&&c.removeChild(e),e.parentNode_=t,e.previousSibling_=r,e.nextSibling_=o,r&&(r.nextSibling_=e),o&&(o.previousSibling_=e),i}function a(e){if(e instanceof DocumentFragment)return s(e);var t=n(e),o=e.parentNode;return o&&r(e,o,t),t}function s(e){for(var t=new T,n=0,r=e.firstChild;r;r=r.nextSibling)t[n++]=r;return t.length=n,o(e,t),t}function c(e){return e}function l(e,t){R(e,t),e.nodeIsInserted_()}function u(e,t){for(var n=C(t),r=0;r<e.length;r++)l(e[r],n)}function d(e){R(e,new M(e,null))}function p(e){for(var t=0;t<e.length;t++)d(e[t])}function h(e,t){var n=e.nodeType===_.DOCUMENT_NODE?e:e.ownerDocument;n!==t.ownerDocument&&n.adoptNode(t)}function f(t,n){if(n.length){var r=t.ownerDocument;if(r!==n[0].ownerDocument)for(var o=0;o<n.length;o++)e.adoptNodeNoRemove(n[o],r)}}function m(e,t){f(e,t);var n=t.length;if(1===n)return P(t[0]);for(var r=P(e.ownerDocument.createDocumentFragment()),o=0;n>o;o++)r.appendChild(P(t[o]));return r}function w(e){if(void 0!==e.firstChild_)for(var t=e.firstChild_;t;){var n=t;t=t.nextSibling_,n.parentNode_=n.previousSibling_=n.nextSibling_=void 0}e.firstChild_=e.lastChild_=void 0}function v(e){if(e.invalidateShadowRenderer()){for(var t=e.firstChild;t;){O(t.parentNode===e);var n=t.nextSibling,r=P(t),o=r.parentNode;o&&X.call(o,r),t.previousSibling_=t.nextSibling_=t.parentNode_=null,t=n}e.firstChild_=e.lastChild_=null}else for(var n,i=P(e),a=i.firstChild;a;)n=a.nextSibling,X.call(i,a),a=n}function g(e){var t=e.parentNode;return t&&t.invalidateShadowRenderer()}function b(e){for(var t,n=0;n<e.length;n++)t=e[n],t.parentNode.removeChild(t)}function y(e,t,n){var r;if(r=A(n?q.call(n,I(e),!1):B.call(I(e),!1)),t){for(var o=e.firstChild;o;o=o.nextSibling)r.appendChild(y(o,!0,n));if(e instanceof F.HTMLTemplateElement)for(var i=r.content,o=e.content.firstChild;o;o=o.nextSibling)i.appendChild(y(o,!0,n))}return r}function E(e,t){if(!t||C(e)!==C(t))return!1;for(var n=t;n;n=n.parentNode)if(n===e)return!0;return!1}function _(e){O(e instanceof V),S.call(this,e),this.parentNode_=void 0,this.firstChild_=void 0,this.lastChild_=void 0,this.nextSibling_=void 0,this.previousSibling_=void 0,this.treeScope_=void 0}var S=e.wrappers.EventTarget,T=e.wrappers.NodeList,M=e.TreeScope,O=e.assert,L=e.defineWrapGetter,N=e.enqueueMutation,C=e.getTreeScope,j=e.isWrapper,D=e.mixin,H=e.registerTransientObservers,x=e.registerWrapper,R=e.setTreeScope,I=e.unsafeUnwrap,P=e.unwrap,k=e.unwrapIfNeeded,A=e.wrap,W=e.wrapIfNeeded,F=e.wrappers,U=!1,q=document.importNode,B=window.Node.prototype.cloneNode,V=window.Node,G=window.DocumentFragment,z=(V.prototype.appendChild,V.prototype.compareDocumentPosition),K=V.prototype.isEqualNode,$=V.prototype.insertBefore,X=V.prototype.removeChild,Y=V.prototype.replaceChild,Z=/Trident|Edge/.test(navigator.userAgent),J=Z?function(e,t){try{X.call(e,t)}catch(n){if(!(e instanceof G))throw n}}:function(e,t){X.call(e,t)};_.prototype=Object.create(S.prototype),D(_.prototype,{appendChild:function(e){return this.insertBefore(e,null)},insertBefore:function(e,n){t(e);var r;n?j(n)?r=P(n):(r=n,n=A(r)):(n=null,r=null),n&&O(n.parentNode===this);var o,s=n?n.previousSibling:this.lastChild,c=!this.invalidateShadowRenderer()&&!g(e);if(o=c?a(e):i(e,this,s,n),c)h(this,e),w(this),$.call(I(this),P(e),r);else{s||(this.firstChild_=o[0]),n||(this.lastChild_=o[o.length-1],void 0===this.firstChild_&&(this.firstChild_=this.firstChild));var l=r?r.parentNode:I(this);l?$.call(l,m(this,o),r):f(this,o)}return N(this,"childList",{addedNodes:o,nextSibling:n,previousSibling:s}),u(o,this),e},removeChild:function(e){if(t(e),e.parentNode!==this){for(var r=!1,o=(this.childNodes,this.firstChild);o;o=o.nextSibling)if(o===e){r=!0;break}if(!r)throw new Error("NotFoundError")}var i=P(e),a=e.nextSibling,s=e.previousSibling;if(this.invalidateShadowRenderer()){var c=this.firstChild,l=this.lastChild,u=i.parentNode;u&&J(u,i),c===e&&(this.firstChild_=a),l===e&&(this.lastChild_=s),s&&(s.nextSibling_=a),a&&(a.previousSibling_=s),e.previousSibling_=e.nextSibling_=e.parentNode_=void 0}else w(this),J(I(this),i);return U||N(this,"childList",{removedNodes:n(e),nextSibling:a,previousSibling:s}),H(this,e),e},replaceChild:function(e,r){t(e);var o;if(j(r)?o=P(r):(o=r,r=A(o)),r.parentNode!==this)throw new Error("NotFoundError");var s,c=r.nextSibling,l=r.previousSibling,p=!this.invalidateShadowRenderer()&&!g(e);return p?s=a(e):(c===e&&(c=e.nextSibling),s=i(e,this,l,c)),p?(h(this,e),w(this),Y.call(I(this),P(e),o)):(this.firstChild===r&&(this.firstChild_=s[0]),this.lastChild===r&&(this.lastChild_=s[s.length-1]),r.previousSibling_=r.nextSibling_=r.parentNode_=void 0,o.parentNode&&Y.call(o.parentNode,m(this,s),o)),N(this,"childList",{addedNodes:s,removedNodes:n(r),nextSibling:c,previousSibling:l}),d(r),u(s,this),r},nodeIsInserted_:function(){for(var e=this.firstChild;e;e=e.nextSibling)e.nodeIsInserted_()},hasChildNodes:function(){return null!==this.firstChild},get parentNode(){return void 0!==this.parentNode_?this.parentNode_:A(I(this).parentNode)},get firstChild(){return void 0!==this.firstChild_?this.firstChild_:A(I(this).firstChild)},get lastChild(){return void 0!==this.lastChild_?this.lastChild_:A(I(this).lastChild)},get nextSibling(){return void 0!==this.nextSibling_?this.nextSibling_:A(I(this).nextSibling)},get previousSibling(){return void 0!==this.previousSibling_?this.previousSibling_:A(I(this).previousSibling)},get parentElement(){for(var e=this.parentNode;e&&e.nodeType!==_.ELEMENT_NODE;)e=e.parentNode;return e},get textContent(){for(var e="",t=this.firstChild;t;t=t.nextSibling)t.nodeType!=_.COMMENT_NODE&&(e+=t.textContent);return e},set textContent(e){null==e&&(e="");var t=c(this.childNodes);if(this.invalidateShadowRenderer()){if(v(this),""!==e){var n=I(this).ownerDocument.createTextNode(e);this.appendChild(n)}}else w(this),I(this).textContent=e;var r=c(this.childNodes);N(this,"childList",{addedNodes:r,removedNodes:t}),p(t),u(r,this)},get childNodes(){for(var e=new T,t=0,n=this.firstChild;n;n=n.nextSibling)e[t++]=n;return e.length=t,e},cloneNode:function(e){return y(this,e)},contains:function(e){return E(this,W(e))},compareDocumentPosition:function(e){return z.call(I(this),k(e))},isEqualNode:function(e){return K.call(I(this),k(e))},normalize:function(){for(var e,t,n=c(this.childNodes),r=[],o="",i=0;i<n.length;i++)t=n[i],t.nodeType===_.TEXT_NODE?e||t.data.length?e?(o+=t.data,r.push(t)):e=t:this.removeChild(t):(e&&r.length&&(e.data+=o,b(r)),r=[],o="",e=null,t.childNodes.length&&t.normalize());e&&r.length&&(e.data+=o,b(r))}}),L(_,"ownerDocument"),x(V,_,document.createDocumentFragment()),delete _.prototype.querySelector,delete _.prototype.querySelectorAll,_.prototype=D(Object.create(S.prototype),_.prototype),e.cloneNode=y,e.nodeWasAdded=l,e.nodeWasRemoved=d,e.nodesWereAdded=u,e.nodesWereRemoved=p,e.originalInsertBefore=$,e.originalRemoveChild=X,e.snapshotNodeList=c,e.wrappers.Node=_}(window.ShadowDOMPolyfill),function(e){"use strict";function t(t,n,r,o){for(var i=null,a=null,s=0,c=t.length;c>s;s++)i=b(t[s]),!o&&(a=v(i).root)&&a instanceof e.wrappers.ShadowRoot||(r[n++]=i);return n}function n(e){return String(e).replace(/\/deep\/|::shadow|>>>/g," ")}function r(e){return String(e).replace(/:host\(([^\s]+)\)/g,"$1").replace(/([^\s]):host/g,"$1").replace(":host","*").replace(/\^|\/shadow\/|\/shadow-deep\/|::shadow|\/deep\/|::content|>>>/g," ")}function o(e,t){for(var n,r=e.firstElementChild;r;){if(r.matches(t))return r;if(n=o(r,t))return n;r=r.nextElementSibling}return null}function i(e,t){return e.matches(t)}function a(e,t,n){var r=e.localName;return r===t||r===n&&e.namespaceURI===j}function s(){return!0}function c(e,t,n){return e.localName===n}function l(e,t){return e.namespaceURI===t}function u(e,t,n){return e.namespaceURI===t&&e.localName===n}function d(e,t,n,r,o,i){for(var a=e.firstElementChild;a;)r(a,o,i)&&(n[t++]=a),t=d(a,t,n,r,o,i),a=a.nextElementSibling;return t}function p(n,r,o,i,a){var s,c=g(this),l=v(this).root;if(l instanceof e.wrappers.ShadowRoot)return d(this,r,o,n,i,null);if(c instanceof N)s=S.call(c,i);else{if(!(c instanceof C))return d(this,r,o,n,i,null);s=_.call(c,i)}return t(s,r,o,a)}function h(n,r,o,i,a){var s,c=g(this),l=v(this).root;if(l instanceof e.wrappers.ShadowRoot)return d(this,r,o,n,i,a);if(c instanceof N)s=M.call(c,i,a);else{if(!(c instanceof C))return d(this,r,o,n,i,a);s=T.call(c,i,a)}return t(s,r,o,!1)}function f(n,r,o,i,a){var s,c=g(this),l=v(this).root;if(l instanceof e.wrappers.ShadowRoot)return d(this,r,o,n,i,a);if(c instanceof N)s=L.call(c,i,a);else{if(!(c instanceof C))return d(this,r,o,n,i,a);s=O.call(c,i,a)}return t(s,r,o,!1)}var m=e.wrappers.HTMLCollection,w=e.wrappers.NodeList,v=e.getTreeScope,g=e.unsafeUnwrap,b=e.wrap,y=document.querySelector,E=document.documentElement.querySelector,_=document.querySelectorAll,S=document.documentElement.querySelectorAll,T=document.getElementsByTagName,M=document.documentElement.getElementsByTagName,O=document.getElementsByTagNameNS,L=document.documentElement.getElementsByTagNameNS,N=window.Element,C=window.HTMLDocument||window.Document,j="http://www.w3.org/1999/xhtml",D={
querySelector:function(t){var r=n(t),i=r!==t;t=r;var a,s=g(this),c=v(this).root;if(c instanceof e.wrappers.ShadowRoot)return o(this,t);if(s instanceof N)a=b(E.call(s,t));else{if(!(s instanceof C))return o(this,t);a=b(y.call(s,t))}return a&&!i&&(c=v(a).root)&&c instanceof e.wrappers.ShadowRoot?o(this,t):a},querySelectorAll:function(e){var t=n(e),r=t!==e;e=t;var o=new w;return o.length=p.call(this,i,0,o,e,r),o}},H={matches:function(t){return t=r(t),e.originalMatches.call(g(this),t)}},x={getElementsByTagName:function(e){var t=new m,n="*"===e?s:a;return t.length=h.call(this,n,0,t,e,e.toLowerCase()),t},getElementsByClassName:function(e){return this.querySelectorAll("."+e)},getElementsByTagNameNS:function(e,t){var n=new m,r=null;return r="*"===e?"*"===t?s:c:"*"===t?l:u,n.length=f.call(this,r,0,n,e||null,t),n}};e.GetElementsByInterface=x,e.SelectorsInterface=D,e.MatchesInterface=H}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){for(;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.nextSibling;return e}function n(e){for(;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.previousSibling;return e}var r=e.wrappers.NodeList,o={get firstElementChild(){return t(this.firstChild)},get lastElementChild(){return n(this.lastChild)},get childElementCount(){for(var e=0,t=this.firstElementChild;t;t=t.nextElementSibling)e++;return e},get children(){for(var e=new r,t=0,n=this.firstElementChild;n;n=n.nextElementSibling)e[t++]=n;return e.length=t,e},remove:function(){var e=this.parentNode;e&&e.removeChild(this)}},i={get nextElementSibling(){return t(this.nextSibling)},get previousElementSibling(){return n(this.previousSibling)}},a={getElementById:function(e){return/[ \t\n\r\f]/.test(e)?null:this.querySelector('[id="'+e+'"]')}};e.ChildNodeInterface=i,e.NonElementParentNodeInterface=a,e.ParentNodeInterface=o}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){r.call(this,e)}var n=e.ChildNodeInterface,r=e.wrappers.Node,o=e.enqueueMutation,i=e.mixin,a=e.registerWrapper,s=e.unsafeUnwrap,c=window.CharacterData;t.prototype=Object.create(r.prototype),i(t.prototype,{get nodeValue(){return this.data},set nodeValue(e){this.data=e},get textContent(){return this.data},set textContent(e){this.data=e},get data(){return s(this).data},set data(e){var t=s(this).data;o(this,"characterData",{oldValue:t}),s(this).data=e}}),i(t.prototype,n),a(c,t,document.createTextNode("")),e.wrappers.CharacterData=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){return e>>>0}function n(e){r.call(this,e)}var r=e.wrappers.CharacterData,o=(e.enqueueMutation,e.mixin),i=e.registerWrapper,a=window.Text;n.prototype=Object.create(r.prototype),o(n.prototype,{splitText:function(e){e=t(e);var n=this.data;if(e>n.length)throw new Error("IndexSizeError");var r=n.slice(0,e),o=n.slice(e);this.data=r;var i=this.ownerDocument.createTextNode(o);return this.parentNode&&this.parentNode.insertBefore(i,this.nextSibling),i}}),i(a,n,document.createTextNode("")),e.wrappers.Text=n}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){return i(e).getAttribute("class")}function n(e,t){a(e,"attributes",{name:"class",namespace:null,oldValue:t})}function r(t){e.invalidateRendererBasedOnAttribute(t,"class")}function o(e,o,i){var a=e.ownerElement_;if(null==a)return o.apply(e,i);var s=t(a),c=o.apply(e,i);return t(a)!==s&&(n(a,s),r(a)),c}if(!window.DOMTokenList)return void console.warn("Missing DOMTokenList prototype, please include a compatible classList polyfill such as http://goo.gl/uTcepH.");var i=e.unsafeUnwrap,a=e.enqueueMutation,s=DOMTokenList.prototype.add;DOMTokenList.prototype.add=function(){o(this,s,arguments)};var c=DOMTokenList.prototype.remove;DOMTokenList.prototype.remove=function(){o(this,c,arguments)};var l=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(){return o(this,l,arguments)}}(window.ShadowDOMPolyfill),function(e){"use strict";function t(t,n){var r=t.parentNode;if(r&&r.shadowRoot){var o=e.getRendererForHost(r);o.dependsOnAttribute(n)&&o.invalidate()}}function n(e,t,n){u(e,"attributes",{name:t,namespace:null,oldValue:n})}function r(e){a.call(this,e)}var o=e.ChildNodeInterface,i=e.GetElementsByInterface,a=e.wrappers.Node,s=e.ParentNodeInterface,c=e.SelectorsInterface,l=e.MatchesInterface,u=(e.addWrapNodeListMethod,e.enqueueMutation),d=e.mixin,p=(e.oneOf,e.registerWrapper),h=e.unsafeUnwrap,f=e.wrappers,m=window.Element,w=["matches","mozMatchesSelector","msMatchesSelector","webkitMatchesSelector"].filter(function(e){return m.prototype[e]}),v=w[0],g=m.prototype[v],b=new WeakMap;r.prototype=Object.create(a.prototype),d(r.prototype,{createShadowRoot:function(){var t=new f.ShadowRoot(this);h(this).polymerShadowRoot_=t;var n=e.getRendererForHost(this);return n.invalidate(),t},get shadowRoot(){return h(this).polymerShadowRoot_||null},setAttribute:function(e,r){var o=h(this).getAttribute(e);h(this).setAttribute(e,r),n(this,e,o),t(this,e)},removeAttribute:function(e){var r=h(this).getAttribute(e);h(this).removeAttribute(e),n(this,e,r),t(this,e)},get classList(){var e=b.get(this);if(!e){if(e=h(this).classList,!e)return;e.ownerElement_=this,b.set(this,e)}return e},get className(){return h(this).className},set className(e){this.setAttribute("class",e)},get id(){return h(this).id},set id(e){this.setAttribute("id",e)}}),w.forEach(function(e){"matches"!==e&&(r.prototype[e]=function(e){return this.matches(e)})}),m.prototype.webkitCreateShadowRoot&&(r.prototype.webkitCreateShadowRoot=r.prototype.createShadowRoot),d(r.prototype,o),d(r.prototype,i),d(r.prototype,s),d(r.prototype,c),d(r.prototype,l),p(m,r,document.createElementNS(null,"x")),e.invalidateRendererBasedOnAttribute=t,e.matchesNames=w,e.originalMatches=g,e.wrappers.Element=r}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}}function n(e){return e.replace(L,t)}function r(e){return e.replace(N,t)}function o(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t}function i(e){if(e.namespaceURI!==D)return!0;var t=e.ownerDocument.doctype;return t&&t.publicId&&t.systemId}function a(e,t){switch(e.nodeType){case Node.ELEMENT_NODE:for(var o,a=e.tagName.toLowerCase(),c="<"+a,l=e.attributes,u=0;o=l[u];u++)c+=" "+o.name+'="'+n(o.value)+'"';return C[a]?(i(e)&&(c+="/"),c+">"):c+">"+s(e)+"</"+a+">";case Node.TEXT_NODE:var d=e.data;return t&&j[t.localName]?d:r(d);case Node.COMMENT_NODE:return"<!--"+e.data+"-->";default:throw console.error(e),new Error("not implemented")}}function s(e){e instanceof O.HTMLTemplateElement&&(e=e.content);for(var t="",n=e.firstChild;n;n=n.nextSibling)t+=a(n,e);return t}function c(e,t,n){var r=n||"div";e.textContent="";var o=T(e.ownerDocument.createElement(r));o.innerHTML=t;for(var i;i=o.firstChild;)e.appendChild(M(i))}function l(e){m.call(this,e)}function u(e,t){var n=T(e.cloneNode(!1));n.innerHTML=t;for(var r,o=T(document.createDocumentFragment());r=n.firstChild;)o.appendChild(r);return M(o)}function d(t){return function(){return e.renderAllPending(),S(this)[t]}}function p(e){w(l,e,d(e))}function h(t){Object.defineProperty(l.prototype,t,{get:d(t),set:function(n){e.renderAllPending(),S(this)[t]=n},configurable:!0,enumerable:!0})}function f(t){Object.defineProperty(l.prototype,t,{value:function(){return e.renderAllPending(),S(this)[t].apply(S(this),arguments)},configurable:!0,enumerable:!0})}var m=e.wrappers.Element,w=e.defineGetter,v=e.enqueueMutation,g=e.mixin,b=e.nodesWereAdded,y=e.nodesWereRemoved,E=e.registerWrapper,_=e.snapshotNodeList,S=e.unsafeUnwrap,T=e.unwrap,M=e.wrap,O=e.wrappers,L=/[&\u00A0"]/g,N=/[&\u00A0<>]/g,C=o(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),j=o(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]),D="http://www.w3.org/1999/xhtml",H=/MSIE/.test(navigator.userAgent),x=window.HTMLElement,R=window.HTMLTemplateElement;l.prototype=Object.create(m.prototype),g(l.prototype,{get innerHTML(){return s(this)},set innerHTML(e){if(H&&j[this.localName])return void(this.textContent=e);var t=_(this.childNodes);this.invalidateShadowRenderer()?this instanceof O.HTMLTemplateElement?c(this.content,e):c(this,e,this.tagName):!R&&this instanceof O.HTMLTemplateElement?c(this.content,e):S(this).innerHTML=e;var n=_(this.childNodes);v(this,"childList",{addedNodes:n,removedNodes:t}),y(t),b(n,this)},get outerHTML(){return a(this,this.parentNode)},set outerHTML(e){var t=this.parentNode;if(t){t.invalidateShadowRenderer();var n=u(t,e);t.replaceChild(n,this)}},insertAdjacentHTML:function(e,t){var n,r;switch(String(e).toLowerCase()){case"beforebegin":n=this.parentNode,r=this;break;case"afterend":n=this.parentNode,r=this.nextSibling;break;case"afterbegin":n=this,r=this.firstChild;break;case"beforeend":n=this,r=null;break;default:return}var o=u(n,t);n.insertBefore(o,r)},get hidden(){return this.hasAttribute("hidden")},set hidden(e){e?this.setAttribute("hidden",""):this.removeAttribute("hidden")}}),["clientHeight","clientLeft","clientTop","clientWidth","offsetHeight","offsetLeft","offsetTop","offsetWidth","scrollHeight","scrollWidth"].forEach(p),["scrollLeft","scrollTop"].forEach(h),["focus","getBoundingClientRect","getClientRects","scrollIntoView"].forEach(f),E(x,l,document.createElement("b")),e.wrappers.HTMLElement=l,e.getInnerHTML=s,e.setInnerHTML=c}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=e.unsafeUnwrap,a=e.wrap,s=window.HTMLCanvasElement;t.prototype=Object.create(n.prototype),r(t.prototype,{getContext:function(){var e=i(this).getContext.apply(i(this),arguments);return e&&a(e)}}),o(s,t,document.createElement("canvas")),e.wrappers.HTMLCanvasElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=window.HTMLContentElement;t.prototype=Object.create(n.prototype),r(t.prototype,{constructor:t,get select(){return this.getAttribute("select")},set select(e){this.setAttribute("select",e)},setAttribute:function(e,t){n.prototype.setAttribute.call(this,e,t),"select"===String(e).toLowerCase()&&this.invalidateShadowRenderer(!0)}}),i&&o(i,t),e.wrappers.HTMLContentElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=e.wrapHTMLCollection,a=e.unwrap,s=window.HTMLFormElement;t.prototype=Object.create(n.prototype),r(t.prototype,{get elements(){return i(a(this).elements)}}),o(s,t,document.createElement("form")),e.wrappers.HTMLFormElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){r.call(this,e)}function n(e,t){if(!(this instanceof n))throw new TypeError("DOM object constructor cannot be called as a function.");var o=i(document.createElement("img"));r.call(this,o),a(o,this),void 0!==e&&(o.width=e),void 0!==t&&(o.height=t)}var r=e.wrappers.HTMLElement,o=e.registerWrapper,i=e.unwrap,a=e.rewrap,s=window.HTMLImageElement;t.prototype=Object.create(r.prototype),o(s,t,document.createElement("img")),n.prototype=t.prototype,e.wrappers.HTMLImageElement=t,e.wrappers.Image=n}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=(e.mixin,e.wrappers.NodeList,e.registerWrapper),o=window.HTMLShadowElement;t.prototype=Object.create(n.prototype),t.prototype.constructor=t,o&&r(o,t),e.wrappers.HTMLShadowElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){if(!e.defaultView)return e;var t=d.get(e);if(!t){for(t=e.implementation.createHTMLDocument("");t.lastChild;)t.removeChild(t.lastChild);d.set(e,t)}return t}function n(e){for(var n,r=t(e.ownerDocument),o=c(r.createDocumentFragment());n=e.firstChild;)o.appendChild(n);return o}function r(e){if(o.call(this,e),!p){var t=n(e);u.set(this,l(t))}}var o=e.wrappers.HTMLElement,i=e.mixin,a=e.registerWrapper,s=e.unsafeUnwrap,c=e.unwrap,l=e.wrap,u=new WeakMap,d=new WeakMap,p=window.HTMLTemplateElement;r.prototype=Object.create(o.prototype),i(r.prototype,{constructor:r,get content(){return p?l(s(this).content):u.get(this)}}),p&&a(p,r),e.wrappers.HTMLTemplateElement=r}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.registerWrapper,o=window.HTMLMediaElement;o&&(t.prototype=Object.create(n.prototype),r(o,t,document.createElement("audio")),e.wrappers.HTMLMediaElement=t)}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){r.call(this,e)}function n(e){if(!(this instanceof n))throw new TypeError("DOM object constructor cannot be called as a function.");var t=i(document.createElement("audio"));r.call(this,t),a(t,this),t.setAttribute("preload","auto"),void 0!==e&&t.setAttribute("src",e)}var r=e.wrappers.HTMLMediaElement,o=e.registerWrapper,i=e.unwrap,a=e.rewrap,s=window.HTMLAudioElement;s&&(t.prototype=Object.create(r.prototype),o(s,t,document.createElement("audio")),n.prototype=t.prototype,e.wrappers.HTMLAudioElement=t,e.wrappers.Audio=n)}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){return e.replace(/\s+/g," ").trim()}function n(e){o.call(this,e)}function r(e,t,n,i){if(!(this instanceof r))throw new TypeError("DOM object constructor cannot be called as a function.");var a=c(document.createElement("option"));o.call(this,a),s(a,this),void 0!==e&&(a.text=e),void 0!==t&&a.setAttribute("value",t),n===!0&&a.setAttribute("selected",""),a.selected=i===!0}var o=e.wrappers.HTMLElement,i=e.mixin,a=e.registerWrapper,s=e.rewrap,c=e.unwrap,l=e.wrap,u=window.HTMLOptionElement;n.prototype=Object.create(o.prototype),i(n.prototype,{get text(){return t(this.textContent)},set text(e){this.textContent=t(String(e))},get form(){return l(c(this).form)}}),a(u,n,document.createElement("option")),r.prototype=n.prototype,e.wrappers.HTMLOptionElement=n,e.wrappers.Option=r}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=e.unwrap,a=e.wrap,s=window.HTMLSelectElement;t.prototype=Object.create(n.prototype),r(t.prototype,{add:function(e,t){"object"==typeof t&&(t=i(t)),i(this).add(i(e),t)},remove:function(e){return void 0===e?void n.prototype.remove.call(this):("object"==typeof e&&(e=i(e)),void i(this).remove(e))},get form(){return a(i(this).form)}}),o(s,t,document.createElement("select")),e.wrappers.HTMLSelectElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=e.unwrap,a=e.wrap,s=e.wrapHTMLCollection,c=window.HTMLTableElement;t.prototype=Object.create(n.prototype),r(t.prototype,{get caption(){return a(i(this).caption)},createCaption:function(){return a(i(this).createCaption())},get tHead(){return a(i(this).tHead)},createTHead:function(){return a(i(this).createTHead())},createTFoot:function(){return a(i(this).createTFoot())},get tFoot(){return a(i(this).tFoot)},get tBodies(){return s(i(this).tBodies)},createTBody:function(){return a(i(this).createTBody())},get rows(){return s(i(this).rows)},insertRow:function(e){return a(i(this).insertRow(e))}}),o(c,t,document.createElement("table")),e.wrappers.HTMLTableElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=e.wrapHTMLCollection,a=e.unwrap,s=e.wrap,c=window.HTMLTableSectionElement;t.prototype=Object.create(n.prototype),r(t.prototype,{constructor:t,get rows(){return i(a(this).rows)},insertRow:function(e){return s(a(this).insertRow(e))}}),o(c,t,document.createElement("thead")),e.wrappers.HTMLTableSectionElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.HTMLElement,r=e.mixin,o=e.registerWrapper,i=e.wrapHTMLCollection,a=e.unwrap,s=e.wrap,c=window.HTMLTableRowElement;t.prototype=Object.create(n.prototype),r(t.prototype,{get cells(){return i(a(this).cells)},insertCell:function(e){return s(a(this).insertCell(e))}}),o(c,t,document.createElement("tr")),e.wrappers.HTMLTableRowElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){switch(e.localName){case"content":return new n(e);case"shadow":return new o(e);case"template":return new i(e)}r.call(this,e)}var n=e.wrappers.HTMLContentElement,r=e.wrappers.HTMLElement,o=e.wrappers.HTMLShadowElement,i=e.wrappers.HTMLTemplateElement,a=(e.mixin,e.registerWrapper),s=window.HTMLUnknownElement;t.prototype=Object.create(r.prototype),a(s,t),e.wrappers.HTMLUnknownElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.Element,r=e.wrappers.HTMLElement,o=e.registerWrapper,i=(e.defineWrapGetter,e.unsafeUnwrap),a=e.wrap,s=e.mixin,c="http://www.w3.org/2000/svg",l=window.SVGElement,u=document.createElementNS(c,"title");if(!("classList"in u)){var d=Object.getOwnPropertyDescriptor(n.prototype,"classList");Object.defineProperty(r.prototype,"classList",d),delete n.prototype.classList}t.prototype=Object.create(n.prototype),s(t.prototype,{get ownerSVGElement(){return a(i(this).ownerSVGElement)}}),o(l,t,document.createElementNS(c,"title")),e.wrappers.SVGElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){p.call(this,e)}var n=e.mixin,r=e.registerWrapper,o=e.unwrap,i=e.wrap,a=window.SVGUseElement,s="http://www.w3.org/2000/svg",c=i(document.createElementNS(s,"g")),l=document.createElementNS(s,"use"),u=c.constructor,d=Object.getPrototypeOf(u.prototype),p=d.constructor;t.prototype=Object.create(d),"instanceRoot"in l&&n(t.prototype,{get instanceRoot(){return i(o(this).instanceRoot)},get animatedInstanceRoot(){return i(o(this).animatedInstanceRoot)}}),r(a,t,l),e.wrappers.SVGUseElement=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.EventTarget,r=e.mixin,o=e.registerWrapper,i=e.unsafeUnwrap,a=e.wrap,s=window.SVGElementInstance;s&&(t.prototype=Object.create(n.prototype),r(t.prototype,{get correspondingElement(){return a(i(this).correspondingElement)},get correspondingUseElement(){return a(i(this).correspondingUseElement)},get parentNode(){return a(i(this).parentNode)},get childNodes(){throw new Error("Not implemented")},get firstChild(){return a(i(this).firstChild)},get lastChild(){return a(i(this).lastChild)},get previousSibling(){return a(i(this).previousSibling)},get nextSibling(){return a(i(this).nextSibling)}}),o(s,t),e.wrappers.SVGElementInstance=t)}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){o(e,this)}var n=e.mixin,r=e.registerWrapper,o=e.setWrapper,i=e.unsafeUnwrap,a=e.unwrap,s=e.unwrapIfNeeded,c=e.wrap,l=window.CanvasRenderingContext2D;n(t.prototype,{get canvas(){return c(i(this).canvas)},drawImage:function(){arguments[0]=s(arguments[0]),i(this).drawImage.apply(i(this),arguments)},createPattern:function(){return arguments[0]=a(arguments[0]),i(this).createPattern.apply(i(this),arguments)}}),r(l,t,document.createElement("canvas").getContext("2d")),e.wrappers.CanvasRenderingContext2D=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){i(e,this)}var n=e.addForwardingProperties,r=e.mixin,o=e.registerWrapper,i=e.setWrapper,a=e.unsafeUnwrap,s=e.unwrapIfNeeded,c=e.wrap,l=window.WebGLRenderingContext;if(l){r(t.prototype,{get canvas(){return c(a(this).canvas)},texImage2D:function(){arguments[5]=s(arguments[5]),a(this).texImage2D.apply(a(this),arguments)},texSubImage2D:function(){arguments[6]=s(arguments[6]),a(this).texSubImage2D.apply(a(this),arguments)}});var u=Object.getPrototypeOf(l.prototype);u!==Object.prototype&&n(u,t.prototype);var d=/WebKit/.test(navigator.userAgent)?{drawingBufferHeight:null,drawingBufferWidth:null}:{};o(l,t,d),e.wrappers.WebGLRenderingContext=t}}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.Node,r=e.GetElementsByInterface,o=e.NonElementParentNodeInterface,i=e.ParentNodeInterface,a=e.SelectorsInterface,s=e.mixin,c=e.registerObject,l=e.registerWrapper,u=window.DocumentFragment;t.prototype=Object.create(n.prototype),s(t.prototype,i),s(t.prototype,a),s(t.prototype,r),s(t.prototype,o),l(u,t,document.createDocumentFragment()),e.wrappers.DocumentFragment=t;var d=c(document.createComment(""));e.wrappers.Comment=d}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){var t=d(u(e).ownerDocument.createDocumentFragment());n.call(this,t),c(t,this);var o=e.shadowRoot;f.set(this,o),this.treeScope_=new r(this,a(o||e)),h.set(this,e)}var n=e.wrappers.DocumentFragment,r=e.TreeScope,o=e.elementFromPoint,i=e.getInnerHTML,a=e.getTreeScope,s=e.mixin,c=e.rewrap,l=e.setInnerHTML,u=e.unsafeUnwrap,d=e.unwrap,p=e.wrap,h=new WeakMap,f=new WeakMap;t.prototype=Object.create(n.prototype),s(t.prototype,{constructor:t,get innerHTML(){return i(this)},set innerHTML(e){l(this,e),this.invalidateShadowRenderer()},get olderShadowRoot(){return f.get(this)||null},get host(){return h.get(this)||null},invalidateShadowRenderer:function(){return h.get(this).invalidateShadowRenderer()},elementFromPoint:function(e,t){return o(this,this.ownerDocument,e,t)},getSelection:function(){return document.getSelection()},get activeElement(){var e=d(this).ownerDocument.activeElement;if(!e||!e.nodeType)return null;var t=p(e);if(t===this.host)return null;for(;!this.contains(t)&&!this.host.contains(t);){for(;t.parentNode;)t=t.parentNode;if(!t.host)return null;t=t.host}return t}}),e.wrappers.ShadowRoot=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){var t=d(e).root;return t instanceof h?t.host:null}function n(t,n){if(t.shadowRoot){n=Math.min(t.childNodes.length-1,n);var r=t.childNodes[n];if(r){var o=e.getDestinationInsertionPoints(r);if(o.length>0){var i=o[0].parentNode;i.nodeType==Node.ELEMENT_NODE&&(t=i)}}}return t}function r(e){return e=u(e),t(e)||e}function o(e){a(e,this)}var i=e.registerWrapper,a=e.setWrapper,s=e.unsafeUnwrap,c=e.unwrap,l=e.unwrapIfNeeded,u=e.wrap,d=e.getTreeScope,p=window.Range,h=e.wrappers.ShadowRoot;o.prototype={get startContainer(){return r(s(this).startContainer)},get endContainer(){return r(s(this).endContainer)},get commonAncestorContainer(){return r(s(this).commonAncestorContainer)},setStart:function(e,t){e=n(e,t),s(this).setStart(l(e),t)},setEnd:function(e,t){e=n(e,t),s(this).setEnd(l(e),t)},setStartBefore:function(e){s(this).setStartBefore(l(e))},setStartAfter:function(e){s(this).setStartAfter(l(e))},setEndBefore:function(e){s(this).setEndBefore(l(e))},setEndAfter:function(e){s(this).setEndAfter(l(e))},selectNode:function(e){s(this).selectNode(l(e))},selectNodeContents:function(e){s(this).selectNodeContents(l(e))},compareBoundaryPoints:function(e,t){return s(this).compareBoundaryPoints(e,c(t))},extractContents:function(){return u(s(this).extractContents())},cloneContents:function(){return u(s(this).cloneContents())},insertNode:function(e){s(this).insertNode(l(e))},surroundContents:function(e){s(this).surroundContents(l(e))},cloneRange:function(){return u(s(this).cloneRange())},isPointInRange:function(e,t){return s(this).isPointInRange(l(e),t)},comparePoint:function(e,t){return s(this).comparePoint(l(e),t)},intersectsNode:function(e){return s(this).intersectsNode(l(e))},toString:function(){return s(this).toString()}},p.prototype.createContextualFragment&&(o.prototype.createContextualFragment=function(e){return u(s(this).createContextualFragment(e))}),i(window.Range,o,document.createRange()),e.wrappers.Range=o}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){e.previousSibling_=e.previousSibling,e.nextSibling_=e.nextSibling,e.parentNode_=e.parentNode}function n(n,o,i){var a=x(n),s=x(o),c=i?x(i):null;if(r(o),t(o),i)n.firstChild===i&&(n.firstChild_=i),i.previousSibling_=i.previousSibling;else{n.lastChild_=n.lastChild,n.lastChild===n.firstChild&&(n.firstChild_=n.firstChild);var l=R(a.lastChild);l&&(l.nextSibling_=l.nextSibling)}e.originalInsertBefore.call(a,s,c)}function r(n){var r=x(n),o=r.parentNode;if(o){var i=R(o);t(n),n.previousSibling&&(n.previousSibling.nextSibling_=n),n.nextSibling&&(n.nextSibling.previousSibling_=n),i.lastChild===n&&(i.lastChild_=n),i.firstChild===n&&(i.firstChild_=n),e.originalRemoveChild.call(o,r)}}function o(e){P.set(e,[])}function i(e){var t=P.get(e);return t||P.set(e,t=[]),t}function a(e){for(var t=[],n=0,r=e.firstChild;r;r=r.nextSibling)t[n++]=r;return t}function s(){for(var e=0;e<F.length;e++){var t=F[e],n=t.parentRenderer;n&&n.dirty||t.render()}F=[]}function c(){T=null,s()}function l(e){var t=A.get(e);return t||(t=new h(e),A.set(e,t)),t}function u(e){var t=j(e).root;return t instanceof C?t:null}function d(e){return l(e.host)}function p(e){this.skip=!1,this.node=e,this.childNodes=[]}function h(e){this.host=e,this.dirty=!1,this.invalidateAttributes(),this.associateNode(e)}function f(e){for(var t=[],n=e.firstChild;n;n=n.nextSibling)E(n)?t.push.apply(t,i(n)):t.push(n);return t}function m(e){if(e instanceof L)return e;if(e instanceof O)return null;for(var t=e.firstChild;t;t=t.nextSibling){var n=m(t);if(n)return n}return null}function w(e,t){i(t).push(e);var n=k.get(e);n?n.push(t):k.set(e,[t])}function v(e){return k.get(e)}function g(e){k.set(e,void 0)}function b(e,t){var n=t.getAttribute("select");if(!n)return!0;if(n=n.trim(),!n)return!0;if(!(e instanceof M))return!1;if(!q.test(n))return!1;try{return e.matches(n)}catch(r){return!1}}function y(e,t){var n=v(t);return n&&n[n.length-1]===e}function E(e){return e instanceof O||e instanceof L}function _(e){return e.shadowRoot}function S(e){for(var t=[],n=e.shadowRoot;n;n=n.olderShadowRoot)t.push(n);return t}var T,M=e.wrappers.Element,O=e.wrappers.HTMLContentElement,L=e.wrappers.HTMLShadowElement,N=e.wrappers.Node,C=e.wrappers.ShadowRoot,j=(e.assert,e.getTreeScope),D=(e.mixin,e.oneOf),H=e.unsafeUnwrap,x=e.unwrap,R=e.wrap,I=e.ArraySplice,P=new WeakMap,k=new WeakMap,A=new WeakMap,W=D(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","setTimeout"]),F=[],U=new I;U.equals=function(e,t){return x(e.node)===t},p.prototype={append:function(e){var t=new p(e);return this.childNodes.push(t),t},sync:function(e){if(!this.skip){for(var t=this.node,o=this.childNodes,i=a(x(t)),s=e||new WeakMap,c=U.calculateSplices(o,i),l=0,u=0,d=0,p=0;p<c.length;p++){for(var h=c[p];d<h.index;d++)u++,o[l++].sync(s);for(var f=h.removed.length,m=0;f>m;m++){var w=R(i[u++]);s.get(w)||r(w)}for(var v=h.addedCount,g=i[u]&&R(i[u]),m=0;v>m;m++){var b=o[l++],y=b.node;n(t,y,g),s.set(y,!0),b.sync(s)}d+=v}for(var p=d;p<o.length;p++)o[p].sync(s)}}},h.prototype={render:function(e){if(this.dirty){this.invalidateAttributes();var t=this.host;this.distribution(t);var n=e||new p(t);this.buildRenderTree(n,t);var r=!e;r&&n.sync(),this.dirty=!1}},get parentRenderer(){return j(this.host).renderer},invalidate:function(){if(!this.dirty){this.dirty=!0;var e=this.parentRenderer;if(e&&e.invalidate(),F.push(this),T)return;T=window[W](c,0)}},distribution:function(e){this.resetAllSubtrees(e),this.distributionResolution(e)},resetAll:function(e){E(e)?o(e):g(e),this.resetAllSubtrees(e)},resetAllSubtrees:function(e){for(var t=e.firstChild;t;t=t.nextSibling)this.resetAll(t);e.shadowRoot&&this.resetAll(e.shadowRoot),e.olderShadowRoot&&this.resetAll(e.olderShadowRoot)},distributionResolution:function(e){if(_(e)){for(var t=e,n=f(t),r=S(t),o=0;o<r.length;o++)this.poolDistribution(r[o],n);for(var o=r.length-1;o>=0;o--){var i=r[o],a=m(i);if(a){var s=i.olderShadowRoot;s&&(n=f(s));for(var c=0;c<n.length;c++)w(n[c],a)}this.distributionResolution(i)}}for(var l=e.firstChild;l;l=l.nextSibling)this.distributionResolution(l)},poolDistribution:function(e,t){if(!(e instanceof L))if(e instanceof O){var n=e;this.updateDependentAttributes(n.getAttribute("select"));for(var r=!1,o=0;o<t.length;o++){var e=t[o];e&&b(e,n)&&(w(e,n),t[o]=void 0,r=!0)}if(!r)for(var i=n.firstChild;i;i=i.nextSibling)w(i,n)}else for(var i=e.firstChild;i;i=i.nextSibling)this.poolDistribution(i,t)},buildRenderTree:function(e,t){for(var n=this.compose(t),r=0;r<n.length;r++){var o=n[r],i=e.append(o);this.buildRenderTree(i,o)}if(_(t)){var a=l(t);a.dirty=!1}},compose:function(e){for(var t=[],n=e.shadowRoot||e,r=n.firstChild;r;r=r.nextSibling)if(E(r)){this.associateNode(n);for(var o=i(r),a=0;a<o.length;a++){var s=o[a];y(r,s)&&t.push(s)}}else t.push(r);return t},invalidateAttributes:function(){this.attributes=Object.create(null)},updateDependentAttributes:function(e){if(e){var t=this.attributes;/\.\w+/.test(e)&&(t["class"]=!0),/#\w+/.test(e)&&(t.id=!0),e.replace(/\[\s*([^\s=\|~\]]+)/g,function(e,n){t[n]=!0})}},dependsOnAttribute:function(e){return this.attributes[e]},associateNode:function(e){H(e).polymerShadowRenderer_=this}};var q=/^(:not\()?[*.#[a-zA-Z_|]/;N.prototype.invalidateShadowRenderer=function(e){var t=H(this).polymerShadowRenderer_;return t?(t.invalidate(),!0):!1},O.prototype.getDistributedNodes=L.prototype.getDistributedNodes=function(){return s(),i(this)},M.prototype.getDestinationInsertionPoints=function(){return s(),v(this)||[]},O.prototype.nodeIsInserted_=L.prototype.nodeIsInserted_=function(){this.invalidateShadowRenderer();var e,t=u(this);t&&(e=d(t)),H(this).polymerShadowRenderer_=e,e&&e.invalidate()},e.getRendererForHost=l,e.getShadowTrees=S,e.renderAllPending=s,e.getDestinationInsertionPoints=v,e.visual={insertBefore:n,remove:r}}(window.ShadowDOMPolyfill),function(e){"use strict";function t(t){if(window[t]){r(!e.wrappers[t]);var c=function(e){n.call(this,e)};c.prototype=Object.create(n.prototype),o(c.prototype,{get form(){return s(a(this).form)}}),i(window[t],c,document.createElement(t.slice(4,-7))),e.wrappers[t]=c}}var n=e.wrappers.HTMLElement,r=e.assert,o=e.mixin,i=e.registerWrapper,a=e.unwrap,s=e.wrap,c=["HTMLButtonElement","HTMLFieldSetElement","HTMLInputElement","HTMLKeygenElement","HTMLLabelElement","HTMLLegendElement","HTMLObjectElement","HTMLOutputElement","HTMLTextAreaElement"];c.forEach(t)}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){r(e,this)}var n=e.registerWrapper,r=e.setWrapper,o=e.unsafeUnwrap,i=e.unwrap,a=e.unwrapIfNeeded,s=e.wrap,c=window.Selection;t.prototype={get anchorNode(){return s(o(this).anchorNode)},get focusNode(){return s(o(this).focusNode)},addRange:function(e){o(this).addRange(a(e))},collapse:function(e,t){o(this).collapse(a(e),t)},containsNode:function(e,t){return o(this).containsNode(a(e),t)},getRangeAt:function(e){return s(o(this).getRangeAt(e))},removeRange:function(e){o(this).removeRange(i(e))},selectAllChildren:function(e){o(this).selectAllChildren(e instanceof ShadowRoot?o(e.host):a(e))},toString:function(){return o(this).toString()}},c.prototype.extend&&(t.prototype.extend=function(e,t){o(this).extend(a(e),t)}),n(window.Selection,t,window.getSelection()),e.wrappers.Selection=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){r(e,this)}var n=e.registerWrapper,r=e.setWrapper,o=e.unsafeUnwrap,i=e.unwrapIfNeeded,a=e.wrap,s=window.TreeWalker;t.prototype={get root(){return a(o(this).root)},get currentNode(){return a(o(this).currentNode)},set currentNode(e){o(this).currentNode=i(e)},get filter(){return o(this).filter},parentNode:function(){return a(o(this).parentNode())},firstChild:function(){return a(o(this).firstChild())},lastChild:function(){return a(o(this).lastChild())},previousSibling:function(){return a(o(this).previousSibling())},previousNode:function(){return a(o(this).previousNode())},nextNode:function(){return a(o(this).nextNode())}},n(s,t),e.wrappers.TreeWalker=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){u.call(this,e),this.treeScope_=new w(this,null)}function n(e){var n=document[e];t.prototype[e]=function(){return j(n.apply(N(this),arguments))}}function r(e,t){x.call(N(t),C(e)),o(e,t)}function o(e,t){e.shadowRoot&&t.adoptNode(e.shadowRoot),e instanceof m&&i(e,t);for(var n=e.firstChild;n;n=n.nextSibling)o(n,t)}function i(e,t){var n=e.olderShadowRoot;n&&t.adoptNode(n)}function a(e){L(e,this)}function s(e,t){
var n=document.implementation[t];e.prototype[t]=function(){return j(n.apply(N(this),arguments))}}function c(e,t){var n=document.implementation[t];e.prototype[t]=function(){return n.apply(N(this),arguments)}}var l=e.GetElementsByInterface,u=e.wrappers.Node,d=e.ParentNodeInterface,p=e.NonElementParentNodeInterface,h=e.wrappers.Selection,f=e.SelectorsInterface,m=e.wrappers.ShadowRoot,w=e.TreeScope,v=e.cloneNode,g=e.defineGetter,b=e.defineWrapGetter,y=e.elementFromPoint,E=e.forwardMethodsToWrapper,_=e.matchesNames,S=e.mixin,T=e.registerWrapper,M=e.renderAllPending,O=e.rewrap,L=e.setWrapper,N=e.unsafeUnwrap,C=e.unwrap,j=e.wrap,D=e.wrapEventTargetMethods,H=(e.wrapNodeList,new WeakMap);t.prototype=Object.create(u.prototype),b(t,"documentElement"),b(t,"body"),b(t,"head"),g(t,"activeElement",function(){var e=C(this).activeElement;if(!e||!e.nodeType)return null;for(var t=j(e);!this.contains(t);){for(;t.parentNode;)t=t.parentNode;if(!t.host)return null;t=t.host}return t}),["createComment","createDocumentFragment","createElement","createElementNS","createEvent","createEventNS","createRange","createTextNode"].forEach(n);var x=document.adoptNode,R=document.getSelection;S(t.prototype,{adoptNode:function(e){return e.parentNode&&e.parentNode.removeChild(e),r(e,this),e},elementFromPoint:function(e,t){return y(this,this,e,t)},importNode:function(e,t){return v(e,t,N(this))},getSelection:function(){return M(),new h(R.call(C(this)))},getElementsByName:function(e){return f.querySelectorAll.call(this,"[name="+JSON.stringify(String(e))+"]")}});var I=document.createTreeWalker,P=e.wrappers.TreeWalker;if(t.prototype.createTreeWalker=function(e,t,n,r){var o=null;return n&&(n.acceptNode&&"function"==typeof n.acceptNode?o={acceptNode:function(e){return n.acceptNode(j(e))}}:"function"==typeof n&&(o=function(e){return n(j(e))})),new P(I.call(C(this),C(e),t,o,r))},document.registerElement){var k=document.registerElement;t.prototype.registerElement=function(t,n){function r(e){return e?void L(e,this):i?document.createElement(i,t):document.createElement(t)}var o,i;if(void 0!==n&&(o=n.prototype,i=n["extends"]),o||(o=Object.create(HTMLElement.prototype)),e.nativePrototypeTable.get(o))throw new Error("NotSupportedError");for(var a,s=Object.getPrototypeOf(o),c=[];s&&!(a=e.nativePrototypeTable.get(s));)c.push(s),s=Object.getPrototypeOf(s);if(!a)throw new Error("NotSupportedError");for(var l=Object.create(a),u=c.length-1;u>=0;u--)l=Object.create(l);["createdCallback","attachedCallback","detachedCallback","attributeChangedCallback"].forEach(function(e){var t=o[e];t&&(l[e]=function(){j(this)instanceof r||O(this),t.apply(j(this),arguments)})});var d={prototype:l};i&&(d["extends"]=i),r.prototype=o,r.prototype.constructor=r,e.constructorTable.set(l,r),e.nativePrototypeTable.set(o,l);k.call(C(this),t,d);return r},E([window.HTMLDocument||window.Document],["registerElement"])}E([window.HTMLBodyElement,window.HTMLDocument||window.Document,window.HTMLHeadElement,window.HTMLHtmlElement],["appendChild","compareDocumentPosition","contains","getElementsByClassName","getElementsByTagName","getElementsByTagNameNS","insertBefore","querySelector","querySelectorAll","removeChild","replaceChild"]),E([window.HTMLBodyElement,window.HTMLHeadElement,window.HTMLHtmlElement],_),E([window.HTMLDocument||window.Document],["adoptNode","importNode","contains","createComment","createDocumentFragment","createElement","createElementNS","createEvent","createEventNS","createRange","createTextNode","createTreeWalker","elementFromPoint","getElementById","getElementsByName","getSelection"]),S(t.prototype,l),S(t.prototype,d),S(t.prototype,f),S(t.prototype,p),S(t.prototype,{get implementation(){var e=H.get(this);return e?e:(e=new a(C(this).implementation),H.set(this,e),e)},get defaultView(){return j(C(this).defaultView)}}),T(window.Document,t,document.implementation.createHTMLDocument("")),window.HTMLDocument&&T(window.HTMLDocument,t),D([window.HTMLBodyElement,window.HTMLDocument||window.Document,window.HTMLHeadElement]);var A=document.implementation.createDocument;a.prototype.createDocument=function(){return arguments[2]=C(arguments[2]),j(A.apply(N(this),arguments))},s(a,"createDocumentType"),s(a,"createHTMLDocument"),c(a,"hasFeature"),T(window.DOMImplementation,a),E([window.DOMImplementation],["createDocument","createDocumentType","createHTMLDocument","hasFeature"]),e.adoptNodeNoRemove=r,e.wrappers.DOMImplementation=a,e.wrappers.Document=t}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){n.call(this,e)}var n=e.wrappers.EventTarget,r=e.wrappers.Selection,o=e.mixin,i=e.registerWrapper,a=e.renderAllPending,s=e.unwrap,c=e.unwrapIfNeeded,l=e.wrap,u=window.Window,d=window.getComputedStyle,p=window.getDefaultComputedStyle,h=window.getSelection;t.prototype=Object.create(n.prototype),u.prototype.getComputedStyle=function(e,t){return l(this||window).getComputedStyle(c(e),t)},p&&(u.prototype.getDefaultComputedStyle=function(e,t){return l(this||window).getDefaultComputedStyle(c(e),t)}),u.prototype.getSelection=function(){return l(this||window).getSelection()},delete window.getComputedStyle,delete window.getDefaultComputedStyle,delete window.getSelection,["addEventListener","removeEventListener","dispatchEvent"].forEach(function(e){u.prototype[e]=function(){var t=l(this||window);return t[e].apply(t,arguments)},delete window[e]}),o(t.prototype,{getComputedStyle:function(e,t){return a(),d.call(s(this),c(e),t)},getSelection:function(){return a(),new r(h.call(s(this)))},get document(){return l(s(this).document)}}),p&&(t.prototype.getDefaultComputedStyle=function(e,t){return a(),p.call(s(this),c(e),t)}),i(u,t,window),e.wrappers.Window=t}(window.ShadowDOMPolyfill),function(e){"use strict";var t=e.unwrap,n=window.DataTransfer||window.Clipboard,r=n.prototype.setDragImage;r&&(n.prototype.setDragImage=function(e,n,o){r.call(this,t(e),n,o)})}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){var t;t=e instanceof i?e:new i(e&&o(e)),r(t,this)}var n=e.registerWrapper,r=e.setWrapper,o=e.unwrap,i=window.FormData;i&&(n(i,t,new i),e.wrappers.FormData=t)}(window.ShadowDOMPolyfill),function(e){"use strict";var t=e.unwrapIfNeeded,n=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.send=function(e){return n.call(this,t(e))}}(window.ShadowDOMPolyfill),function(e){"use strict";function t(e){var t=n[e],r=window[t];if(r){var o=document.createElement(e),i=o.constructor;window[t]=i}}var n=(e.isWrapperFor,{a:"HTMLAnchorElement",area:"HTMLAreaElement",audio:"HTMLAudioElement",base:"HTMLBaseElement",body:"HTMLBodyElement",br:"HTMLBRElement",button:"HTMLButtonElement",canvas:"HTMLCanvasElement",caption:"HTMLTableCaptionElement",col:"HTMLTableColElement",content:"HTMLContentElement",data:"HTMLDataElement",datalist:"HTMLDataListElement",del:"HTMLModElement",dir:"HTMLDirectoryElement",div:"HTMLDivElement",dl:"HTMLDListElement",embed:"HTMLEmbedElement",fieldset:"HTMLFieldSetElement",font:"HTMLFontElement",form:"HTMLFormElement",frame:"HTMLFrameElement",frameset:"HTMLFrameSetElement",h1:"HTMLHeadingElement",head:"HTMLHeadElement",hr:"HTMLHRElement",html:"HTMLHtmlElement",iframe:"HTMLIFrameElement",img:"HTMLImageElement",input:"HTMLInputElement",keygen:"HTMLKeygenElement",label:"HTMLLabelElement",legend:"HTMLLegendElement",li:"HTMLLIElement",link:"HTMLLinkElement",map:"HTMLMapElement",marquee:"HTMLMarqueeElement",menu:"HTMLMenuElement",menuitem:"HTMLMenuItemElement",meta:"HTMLMetaElement",meter:"HTMLMeterElement",object:"HTMLObjectElement",ol:"HTMLOListElement",optgroup:"HTMLOptGroupElement",option:"HTMLOptionElement",output:"HTMLOutputElement",p:"HTMLParagraphElement",param:"HTMLParamElement",pre:"HTMLPreElement",progress:"HTMLProgressElement",q:"HTMLQuoteElement",script:"HTMLScriptElement",select:"HTMLSelectElement",shadow:"HTMLShadowElement",source:"HTMLSourceElement",span:"HTMLSpanElement",style:"HTMLStyleElement",table:"HTMLTableElement",tbody:"HTMLTableSectionElement",template:"HTMLTemplateElement",textarea:"HTMLTextAreaElement",thead:"HTMLTableSectionElement",time:"HTMLTimeElement",title:"HTMLTitleElement",tr:"HTMLTableRowElement",track:"HTMLTrackElement",ul:"HTMLUListElement",video:"HTMLVideoElement"});Object.keys(n).forEach(t),Object.getOwnPropertyNames(e.wrappers).forEach(function(t){window[t]=e.wrappers[t]})}(window.ShadowDOMPolyfill),function(e){function t(e,t){var n="";return Array.prototype.forEach.call(e,function(e){n+=e.textContent+"\n\n"}),t||(n=n.replace(d,"")),n}function n(e){var t=document.createElement("style");return t.textContent=e,t}function r(e){var t=n(e);document.head.appendChild(t);var r=[];if(t.sheet)try{r=t.sheet.cssRules}catch(o){}else console.warn("sheet not found",t);return t.parentNode.removeChild(t),r}function o(){C.initialized=!0,document.body.appendChild(C);var e=C.contentDocument,t=e.createElement("base");t.href=document.baseURI,e.head.appendChild(t)}function i(e){C.initialized||o(),document.body.appendChild(C),e(C.contentDocument),document.body.removeChild(C)}function a(e,t){if(t){var o;if(e.match("@import")&&D){var a=n(e);i(function(e){e.head.appendChild(a.impl),o=Array.prototype.slice.call(a.sheet.cssRules,0),t(o)})}else o=r(e),t(o)}}function s(e){e&&l().appendChild(document.createTextNode(e))}function c(e,t){var r=n(e);r.setAttribute(t,""),r.setAttribute(x,""),document.head.appendChild(r)}function l(){return j||(j=document.createElement("style"),j.setAttribute(x,""),j[x]=!0),j}var u={strictStyling:!1,registry:{},shimStyling:function(e,n,r){var o=this.prepareRoot(e,n,r),i=this.isTypeExtension(r),a=this.makeScopeSelector(n,i),s=t(o,!0);s=this.scopeCssText(s,a),e&&(e.shimmedStyle=s),this.addCssToDocument(s,n)},shimStyle:function(e,t){return this.shimCssText(e.textContent,t)},shimCssText:function(e,t){return e=this.insertDirectives(e),this.scopeCssText(e,t)},makeScopeSelector:function(e,t){return e?t?"[is="+e+"]":e:""},isTypeExtension:function(e){return e&&e.indexOf("-")<0},prepareRoot:function(e,t,n){var r=this.registerRoot(e,t,n);return this.replaceTextInStyles(r.rootStyles,this.insertDirectives),this.removeStyles(e,r.rootStyles),this.strictStyling&&this.applyScopeToContent(e,t),r.scopeStyles},removeStyles:function(e,t){for(var n,r=0,o=t.length;o>r&&(n=t[r]);r++)n.parentNode.removeChild(n)},registerRoot:function(e,t,n){var r=this.registry[t]={root:e,name:t,extendsName:n},o=this.findStyles(e);r.rootStyles=o,r.scopeStyles=r.rootStyles;var i=this.registry[r.extendsName];return i&&(r.scopeStyles=i.scopeStyles.concat(r.scopeStyles)),r},findStyles:function(e){if(!e)return[];var t=e.querySelectorAll("style");return Array.prototype.filter.call(t,function(e){return!e.hasAttribute(R)})},applyScopeToContent:function(e,t){e&&(Array.prototype.forEach.call(e.querySelectorAll("*"),function(e){e.setAttribute(t,"")}),Array.prototype.forEach.call(e.querySelectorAll("template"),function(e){this.applyScopeToContent(e.content,t)},this))},insertDirectives:function(e){return e=this.insertPolyfillDirectivesInCssText(e),this.insertPolyfillRulesInCssText(e)},insertPolyfillDirectivesInCssText:function(e){return e=e.replace(p,function(e,t){return t.slice(0,-2)+"{"}),e.replace(h,function(e,t){return t+" {"})},insertPolyfillRulesInCssText:function(e){return e=e.replace(f,function(e,t){return t.slice(0,-1)}),e.replace(m,function(e,t,n,r){var o=e.replace(t,"").replace(n,"");return r+o})},scopeCssText:function(e,t){var n=this.extractUnscopedRulesFromCssText(e);if(e=this.insertPolyfillHostInCssText(e),e=this.convertColonHost(e),e=this.convertColonHostContext(e),e=this.convertShadowDOMSelectors(e),t){var e,r=this;a(e,function(n){e=r.scopeRules(n,t)})}return e=e+"\n"+n,e.trim()},extractUnscopedRulesFromCssText:function(e){for(var t,n="";t=w.exec(e);)n+=t[1].slice(0,-1)+"\n\n";for(;t=v.exec(e);)n+=t[0].replace(t[2],"").replace(t[1],t[3])+"\n\n";return n},convertColonHost:function(e){return this.convertColonRule(e,E,this.colonHostPartReplacer)},convertColonHostContext:function(e){return this.convertColonRule(e,_,this.colonHostContextPartReplacer)},convertColonRule:function(e,t,n){return e.replace(t,function(e,t,r,o){if(t=O,r){for(var i,a=r.split(","),s=[],c=0,l=a.length;l>c&&(i=a[c]);c++)i=i.trim(),s.push(n(t,i,o));return s.join(",")}return t+o})},colonHostContextPartReplacer:function(e,t,n){return t.match(g)?this.colonHostPartReplacer(e,t,n):e+t+n+", "+t+" "+e+n},colonHostPartReplacer:function(e,t,n){return e+t.replace(g,"")+n},convertShadowDOMSelectors:function(e){for(var t=0;t<N.length;t++)e=e.replace(N[t]," ");return e},scopeRules:function(e,t){var n="";return e&&Array.prototype.forEach.call(e,function(e){if(e.selectorText&&e.style&&void 0!==e.style.cssText)n+=this.scopeSelector(e.selectorText,t,this.strictStyling)+" {\n	",n+=this.propertiesFromRule(e)+"\n}\n\n";else if(e.type===CSSRule.MEDIA_RULE)n+="@media "+e.media.mediaText+" {\n",n+=this.scopeRules(e.cssRules,t),n+="\n}\n\n";else try{e.cssText&&(n+=e.cssText+"\n\n")}catch(r){e.type===CSSRule.KEYFRAMES_RULE&&e.cssRules&&(n+=this.ieSafeCssTextFromKeyFrameRule(e))}},this),n},ieSafeCssTextFromKeyFrameRule:function(e){var t="@keyframes "+e.name+" {";return Array.prototype.forEach.call(e.cssRules,function(e){t+=" "+e.keyText+" {"+e.style.cssText+"}"}),t+=" }"},scopeSelector:function(e,t,n){var r=[],o=e.split(",");return o.forEach(function(e){e=e.trim(),this.selectorNeedsScoping(e,t)&&(e=n&&!e.match(O)?this.applyStrictSelectorScope(e,t):this.applySelectorScope(e,t)),r.push(e)},this),r.join(", ")},selectorNeedsScoping:function(e,t){if(Array.isArray(t))return!0;var n=this.makeScopeMatcher(t);return!e.match(n)},makeScopeMatcher:function(e){return e=e.replace(/\[/g,"\\[").replace(/\]/g,"\\]"),new RegExp("^("+e+")"+S,"m")},applySelectorScope:function(e,t){return Array.isArray(t)?this.applySelectorScopeList(e,t):this.applySimpleSelectorScope(e,t)},applySelectorScopeList:function(e,t){for(var n,r=[],o=0;n=t[o];o++)r.push(this.applySimpleSelectorScope(e,n));return r.join(", ")},applySimpleSelectorScope:function(e,t){return e.match(L)?(e=e.replace(O,t),e.replace(L,t+" ")):t+" "+e},applyStrictSelectorScope:function(e,t){t=t.replace(/\[is=([^\]]*)\]/g,"$1");var n=[" ",">","+","~"],r=e,o="["+t+"]";return n.forEach(function(e){var t=r.split(e);r=t.map(function(e){var t=e.trim().replace(L,"");return t&&n.indexOf(t)<0&&t.indexOf(o)<0&&(e=t.replace(/([^:]*)(:*)(.*)/,"$1"+o+"$2$3")),e}).join(e)}),r},insertPolyfillHostInCssText:function(e){return e.replace(M,b).replace(T,g)},propertiesFromRule:function(e){var t=e.style.cssText;e.style.content&&!e.style.content.match(/['"]+|attr/)&&(t=t.replace(/content:[^;]*;/g,"content: '"+e.style.content+"';"));var n=e.style;for(var r in n)"initial"===n[r]&&(t+=r+": initial; ");return t},replaceTextInStyles:function(e,t){e&&t&&(e instanceof Array||(e=[e]),Array.prototype.forEach.call(e,function(e){e.textContent=t.call(this,e.textContent)},this))},addCssToDocument:function(e,t){e.match("@import")?c(e,t):s(e)}},d=/\/\*[^*]*\*+([^\/*][^*]*\*+)*\//gim,p=/\/\*\s*@polyfill ([^*]*\*+([^\/*][^*]*\*+)*\/)([^{]*?){/gim,h=/polyfill-next-selector[^}]*content\:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim,f=/\/\*\s@polyfill-rule([^*]*\*+([^\/*][^*]*\*+)*)\//gim,m=/(polyfill-rule)[^}]*(content\:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,w=/\/\*\s@polyfill-unscoped-rule([^*]*\*+([^\/*][^*]*\*+)*)\//gim,v=/(polyfill-unscoped-rule)[^}]*(content\:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,g="-shadowcsshost",b="-shadowcsscontext",y=")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",E=new RegExp("("+g+y,"gim"),_=new RegExp("("+b+y,"gim"),S="([>\\s~+[.,{:][\\s\\S]*)?$",T=/\:host/gim,M=/\:host-context/gim,O=g+"-no-combinator",L=new RegExp(g,"gim"),N=(new RegExp(b,"gim"),[/>>>/g,/::shadow/g,/::content/g,/\/deep\//g,/\/shadow\//g,/\/shadow-deep\//g,/\^\^/g,/\^/g]),C=document.createElement("iframe");C.style.display="none";var j,D=navigator.userAgent.match("Chrome"),H="shim-shadowdom",x="shim-shadowdom-css",R="no-shim";if(window.ShadowDOMPolyfill){s("style { display: none !important; }\n");var I=ShadowDOMPolyfill.wrap(document),P=I.querySelector("head");P.insertBefore(l(),P.childNodes[0]),document.addEventListener("DOMContentLoaded",function(){e.urlResolver;if(window.HTMLImports&&!HTMLImports.useNative){var t="link[rel=stylesheet]["+H+"]",n="style["+H+"]";HTMLImports.importer.documentPreloadSelectors+=","+t,HTMLImports.importer.importsPreloadSelectors+=","+t,HTMLImports.parser.documentSelectors=[HTMLImports.parser.documentSelectors,t,n].join(",");var r=HTMLImports.parser.parseGeneric;HTMLImports.parser.parseGeneric=function(e){if(!e[x]){var t=e.__importElement||e;if(!t.hasAttribute(H))return void r.call(this,e);e.__resource&&(t=e.ownerDocument.createElement("style"),t.textContent=e.__resource),HTMLImports.path.resolveUrlsInStyle(t,e.href),t.textContent=u.shimStyle(t),t.removeAttribute(H,""),t.setAttribute(x,""),t[x]=!0,t.parentNode!==P&&(e.parentNode===P?P.replaceChild(t,e):this.addElementToDocument(t)),t.__importParsed=!0,this.markParsingComplete(e),this.parseNext()}};var o=HTMLImports.parser.hasResource;HTMLImports.parser.hasResource=function(e){return"link"===e.localName&&"stylesheet"===e.rel&&e.hasAttribute(H)?e.__resource:o.call(this,e)}}})}e.ShadowCSS=u}(window.WebComponents)),function(e){window.ShadowDOMPolyfill?(window.wrap=ShadowDOMPolyfill.wrapIfNeeded,window.unwrap=ShadowDOMPolyfill.unwrapIfNeeded):window.wrap=window.unwrap=function(e){return e}}(window.WebComponents),function(e){"use strict";function t(e){return void 0!==p[e]}function n(){s.call(this),this._isInvalid=!0}function r(e){return""==e&&n.call(this),e.toLowerCase()}function o(e){var t=e.charCodeAt(0);return t>32&&127>t&&-1==[34,35,60,62,63,96].indexOf(t)?e:encodeURIComponent(e)}function i(e){var t=e.charCodeAt(0);return t>32&&127>t&&-1==[34,35,60,62,96].indexOf(t)?e:encodeURIComponent(e)}function a(e,a,s){function c(e){b.push(e)}var l=a||"scheme start",u=0,d="",v=!1,g=!1,b=[];e:for(;(e[u-1]!=f||0==u)&&!this._isInvalid;){var y=e[u];switch(l){case"scheme start":if(!y||!m.test(y)){if(a){c("Invalid scheme.");break e}d="",l="no scheme";continue}d+=y.toLowerCase(),l="scheme";break;case"scheme":if(y&&w.test(y))d+=y.toLowerCase();else{if(":"!=y){if(a){if(f==y)break e;c("Code point not allowed in scheme: "+y);break e}d="",u=0,l="no scheme";continue}if(this._scheme=d,d="",a)break e;t(this._scheme)&&(this._isRelative=!0),l="file"==this._scheme?"relative":this._isRelative&&s&&s._scheme==this._scheme?"relative or authority":this._isRelative?"authority first slash":"scheme data"}break;case"scheme data":"?"==y?(this._query="?",l="query"):"#"==y?(this._fragment="#",l="fragment"):f!=y&&"	"!=y&&"\n"!=y&&"\r"!=y&&(this._schemeData+=o(y));break;case"no scheme":if(s&&t(s._scheme)){l="relative";continue}c("Missing scheme."),n.call(this);break;case"relative or authority":if("/"!=y||"/"!=e[u+1]){c("Expected /, got: "+y),l="relative";continue}l="authority ignore slashes";break;case"relative":if(this._isRelative=!0,"file"!=this._scheme&&(this._scheme=s._scheme),f==y){this._host=s._host,this._port=s._port,this._path=s._path.slice(),this._query=s._query,this._username=s._username,this._password=s._password;break e}if("/"==y||"\\"==y)"\\"==y&&c("\\ is an invalid code point."),l="relative slash";else if("?"==y)this._host=s._host,this._port=s._port,this._path=s._path.slice(),this._query="?",this._username=s._username,this._password=s._password,l="query";else{if("#"!=y){var E=e[u+1],_=e[u+2];("file"!=this._scheme||!m.test(y)||":"!=E&&"|"!=E||f!=_&&"/"!=_&&"\\"!=_&&"?"!=_&&"#"!=_)&&(this._host=s._host,this._port=s._port,this._username=s._username,this._password=s._password,this._path=s._path.slice(),this._path.pop()),l="relative path";continue}this._host=s._host,this._port=s._port,this._path=s._path.slice(),this._query=s._query,this._fragment="#",this._username=s._username,this._password=s._password,l="fragment"}break;case"relative slash":if("/"!=y&&"\\"!=y){"file"!=this._scheme&&(this._host=s._host,this._port=s._port,this._username=s._username,this._password=s._password),l="relative path";continue}"\\"==y&&c("\\ is an invalid code point."),l="file"==this._scheme?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!=y){c("Expected '/', got: "+y),l="authority ignore slashes";continue}l="authority second slash";break;case"authority second slash":if(l="authority ignore slashes","/"!=y){c("Expected '/', got: "+y);continue}break;case"authority ignore slashes":if("/"!=y&&"\\"!=y){l="authority";continue}c("Expected authority, got: "+y);break;case"authority":if("@"==y){v&&(c("@ already seen."),d+="%40"),v=!0;for(var S=0;S<d.length;S++){var T=d[S];if("	"!=T&&"\n"!=T&&"\r"!=T)if(":"!=T||null!==this._password){var M=o(T);null!==this._password?this._password+=M:this._username+=M}else this._password="";else c("Invalid whitespace in authority.")}d=""}else{if(f==y||"/"==y||"\\"==y||"?"==y||"#"==y){u-=d.length,d="",l="host";continue}d+=y}break;case"file host":if(f==y||"/"==y||"\\"==y||"?"==y||"#"==y){2!=d.length||!m.test(d[0])||":"!=d[1]&&"|"!=d[1]?0==d.length?l="relative path start":(this._host=r.call(this,d),d="",l="relative path start"):l="relative path";continue}"	"==y||"\n"==y||"\r"==y?c("Invalid whitespace in file host."):d+=y;break;case"host":case"hostname":if(":"!=y||g){if(f==y||"/"==y||"\\"==y||"?"==y||"#"==y){if(this._host=r.call(this,d),d="",l="relative path start",a)break e;continue}"	"!=y&&"\n"!=y&&"\r"!=y?("["==y?g=!0:"]"==y&&(g=!1),d+=y):c("Invalid code point in host/hostname: "+y)}else if(this._host=r.call(this,d),d="",l="port","hostname"==a)break e;break;case"port":if(/[0-9]/.test(y))d+=y;else{if(f==y||"/"==y||"\\"==y||"?"==y||"#"==y||a){if(""!=d){var O=parseInt(d,10);O!=p[this._scheme]&&(this._port=O+""),d=""}if(a)break e;l="relative path start";continue}"	"==y||"\n"==y||"\r"==y?c("Invalid code point in port: "+y):n.call(this)}break;case"relative path start":if("\\"==y&&c("'\\' not allowed in path."),l="relative path","/"!=y&&"\\"!=y)continue;break;case"relative path":if(f!=y&&"/"!=y&&"\\"!=y&&(a||"?"!=y&&"#"!=y))"	"!=y&&"\n"!=y&&"\r"!=y&&(d+=o(y));else{"\\"==y&&c("\\ not allowed in relative path.");var L;(L=h[d.toLowerCase()])&&(d=L),".."==d?(this._path.pop(),"/"!=y&&"\\"!=y&&this._path.push("")):"."==d&&"/"!=y&&"\\"!=y?this._path.push(""):"."!=d&&("file"==this._scheme&&0==this._path.length&&2==d.length&&m.test(d[0])&&"|"==d[1]&&(d=d[0]+":"),this._path.push(d)),d="","?"==y?(this._query="?",l="query"):"#"==y&&(this._fragment="#",l="fragment")}break;case"query":a||"#"!=y?f!=y&&"	"!=y&&"\n"!=y&&"\r"!=y&&(this._query+=i(y)):(this._fragment="#",l="fragment");break;case"fragment":f!=y&&"	"!=y&&"\n"!=y&&"\r"!=y&&(this._fragment+=y)}u++}}function s(){this._scheme="",this._schemeData="",this._username="",this._password=null,this._host="",this._port="",this._path=[],this._query="",this._fragment="",this._isInvalid=!1,this._isRelative=!1}function c(e,t){void 0===t||t instanceof c||(t=new c(String(t))),this._url=e,s.call(this);var n=e.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,"");a.call(this,n,null,t)}var l=!1;if(!e.forceJURL)try{var u=new URL("b","http://a");u.pathname="c%20d",l="http://a/c%20d"===u.href}catch(d){}if(!l){var p=Object.create(null);p.ftp=21,p.file=0,p.gopher=70,p.http=80,p.https=443,p.ws=80,p.wss=443;var h=Object.create(null);h["%2e"]=".",h[".%2e"]="..",h["%2e."]="..",h["%2e%2e"]="..";var f=void 0,m=/[a-zA-Z]/,w=/[a-zA-Z0-9\+\-\.]/;c.prototype={toString:function(){return this.href},get href(){if(this._isInvalid)return this._url;var e="";return(""!=this._username||null!=this._password)&&(e=this._username+(null!=this._password?":"+this._password:"")+"@"),this.protocol+(this._isRelative?"//"+e+this.host:"")+this.pathname+this._query+this._fragment},set href(e){s.call(this),a.call(this,e)},get protocol(){return this._scheme+":"},set protocol(e){this._isInvalid||a.call(this,e+":","scheme start")},get host(){return this._isInvalid?"":this._port?this._host+":"+this._port:this._host},set host(e){!this._isInvalid&&this._isRelative&&a.call(this,e,"host")},get hostname(){return this._host},set hostname(e){!this._isInvalid&&this._isRelative&&a.call(this,e,"hostname")},get port(){return this._port},set port(e){!this._isInvalid&&this._isRelative&&a.call(this,e,"port")},get pathname(){return this._isInvalid?"":this._isRelative?"/"+this._path.join("/"):this._schemeData},set pathname(e){!this._isInvalid&&this._isRelative&&(this._path=[],a.call(this,e,"relative path start"))},get search(){return this._isInvalid||!this._query||"?"==this._query?"":this._query},set search(e){!this._isInvalid&&this._isRelative&&(this._query="?","?"==e[0]&&(e=e.slice(1)),a.call(this,e,"query"))},get hash(){return this._isInvalid||!this._fragment||"#"==this._fragment?"":this._fragment},set hash(e){this._isInvalid||(this._fragment="#","#"==e[0]&&(e=e.slice(1)),a.call(this,e,"fragment"))},get origin(){var e;if(this._isInvalid||!this._scheme)return"";switch(this._scheme){case"data":case"file":case"javascript":case"mailto":return"null"}return e=this.host,e?this._scheme+"://"+e:""}};var v=e.URL;v&&(c.createObjectURL=function(e){return v.createObjectURL.apply(v,arguments)},c.revokeObjectURL=function(e){v.revokeObjectURL(e)}),e.URL=c}}(self),function(e){function t(e){y.push(e),b||(b=!0,m(r))}function n(e){return window.ShadowDOMPolyfill&&window.ShadowDOMPolyfill.wrapIfNeeded(e)||e}function r(){b=!1;var e=y;y=[],e.sort(function(e,t){return e.uid_-t.uid_});var t=!1;e.forEach(function(e){var n=e.takeRecords();o(e),n.length&&(e.callback_(n,e),t=!0)}),t&&r()}function o(e){e.nodes_.forEach(function(t){var n=w.get(t);n&&n.forEach(function(t){t.observer===e&&t.removeTransientObservers()})})}function i(e,t){for(var n=e;n;n=n.parentNode){var r=w.get(n);if(r)for(var o=0;o<r.length;o++){var i=r[o],a=i.options;if(n===e||a.subtree){var s=t(a);s&&i.enqueue(s)}}}}function a(e){this.callback_=e,this.nodes_=[],this.records_=[],this.uid_=++E}function s(e,t){this.type=e,this.target=t,this.addedNodes=[],this.removedNodes=[],this.previousSibling=null,this.nextSibling=null,this.attributeName=null,this.attributeNamespace=null,this.oldValue=null}function c(e){var t=new s(e.type,e.target);return t.addedNodes=e.addedNodes.slice(),t.removedNodes=e.removedNodes.slice(),t.previousSibling=e.previousSibling,t.nextSibling=e.nextSibling,t.attributeName=e.attributeName,t.attributeNamespace=e.attributeNamespace,t.oldValue=e.oldValue,t}function l(e,t){return _=new s(e,t)}function u(e){return S?S:(S=c(_),S.oldValue=e,S)}function d(){_=S=void 0}function p(e){return e===S||e===_}function h(e,t){return e===t?e:S&&p(e)?S:null}function f(e,t,n){this.observer=e,this.target=t,this.options=n,this.transientObservedNodes=[]}if(!e.JsMutationObserver){var m,w=new WeakMap;if(/Trident|Edge/.test(navigator.userAgent))m=setTimeout;else if(window.setImmediate)m=window.setImmediate;else{var v=[],g=String(Math.random());window.addEventListener("message",function(e){if(e.data===g){var t=v;v=[],t.forEach(function(e){e()})}}),m=function(e){v.push(e),window.postMessage(g,"*")}}var b=!1,y=[],E=0;a.prototype={observe:function(e,t){if(e=n(e),!t.childList&&!t.attributes&&!t.characterData||t.attributeOldValue&&!t.attributes||t.attributeFilter&&t.attributeFilter.length&&!t.attributes||t.characterDataOldValue&&!t.characterData)throw new SyntaxError;var r=w.get(e);r||w.set(e,r=[]);for(var o,i=0;i<r.length;i++)if(r[i].observer===this){o=r[i],o.removeListeners(),o.options=t;break}o||(o=new f(this,e,t),r.push(o),this.nodes_.push(e)),o.addListeners()},disconnect:function(){this.nodes_.forEach(function(e){for(var t=w.get(e),n=0;n<t.length;n++){var r=t[n];if(r.observer===this){r.removeListeners(),t.splice(n,1);break}}},this),this.records_=[]},takeRecords:function(){var e=this.records_;return this.records_=[],e}};var _,S;f.prototype={enqueue:function(e){var n=this.observer.records_,r=n.length;if(n.length>0){var o=n[r-1],i=h(o,e);if(i)return void(n[r-1]=i)}else t(this.observer);n[r]=e},addListeners:function(){this.addListeners_(this.target)},addListeners_:function(e){var t=this.options;t.attributes&&e.addEventListener("DOMAttrModified",this,!0),t.characterData&&e.addEventListener("DOMCharacterDataModified",this,!0),t.childList&&e.addEventListener("DOMNodeInserted",this,!0),(t.childList||t.subtree)&&e.addEventListener("DOMNodeRemoved",this,!0)},removeListeners:function(){this.removeListeners_(this.target)},removeListeners_:function(e){var t=this.options;t.attributes&&e.removeEventListener("DOMAttrModified",this,!0),t.characterData&&e.removeEventListener("DOMCharacterDataModified",this,!0),t.childList&&e.removeEventListener("DOMNodeInserted",this,!0),(t.childList||t.subtree)&&e.removeEventListener("DOMNodeRemoved",this,!0)},addTransientObserver:function(e){if(e!==this.target){this.addListeners_(e),this.transientObservedNodes.push(e);var t=w.get(e);t||w.set(e,t=[]),t.push(this)}},removeTransientObservers:function(){var e=this.transientObservedNodes;this.transientObservedNodes=[],e.forEach(function(e){this.removeListeners_(e);for(var t=w.get(e),n=0;n<t.length;n++)if(t[n]===this){t.splice(n,1);break}},this)},handleEvent:function(e){switch(e.stopImmediatePropagation(),e.type){case"DOMAttrModified":var t=e.attrName,n=e.relatedNode.namespaceURI,r=e.target,o=new l("attributes",r);o.attributeName=t,o.attributeNamespace=n;var a=e.attrChange===MutationEvent.ADDITION?null:e.prevValue;i(r,function(e){return!e.attributes||e.attributeFilter&&e.attributeFilter.length&&-1===e.attributeFilter.indexOf(t)&&-1===e.attributeFilter.indexOf(n)?void 0:e.attributeOldValue?u(a):o});break;case"DOMCharacterDataModified":var r=e.target,o=l("characterData",r),a=e.prevValue;i(r,function(e){return e.characterData?e.characterDataOldValue?u(a):o:void 0});break;case"DOMNodeRemoved":this.addTransientObserver(e.target);case"DOMNodeInserted":var s,c,p=e.target;"DOMNodeInserted"===e.type?(s=[p],c=[]):(s=[],c=[p]);var h=p.previousSibling,f=p.nextSibling,o=l("childList",e.target.parentNode);o.addedNodes=s,o.removedNodes=c,o.previousSibling=h,o.nextSibling=f,i(e.relatedNode,function(e){return e.childList?o:void 0})}d()}},e.JsMutationObserver=a,e.MutationObserver||(e.MutationObserver=a,a._isPolyfilled=!0)}}(self),function(e){"use strict";if(!window.performance){var t=Date.now();window.performance={now:function(){return Date.now()-t}}}window.requestAnimationFrame||(window.requestAnimationFrame=function(){var e=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame;return e?function(t){return e(function(){t(performance.now())})}:function(e){return window.setTimeout(e,1e3/60)}}()),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(){return window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||function(e){clearTimeout(e)}}());var n=function(){var e=document.createEvent("Event");return e.initEvent("foo",!0,!0),e.preventDefault(),e.defaultPrevented}();if(!n){var r=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(r.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}}var o=/Trident/.test(navigator.userAgent);if((!window.CustomEvent||o&&"function"!=typeof window.CustomEvent)&&(window.CustomEvent=function(e,t){t=t||{};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,Boolean(t.bubbles),Boolean(t.cancelable),t.detail),n},window.CustomEvent.prototype=window.Event.prototype),!window.Event||o&&"function"!=typeof window.Event){var i=window.Event;window.Event=function(e,t){t=t||{};var n=document.createEvent("Event");return n.initEvent(e,Boolean(t.bubbles),Boolean(t.cancelable)),n},window.Event.prototype=i.prototype}}(window.WebComponents),window.HTMLImports=window.HTMLImports||{flags:{}},function(e){function t(e,t){t=t||f,r(function(){i(e,t)},t)}function n(e){return"complete"===e.readyState||e.readyState===v}function r(e,t){if(n(t))e&&e();else{var o=function(){("complete"===t.readyState||t.readyState===v)&&(t.removeEventListener(g,o),r(e,t))};t.addEventListener(g,o)}}function o(e){e.target.__loaded=!0}function i(e,t){function n(){c==l&&e&&e({allImports:s,loadedImports:u,errorImports:d})}function r(e){o(e),u.push(this),
c++,n()}function i(e){d.push(this),c++,n()}var s=t.querySelectorAll("link[rel=import]"),c=0,l=s.length,u=[],d=[];if(l)for(var p,h=0;l>h&&(p=s[h]);h++)a(p)?(u.push(this),c++,n()):(p.addEventListener("load",r),p.addEventListener("error",i));else n()}function a(e){return d?e.__loaded||e["import"]&&"loading"!==e["import"].readyState:e.__importParsed}function s(e){for(var t,n=0,r=e.length;r>n&&(t=e[n]);n++)c(t)&&l(t)}function c(e){return"link"===e.localName&&"import"===e.rel}function l(e){var t=e["import"];t?o({target:e}):(e.addEventListener("load",o),e.addEventListener("error",o))}var u="import",d=Boolean(u in document.createElement("link")),p=Boolean(window.ShadowDOMPolyfill),h=function(e){return p?window.ShadowDOMPolyfill.wrapIfNeeded(e):e},f=h(document),m={get:function(){var e=window.HTMLImports.currentScript||document.currentScript||("complete"!==document.readyState?document.scripts[document.scripts.length-1]:null);return h(e)},configurable:!0};Object.defineProperty(document,"_currentScript",m),Object.defineProperty(f,"_currentScript",m);var w=/Trident/.test(navigator.userAgent),v=w?"complete":"interactive",g="readystatechange";d&&(new MutationObserver(function(e){for(var t,n=0,r=e.length;r>n&&(t=e[n]);n++)t.addedNodes&&s(t.addedNodes)}).observe(document.head,{childList:!0}),function(){if("loading"===document.readyState)for(var e,t=document.querySelectorAll("link[rel=import]"),n=0,r=t.length;r>n&&(e=t[n]);n++)l(e)}()),t(function(e){window.HTMLImports.ready=!0,window.HTMLImports.readyTime=(new Date).getTime();var t=f.createEvent("CustomEvent");t.initCustomEvent("HTMLImportsLoaded",!0,!0,e),f.dispatchEvent(t)}),e.IMPORT_LINK_TYPE=u,e.useNative=d,e.rootDocument=f,e.whenReady=t,e.isIE=w}(window.HTMLImports),function(e){var t=[],n=function(e){t.push(e)},r=function(){t.forEach(function(t){t(e)})};e.addModule=n,e.initializeModules=r}(window.HTMLImports),window.HTMLImports.addModule(function(e){var t=/(url\()([^)]*)(\))/g,n=/(@import[\s]+(?!url\())([^;]*)(;)/g,r={resolveUrlsInStyle:function(e,t){var n=e.ownerDocument,r=n.createElement("a");return e.textContent=this.resolveUrlsInCssText(e.textContent,t,r),e},resolveUrlsInCssText:function(e,r,o){var i=this.replaceUrls(e,o,r,t);return i=this.replaceUrls(i,o,r,n)},replaceUrls:function(e,t,n,r){return e.replace(r,function(e,r,o,i){var a=o.replace(/["']/g,"");return n&&(a=new URL(a,n).href),t.href=a,a=t.href,r+"'"+a+"'"+i})}};e.path=r}),window.HTMLImports.addModule(function(e){var t={async:!0,ok:function(e){return e.status>=200&&e.status<300||304===e.status||0===e.status},load:function(n,r,o){var i=new XMLHttpRequest;return(e.flags.debug||e.flags.bust)&&(n+="?"+Math.random()),i.open("GET",n,t.async),i.addEventListener("readystatechange",function(e){if(4===i.readyState){var n=null;try{var a=i.getResponseHeader("Location");a&&(n="/"===a.substr(0,1)?location.origin+a:a)}catch(e){console.error(e.message)}r.call(o,!t.ok(i)&&i,i.response||i.responseText,n)}}),i.send(),i},loadDocument:function(e,t,n){this.load(e,t,n).responseType="document"}};e.xhr=t}),window.HTMLImports.addModule(function(e){var t=e.xhr,n=e.flags,r=function(e,t){this.cache={},this.onload=e,this.oncomplete=t,this.inflight=0,this.pending={}};r.prototype={addNodes:function(e){this.inflight+=e.length;for(var t,n=0,r=e.length;r>n&&(t=e[n]);n++)this.require(t);this.checkDone()},addNode:function(e){this.inflight++,this.require(e),this.checkDone()},require:function(e){var t=e.src||e.href;e.__nodeUrl=t,this.dedupe(t,e)||this.fetch(t,e)},dedupe:function(e,t){if(this.pending[e])return this.pending[e].push(t),!0;return this.cache[e]?(this.onload(e,t,this.cache[e]),this.tail(),!0):(this.pending[e]=[t],!1)},fetch:function(e,r){if(n.load&&console.log("fetch",e,r),e)if(e.match(/^data:/)){var o=e.split(","),i=o[0],a=o[1];a=i.indexOf(";base64")>-1?atob(a):decodeURIComponent(a),setTimeout(function(){this.receive(e,r,null,a)}.bind(this),0)}else{var s=function(t,n,o){this.receive(e,r,t,n,o)}.bind(this);t.load(e,s)}else setTimeout(function(){this.receive(e,r,{error:"href must be specified"},null)}.bind(this),0)},receive:function(e,t,n,r,o){this.cache[e]=r;for(var i,a=this.pending[e],s=0,c=a.length;c>s&&(i=a[s]);s++)this.onload(e,i,r,n,o),this.tail();this.pending[e]=null},tail:function(){--this.inflight,this.checkDone()},checkDone:function(){this.inflight||this.oncomplete()}},e.Loader=r}),window.HTMLImports.addModule(function(e){var t=function(e){this.addCallback=e,this.mo=new MutationObserver(this.handler.bind(this))};t.prototype={handler:function(e){for(var t,n=0,r=e.length;r>n&&(t=e[n]);n++)"childList"===t.type&&t.addedNodes.length&&this.addedNodes(t.addedNodes)},addedNodes:function(e){this.addCallback&&this.addCallback(e);for(var t,n=0,r=e.length;r>n&&(t=e[n]);n++)t.children&&t.children.length&&this.addedNodes(t.children)},observe:function(e){this.mo.observe(e,{childList:!0,subtree:!0})}},e.Observer=t}),window.HTMLImports.addModule(function(e){function t(e){return"link"===e.localName&&e.rel===u}function n(e){var t=r(e);return"data:text/javascript;charset=utf-8,"+encodeURIComponent(t)}function r(e){return e.textContent+o(e)}function o(e){var t=e.ownerDocument;t.__importedScripts=t.__importedScripts||0;var n=e.ownerDocument.baseURI,r=t.__importedScripts?"-"+t.__importedScripts:"";return t.__importedScripts++,"\n//# sourceURL="+n+r+".js\n"}function i(e){var t=e.ownerDocument.createElement("style");return t.textContent=e.textContent,a.resolveUrlsInStyle(t),t}var a=e.path,s=e.rootDocument,c=e.flags,l=e.isIE,u=e.IMPORT_LINK_TYPE,d="link[rel="+u+"]",p={documentSelectors:d,importsSelectors:[d,"link[rel=stylesheet]:not([type])","style:not([type])","script:not([type])",'script[type="application/javascript"]','script[type="text/javascript"]'].join(","),map:{link:"parseLink",script:"parseScript",style:"parseStyle"},dynamicElements:[],parseNext:function(){var e=this.nextToParse();e&&this.parse(e)},parse:function(e){if(this.isParsed(e))return void(c.parse&&console.log("[%s] is already parsed",e.localName));var t=this[this.map[e.localName]];t&&(this.markParsing(e),t.call(this,e))},parseDynamic:function(e,t){this.dynamicElements.push(e),t||this.parseNext()},markParsing:function(e){c.parse&&console.log("parsing",e),this.parsingElement=e},markParsingComplete:function(e){e.__importParsed=!0,this.markDynamicParsingComplete(e),e.__importElement&&(e.__importElement.__importParsed=!0,this.markDynamicParsingComplete(e.__importElement)),this.parsingElement=null,c.parse&&console.log("completed",e)},markDynamicParsingComplete:function(e){var t=this.dynamicElements.indexOf(e);t>=0&&this.dynamicElements.splice(t,1)},parseImport:function(e){if(e["import"]=e.__doc,window.HTMLImports.__importsParsingHook&&window.HTMLImports.__importsParsingHook(e),e["import"]&&(e["import"].__importParsed=!0),this.markParsingComplete(e),e.__resource&&!e.__error?e.dispatchEvent(new CustomEvent("load",{bubbles:!1})):e.dispatchEvent(new CustomEvent("error",{bubbles:!1})),e.__pending)for(var t;e.__pending.length;)t=e.__pending.shift(),t&&t({target:e});this.parseNext()},parseLink:function(e){t(e)?this.parseImport(e):(e.href=e.href,this.parseGeneric(e))},parseStyle:function(e){var t=e;e=i(e),t.__appliedElement=e,e.__importElement=t,this.parseGeneric(e)},parseGeneric:function(e){this.trackElement(e),this.addElementToDocument(e)},rootImportForElement:function(e){for(var t=e;t.ownerDocument.__importLink;)t=t.ownerDocument.__importLink;return t},addElementToDocument:function(e){var t=this.rootImportForElement(e.__importElement||e);t.parentNode.insertBefore(e,t)},trackElement:function(e,t){var n=this,r=function(o){e.removeEventListener("load",r),e.removeEventListener("error",r),t&&t(o),n.markParsingComplete(e),n.parseNext()};if(e.addEventListener("load",r),e.addEventListener("error",r),l&&"style"===e.localName){var o=!1;if(-1==e.textContent.indexOf("@import"))o=!0;else if(e.sheet){o=!0;for(var i,a=e.sheet.cssRules,s=a?a.length:0,c=0;s>c&&(i=a[c]);c++)i.type===CSSRule.IMPORT_RULE&&(o=o&&Boolean(i.styleSheet))}o&&setTimeout(function(){e.dispatchEvent(new CustomEvent("load",{bubbles:!1}))})}},parseScript:function(t){var r=document.createElement("script");r.__importElement=t,r.src=t.src?t.src:n(t),e.currentScript=t,this.trackElement(r,function(t){r.parentNode&&r.parentNode.removeChild(r),e.currentScript=null}),this.addElementToDocument(r)},nextToParse:function(){return this._mayParse=[],!this.parsingElement&&(this.nextToParseInDoc(s)||this.nextToParseDynamic())},nextToParseInDoc:function(e,n){if(e&&this._mayParse.indexOf(e)<0){this._mayParse.push(e);for(var r,o=e.querySelectorAll(this.parseSelectorsForNode(e)),i=0,a=o.length;a>i&&(r=o[i]);i++)if(!this.isParsed(r))return this.hasResource(r)?t(r)?this.nextToParseInDoc(r.__doc,r):r:void 0}return n},nextToParseDynamic:function(){return this.dynamicElements[0]},parseSelectorsForNode:function(e){var t=e.ownerDocument||e;return t===s?this.documentSelectors:this.importsSelectors},isParsed:function(e){return e.__importParsed},needsDynamicParsing:function(e){return this.dynamicElements.indexOf(e)>=0},hasResource:function(e){return t(e)&&void 0===e.__doc?!1:!0}};e.parser=p,e.IMPORT_SELECTOR=d}),window.HTMLImports.addModule(function(e){function t(e){return n(e,a)}function n(e,t){return"link"===e.localName&&e.getAttribute("rel")===t}function r(e){return!!Object.getOwnPropertyDescriptor(e,"baseURI")}function o(e,t){var n=document.implementation.createHTMLDocument(a);n._URL=t;var o=n.createElement("base");o.setAttribute("href",t),n.baseURI||r(n)||Object.defineProperty(n,"baseURI",{value:t});var i=n.createElement("meta");return i.setAttribute("charset","utf-8"),n.head.appendChild(i),n.head.appendChild(o),n.body.innerHTML=e,window.HTMLTemplateElement&&HTMLTemplateElement.bootstrap&&HTMLTemplateElement.bootstrap(n),n}var i=e.flags,a=e.IMPORT_LINK_TYPE,s=e.IMPORT_SELECTOR,c=e.rootDocument,l=e.Loader,u=e.Observer,d=e.parser,p={documents:{},documentPreloadSelectors:s,importsPreloadSelectors:[s].join(","),loadNode:function(e){h.addNode(e)},loadSubtree:function(e){var t=this.marshalNodes(e);h.addNodes(t)},marshalNodes:function(e){return e.querySelectorAll(this.loadSelectorsForNode(e))},loadSelectorsForNode:function(e){var t=e.ownerDocument||e;return t===c?this.documentPreloadSelectors:this.importsPreloadSelectors},loaded:function(e,n,r,a,s){if(i.load&&console.log("loaded",e,n),n.__resource=r,n.__error=a,t(n)){var c=this.documents[e];void 0===c&&(c=a?null:o(r,s||e),c&&(c.__importLink=n,this.bootDocument(c)),this.documents[e]=c),n.__doc=c}d.parseNext()},bootDocument:function(e){this.loadSubtree(e),this.observer.observe(e),d.parseNext()},loadedAll:function(){d.parseNext()}},h=new l(p.loaded.bind(p),p.loadedAll.bind(p));if(p.observer=new u,!document.baseURI){var f={get:function(){var e=document.querySelector("base");return e?e.href:window.location.href},configurable:!0};Object.defineProperty(document,"baseURI",f),Object.defineProperty(c,"baseURI",f)}e.importer=p,e.importLoader=h}),window.HTMLImports.addModule(function(e){var t=e.parser,n=e.importer,r={added:function(e){for(var r,o,i,a,s=0,c=e.length;c>s&&(a=e[s]);s++)r||(r=a.ownerDocument,o=t.isParsed(r)),i=this.shouldLoadNode(a),i&&n.loadNode(a),this.shouldParseNode(a)&&o&&t.parseDynamic(a,i)},shouldLoadNode:function(e){return 1===e.nodeType&&o.call(e,n.loadSelectorsForNode(e))},shouldParseNode:function(e){return 1===e.nodeType&&o.call(e,t.parseSelectorsForNode(e))}};n.observer.addCallback=r.added.bind(r);var o=HTMLElement.prototype.matches||HTMLElement.prototype.matchesSelector||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector}),function(e){function t(){window.HTMLImports.importer.bootDocument(r)}var n=e.initializeModules;e.isIE;if(!e.useNative){n();var r=e.rootDocument;"complete"===document.readyState||"interactive"===document.readyState&&!window.attachEvent?t():document.addEventListener("DOMContentLoaded",t)}}(window.HTMLImports),window.CustomElements=window.CustomElements||{flags:{}},function(e){var t=e.flags,n=[],r=function(e){n.push(e)},o=function(){n.forEach(function(t){t(e)})};e.addModule=r,e.initializeModules=o,e.hasNative=Boolean(document.registerElement),e.isIE=/Trident/.test(navigator.userAgent),e.useNative=!t.register&&e.hasNative&&!window.ShadowDOMPolyfill&&(!window.HTMLImports||window.HTMLImports.useNative)}(window.CustomElements),window.CustomElements.addModule(function(e){function t(e,t){n(e,function(e){return t(e)?!0:void r(e,t)}),r(e,t)}function n(e,t,r){var o=e.firstElementChild;if(!o)for(o=e.firstChild;o&&o.nodeType!==Node.ELEMENT_NODE;)o=o.nextSibling;for(;o;)t(o,r)!==!0&&n(o,t,r),o=o.nextElementSibling;return null}function r(e,n){for(var r=e.shadowRoot;r;)t(r,n),r=r.olderShadowRoot}function o(e,t){i(e,t,[])}function i(e,t,n){if(e=window.wrap(e),!(n.indexOf(e)>=0)){n.push(e);for(var r,o=e.querySelectorAll("link[rel="+a+"]"),s=0,c=o.length;c>s&&(r=o[s]);s++)r["import"]&&i(r["import"],t,n);t(e)}}var a=window.HTMLImports?window.HTMLImports.IMPORT_LINK_TYPE:"none";e.forDocumentTree=o,e.forSubtree=t}),window.CustomElements.addModule(function(e){function t(e,t){return n(e,t)||r(e,t)}function n(t,n){return e.upgrade(t,n)?!0:void(n&&a(t))}function r(e,t){b(e,function(e){return n(e,t)?!0:void 0})}function o(e){S.push(e),_||(_=!0,setTimeout(i))}function i(){_=!1;for(var e,t=S,n=0,r=t.length;r>n&&(e=t[n]);n++)e();S=[]}function a(e){E?o(function(){s(e)}):s(e)}function s(e){e.__upgraded__&&!e.__attached&&(e.__attached=!0,e.attachedCallback&&e.attachedCallback())}function c(e){l(e),b(e,function(e){l(e)})}function l(e){E?o(function(){u(e)}):u(e)}function u(e){e.__upgraded__&&e.__attached&&(e.__attached=!1,e.detachedCallback&&e.detachedCallback())}function d(e){for(var t=e,n=window.wrap(document);t;){if(t==n)return!0;t=t.parentNode||t.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&t.host}}function p(e){if(e.shadowRoot&&!e.shadowRoot.__watched){g.dom&&console.log("watching shadow-root for: ",e.localName);for(var t=e.shadowRoot;t;)m(t),t=t.olderShadowRoot}}function h(e,n){if(g.dom){var r=n[0];if(r&&"childList"===r.type&&r.addedNodes&&r.addedNodes){for(var o=r.addedNodes[0];o&&o!==document&&!o.host;)o=o.parentNode;var i=o&&(o.URL||o._URL||o.host&&o.host.localName)||"";i=i.split("/?").shift().split("/").pop()}console.group("mutations (%d) [%s]",n.length,i||"")}var a=d(e);n.forEach(function(e){"childList"===e.type&&(T(e.addedNodes,function(e){e.localName&&t(e,a)}),T(e.removedNodes,function(e){e.localName&&c(e)}))}),g.dom&&console.groupEnd()}function f(e){for(e=window.wrap(e),e||(e=window.wrap(document));e.parentNode;)e=e.parentNode;var t=e.__observer;t&&(h(e,t.takeRecords()),i())}function m(e){if(!e.__observer){var t=new MutationObserver(h.bind(this,e));t.observe(e,{childList:!0,subtree:!0}),e.__observer=t}}function w(e){e=window.wrap(e),g.dom&&console.group("upgradeDocument: ",e.baseURI.split("/").pop());var n=e===window.wrap(document);t(e,n),m(e),g.dom&&console.groupEnd()}function v(e){y(e,w)}var g=e.flags,b=e.forSubtree,y=e.forDocumentTree,E=window.MutationObserver._isPolyfilled&&g["throttle-attached"];e.hasPolyfillMutations=E,e.hasThrottledAttached=E;var _=!1,S=[],T=Array.prototype.forEach.call.bind(Array.prototype.forEach),M=Element.prototype.createShadowRoot;M&&(Element.prototype.createShadowRoot=function(){var e=M.call(this);return window.CustomElements.watchShadow(this),e}),e.watchShadow=p,e.upgradeDocumentTree=v,e.upgradeDocument=w,e.upgradeSubtree=r,e.upgradeAll=t,e.attached=a,e.takeRecords=f}),window.CustomElements.addModule(function(e){function t(t,r){if("template"===t.localName&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(t),!t.__upgraded__&&t.nodeType===Node.ELEMENT_NODE){var o=t.getAttribute("is"),i=e.getRegisteredDefinition(t.localName)||e.getRegisteredDefinition(o);if(i&&(o&&i.tag==t.localName||!o&&!i["extends"]))return n(t,i,r)}}function n(t,n,o){return a.upgrade&&console.group("upgrade:",t.localName),n.is&&t.setAttribute("is",n.is),r(t,n),t.__upgraded__=!0,i(t),o&&e.attached(t),e.upgradeSubtree(t,o),a.upgrade&&console.groupEnd(),t}function r(e,t){Object.__proto__?e.__proto__=t.prototype:(o(e,t.prototype,t["native"]),e.__proto__=t.prototype)}function o(e,t,n){for(var r={},o=t;o!==n&&o!==HTMLElement.prototype;){for(var i,a=Object.getOwnPropertyNames(o),s=0;i=a[s];s++)r[i]||(Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(o,i)),r[i]=1);o=Object.getPrototypeOf(o)}}function i(e){e.createdCallback&&e.createdCallback()}var a=e.flags;e.upgrade=t,e.upgradeWithDefinition=n,e.implementPrototype=r}),window.CustomElements.addModule(function(e){function t(t,r){var c=r||{};if(!t)throw new Error("document.registerElement: first argument `name` must not be empty");if(t.indexOf("-")<0)throw new Error("document.registerElement: first argument ('name') must contain a dash ('-'). Argument provided was '"+String(t)+"'.");if(o(t))throw new Error("Failed to execute 'registerElement' on 'Document': Registration failed for type '"+String(t)+"'. The type name is invalid.");if(l(t))throw new Error("DuplicateDefinitionError: a type with name '"+String(t)+"' is already registered");return c.prototype||(c.prototype=Object.create(HTMLElement.prototype)),c.__name=t.toLowerCase(),c.lifecycle=c.lifecycle||{},c.ancestry=i(c["extends"]),a(c),s(c),n(c.prototype),u(c.__name,c),c.ctor=d(c),c.ctor.prototype=c.prototype,c.prototype.constructor=c.ctor,e.ready&&v(document),c.ctor}function n(e){if(!e.setAttribute._polyfilled){var t=e.setAttribute;e.setAttribute=function(e,n){r.call(this,e,n,t)};var n=e.removeAttribute;e.removeAttribute=function(e){r.call(this,e,null,n)},e.setAttribute._polyfilled=!0}}function r(e,t,n){e=e.toLowerCase();var r=this.getAttribute(e);n.apply(this,arguments);var o=this.getAttribute(e);this.attributeChangedCallback&&o!==r&&this.attributeChangedCallback(e,r,o)}function o(e){for(var t=0;t<_.length;t++)if(e===_[t])return!0}function i(e){var t=l(e);return t?i(t["extends"]).concat([t]):[]}function a(e){for(var t,n=e["extends"],r=0;t=e.ancestry[r];r++)n=t.is&&t.tag;e.tag=n||e.__name,n&&(e.is=e.__name)}function s(e){if(!Object.__proto__){var t=HTMLElement.prototype;if(e.is){var n=document.createElement(e.tag);t=Object.getPrototypeOf(n)}for(var r,o=e.prototype,i=!1;o;)o==t&&(i=!0),r=Object.getPrototypeOf(o),r&&(o.__proto__=r),o=r;i||console.warn(e.tag+" prototype not found in prototype chain for "+e.is),e["native"]=t}}function c(e){return b(M(e.tag),e)}function l(e){return e?S[e.toLowerCase()]:void 0}function u(e,t){S[e]=t}function d(e){return function(){return c(e)}}function p(e,t,n){return e===T?h(t,n):O(e,t)}function h(e,t){e&&(e=e.toLowerCase()),t&&(t=t.toLowerCase());var n=l(t||e);if(n){if(e==n.tag&&t==n.is)return new n.ctor;if(!t&&!n.is)return new n.ctor}var r;return t?(r=h(e),r.setAttribute("is",t),r):(r=M(e),e.indexOf("-")>=0&&y(r,HTMLElement),r)}function f(e,t){var n=e[t];e[t]=function(){var e=n.apply(this,arguments);return g(e),e}}var m,w=e.isIE,v=e.upgradeDocumentTree,g=e.upgradeAll,b=e.upgradeWithDefinition,y=e.implementPrototype,E=e.useNative,_=["annotation-xml","color-profile","font-face","font-face-src","font-face-uri","font-face-format","font-face-name","missing-glyph"],S={},T="http://www.w3.org/1999/xhtml",M=document.createElement.bind(document),O=document.createElementNS.bind(document);m=Object.__proto__||E?function(e,t){return e instanceof t}:function(e,t){if(e instanceof t)return!0;for(var n=e;n;){if(n===t.prototype)return!0;n=n.__proto__}return!1},f(Node.prototype,"cloneNode"),f(document,"importNode"),w&&!function(){var e=document.importNode;document.importNode=function(){var t=e.apply(document,arguments);if(t.nodeType==t.DOCUMENT_FRAGMENT_NODE){var n=document.createDocumentFragment();return n.appendChild(t),n}return t}}(),document.registerElement=t,document.createElement=h,document.createElementNS=p,e.registry=S,e["instanceof"]=m,e.reservedTagList=_,e.getRegisteredDefinition=l,document.register=document.registerElement}),function(e){function t(){i(window.wrap(document)),window.CustomElements.ready=!0;var e=window.requestAnimationFrame||function(e){setTimeout(e,16)};e(function(){setTimeout(function(){window.CustomElements.readyTime=Date.now(),window.HTMLImports&&(window.CustomElements.elapsed=window.CustomElements.readyTime-window.HTMLImports.readyTime),document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}))})})}var n=e.useNative,r=e.initializeModules;e.isIE;if(n){var o=function(){};e.watchShadow=o,e.upgrade=o,e.upgradeAll=o,e.upgradeDocumentTree=o,e.upgradeSubtree=o,e.takeRecords=o,e["instanceof"]=function(e,t){return e instanceof t}}else r();var i=e.upgradeDocumentTree,a=e.upgradeDocument;if(window.wrap||(window.ShadowDOMPolyfill?(window.wrap=window.ShadowDOMPolyfill.wrapIfNeeded,window.unwrap=window.ShadowDOMPolyfill.unwrapIfNeeded):window.wrap=window.unwrap=function(e){return e}),window.HTMLImports&&(window.HTMLImports.__importsParsingHook=function(e){e["import"]&&a(wrap(e["import"]))}),"complete"===document.readyState||e.flags.eager)t();else if("interactive"!==document.readyState||window.attachEvent||window.HTMLImports&&!window.HTMLImports.ready){var s=window.HTMLImports&&!window.HTMLImports.ready?"HTMLImportsLoaded":"DOMContentLoaded";window.addEventListener(s,t)}else t()}(window.CustomElements),function(e){Function.prototype.bind||(Function.prototype.bind=function(e){var t=this,n=Array.prototype.slice.call(arguments,1);return function(){var r=n.slice();return r.push.apply(r,arguments),t.apply(e,r)}})}(window.WebComponents),function(e){var t=document.createElement("style");t.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var n=document.querySelector("head");n.insertBefore(t,n.firstChild)}(window.WebComponents),function(e){window.Platform=e}(window.WebComponents);
},{}],"xhr-proxy":[function(require,module,exports){
// Copyright (c) Microsoft Corporation. All rights reserved.
// Based in part on code from Apache Ripple, https://github.com/apache/incubator-ripple

var utils = require('utils');

var init = function () {
    var _XMLHttpRequest = XMLHttpRequest;
    window.XMLHttpRequest = function () {
        var xhr = new _XMLHttpRequest(),
            origMethods = {
                setRequestHeader: xhr.setRequestHeader,
                open: xhr.open
            };

        xhr.open = function (method, url) {
            var sameOrigin = utils.isSameOriginRequest(url);

            if (!sameOrigin) {
                url = '/xhr_proxy?rurl=' + escape(url);
            }

            origMethods.open.apply(xhr, Array.prototype.slice.call(arguments));
        };

        return xhr;
    };

    // Ensure that we retain all static properties, such as DONE
    window.XMLHttpRequest.__proto__ = _XMLHttpRequest;
};

module.exports = {
    init: init
};

},{"utils":"utils"}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvbW9kdWxlcy9hcmdzY2hlY2suanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9jYWxsQm91bmQuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL2FwcC1ob3N0L2FwcC1ob3N0LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL2FwcC1ob3N0L2xpdmUtcmVsb2FkLWNsaWVudC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9hcHAtaG9zdC90b3VjaC1ldmVudHMuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvcGx1Z2lucy9jb3Jkb3ZhLXBsdWdpbi1nZW9sb2NhdGlvbi9Db29yZGluYXRlcy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9wbHVnaW5zL2NvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uL1Bvc2l0aW9uLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL3BsdWdpbnMvY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb24vUG9zaXRpb25FcnJvci5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9wbHVnaW5zL2NvcmRvdmEtcGx1Z2luLWluYXBwYnJvd3Nlci9pbmFwcC1icm93c2VyLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2RlZmluZS1kYXRhLXByb3BlcnR5L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2VzLWRlZmluZS1wcm9wZXJ0eS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvZXZhbC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9yZWYuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3N5bnRheC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdHlwZS5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdXJpLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW1wbGVtZW50YXRpb24uanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9nZXQtaW50cmluc2ljL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2dvcGQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2hhcy1wcm90by9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9oYXNvd24vaW5kZXguanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvc2V0LWZ1bmN0aW9uLWxlbmd0aC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3FzL2xpYi9wYXJzZS5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3FzL2xpYi9zdHJpbmdpZnkuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9wbHVnaW5zL2NvcmRvdmEtcGx1Z2luLWNhbWVyYS9hcHAtaG9zdC1oYW5kbGVycy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9wbHVnaW5zL2NvcmRvdmEtcGx1Z2luLWRldmljZS9hcHAtaG9zdC5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9wbHVnaW5zL2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MvYXBwLWhvc3QuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvcGx1Z2lucy9jb3Jkb3ZhLXBsdWdpbi1nZW9sb2NhdGlvbi9hcHAtaG9zdC1jbG9iYmVycy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9wbHVnaW5zL2NvcmRvdmEtcGx1Z2luLWluYXBwYnJvd3Nlci9hcHAtaG9zdC1oYW5kbGVycy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9tb2R1bGVzL2RiLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL3BsdWdpbnMvZXZlbnRzL2FwcC1ob3N0LmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL21vZHVsZXMvZXZlbnQuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvbW9kdWxlcy9leGNlcHRpb24uanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvdGhpcmQtcGFydHkvanF1ZXJ5Lm1pbi5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy9tb2R1bGVzL21lc3NhZ2VzLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL21vZHVsZXMvcG9seWZpbGxzLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL21vZHVsZXMvc2ltLWNvbnN0YW50cy5qcyIsIi4uLy4uLy4uLy4uLy52c2NvZGUvZXh0ZW5zaW9ucy9tc2pzZGlhZy5jb3Jkb3ZhLXRvb2xzLTIuNy4wL25vZGVfbW9kdWxlcy9jb3Jkb3ZhLXNpbXVsYXRlL3NyYy90aGlyZC1wYXJ0eS9zb2NrZXQuaW8uanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvbW9kdWxlcy90ZWxlbWV0cnktaGVscGVyLmpzIiwiLi4vLi4vLi4vLi4vLnZzY29kZS9leHRlbnNpb25zL21zanNkaWFnLmNvcmRvdmEtdG9vbHMtMi43LjAvbm9kZV9tb2R1bGVzL2NvcmRvdmEtc2ltdWxhdGUvc3JjL21vZHVsZXMvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvdGhpcmQtcGFydHkvd2ViY29tcG9uZW50cy5taW4uanMiLCIuLi8uLi8uLi8uLi8udnNjb2RlL2V4dGVuc2lvbnMvbXNqc2RpYWcuY29yZG92YS10b29scy0yLjcuMC9ub2RlX21vZHVsZXMvY29yZG92YS1zaW11bGF0ZS9zcmMvbW9kdWxlcy94aHItcHJveHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM1Z0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3JoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDelFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4d0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBCYXNlZCBpbiBwYXJ0IG9uIGNvZGUgZnJvbSBBcGFjaGUgQ29yZG92YSAoaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLWpzKVxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCd1dGlscycpO1xuXG52YXIgbW9kdWxlRXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuXG52YXIgdHlwZU1hcCA9IHtcbiAgICAnQSc6ICdBcnJheScsXG4gICAgJ0QnOiAnRGF0ZScsXG4gICAgJ04nOiAnTnVtYmVyJyxcbiAgICAnUyc6ICdTdHJpbmcnLFxuICAgICdGJzogJ0Z1bmN0aW9uJyxcbiAgICAnTyc6ICdPYmplY3QnXG59O1xuXG5mdW5jdGlvbiBleHRyYWN0UGFyYW1OYW1lKGNhbGxlZSwgYXJnSW5kZXgpIHtcbiAgICByZXR1cm4gKC8uKj9cXCgoLio/KVxcKS8pLmV4ZWMoY2FsbGVlKVsxXS5zcGxpdCgnLCAnKVthcmdJbmRleF07XG59XG5cbmZ1bmN0aW9uIGNoZWNrQXJncyhzcGVjLCBmdW5jdGlvbk5hbWUsIGFyZ3MsIG9wdF9jYWxsZWUpIHtcbiAgICBpZiAoIW1vZHVsZUV4cG9ydHMuZW5hYmxlQ2hlY2tzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyck1zZyA9IG51bGw7XG4gICAgdmFyIHR5cGVOYW1lO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BlYy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYyA9IHNwZWMuY2hhckF0KGkpLFxuICAgICAgICAgICAgY1VwcGVyID0gYy50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgYXJnID0gYXJnc1tpXTtcbiAgICAgICAgLy8gQXN0ZXJpeCBtZWFucyBhbGxvdyBhbnl0aGluZy5cbiAgICAgICAgaWYgKGMgPT0gJyonKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlTmFtZSA9IHV0aWxzLnR5cGVOYW1lKGFyZyk7XG4gICAgICAgIGlmICgoYXJnID09PSBudWxsIHx8IGFyZyA9PT0gdW5kZWZpbmVkKSAmJiBjID09IGNVcHBlcikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVOYW1lICE9IHR5cGVNYXBbY1VwcGVyXSkge1xuICAgICAgICAgICAgZXJyTXNnID0gJ0V4cGVjdGVkICcgKyB0eXBlTWFwW2NVcHBlcl07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyTXNnKSB7XG4gICAgICAgIGVyck1zZyArPSAnLCBidXQgZ290ICcgKyB0eXBlTmFtZSArICcuJztcbiAgICAgICAgZXJyTXNnID0gJ1dyb25nIHR5cGUgZm9yIHBhcmFtZXRlciBcIicgKyBleHRyYWN0UGFyYW1OYW1lKG9wdF9jYWxsZWUgfHwgYXJncy5jYWxsZWUsIGkpICsgJ1wiIG9mICcgKyBmdW5jdGlvbk5hbWUgKyAnOiAnICsgZXJyTXNnO1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoZXJyTXNnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xufVxuXG5tb2R1bGVFeHBvcnRzLmNoZWNrQXJncyA9IGNoZWNrQXJncztcbm1vZHVsZUV4cG9ydHMuZ2V0VmFsdWUgPSBnZXRWYWx1ZTtcbm1vZHVsZUV4cG9ydHMuZW5hYmxlQ2hlY2tzID0gdHJ1ZTtcblxuIiwiIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBzZXRGdW5jdGlvbkxlbmd0aCA9IHJlcXVpcmUoJ3NldC1mdW5jdGlvbi1sZW5ndGgnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRtYXggPSBHZXRJbnRyaW5zaWMoJyVNYXRoLm1heCUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ2luYWxGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGgoXG5cdFx0ZnVuYyxcblx0XHQxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpLFxuXHRcdHRydWVcblx0KTtcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLyogZ2xvYmFsIGlvOmZhbHNlICovXG52YXIgbGl2ZXJlbG9hZCA9IHJlcXVpcmUoJy4vbGl2ZS1yZWxvYWQtY2xpZW50Jyk7XG52YXIgTWVzc2FnZXMgPSByZXF1aXJlKCdtZXNzYWdlcycpO1xudmFyIHRlbGVtZXRyeSA9IHJlcXVpcmUoJ3RlbGVtZXRyeS1oZWxwZXInKTtcblxudmFyIGNvcmRvdmE7XG52YXIgc29ja2V0ID0gaW8oKTtcbnZhciBuZXh0RXhlY0NhY2hlSW5kZXggPSAwO1xuXG4vLyBEZXRhaWxzIG9mIGVhY2ggcGx1Z2luIHRoYXQgaGFzIGFwcC1ob3N0IGNvZGUgaXMgaW5qZWN0ZWQgd2hlbiB0aGlzIGZpbGUgaXMgc2VydmVkLlxudmFyIHBsdWdpbnMgPSB7XG4gICAgJ2V2ZW50cyc6IHJlcXVpcmUoJ2V2ZW50cycpLFxuJ2NvcmRvdmEtcGx1Z2luLWRldmljZSc6IHJlcXVpcmUoJ2NvcmRvdmEtcGx1Z2luLWRldmljZScpLFxuJ2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MnOiByZXF1aXJlKCdjb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzJylcbn07XG5cbnZhciBwbHVnaW5IYW5kbGVyc0RlZmluaXRpb25zID0ge1xuICAgICdjb3Jkb3ZhLXBsdWdpbi1jYW1lcmEnOiByZXF1aXJlKCdjb3Jkb3ZhLXBsdWdpbi1jYW1lcmEtaGFuZGxlcnMnKSxcbidjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXInOiByZXF1aXJlKCdjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXItaGFuZGxlcnMnKVxufTtcblxudmFyIHBsdWdpbkNsb2JiZXJEZWZpbml0aW9ucyA9IHtcbiAgICAnY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb24nOiByZXF1aXJlKCdjb3Jkb3ZhLXBsdWdpbi1nZW9sb2NhdGlvbi1jbG9iYmVycycpXG59O1xuXG52YXIgZXhlY0NhY2hlID0ge307XG52YXIgcGx1Z2luTWVzc2FnZXMgPSB7fTtcbnZhciBwbHVnaW5IYW5kbGVycyA9IHt9O1xudmFyIHNlcnZpY2VUb1BsdWdpbk1hcCA9IHt9O1xuXG5mdW5jdGlvbiBjbG9iYmVyKGNsb2JiZXJzLCBzY29wZSwgY2xvYmJlclRvUGx1Z2luTWFwLCBwbHVnaW5JZCkge1xuICAgIE9iamVjdC5rZXlzKGNsb2JiZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGNsb2JiZXJUb1BsdWdpbk1hcCAmJiBwbHVnaW5JZCkge1xuICAgICAgICAgICAgY2xvYmJlclRvUGx1Z2luTWFwW2tleV0gPSBwbHVnaW5JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbG9iYmVyc1trZXldICYmIHR5cGVvZiBjbG9iYmVyc1trZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgc2NvcGVba2V5XSA9IHNjb3BlW2tleV0gfHwge307XG4gICAgICAgICAgICBjbG9iYmVyKGNsb2JiZXJzW2tleV0sIHNjb3BlW2tleV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NvcGVba2V5XSA9IGNsb2JiZXJzW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlQbHVnaW5zKHBsdWdpbnMsIGNsb2JiZXJTY29wZSwgY2xvYmJlclRvUGx1Z2luTWFwKSB7XG4gICAgT2JqZWN0LmtleXMocGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luSWQpIHtcbiAgICAgICAgdmFyIHBsdWdpbiA9IHBsdWdpbnNbcGx1Z2luSWRdO1xuICAgICAgICBpZiAocGx1Z2luKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHBsdWdpbk1lc3NhZ2VzW3BsdWdpbklkXSA9IHBsdWdpbk1lc3NhZ2VzW3BsdWdpbklkXSB8fCBuZXcgTWVzc2FnZXMocGx1Z2luSWQsIHNvY2tldCk7XG4gICAgICAgICAgICAgICAgcGx1Z2luID0gcGx1Z2luKHBsdWdpbk1lc3NhZ2VzW3BsdWdpbklkXSwgZXhlYyk7XG4gICAgICAgICAgICAgICAgcGx1Z2luc1twbHVnaW5JZF0gPSBwbHVnaW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2xvYmJlclNjb3BlKSB7XG4gICAgICAgICAgICAgICAgY2xvYmJlcihwbHVnaW4sIGNsb2JiZXJTY29wZSwgY2xvYmJlclRvUGx1Z2luTWFwLCBwbHVnaW5JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLypcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBhcyBzZXR0ZXIgZm9yIHdpbmRvdy5jb3Jkb3ZhIHByb3BlcnR5LiBCZXNpZGVzIHNldHRpbmdcbiAqIHRoZSBnbG9iYWwgcHJvcGVydHksIGl0IG92ZXJyaWRlcyBzb21lIGNvcmRvdmEgZGVmaW5pdGlvbnMgYW5kIHNldHMgdXAgdGhlXG4gKiBjb21tdW5pY2F0aW9uIHByb3RvY29sIHdpdGggdGhlIHNlcnZlciBhbmQgdGhlIHNpbS1ob3N0LlxuICovXG5mdW5jdGlvbiBzZXRDb3Jkb3ZhQW5kSW5pdGlhbGl6ZShvcmlnaW5hbENvcmRvdmEpIHtcbiAgICB2YXIgY2hhbm5lbCxcbiAgICAgICAgcGxhdGZvcm0sXG4gICAgICAgIHBsYXRmb3JtQm9vdHN0cmFwO1xuXG4gICAgaWYgKGNvcmRvdmEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvcmRvdmEgPSBvcmlnaW5hbENvcmRvdmE7XG5cbiAgICBjb3Jkb3ZhLmRlZmluZS5yZW1vdmUoJ2NvcmRvdmEvZXhlYycpO1xuICAgIGNvcmRvdmEuZGVmaW5lKCdjb3Jkb3ZhL2V4ZWMnLCBmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhlYztcbiAgICB9KTtcblxuICAgIHBsYXRmb3JtID0gY29yZG92YS5yZXF1aXJlKCdjb3Jkb3ZhL3BsYXRmb3JtJyk7XG4gICAgcGxhdGZvcm1Cb290c3RyYXAgPSBwbGF0Zm9ybS5ib290c3RyYXA7XG4gICAgcGxhdGZvcm0uYm9vdHN0cmFwID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG5cbiAgICAvLyBkZWZhdWx0IFdpbmRvd3MgYm9vdHN0cmFwIGZ1bmN0aW9uIHRyaWVzIHRvIGxvYWQgV2luSlMgd2hpY2ggaXMgbm90XG4gICAgLy8gYXZhaWxhYmxlIGFuZCBub3QgcmVxdWlyZWQgaW4gc2ltdWxhdGlvbiBtb2RlIHNvIHdlIG92ZXJyaWRlIGJvb3RzdHJhcFxuICAgIGlmIChjb3Jkb3ZhLnBsYXRmb3JtSWQgPT09ICd3aW5kb3dzJykge1xuICAgICAgICBwbGF0Zm9ybUJvb3RzdHJhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvcmRvdmEucmVxdWlyZSgnY29yZG92YS9tb2R1bGVtYXBwZXInKVxuICAgICAgICAgICAgICAgIC5jbG9iYmVycygnY29yZG92YS9leGVjL3Byb3h5JywgJ2NvcmRvdmEuY29tbWFuZFByb3h5Jyk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjaGFubmVsID0gY29yZG92YS5yZXF1aXJlKCdjb3Jkb3ZhL2NoYW5uZWwnKTtcblxuICAgIC8vIGRlZmluZSBvdXIgb3duIGNoYW5uZWwgdG8gZGVsYXkgdGhlIGluaXRpYWxpemF0aW9uIHVudGlsIHNpbS1ob3N0IHRlbGxzXG4gICAgLy8gdXMgZXZlcnl0aGluZydzIHJlYWR5IChmaXJlZCBpbiAnc3RhcnQnIGV2ZW50IGhhbmRsZXIpLlxuICAgIGNoYW5uZWwuY3JlYXRlU3RpY2t5KCdvbkNvcmRvdmFTaW11bGF0ZVJlYWR5Jyk7XG4gICAgY2hhbm5lbC53YWl0Rm9ySW5pdGlhbGl6YXRpb24oJ29uQ29yZG92YVNpbXVsYXRlUmVhZHknKTtcblxuICAgIHNvY2tldC5vbignc3RhcnQtbGl2ZS1yZWxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxpdmVyZWxvYWQuc3RhcnQoc29ja2V0KTtcbiAgICB9KTtcblxuICAgIHNvY2tldC5vbignaW5pdC10ZWxlbWV0cnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRlbGVtZXRyeS5pbml0KHNvY2tldCk7XG4gICAgfSk7XG5cbiAgICBzb2NrZXQub24oJ2luaXQteGhyLXByb3h5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXF1aXJlKCd4aHItcHJveHknKS5pbml0KCk7XG4gICAgfSk7XG5cbiAgICBzb2NrZXQub24oJ2luaXQtdG91Y2gtZXZlbnRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXF1aXJlKCcuL3RvdWNoLWV2ZW50cycpLmluaXQoKTtcbiAgICB9KTtcblxuICAgIHNvY2tldC5vbigncmVmcmVzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgIH0pO1xuXG4gICAgLy8gZmlyaW5nIG9mIG9uTmF0aXZlUmVhZHkgaXMgZGVsYXllZCB1bnRpbCBTSU1fSE9TVCB0ZWxscyB1cyBpdCdzIHJlYWR5XG4gICAgc29ja2V0Lm9uY2UoJ2luaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHNpbS1ob3N0IGlzIHJlYWR5LCByZWdpc3RlciBleGVjIGhhbmRsZXJzLCBmaXJlIG9uTmF0aXZlUmVhZHkgYW5kIHNlbmRcbiAgICAgICAgLy8gdGhlIGxpc3Qgb2YgcGx1Z2luc1xuICAgICAgICBzb2NrZXQub24oJ2V4ZWMtc3VjY2VzcycsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgZXhlY0NhY2hlSW5mbyA9IGV4ZWNDYWNoZVtkYXRhLmluZGV4XTtcbiAgICAgICAgICAgIGlmIChleGVjQ2FjaGVJbmZvICYmIHR5cGVvZiBleGVjQ2FjaGVJbmZvLnN1Y2Nlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBleGVjQ2FjaGVJbmZvLnN1Y2Nlc3MoZGF0YS5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzb2NrZXQub24oJ2V4ZWMtZmFpbHVyZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgZXhlY0NhY2hlSW5mbyA9IGV4ZWNDYWNoZVtkYXRhLmluZGV4XTtcbiAgICAgICAgICAgIGlmIChleGVjQ2FjaGVJbmZvICYmIHR5cGVvZiBleGVjQ2FjaGVJbmZvLmZhaWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBleGVjQ2FjaGVJbmZvLmZhaWwoZGF0YS5lcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb3Jkb3ZhLnBsYXRmb3JtSWQgIT09ICdicm93c2VyJykge1xuICAgICAgICAgICAgY2hhbm5lbC5vblBsdWdpbnNSZWFkeS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBwbHVnaW5MaXN0O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbkxpc3QgPSBjb3Jkb3ZhLnJlcXVpcmUoJ2NvcmRvdmEvcGx1Z2luX2xpc3QnKS5tZXRhZGF0YTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBhcHAgZG9lc24ndCBjb250YWluIGFueSBwbHVnaW4sIHRoZSBtb2R1bGUgXCJjb3Jkb3ZhL3BsdWdpbl9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm90IGxvYWRlZCBhbmQgY29yZG92YS5yZXF1aXJlIHRocm93cyBhbiBleGNlcHRpb25cbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luTGlzdCA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnYXBwLXBsdWdpbi1saXN0JywgcGx1Z2luTGlzdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdhcHAtcGx1Z2luLWxpc3QnLCB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHBseVBsdWdpbnMocGx1Z2lucyk7XG4gICAgICAgIGFwcGx5UGx1Z2lucyhwbHVnaW5IYW5kbGVyc0RlZmluaXRpb25zLCBwbHVnaW5IYW5kbGVycywgc2VydmljZVRvUGx1Z2luTWFwKTtcbiAgICAgICAgYXBwbHlQbHVnaW5zKHBsdWdpbkNsb2JiZXJEZWZpbml0aW9ucywgd2luZG93KTtcblxuICAgICAgICB0ZWxlbWV0cnkucmVnaXN0ZXJQbHVnaW5TZXJ2aWNlcyhzZXJ2aWNlVG9QbHVnaW5NYXApO1xuXG4gICAgICAgIHBsYXRmb3JtQm9vdHN0cmFwKCk7XG5cbiAgICAgICAgc3dpdGNoIChjb3Jkb3ZhLnBsYXRmb3JtSWQpIHtcbiAgICAgICAgICAgIC8vIHRoZXNlIHBsYXRmb3JtIGZpcmUgb25OYXRpdmVSZWFkeSBpbiB0aGVpciBib290c3RyYXBcbiAgICAgICAgICAgIGNhc2UgJ2lvcyc6XG4gICAgICAgICAgICBjYXNlICdicm93c2VyJzpcbiAgICAgICAgICAgIGNhc2UgJ3VidW50dSc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyB3aW5kb3dzIGhhcyBhbiBvdmVycmlkZGVuIGJvb3RzdHJhcCB3aGljaCBkb2VzIG5vdCBmaXJlXG4gICAgICAgICAgICAvLyBvbk5hdGl2ZVJlYWR5XG4gICAgICAgICAgICBjYXNlICd3aW5kb3dzJzpcbiAgICAgICAgICAgIC8vIGFuZHJvaWQgc3BlY2lmaWVkIGhlcmUganVzdCB0byBiZSBleHBsaWNpdCBhYm91dCBpdFxuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICAgICAgY2FzZSAnYW5kcm9pZCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNoYW5uZWwub25OYXRpdmVSZWFkeS5maXJlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgc29ja2V0Lm9uY2UoJ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBhbGwgc2V0LCBmaXJlIG9uQ29yZG92YVNpbXVsYXRlIHJlYWR5ICh3aGljaCB1cCB0byB0aGlzIHBvaW50IHdhc1xuICAgICAgICAvLyBkZWxheWluZyBvbkRldmljZVJlYWR5KS5cbiAgICAgICAgY2hhbm5lbC5vbkNvcmRvdmFTaW11bGF0ZVJlYWR5LmZpcmUoKTtcbiAgICAgICAgLy8gYW4gaW5pdCBhZnRlciBzdGFydCBtZWFucyByZWxvYWQuIGl0IGlzIG9ubHkgc2VudCBpZiBzaW0taG9zdCB3YXNcbiAgICAgICAgLy8gcmVsb2FkZWRcbiAgICAgICAgc29ja2V0Lm9uY2UoJ2luaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHJlZ2lzdGVyIGFwcC1ob3N0XG4gICAgc29ja2V0LmVtaXQoJ3JlZ2lzdGVyLWFwcC1ob3N0Jyk7XG59XG5cbmZ1bmN0aW9uIGdldENvcmRvdmEoKSB7XG4gICAgcmV0dXJuIGNvcmRvdmE7XG59XG5cbmZ1bmN0aW9uIGV4ZWMoc3VjY2VzcywgZmFpbCwgc2VydmljZSwgYWN0aW9uLCBhcmdzKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIGxvY2FsIGhhbmRsZXIsIGNhbGwgdGhhdC4gT3RoZXJ3aXNlIHBhc3MgaXQgdG8gdGhlIHNpbXVsYXRpb24gaG9zdC5cbiAgICB2YXIgaGFuZGxlciA9IHBsdWdpbkhhbmRsZXJzW3NlcnZpY2VdICYmIHBsdWdpbkhhbmRsZXJzW3NlcnZpY2VdW2FjdGlvbl07XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgdGVsZW1ldHJ5LnNlbmRDbGllbnRUZWxlbWV0cnkoJ2V4ZWMnLCB7IGhhbmRsZWQ6ICdhcHAtaG9zdCcsIHNlcnZpY2U6IHNlcnZpY2UsIGFjdGlvbjogYWN0aW9uIH0pO1xuXG4gICAgICAgIC8vIEVuc3VyZSBsb2NhbCBoYW5kbGVycyBhcmUgZXhlY3V0ZWQgYXN5bmNocm9ub3VzbHkuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaGFuZGxlcihzdWNjZXNzLCBmYWlsLCBhcmdzKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4ZWNJbmRleCA9IG5leHRFeGVjQ2FjaGVJbmRleCsrO1xuICAgICAgICBleGVjQ2FjaGVbZXhlY0luZGV4XSA9IHsgaW5kZXg6IGV4ZWNJbmRleCwgc3VjY2Vzczogc3VjY2VzcywgZmFpbDogZmFpbCB9O1xuICAgICAgICBzb2NrZXQuZW1pdCgnZXhlYycsIHsgaW5kZXg6IGV4ZWNJbmRleCwgc2VydmljZTogc2VydmljZSwgYWN0aW9uOiBhY3Rpb24sIGFyZ3M6IGFyZ3MsIGhhc1N1Y2Nlc3M6ICEhc3VjY2VzcywgaGFzRmFpbDogISFmYWlsIH0pO1xuICAgIH1cbn1cblxuLy8gaGF2ZSB0aGlzIHN0dWIgZnVuY3Rpb24gYWx3YXlzLCBzb21lIHBsYXRmb3JtcyByZXF1aXJlIGl0XG5leGVjLmluaXQgPSBmdW5jdGlvbiAoKSB7XG59O1xuXG4vLyBTZXR1cCBmb3IgY29yZG92YSBwYXRjaGluZ1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2NvcmRvdmEnLCB7XG4gICAgc2V0OiBzZXRDb3Jkb3ZhQW5kSW5pdGlhbGl6ZSxcbiAgICBnZXQ6IGdldENvcmRvdmFcbn0pO1xuXG52YXIgb3JpZ2luYWxVc2VyQWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cubmF2aWdhdG9yLCAndXNlckFnZW50Jywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgdXNlciBhZ2VudCBpcyBpbnNlcnRlZCBoZXJlIGJ5IHRoZSBzZXJ2ZXIgd2hlbiB0aGlzIGZpbGUgaXMgc2VydmVkIHVwLlxuICAgICAgICB2YXIgdXNlckFnZW50ID0gJy8qKiBVU0VSLUFHRU5UICoqLyc7XG4gICAgICAgIHJldHVybiB1c2VyQWdlbnQgfHwgb3JpZ2luYWxVc2VyQWdlbnQ7XG4gICAgfVxufSk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIEJhc2VkIGluIHBhcnQgb24gY29kZSBmcm9tIFZvZ3VlIChodHRwczovL2dpdGh1Yi5jb20vYW5kcmV3ZGF2ZXkvdm9ndWUpXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxudmFyIFVSTF9BVFRSSUJfTkFNRSA9ICd1cmwnO1xudmFyIEhSRUZfQVRUUklCX05BTUUgPSAnaHJlZic7XG52YXIgU1JDX0FUVFJJQl9OQU1FID0gJ3NyYyc7XG52YXIgcmVmZXJlbmNlQXR0cmlidXRlcyA9IFtcbiAgICBVUkxfQVRUUklCX05BTUUsXG4gICAgSFJFRl9BVFRSSUJfTkFNRSxcbiAgICBTUkNfQVRUUklCX05BTUVcbl07XG5cbm1vZHVsZS5leHBvcnRzLnN0YXJ0ID0gZnVuY3Rpb24gKHNvY2spIHtcbiAgICB2YXIgc2VydmVyVXJsID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgIHZhciBsb2NhbFVybFByZWZpeGVzID0gW1xuICAgICAgICBzZXJ2ZXJVcmwsXG4gICAgICAgIHNlcnZlclVybCArICcvJyxcbiAgICAgICAgJy8nLFxuICAgICAgICAnJ1xuICAgIF07XG4gICAgdmFyIHNvY2tldCA9IHNvY2s7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSByZWZlcmVuY2UgYXR0cmlidXRlIChlaXRoZXIgXCJ1cmxcIiwgXCJocmVmXCIgb3IgXCJzcmNcIikgdGhhdCBpcyBkZWZpbmVkIGZvciB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAgKiBJZiB0aGUgbm9kZSBkZWZpbmVzIG1vcmUgdGhhbiBvbmUsIHJldHVybnMgdGhlIGZpcnN0IGVuY291bnRlcmVkLCBpbiB0aGF0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBkb21Ob2RlIFRoZSBET00gbm9kZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBcInVybFwiLCBcImhyZWZcIiBvciBcInNyY1wiLCBvciBudWxsIGlmIG5vbmUgb2YgdGhlc2UgYXR0cmlidXRlcyBpcyBkZWZpbmVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJlZmVyZW5jZUF0dHJpYnV0ZUZvck5vZGUoZG9tTm9kZSkge1xuICAgICAgICBpZiAoZG9tTm9kZS5nZXRBdHRyaWJ1dGUoVVJMX0FUVFJJQl9OQU1FKSkge1xuICAgICAgICAgICAgcmV0dXJuIFVSTF9BVFRSSUJfTkFNRTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21Ob2RlLmdldEF0dHJpYnV0ZShIUkVGX0FUVFJJQl9OQU1FKSkge1xuICAgICAgICAgICAgcmV0dXJuIEhSRUZfQVRUUklCX05BTUU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9tTm9kZS5nZXRBdHRyaWJ1dGUoU1JDX0FUVFJJQl9OQU1FKSkge1xuICAgICAgICAgICAgcmV0dXJuIFNSQ19BVFRSSUJfTkFNRTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBVUkwgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBmaWxlIHBhdGggZnJvbSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlUmVsYXRpdmVQYXRoIFRoZSBwYXRoIG9mIHRoZSBtb2RpZmllZCBmaWxlIHRvIGNoZWNrLCByZWxhdGl2ZSB0byB0aGUgd2ViUm9vdC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgVVJMIHBvaW50cyB0byB0aGUgbW9kaWZpZWQgZmlsZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXJsTWF0Y2hlc1BhdGgodXJsLCBmaWxlUmVsYXRpdmVQYXRoKSB7XG4gICAgICAgIHJldHVybiBsb2NhbFVybFByZWZpeGVzLnNvbWUoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIChwcmVmaXggKyBmaWxlUmVsYXRpdmVQYXRoKSA9PT0gdXJsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbGwgdGhlIERPTSBlbGVtZW50cyB0aGF0IGhhdmUgYSByZWZlcmVuY2UgYXR0cmlidXRlIChcInVybFwiLCBcImhyZWZcIiBvciBcInNyY1wiKSBwb2ludGluZyB0byB0aGUgZ2l2ZW5cbiAgICAgKiByZWxhdGl2ZSBwYXRoLiBFeGNsdWRlcyA8c2NyaXB0PiB0YWdzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVSZWxhdGl2ZVBhdGggVGhlIFVSTCBvZiB0aGUgZmlsZSB0byBjaGVjaywgcmVsYXRpdmUgdG8gdGhlIHdlYlJvb3QuXG4gICAgICogQHJldHVybnMge3sgZG9tTm9kZTogRWxlbWVudCwgcmVmZXJlbmNlQXR0cmlidXRlOiBzdHJpbmcgfVtdfSBBbiBhcnJheSBvZiBcInJlc291cmNlc1wiIHJlZmVyZW5jaW5nIHRoZSBnaXZlbiBmaWxlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmREb21Ob2Rlc0ZvckZpbGVQYXRoKGZpbGVSZWxhdGl2ZVBhdGgpIHtcbiAgICAgICAgLy8gVG8gdXNlIHF1ZXJ5U2VsZWN0b3JBbGwgdG8gcXVlcnkgZWxlbWVudHMgYmFzZWQgb24gdGhlaXIgYXR0cmlidXRlcywgdGhlIHNlbGVjdG9yJ3Mgc3ludGF4IGlzOlxuICAgICAgICAvLyAnW2F0dHJpYjFdLCBbYXR0cmliMl0sIC4uLicuXG4gICAgICAgIHZhciBzZWxlY3RvclN0cmluZyA9ICdbJyArIHJlZmVyZW5jZUF0dHJpYnV0ZXMuam9pbignXSwgWycpICsgJ10nO1xuICAgICAgICB2YXIgcmF3Tm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yU3RyaW5nKTtcbiAgICAgICAgdmFyIGZpbHRlcmVkTm9kZXMgPSBbXTtcblxuICAgICAgICAvLyBxdWVyeVNlbGVjdG9yQWxsKCkgZG9lcyBub3QgcmV0dXJuIGFuIGFycmF5LCBzbyB3ZSBjYW4ndCB1c2UgQXJyYXkucHJvdG90eXBlLmZpbHRlcigpLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd05vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSByYXdOb2Rlc1tpXTtcblxuICAgICAgICAgICAgLy8gSWdub3JlIDxzY3JpcHQ+IHRhZ3MgKHdlIG5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCBmb3Igc2NyaXB0cykuXG4gICAgICAgICAgICBpZiAoY3VycmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2NyaXB0Jykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBWZXJpZnkgaWYgdGhlIG5vZGUgaXMgcmVmZXJlbmNpbmcgdGhlIG1vZGlmaWVkIGZpbGVcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2VBdHRyaWJ1dGUgPSBnZXRSZWZlcmVuY2VBdHRyaWJ1dGVGb3JOb2RlKGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgIHZhciBub2RlUmVmZXJlbmNlID0gY3VycmVudE5vZGUuZ2V0QXR0cmlidXRlKHJlZmVyZW5jZUF0dHJpYnV0ZSk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBub2RlJ3MgdXJsIC8gaHJlZiAvIHNyYyBkb2Vzbid0IHJlZmVyZW5jZSB0aGUgbW9kaWZpZWQgZmlsZSBvbiB0aGUgc2VydmVyLCBpZ25vcmUgdGhlIG5vZGUuXG4gICAgICAgICAgICBpZiAoIW5vZGVSZWZlcmVuY2UgfHwgIXVybE1hdGNoZXNQYXRoKHVybC5wYXJzZShub2RlUmVmZXJlbmNlKS5wYXRobmFtZSwgZmlsZVJlbGF0aXZlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV2UgY2FyZSBhYm91dCB0aGlzIG5vZGUuXG4gICAgICAgICAgICBmaWx0ZXJlZE5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRvbU5vZGU6IGN1cnJlbnROb2RlLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUF0dHJpYnV0ZTogcmVmZXJlbmNlQXR0cmlidXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZE5vZGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgY2hhbmdlcyBmb3JtIHRoZSBzcGVjaWZpZWQgZmlsZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYXBwIHdpdGhvdXQgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICAgICAqIFRoZW4sIGJhc2VkIG9uIHRoYXQsIGVpdGhlciB1cGRhdGVzIHRoZSByZWZlcmVuY2UgYXR0cmlidXRlIG9mIHRoZSBhcHByb3ByaWF0ZSBub2RlLCBvciBkb2VzIGEgZnVsbCBwYWdlXG4gICAgICogcmVsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVSZWxhdGl2ZVBhdGggVGhlIFVSTCBvZiB0aGUgZmlsZSB0aGF0IGNoYW5nZWQsIHJlbGF0aXZlIHRvIHRoZSB3ZWJSb290LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uRmlsZUNoYW5nZWQoZmlsZVJlbGF0aXZlUGF0aCkge1xuICAgICAgICB2YXIgYXNzb2NpYXRlZE5vZGVzID0gZmluZERvbU5vZGVzRm9yRmlsZVBhdGgoZmlsZVJlbGF0aXZlUGF0aCk7XG5cbiAgICAgICAgaWYgKGFzc29jaWF0ZWROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlZnJlc2hGaWxlKGZpbGVSZWxhdGl2ZVBhdGgsIGFzc29jaWF0ZWROb2Rlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWxvYWRQYWdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgYSBmaWxlIGJ5IHVwZGF0aW5nIHRoZSBhc3NvY2lhdGVkIG5vZGVzJyBxdWVyeXN0cmluZyB3aXRoIGEgbmV3IF9saXZlcmVsb2FkIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlUmVsYXRpdmVQYXRoIFRoZSBVUkwgb2YgdGhlIGZpbGUgdG8gYmUgcmVmcmVzaGVkLCByZWxhdGl2ZSB0byB0aGUgd2ViUm9vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWZyZXNoRmlsZShmaWxlUmVsYXRpdmVQYXRoLCBub2Rlc1RvUmVmcmVzaCkge1xuICAgICAgICBub2Rlc1RvUmVmcmVzaCA9IG5vZGVzVG9SZWZyZXNoIHx8IGZpbmREb21Ob2Rlc0ZvckZpbGVQYXRoKGZpbGVSZWxhdGl2ZVBhdGgpO1xuXG4gICAgICAgIGlmICghbm9kZXNUb1JlZnJlc2gpIHtcbiAgICAgICAgICAgIC8vIFRoZSBtb2RpZmllZCBmaWxlIGRvZXNuJ3QgYXBwZWFyIHRvIGJlIHJlZmVyZW5jZWQgaW4gdGhlIERPTSBhbnltb3JlLiBEbyBhIGZ1bGwgcmVsb2FkLlxuICAgICAgICAgICAgcmVsb2FkUGFnZSgpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIG5vZGVzJyB1cmwgLyBocmVmIC8gc3JjIGF0dHJpYnV0ZSB3aXRoIGEgbmV3IF9saXZlcmVsb2FkIHF1ZXJ5c3RyaW5nIHBhcmFtZXRlci5cbiAgICAgICAgbm9kZXNUb1JlZnJlc2guZm9yRWFjaChmdW5jdGlvbiAobm9kZUluZm8pIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1VybCA9IG5vZGVJbmZvLmRvbU5vZGUuZ2V0QXR0cmlidXRlKG5vZGVJbmZvLnJlZmVyZW5jZUF0dHJpYnV0ZSk7XG4gICAgICAgICAgICB2YXIgcGFyc2VkVXJsID0gdXJsLnBhcnNlKHByZXZpb3VzVXJsLCB0cnVlKTtcblxuICAgICAgICAgICAgcGFyc2VkVXJsLnF1ZXJ5Ll9saXZlcmVsb2FkID0gKG5ldyBEYXRlKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBkZWxldGUgcGFyc2VkVXJsLnNlYXJjaDtcbiAgICAgICAgICAgIG5vZGVJbmZvLmRvbU5vZGUuc2V0QXR0cmlidXRlKG5vZGVJbmZvLnJlZmVyZW5jZUF0dHJpYnV0ZSwgdXJsLmZvcm1hdChwYXJzZWRVcmwpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsb2FkIHRoZSBwYWdlLiBDdXJyZW50bHksIG9ubHkgZG9lcyBhIG5haXZlIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWxvYWRQYWdlKCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgIH1cblxuICAgIHNvY2tldC5vbignbHItZmlsZS1jaGFuZ2VkJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgb25GaWxlQ2hhbmdlZChkYXRhLmZpbGVSZWxhdGl2ZVBhdGgpO1xuICAgIH0pO1xufTtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gQmFzZWQgaW4gcGFydCBvbiBjb2RlIGZyb20gQXBhY2hlIFJpcHBsZSwgaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9pbmN1YmF0b3ItcmlwcGxlXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG5cbnZhciBfbGFzdE1vdXNlRXZlbnQsXG4gICAgX2lzTW91c2VEb3duO1xuXG4vLyBOT1RFOiBtaXNzaW5nIHZpZXcsIGRldGFpbCwgdG91Y2hlcywgdGFyZ2V0VG91Y2hlcywgc2NhbGUgYW5kIHJvdGF0aW9uXG5mdW5jdGlvbiBfY3JlYXRlVG91Y2hFdmVudCh0eXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUsIGV2ZW50RGF0YSkge1xuICAgIHZhciB0b3VjaEV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIHRvdWNoRXZlbnQuaW5pdEV2ZW50KHR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSk7XG4gICAgdXRpbHMubWl4aW4oZXZlbnREYXRhLCB0b3VjaEV2ZW50KTtcblxuICAgIHJldHVybiB0b3VjaEV2ZW50O1xufVxuXG5mdW5jdGlvbiBfc2ltdWxhdGVUb3VjaEV2ZW50KHR5cGUsIG1vdXNlZXZlbnQpIHtcbiAgICBpZiAoX2xhc3RNb3VzZUV2ZW50ICYmXG4gICAgICAgICAgICBtb3VzZWV2ZW50LnR5cGUgPT09IF9sYXN0TW91c2VFdmVudC50eXBlICYmXG4gICAgICAgICAgICBtb3VzZWV2ZW50LnBhZ2VYID09PSBfbGFzdE1vdXNlRXZlbnQucGFnZVggJiZcbiAgICAgICAgICAgIG1vdXNlZXZlbnQucGFnZVkgPT09IF9sYXN0TW91c2VFdmVudC5wYWdlWSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2xhc3RNb3VzZUV2ZW50ID0gbW91c2VldmVudDtcblxuICAgIHZhciB0b3VjaE9iaiA9IHtcbiAgICAgICAgY2xpZW50WDogbW91c2VldmVudC5wYWdlWCxcbiAgICAgICAgY2xpZW50WTogbW91c2VldmVudC5wYWdlWSxcbiAgICAgICAgcGFnZVg6IG1vdXNlZXZlbnQucGFnZVgsXG4gICAgICAgIHBhZ2VZOiBtb3VzZWV2ZW50LnBhZ2VZLFxuICAgICAgICBzY3JlZW5YOiBtb3VzZWV2ZW50LnBhZ2VYLFxuICAgICAgICBzY3JlZW5ZOiBtb3VzZWV2ZW50LnBhZ2VZLFxuICAgICAgICB0YXJnZXQ6IG1vdXNlZXZlbnQudGFyZ2V0LFxuICAgICAgICBpZGVudGlmaWVyOiAnJ1xuICAgIH07XG5cbiAgICB2YXIgZXZlbnREYXRhID0ge1xuICAgICAgICBhbHRLZXk6IG1vdXNlZXZlbnQuYWx0S2V5LFxuICAgICAgICBjdHJsS2V5OiBtb3VzZWV2ZW50LmN0cmxLZXksXG4gICAgICAgIHNoaWZ0S2V5OiBtb3VzZWV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBtZXRhS2V5OiBtb3VzZWV2ZW50Lm1ldGFLZXksXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzOiBbdG91Y2hPYmpdLFxuICAgICAgICB0YXJnZXRUb3VjaGVzOiB0eXBlID09PSAndG91Y2hlbmQnID8gW10gOiBbdG91Y2hPYmpdLFxuICAgICAgICB0b3VjaGVzOiB0eXBlID09PSAndG91Y2hlbmQnID8gW10gOiBbdG91Y2hPYmpdXG4gICAgfTtcblxuICAgIHV0aWxzLm1peGluKHRvdWNoT2JqLCBldmVudERhdGEpO1xuXG4gICAgdmFyIGl0ZW1GbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpc1tpbmRleF07XG4gICAgfTtcblxuICAgIGV2ZW50RGF0YS50b3VjaGVzLml0ZW0gPSBpdGVtRm47XG4gICAgZXZlbnREYXRhLmNoYW5nZWRUb3VjaGVzLml0ZW0gPSBpdGVtRm47XG4gICAgZXZlbnREYXRhLnRhcmdldFRvdWNoZXMuaXRlbSA9IGl0ZW1GbjtcblxuICAgIHZhciBsaXN0ZW5lck5hbWUgPSAnb24nICsgdHlwZSxcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBfY3JlYXRlVG91Y2hFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCBldmVudERhdGEpO1xuXG4gICAgbW91c2VldmVudC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG5cbiAgICBpZiAodHlwZW9mIG1vdXNlZXZlbnQudGFyZ2V0W2xpc3RlbmVyTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW91c2VldmVudC50YXJnZXRbbGlzdGVuZXJOYW1lXS5hcHBseShtb3VzZWV2ZW50LnRhcmdldCwgW3NpbXVsYXRlZEV2ZW50XSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgX2lzTW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgX3NpbXVsYXRlVG91Y2hFdmVudCgndG91Y2hzdGFydCcsIGV2ZW50KTtcbiAgICB9LCB0cnVlKTtcblxuICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKF9pc01vdXNlRG93bikge1xuICAgICAgICAgICAgX3NpbXVsYXRlVG91Y2hFdmVudCgndG91Y2htb3ZlJywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBfaXNNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgX3NpbXVsYXRlVG91Y2hFdmVudCgndG91Y2hlbmQnLCBldmVudCk7XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICB3aW5kb3cuTm9kZS5wcm90b3R5cGUub250b3VjaHN0YXJ0ID0gbnVsbDtcbiAgICB3aW5kb3cuTm9kZS5wcm90b3R5cGUub250b3VjaGVuZCA9IG51bGw7XG4gICAgd2luZG93Lk5vZGUucHJvdG90eXBlLm9udG91Y2htb3ZlID0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMuaW5pdCA9IGluaXQ7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIEJhc2VkIG9uIEFwYWNoZSBDb3Jkb3ZhIGdlb2xvY2F0aW9uIHBsdWdpbidzIENvb3JkaW5hdGVzIGltcGxlbWVudGF0aW9uLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb24vYmxvYi9tYXN0ZXIvd3d3L0Nvb3JkaW5hdGVzLmpzXG5cbi8qKlxuICogVGhpcyBjbGFzcyBjb250YWlucyBwb3NpdGlvbiBpbmZvcm1hdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBsYXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBsbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbHRcbiAqIEBwYXJhbSB7T2JqZWN0fSBhY2NcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkXG4gKiBAcGFyYW0ge09iamVjdH0gdmVsXG4gKiBAcGFyYW0ge09iamVjdH0gYWx0YWNjXG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIENvb3JkaW5hdGVzID0gZnVuY3Rpb24obGF0LCBsbmcsIGFsdCwgYWNjLCBoZWFkLCB2ZWwsIGFsdGFjYykge1xuICAgIC8qKlxuICAgICAqIFRoZSBsYXRpdHVkZSBvZiB0aGUgcG9zaXRpb24uXG4gICAgICovXG4gICAgdGhpcy5sYXRpdHVkZSA9IGxhdDtcbiAgICAvKipcbiAgICAgKiBUaGUgbG9uZ2l0dWRlIG9mIHRoZSBwb3NpdGlvbixcbiAgICAgKi9cbiAgICB0aGlzLmxvbmdpdHVkZSA9IGxuZztcbiAgICAvKipcbiAgICAgKiBUaGUgYWNjdXJhY3kgb2YgdGhlIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIHRoaXMuYWNjdXJhY3kgPSBhY2M7XG4gICAgLyoqXG4gICAgICogVGhlIGFsdGl0dWRlIG9mIHRoZSBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICB0aGlzLmFsdGl0dWRlID0gKGFsdCAhPT0gdW5kZWZpbmVkID8gYWx0IDogbnVsbCk7XG4gICAgLyoqXG4gICAgICogVGhlIGRpcmVjdGlvbiB0aGUgZGV2aWNlIGlzIG1vdmluZyBhdCB0aGUgcG9zaXRpb24uXG4gICAgICovXG4gICAgdGhpcy5oZWFkaW5nID0gKGhlYWQgIT09IHVuZGVmaW5lZCA/IGhlYWQgOiBudWxsKTtcbiAgICAvKipcbiAgICAgKiBUaGUgdmVsb2NpdHkgd2l0aCB3aGljaCB0aGUgZGV2aWNlIGlzIG1vdmluZyBhdCB0aGUgcG9zaXRpb24uXG4gICAgICovXG4gICAgdGhpcy5zcGVlZCA9ICh2ZWwgIT09IHVuZGVmaW5lZCA/IHZlbCA6IG51bGwpO1xuXG4gICAgaWYgKHRoaXMuc3BlZWQgPT09IDAgfHwgdGhpcy5zcGVlZCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmhlYWRpbmcgPSBOYU47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGFsdGl0dWRlIGFjY3VyYWN5IG9mIHRoZSBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICB0aGlzLmFsdGl0dWRlQWNjdXJhY3kgPSAoYWx0YWNjICE9PSB1bmRlZmluZWQpID8gYWx0YWNjIDogbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29vcmRpbmF0ZXM7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIEJhc2VkIG9uIEFwYWNoZSBDb3Jkb3ZhIGdlb2xvY2F0aW9uIHBsdWdpbidzIFBvc2l0aW9uIGltcGxlbWVudGF0aW9uLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZ2VvbG9jYXRpb24vYmxvYi9tYXN0ZXIvd3d3L1Bvc2l0aW9uLmpzXG5cbnZhciBDb29yZGluYXRlcyA9IHJlcXVpcmUoJy4vQ29vcmRpbmF0ZXMnKTtcblxudmFyIFBvc2l0aW9uID0gZnVuY3Rpb24oY29vcmRzLCB0aW1lc3RhbXApIHtcbiAgICBpZiAoY29vcmRzKSB7XG4gICAgICAgIHRoaXMuY29vcmRzID0gbmV3IENvb3JkaW5hdGVzKGNvb3Jkcy5sYXRpdHVkZSwgY29vcmRzLmxvbmdpdHVkZSwgY29vcmRzLmFsdGl0dWRlLCBjb29yZHMuYWNjdXJhY3ksIGNvb3Jkcy5oZWFkaW5nLCBjb29yZHMudmVsb2NpdHksIGNvb3Jkcy5hbHRpdHVkZUFjY3VyYWN5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvb3JkcyA9IG5ldyBDb29yZGluYXRlcygpO1xuICAgIH1cbiAgICB0aGlzLnRpbWVzdGFtcCA9ICh0aW1lc3RhbXAgIT09IHVuZGVmaW5lZCkgPyB0aW1lc3RhbXAgOiBuZXcgRGF0ZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb3NpdGlvbjtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gQmFzZWQgb24gQXBhY2hlIENvcmRvdmEgZ2VvbG9jYXRpb24gcGx1Z2luJ3MgUG9zaXRpb25FcnJvciBpbXBsZW1lbnRhdGlvbi5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uL2Jsb2IvbWFzdGVyL3d3dy9Qb3NpdGlvbkVycm9yLmpzXG5cbi8qKlxuICogUG9zaXRpb24gZXJyb3Igb2JqZWN0XG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0gY29kZVxuICogQHBhcmFtIG1lc3NhZ2VcbiAqL1xudmFyIFBvc2l0aW9uRXJyb3IgPSBmdW5jdGlvbihjb2RlLCBtZXNzYWdlKSB7XG4gICAgdGhpcy5jb2RlID0gY29kZSB8fCBudWxsO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgJyc7XG59O1xuXG5Qb3NpdGlvbkVycm9yLnByb3RvdHlwZS5QRVJNSVNTSU9OX0RFTklFRCA9IFBvc2l0aW9uRXJyb3IuUEVSTUlTU0lPTl9ERU5JRUQgPSAxO1xuUG9zaXRpb25FcnJvci5wcm90b3R5cGUuUE9TSVRJT05fVU5BVkFJTEFCTEUgPSBQb3NpdGlvbkVycm9yLlBPU0lUSU9OX1VOQVZBSUxBQkxFID0gMjtcblBvc2l0aW9uRXJyb3IucHJvdG90eXBlLlRJTUVPVVQgPSBQb3NpdGlvbkVycm9yLlRJTUVPVVQgPSAzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvc2l0aW9uRXJyb3I7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuLy8gRXZlbnRzIHRha2VuIGZyb20gY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyIGltcGxlbWVudGF0aW9uLCBhbmQgaWZyYW1lIGFwcHJvYWNoXG4vLyBiYXNlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyL2Jsb2IvbWFzdGVyL3NyYy9icm93c2VyL0luQXBwQnJvd3NlclByb3h5LmpzXG5cbi8qZ2xvYmFsIGNvcmRvdmE6IGZhbHNlICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG5cbnZhciBfZGVmYXVsdEluQXBwQnJvd3NlclR5cGUgPSAnaWZyYW1lJztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmYWlsXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW5BcHBCcm93c2VyKHVybCwgb3B0aW9ucywgc3VjY2VzcywgZmFpbCkge1xuICAgIHRoaXMuX3VybCA9IHRoaXMuX3ByZXBhcmVVcmwodXJsKTtcbiAgICB0aGlzLl9vcHRpb25zID0ge307XG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge1xuICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgICBmYWlsOiBmYWlsXG4gICAgfTtcblxuICAgIG9wdGlvbnMgPSAob3B0aW9ucy50cmltKCkgPT09ICcnKSA/IFtdIDogb3B0aW9ucy5zcGxpdCgnOycpO1xuXG4gICAgLy8gcHJlcGFyZSBvcHRpb25zIG9iamVjdFxuICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciBwcm9wID0gb3B0aW9uLnNwbGl0KCc9Jyk7IC8vIFwidGhlT3B0aW9uPXZhbHVlXCJcbiAgICAgICAgdGhpcy5fb3B0aW9uc1twcm9wWzBdXSA9IHByb3BbMV07XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIGlmICh0aGlzLl9vcHRpb25zLmhpZGRlbiAhPT0gJ3llcycpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBlbnVtXG4gKi9cbkluQXBwQnJvd3Nlci5FdmVudHMgPSB7XG4gICAgTE9BRF9TVEFSVDogJ2xvYWRzdGFydCcsXG4gICAgTE9BRF9TVE9QOiAnbG9hZHN0b3AnLFxuICAgIExPQURfRVJST1I6ICdsb2FkZXJyb3InLFxuICAgIEVYSVQ6ICdleGl0J1xufTtcblxuSW5BcHBCcm93c2VyLnByb3RvdHlwZS5fcHJlcGFyZVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB2YXIgcXVlcnlQYXJhbWV0ZXIgPSAnY2R2c2ltLWVuYWJsZWQ9ZmFsc2UnLFxuICAgICAgICB1cGRhdGVkVXJsID0gdXJsO1xuXG4gICAgaWYgKHV0aWxzLmlzU2FtZU9yaWdpblJlcXVlc3QodXJsKSkge1xuICAgICAgICB1cmwgPSB1dGlscy5wYXJzZVVybCh1cmwpO1xuICAgICAgICB1cGRhdGVkVXJsICs9ICh1cmwuc2VhcmNoLmxlbmd0aCA+IDApID8gJyYnIDogJz8nO1xuICAgICAgICB1cGRhdGVkVXJsICs9IHF1ZXJ5UGFyYW1ldGVyO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkVXJsO1xufTtcblxuSW5BcHBCcm93c2VyLnByb3RvdHlwZS5nZXRDdXJyZW50VXJsID0gZnVuY3Rpb24gKCkge307XG5cbi8qKlxuICogSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgTmF0aXZlIGNhbGwgdG8gc2hvdy4gVGhlIHNpbXVsYXRvciBicm93c2VyIHNob3VsZCBiZVxuICogZGlzcGxheWVkLlxuICogU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCB0aGlzLlxuICovXG5JbkFwcEJyb3dzZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7fTtcblxuLyoqXG4gKiBIaWRlIHRoZSBzaW11bGF0b3IgYnJvd3Nlci5cbiAqIFN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgdGhpcy5cbiAqL1xuSW5BcHBCcm93c2VyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG5JbkFwcEJyb3dzZXIucHJvdG90eXBlLmluamVjdFNjcmlwdENvZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbkFwcEJyb3dzZXIgXCJpbmplY3RTY3JpcHRDb2RlXCIgc2ltdWxhdGlvbiBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5JbkFwcEJyb3dzZXIucHJvdG90eXBlLmluamVjdFNjcmlwdEZpbGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbkFwcEJyb3dzZXIgXCJpbmplY3RTY3JpcHRGaWxlXCIgc2ltdWxhdGlvbiBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5JbkFwcEJyb3dzZXIucHJvdG90eXBlLmluamVjdFN0eWxlQ29kZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYXJncykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0luQXBwQnJvd3NlciBcImluamVjdFN0eWxlQ29kZVwiIHNpbXVsYXRpb24gbm90IHN1cHBvcnRlZCcpO1xufTtcblxuSW5BcHBCcm93c2VyLnByb3RvdHlwZS5pbmplY3RTdHlsZUZpbGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbkFwcEJyb3dzZXIgXCJpbmplY3RTY3JpcHRGaWxlXCIgc2ltdWxhdGlvbiBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgc3BlY2lmaWVkIGF0IHRoZSBuYXRpdmUgXCJvcGVuXCIgY2FsbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqIEBwcml2YXRlXG4gKi9cbkluQXBwQnJvd3Nlci5wcm90b3R5cGUuX3N1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzLnN1Y2Nlc3Moe1xuICAgICAgICB0eXBlOiBldmVudE5hbWUsXG4gICAgICAgIHVybDogdGhpcy5nZXRDdXJyZW50VXJsKClcbiAgICB9KTtcbn07XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIFN5c3RlbSBicm93c2VyIHNpbXVsYXRpb24uIFRoaXMgdXNlcyBhIG5ldyBicm93c2VyIHdpbmRvd1xuICogYXMgdGhlIHN5c3RlbSBicm93c2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtBcnJheX0gb3B0aW9uc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VjY2Vzc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gZmFpbFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN5c3RlbUJyb3dzZXIodXJsLCBvcHRpb25zLCBzdWNjZXNzLCBmYWlsKSB7XG4gICAgSW5BcHBCcm93c2VyLmNhbGwodGhpcywgdXJsLCBvcHRpb25zLCBzdWNjZXNzLCBmYWlsKTtcblxuICAgIHRoaXMuX3dpbmRvdyA9IG51bGw7XG59XG5cblN5c3RlbUJyb3dzZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbkFwcEJyb3dzZXIucHJvdG90eXBlKTtcblN5c3RlbUJyb3dzZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3lzdGVtQnJvd3NlcjtcblN5c3RlbUJyb3dzZXIucHJvdG90eXBlLnBhcmVudENsYXNzID0gSW5BcHBCcm93c2VyLnByb3RvdHlwZTtcblxuU3lzdGVtQnJvd3Nlci5wcm90b3R5cGUuZ2V0Q3VycmVudFVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX3dpbmRvdyA/IHRoaXMuX3dpbmRvdy5sb2NhdGlvbi5ocmVmIDogJycpO1xufTtcblxuU3lzdGVtQnJvd3Nlci5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX3dpbmRvdykge1xuICAgICAgICB2YXIgbW9kdWxlbWFwcGVyID0gY29yZG92YS5yZXF1aXJlKCdjb3Jkb3ZhL21vZHVsZW1hcHBlcicpLFxuICAgICAgICAgICAgd2luZG93T3BlbiA9IG1vZHVsZW1hcHBlci5nZXRPcmlnaW5hbFN5bWJvbCh3aW5kb3csICd3aW5kb3cub3BlbicpO1xuXG4gICAgICAgIHRoaXMuX3N1Y2Nlc3MoSW5BcHBCcm93c2VyLkV2ZW50cy5MT0FEX1NUQVJUKTtcblxuICAgICAgICB0aGlzLl93aW5kb3cgPSB3aW5kb3dPcGVuLmNhbGwod2luZG93LCB0aGlzLl91cmwsICdfYmxhbmsnKTtcbiAgICB9XG59O1xuXG5TeXN0ZW1Ccm93c2VyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd2luZG93KSB7XG4gICAgICAgIHRoaXMuX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLl93aW5kb3cgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX3N1Y2Nlc3MoSW5BcHBCcm93c2VyLkV2ZW50cy5FWElUKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBXZWJWaWV3IHR5cGUgb2YgSW5BcHBCcm93c2VyIHBsdWdpbi4gVGhpcyBjcmVhdGVzIGFuIGlmcmFtZVxuICogdGhhdCBzaW11bGF0ZXMgdGhlIGVtYmVkZGVkIFdlYlZpZXcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmYWlsXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSWZyYW1lQnJvd3Nlcih1cmwsIG9wdGlvbnMsIHN1Y2Nlc3MsIGZhaWwpIHtcbiAgICB0aGlzLl9jb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMuX2lmcmFtZSA9IG51bGw7XG4gICAgdGhpcy5fcmVzaXplQ2FsbGJhY2sgPSB0aGlzLl9yZXNpemVDb250YWluZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9pc1Zpc2libGUgPSBmYWxzZTtcblxuICAgIEluQXBwQnJvd3Nlci5jYWxsKHRoaXMsIHVybCwgb3B0aW9ucywgc3VjY2VzcywgZmFpbCk7XG59XG5cbklmcmFtZUJyb3dzZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbkFwcEJyb3dzZXIucHJvdG90eXBlKTtcbklmcmFtZUJyb3dzZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSWZyYW1lQnJvd3NlcjtcbklmcmFtZUJyb3dzZXIucHJvdG90eXBlLnBhcmVudENsYXNzID0gSW5BcHBCcm93c2VyLnByb3RvdHlwZTtcblxuSWZyYW1lQnJvd3Nlci5wcm90b3R5cGUuZ2V0Q3VycmVudFVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2lmcmFtZSA/IHRoaXMuX2lmcmFtZS5zcmMgOiAnJyk7XG59O1xuXG5JZnJhbWVCcm93c2VyLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUZyYW1lKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNWaXNpYmxlID0gdHJ1ZTtcblxuICAgIHRoaXMuX2lmcmFtZS5zcmMgPSB0aGlzLl91cmw7XG4gICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgdGhpcy5fcmVzaXplQ29udGFpbmVyKCk7XG5cbiAgICB0aGlzLl9zdWNjZXNzKEluQXBwQnJvd3Nlci5FdmVudHMuTE9BRF9TVEFSVCk7XG59O1xuXG5JZnJhbWVCcm93c2VyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3N1Y2Nlc3MoSW5BcHBCcm93c2VyLkV2ZW50cy5FWElUKTtcblxuICAgICAgICB0aGlzLl9pZnJhbWUgPSBudWxsO1xuXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9yZXNpemVDYWxsYmFjayk7XG4gICAgfVxufTtcblxuSWZyYW1lQnJvd3Nlci5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fY29udGFpbmVyICYmIHRoaXMuX2lzVmlzaWJsZSkge1xuICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy5faXNWaXNpYmxlID0gZmFsc2U7XG4gICAgfVxufTtcblxuSWZyYW1lQnJvd3Nlci5wcm90b3R5cGUuaW5qZWN0U2NyaXB0Q29kZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYXJncykge1xuICAgIGlmICh0aGlzLl9jb250YWluZXIgJiYgdGhpcy5faWZyYW1lKSB7XG4gICAgICAgIHZhciBjb2RlID0gYXJnc1swXS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnJyksXG4gICAgICAgICAgICBoYXNDYWxsYmFjayA9IGFyZ3NbMV07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9pbmplY3RDb2RlKGNvZGUpO1xuICAgICAgICAgICAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGluamVjdCBzY3JpcHQnLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5JZnJhbWVCcm93c2VyLnByb3RvdHlwZS5pbmplY3RTY3JpcHRGaWxlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBhcmdzKSB7XG4gICAgdmFyIGZpbGUgPSBhcmdzWzBdO1xuICAgIHZhciBjb2RlID0gJyhmdW5jdGlvbiAoKSB7JyArXG4gICAgICAgICd2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTsnICtcbiAgICAgICAgJ3ZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpOycgK1xuICAgICAgICAnc2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiOycgK1xuICAgICAgICAnc2NyaXB0LmlkID0gXCJpbmFwcGJyb3dzZXItaW5qZWN0LXNjcmlwdFwiOycgK1xuICAgICAgICAnc2NyaXB0LnNyYyA9IFwiJyArIGZpbGUgKyAnXCI7JyArXG4gICAgICAgICdoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7JyArXG4gICAgICAgICd9KCkpOyc7XG5cbiAgICBhcmdzWzBdID0gY29kZTtcblxuICAgIHRoaXMuaW5qZWN0U2NyaXB0Q29kZShjYWxsYmFjaywgYXJncyk7XG59O1xuXG5JZnJhbWVCcm93c2VyLnByb3RvdHlwZS5pbmplY3RTdHlsZUNvZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICBpZiAodGhpcy5fY29udGFpbmVyICYmIHRoaXMuX2lmcmFtZSkge1xuICAgICAgICB2YXIgY3NzID0gYXJnc1swXS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnJyksXG4gICAgICAgICAgICBoYXNDYWxsYmFjayA9IGFyZ3NbMV07XG5cbiAgICAgICAgdmFyIGNvZGUgPSAnKGZ1bmN0aW9uICgpIHsnICtcbiAgICAgICAgICAgICd2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTsnICtcbiAgICAgICAgICAgICd2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7JyArXG4gICAgICAgICAgICAnc3R5bGUudHlwZSA9IFwidGV4dC9jc3NcIjsnICtcbiAgICAgICAgICAgICdpZiAoc3R5bGUuc3R5bGVTaGVldCkgeycgK1xuICAgICAgICAgICAgJ3N0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IFwiJyArIGNzcyArICdcIjsnICtcbiAgICAgICAgICAgICd9IGVsc2UgeycgK1xuICAgICAgICAgICAgJ3N0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiJyArIGNzcyArICdcIikpO30nICtcbiAgICAgICAgICAgICdoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsnICtcbiAgICAgICAgICAgICd9KCkpOyc7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9pbmplY3RDb2RlKGNvZGUpO1xuICAgICAgICAgICAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGluamVjdCBzdHlsZScsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbklmcmFtZUJyb3dzZXIucHJvdG90eXBlLmluamVjdFN0eWxlRmlsZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYXJncykge1xuICAgIGlmICh0aGlzLl9jb250YWluZXIgJiYgdGhpcy5faWZyYW1lKSB7XG4gICAgICAgIHZhciBmaWxlID0gYXJnc1swXSxcbiAgICAgICAgICAgIGhhc0NhbGxiYWNrID0gYXJnc1sxXTtcblxuICAgICAgICB2YXIgY29kZSA9ICcoZnVuY3Rpb24gKCkgeycgK1xuICAgICAgICAgICAgJ3ZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdOycgK1xuICAgICAgICAgICAgJ3ZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7JyArXG4gICAgICAgICAgICAnbGluay50eXBlID0gXCJ0ZXh0L2Nzc1wiOycgK1xuICAgICAgICAgICAgJ2xpbmsucmVsID0gXCJzdHlsZXNoZWV0XCI7JyArXG4gICAgICAgICAgICAnbGluay5ocmVmID0gXCInICsgZmlsZSArICdcIjsnICtcbiAgICAgICAgICAgICdoZWFkLmFwcGVuZENoaWxkKGxpbmspOycgK1xuICAgICAgICAgICAgJ30oKSk7JztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2luamVjdENvZGUoY29kZSk7XG4gICAgICAgICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gaW5qZWN0IGEgc3R5bGUgZmlsZScsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuSWZyYW1lQnJvd3Nlci5wcm90b3R5cGUuX2NyZWF0ZUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX2lmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIHRoaXMuX2lmcmFtZS5zYW5kYm94ID0gJ2FsbG93LW1vZGFscyBhbGxvdy1wb3B1cHMnO1xuXG4gICAgLy8gY29udGFpbmVyIHN0eWxlXG4gICAgdmFyIHN0eWxlID0gdGhpcy5fY29udGFpbmVyLnN0eWxlO1xuICAgIHN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBzdHlsZS50b3AgPSBzdHlsZS5sZWZ0ID0gJzAnO1xuICAgIHN0eWxlLmJvcmRlciA9ICcwJztcbiAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZmZmZic7XG4gICAgc3R5bGUuekluZGV4ID0gJzEwMDAwJztcbiAgICBzdHlsZS53aWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggKyAncHgnO1xuICAgIHN0eWxlLmhlaWdodCA9IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0ICsgJ3B4JztcbiAgICBzdHlsZS5taW5IZWlnaHQgPSBzdHlsZS5taW5XaWR0aCA9ICcxMDAlJztcblxuICAgIC8vIGlmcmFtZSBzdHlsZVxuICAgIHN0eWxlID0gdGhpcy5faWZyYW1lLnN0eWxlO1xuICAgIHN0eWxlLmJvcmRlciA9ICcwJztcbiAgICBzdHlsZS53aWR0aCA9ICcxMDAlJztcblxuICAgIGlmICghdGhpcy5fb3B0aW9ucy5sb2NhdGlvbiB8fCB0aGlzLl9vcHRpb25zLmxvY2F0aW9uID09PSAneWVzJykge1xuICAgICAgICBzdHlsZS5oZWlnaHQgPSAnY2FsYygxMDAlIC0gMzVweCknO1xuXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVOYXZpZ2F0aW9uQmFyKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICB9XG5cbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5faWZyYW1lKTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fY29udGFpbmVyKTtcblxuICAgIHRoaXMuX2lmcmFtZS5hZGRFdmVudExpc3RlbmVyKCdwYWdlc2hvdycsIHRoaXMuX3N1Y2Nlc3MuYmluZCh0aGlzLCBJbkFwcEJyb3dzZXIuRXZlbnRzLkxPQURfU1RBUlQpKTtcbiAgICB0aGlzLl9pZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuX3N1Y2Nlc3MuYmluZCh0aGlzLCBJbkFwcEJyb3dzZXIuRXZlbnRzLkxPQURfU1RPUCkpO1xuICAgIHRoaXMuX2lmcmFtZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX3N1Y2Nlc3MuYmluZCh0aGlzLCBJbkFwcEJyb3dzZXIuRXZlbnRzLkxPQURfRVJST1IpKTtcbiAgICB0aGlzLl9pZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCB0aGlzLl9zdWNjZXNzLmJpbmQodGhpcywgSW5BcHBCcm93c2VyLkV2ZW50cy5MT0FEX0VSUk9SKSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fcmVzaXplQ2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZmFrZSBicm93c2VyJ3MgbmF2aWdhdGlvbiBiYXIsIHRoYXQgb25seSBjb250YWlucyBhIGJ1dHRvbiB0byByZW1vdmUgdGhlIGlmcmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbklmcmFtZUJyb3dzZXIucHJvdG90eXBlLl9jcmVhdGVOYXZpZ2F0aW9uQmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBuYXZpZ2F0aW9uRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgIGNsb3NlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgIG5hdmlnYXRpb25EaXYuc3R5bGUuaGVpZ2h0ID0gJzMwcHgnO1xuICAgIG5hdmlnYXRpb25EaXYuc3R5bGUucGFkZGluZyA9ICcycHgnO1xuICAgIG5hdmlnYXRpb25EaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyM0MDQwNDAnO1xuXG4gICAgY2xvc2VTcGFuLmlubmVySFRNTCA9ICfinJYnO1xuICAgIGNsb3NlU3Bhbi5zdHlsZS53aWR0aCA9ICczMHB4JztcbiAgICBjbG9zZVNwYW4uc3R5bGUuaGVpZ2h0ID0gJzI1cHgnO1xuICAgIGNsb3NlU3Bhbi5zdHlsZS5jb2xvciA9ICcjZmZmZmZmJztcbiAgICBjbG9zZVNwYW4uc3R5bGUuZm9udFNpemUgPSAnMjJweCc7XG4gICAgY2xvc2VTcGFuLnN0eWxlLm1hcmdpbkxlZnQgPSAnNXB4JztcbiAgICBjbG9zZVNwYW4uc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuXG4gICAgY2xvc2VTcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSwgMCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIG5hdmlnYXRpb25EaXYuYXBwZW5kQ2hpbGQoY2xvc2VTcGFuKTtcblxuICAgIHJldHVybiBuYXZpZ2F0aW9uRGl2O1xufTtcblxuLyoqXG4gKiBSZXNpemUgdGhlIG1haW4gY29udGFpbmVyIHdpdGggdGhlIGRvY3VtZW50LmJvZHkgc2l6ZSwgb25seSB3aGVuIGl0IGlzIHZpc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5JZnJhbWVCcm93c2VyLnByb3RvdHlwZS5fcmVzaXplQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9jb250YWluZXIgJiYgdGhpcy5faXNWaXNpYmxlKSB7XG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUud2lkdGggPSBib2R5LmNsaWVudFdpZHRoICsgJ3B4JztcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGJvZHkuY2xpZW50SGVpZ2h0ICsgJ3B4JztcbiAgICB9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIGdpdmVuIGNvZGUgaW4gdGhlIGlmcmFtZSBjb250ZXh0IHdoZW5ldmVyIGl0J3MgcG9zc2libGUuIFRoaXMgbWF5XG4gKiB0aHJvdyBhbiBlcnJvciB3aGVuIHRoZSBVUkwgbG9hZGVkIGluIHRoZSBpZnJhbWUgaXMgbm90IGluIHRoZSBzYW1lIGRvbWFpbiB0aGFuXG4gKiB0aGUgYXBwbGljYXRpb24uXG4gKiBAdGhyb3dzIEl0IHRocm93cyBhbiBlcnJvciB3aGVuIHRoZSBldmFsIGNhbGwgZnJvbSB0aGUgaWZyYW1lIGZhaWxzLlxuICogQHByaXZhdGVcbiAqL1xuSWZyYW1lQnJvd3Nlci5wcm90b3R5cGUuX2luamVjdENvZGUgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLl9pZnJhbWUuY29udGVudFdpbmRvdy5ldmFsKGNvZGUpO1xuXG4gICAgcmV0dXJuIHJlc3VsdCA/IFtyZXN1bHRdIDogW107XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBJbkFwcEJyb3dzZXIgYmFzZWQgb24gdGhlIHRhcmdldCB0eXBlLiBXaGVuIHRoZSB0eXBlIGlzICdfc3lzdGVtJyxcbiAqIGFuIGluc3RhbmNlIG9mIHRoZSBzeXN0ZW0gYnJvd3NlciBpcyBjcmVhdGVkLCB3aGVuIHRoZSB0eXBlIGlzICdfYmxhbmsnLCBhbiBpbnN0YW5jZSBvZlxuICogYSBicm93c2VyIGJhc2VkIG9uIGlmcmFtZSBpcyBjcmVhdGVkLiBGb3IgYW55IG90aGVyIHRhcmdldCB0eXBlLCBpbmNsdWRpbmcgJ19zZWxmJyxcbiAqIHRoZSBjdXJyZW50IHdpbmRvdyB3aWxsIG5hdmlnYXRlIHRvIHRoZSBnaXZlbiBVUkwuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWNjZXNzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmYWlsXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShzdWNjZXNzLCBmYWlsLCBhcmdzKSB7XG4gICAgLy8gYXJnc1swXTogdXJsLCBhcmdzWzFdOiB0YXJnZXQsIGFyZ3NbMl06IG9wdGlvbnNcbiAgICB2YXIgQ29uc3RydWN0b3I7XG5cbiAgICBzd2l0Y2ggKGFyZ3NbMV0pIHtcbiAgICAgICAgY2FzZSAnX3N5c3RlbSc6XG4gICAgICAgICAgICAvLyBvcGVuIGluIGEgbmV3IGJyb3dzZXIgdGFiXG4gICAgICAgICAgICBDb25zdHJ1Y3RvciA9IFN5c3RlbUJyb3dzZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnX3NlbGYnOlxuICAgICAgICAgICAgLy8gdXNlIHRoZSBjdXJyZW50IHdpbmRvd1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gYXJnc1swXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChfZGVmYXVsdEluQXBwQnJvd3NlclR5cGUgPT09ICdpZnJhbWUnKSB7XG4gICAgICAgICAgICAgICAgLy8gXCJfYmxhbmtcIiBhbmQgYW55IG90aGVyIG9wdGlvbiwgdXNlIHRoZSBpZnJhbWUgYnJvd3NlclxuICAgICAgICAgICAgICAgIENvbnN0cnVjdG9yID0gSWZyYW1lQnJvd3NlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbmV3IGJyb3dzZXIgd2luZG93XG4gICAgICAgICAgICAgICAgQ29uc3RydWN0b3IgPSBTeXN0ZW1Ccm93c2VyO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoYXJnc1swXSwgYXJnc1syXSwgc3VjY2VzcywgZmFpbCk7XG59XG5cbmZ1bmN0aW9uIHNldERlZmF1bHRJbkFwcEJyb3dzZXIodmFsdWUpIHtcbiAgICBfZGVmYXVsdEluQXBwQnJvd3NlclR5cGUgPSB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xubW9kdWxlLmV4cG9ydHMuc2V0RGVmYXVsdEluQXBwQnJvd3NlciA9IHNldERlZmF1bHRJbkFwcEJyb3dzZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCdlcy1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyICRTeW50YXhFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9zeW50YXgnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGdvcGQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZURhdGFQcm9wZXJ0eShcblx0b2JqLFxuXHRwcm9wZXJ0eSxcblx0dmFsdWVcbikge1xuXHRpZiAoIW9iaiB8fCAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG9iamAgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbmAnKTtcblx0fVxuXHRpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgcHJvcGVydHkgIT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bwcm9wZXJ0eWAgbXVzdCBiZSBhIHN0cmluZyBvciBhIHN5bWJvbGAnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSAhPT0gJ2Jvb2xlYW4nICYmIGFyZ3VtZW50c1szXSAhPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbm9uRW51bWVyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIHR5cGVvZiBhcmd1bWVudHNbNF0gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbNF0gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbldyaXRhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGwnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgdHlwZW9mIGFyZ3VtZW50c1s1XSAhPT0gJ2Jvb2xlYW4nICYmIGFyZ3VtZW50c1s1XSAhPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbm9uQ29uZmlndXJhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGwnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgdHlwZW9mIGFyZ3VtZW50c1s2XSAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bsb29zZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIG5vbkVudW1lcmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cdHZhciBub25Xcml0YWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogbnVsbDtcblx0dmFyIG5vbkNvbmZpZ3VyYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogbnVsbDtcblx0dmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgPyBhcmd1bWVudHNbNl0gOiBmYWxzZTtcblxuXHQvKiBAdHlwZSB7ZmFsc2UgfCBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjx1bmtub3duPn0gKi9cblx0dmFyIGRlc2MgPSAhIWdvcGQgJiYgZ29wZChvYmosIHByb3BlcnR5KTtcblxuXHRpZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KG9iaiwgcHJvcGVydHksIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogbm9uQ29uZmlndXJhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLmNvbmZpZ3VyYWJsZSA6ICFub25Db25maWd1cmFibGUsXG5cdFx0XHRlbnVtZXJhYmxlOiBub25FbnVtZXJhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLmVudW1lcmFibGUgOiAhbm9uRW51bWVyYWJsZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiBub25Xcml0YWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy53cml0YWJsZSA6ICFub25Xcml0YWJsZVxuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGxvb3NlIHx8ICghbm9uRW51bWVyYWJsZSAmJiAhbm9uV3JpdGFibGUgJiYgIW5vbkNvbmZpZ3VyYWJsZSkpIHtcblx0XHQvLyBtdXN0IGZhbGwgYmFjayB0byBbW1NldF1dLCBhbmQgd2FzIG5vdCBleHBsaWNpdGx5IGFza2VkIHRvIG1ha2Ugbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSwgb3Igbm9uLWNvbmZpZ3VyYWJsZVxuXHRcdG9ialtwcm9wZXJ0eV0gPSB2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBkZWZpbmluZyBhIHByb3BlcnR5IGFzIG5vbi1jb25maWd1cmFibGUsIG5vbi13cml0YWJsZSwgb3Igbm9uLWVudW1lcmFibGUuJyk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpIHx8IGZhbHNlO1xuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRkZWZpbmVQcm9wZXJ0eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZXZhbCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFdmFsRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yYW5nZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBSYW5nZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yZWYnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmVmZXJlbmNlRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3N5bnRheCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBTeW50YXhFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBUeXBlRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3VyaScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBVUklFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxudmFyIGNvbmNhdHR5ID0gZnVuY3Rpb24gY29uY2F0dHkoYSwgYikge1xuICAgIHZhciBhcnIgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJbaV0gPSBhW2ldO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYXJyW2ogKyBhLmxlbmd0aF0gPSBiW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgc2xpY3kgPSBmdW5jdGlvbiBzbGljeShhcnJMaWtlLCBvZmZzZXQpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldCB8fCAwLCBqID0gMDsgaSA8IGFyckxpa2UubGVuZ3RoOyBpICs9IDEsIGogKz0gMSkge1xuICAgICAgICBhcnJbal0gPSBhcnJMaWtlW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIGpvaW55ID0gZnVuY3Rpb24gKGFyciwgam9pbmVyKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBhcnJbaV07XG4gICAgICAgIGlmIChpICsgMSA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0ciArPSBqb2luZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuYXBwbHkodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljeShhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICk7XG5cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gbWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3NbaV0gPSAnJCcgKyBpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBqb2lueShib3VuZEFyZ3MsICcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzJyk7XG52YXIgJEV2YWxFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9ldmFsJyk7XG52YXIgJFJhbmdlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvcmFuZ2UnKTtcbnZhciAkUmVmZXJlbmNlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvcmVmJyk7XG52YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3N5bnRheCcpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRVUklFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy91cmknKTtcblxudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIGhhc1Byb3RvID0gcmVxdWlyZSgnaGFzLXByb3RvJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IChcblx0aGFzUHJvdG9cblx0XHQ/IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cdFx0OiBudWxsXG4pO1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnJUFnZ3JlZ2F0ZUVycm9yJSc6IHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBZ2dyZWdhdGVFcnJvcixcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IG5lZWRzRXZhbCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQmlnSW50JSc6IHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50LFxuXHQnJUJpZ0ludDY0QXJyYXklJzogdHlwZW9mIEJpZ0ludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50NjRBcnJheSxcblx0JyVCaWdVaW50NjRBcnJheSUnOiB0eXBlb2YgQmlnVWludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnVWludDY0QXJyYXksXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiAkRXJyb3IsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogJEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiAkUmFuZ2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvciUnOiAkUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6ICRVUklFcnJvcixcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha1JlZiUnOiB0eXBlb2YgV2Vha1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrUmVmLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldFxufTtcblxuaWYgKGdldFByb3RvKSB7XG5cdHRyeSB7XG5cdFx0bnVsbC5lcnJvcjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNoYWRvd3JlYWxtL3B1bGwvMzg0I2lzc3VlY29tbWVudC0xMzY0MjY0MjI5XG5cdFx0dmFyIGVycm9yUHJvdG8gPSBnZXRQcm90byhnZXRQcm90byhlKSk7XG5cdFx0SU5UUklOU0lDU1snJUVycm9yLnByb3RvdHlwZSUnXSA9IGVycm9yUHJvdG87XG5cdH1cbn1cblxudmFyIGRvRXZhbCA9IGZ1bmN0aW9uIGRvRXZhbChuYW1lKSB7XG5cdHZhciB2YWx1ZTtcblx0aWYgKG5hbWUgPT09ICclQXN5bmNGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2Z1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3IlJykge1xuXHRcdHZhciBmbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJyk7XG5cdFx0aWYgKGZuKSB7XG5cdFx0XHR2YWx1ZSA9IGZuLnByb3RvdHlwZTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJScpIHtcblx0XHR2YXIgZ2VuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3IlJyk7XG5cdFx0aWYgKGdlbiAmJiBnZXRQcm90bykge1xuXHRcdFx0dmFsdWUgPSBnZXRQcm90byhnZW4ucHJvdG90eXBlKTtcblx0XHR9XG5cdH1cblxuXHRJTlRSSU5TSUNTW25hbWVdID0gdmFsdWU7XG5cblx0cmV0dXJuIHZhbHVlO1xufTtcblxudmFyIExFR0FDWV9BTElBU0VTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzb3duJyk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgJHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyICRleGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0aWYgKCRleGVjKC9eJT9bXiVdKiU/JC8sIG5hbWUpID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignYCVgIG1heSBub3QgYmUgcHJlc2VudCBhbnl3aGVyZSBidXQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBpbnRyaW5zaWMgbmFtZScpO1xuXHR9XG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuXG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gZnVuY3Rpb24gaGFzUHJvcGVydHlEZXNjcmlwdG9ycygpIHtcblx0cmV0dXJuICEhJGRlZmluZVByb3BlcnR5O1xufTtcblxuaGFzUHJvcGVydHlEZXNjcmlwdG9ycy5oYXNBcnJheUxlbmd0aERlZmluZUJ1ZyA9IGZ1bmN0aW9uIGhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCkge1xuXHQvLyBub2RlIHYwLjYgaGFzIGEgYnVnIHdoZXJlIGFycmF5IGxlbmd0aHMgY2FuIGJlIFNldCBidXQgbm90IERlZmluZWRcblx0aWYgKCEkZGVmaW5lUHJvcGVydHkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiAkZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHZhbHVlOiAxIH0pLmxlbmd0aCAhPT0gMTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIEluIEZpcmVmb3ggNC0yMiwgZGVmaW5pbmcgbGVuZ3RoIG9uIGFuIGFycmF5IHRocm93cyBhbiBleGNlcHRpb24uXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRlc3QgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0Zm9vOiB7fVxufTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1Byb3RvKCkge1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yOiBUUyBlcnJvcnMgb24gYW4gaW5oZXJpdGVkIHByb3BlcnR5IGZvciBzb21lIHJlYXNvblxuXHRyZXR1cm4geyBfX3Byb3RvX186IHRlc3QgfS5mb28gPT09IHRlc3QuZm9vXG5cdFx0JiYgISh0ZXN0IGluc3RhbmNlb2YgJE9iamVjdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgJGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKGNhbGwsICRoYXNPd24pO1xuIiwidmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZTtcbnZhciBtYXBTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzTWFwID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNYXAucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBtYXBTaXplID0gaGFzTWFwICYmIG1hcFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBtYXBTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBtYXBTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIG1hcEZvckVhY2ggPSBoYXNNYXAgJiYgTWFwLnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1NldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZTtcbnZhciBzZXRTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzU2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihTZXQucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBzZXRTaXplID0gaGFzU2V0ICYmIHNldFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBzZXRTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBzZXRTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIHNldEZvckVhY2ggPSBoYXNTZXQgJiYgU2V0LnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrTWFwLnByb3RvdHlwZTtcbnZhciB3ZWFrTWFwSGFzID0gaGFzV2Vha01hcCA/IFdlYWtNYXAucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nICYmIFdlYWtTZXQucHJvdG90eXBlO1xudmFyIHdlYWtTZXRIYXMgPSBoYXNXZWFrU2V0ID8gV2Vha1NldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrUmVmID0gdHlwZW9mIFdlYWtSZWYgPT09ICdmdW5jdGlvbicgJiYgV2Vha1JlZi5wcm90b3R5cGU7XG52YXIgd2Vha1JlZkRlcmVmID0gaGFzV2Vha1JlZiA/IFdlYWtSZWYucHJvdG90eXBlLmRlcmVmIDogbnVsbDtcbnZhciBib29sZWFuVmFsdWVPZiA9IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2Y7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgJG1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbnZhciAkc2xpY2UgPSBTdHJpbmcucHJvdG90eXBlLnNsaWNlO1xudmFyICRyZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyICR0b1VwcGVyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2U7XG52YXIgJHRvTG93ZXJDYXNlID0gU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZTtcbnZhciAkdGVzdCA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdDtcbnZhciAkY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciAkam9pbiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xudmFyICRhcnJTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciAkZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGJpZ0ludFZhbHVlT2YgPSB0eXBlb2YgQmlnSW50ID09PSAnZnVuY3Rpb24nID8gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mIDogbnVsbDtcbnZhciBnT1BTID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBzeW1Ub1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcgPyBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nIDogbnVsbDtcbnZhciBoYXNTaGFtbWVkU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ29iamVjdCc7XG4vLyBpZSwgYGhhcy10b3N0cmluZ3RhZy9zaGFtc1xudmFyIHRvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgKHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09IGhhc1NoYW1tZWRTeW1ib2xzID8gJ29iamVjdCcgOiAnc3ltYm9sJylcbiAgICA/IFN5bWJvbC50b1N0cmluZ1RhZ1xuICAgIDogbnVsbDtcbnZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG52YXIgZ1BPID0gKHR5cGVvZiBSZWZsZWN0ID09PSAnZnVuY3Rpb24nID8gUmVmbGVjdC5nZXRQcm90b3R5cGVPZiA6IE9iamVjdC5nZXRQcm90b3R5cGVPZikgfHwgKFxuICAgIFtdLl9fcHJvdG9fXyA9PT0gQXJyYXkucHJvdG90eXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICAgICAgPyBmdW5jdGlvbiAoTykge1xuICAgICAgICAgICAgcmV0dXJuIE8uX19wcm90b19fOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgIH1cbiAgICAgICAgOiBudWxsXG4pO1xuXG5mdW5jdGlvbiBhZGROdW1lcmljU2VwYXJhdG9yKG51bSwgc3RyKSB7XG4gICAgaWYgKFxuICAgICAgICBudW0gPT09IEluZmluaXR5XG4gICAgICAgIHx8IG51bSA9PT0gLUluZmluaXR5XG4gICAgICAgIHx8IG51bSAhPT0gbnVtXG4gICAgICAgIHx8IChudW0gJiYgbnVtID4gLTEwMDAgJiYgbnVtIDwgMTAwMClcbiAgICAgICAgfHwgJHRlc3QuY2FsbCgvZS8sIHN0cilcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgdmFyIHNlcFJlZ2V4ID0gL1swLTldKD89KD86WzAtOV17M30pKyg/IVswLTldKSkvZztcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGludCA9IG51bSA8IDAgPyAtJGZsb29yKC1udW0pIDogJGZsb29yKG51bSk7IC8vIHRydW5jKG51bSlcbiAgICAgICAgaWYgKGludCAhPT0gbnVtKSB7XG4gICAgICAgICAgICB2YXIgaW50U3RyID0gU3RyaW5nKGludCk7XG4gICAgICAgICAgICB2YXIgZGVjID0gJHNsaWNlLmNhbGwoc3RyLCBpbnRTdHIubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChpbnRTdHIsIHNlcFJlZ2V4LCAnJCZfJykgKyAnLicgKyAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoZGVjLCAvKFswLTldezN9KS9nLCAnJCZfJyksIC9fJC8sICcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChzdHIsIHNlcFJlZ2V4LCAnJCZfJyk7XG59XG5cbnZhciB1dGlsSW5zcGVjdCA9IHJlcXVpcmUoJy4vdXRpbC5pbnNwZWN0Jyk7XG52YXIgaW5zcGVjdEN1c3RvbSA9IHV0aWxJbnNwZWN0LmN1c3RvbTtcbnZhciBpbnNwZWN0U3ltYm9sID0gaXNTeW1ib2woaW5zcGVjdEN1c3RvbSkgPyBpbnNwZWN0Q3VzdG9tIDogbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmIChvcHRzLnF1b3RlU3R5bGUgIT09ICdzaW5nbGUnICYmIG9wdHMucXVvdGVTdHlsZSAhPT0gJ2RvdWJsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnbWF4U3RyaW5nTGVuZ3RoJykgJiYgKHR5cGVvZiBvcHRzLm1heFN0cmluZ0xlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0cy5tYXhTdHJpbmdMZW5ndGggPCAwICYmIG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBJbmZpbml0eVxuICAgICAgICAgICAgOiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gbnVsbFxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm1heFN0cmluZ0xlbmd0aFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIEluZmluaXR5LCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgdmFyIGN1c3RvbUluc3BlY3QgPSBoYXMob3B0cywgJ2N1c3RvbUluc3BlY3QnKSA/IG9wdHMuY3VzdG9tSW5zcGVjdCA6IHRydWU7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0ICE9PSAnYm9vbGVhbicgJiYgY3VzdG9tSW5zcGVjdCAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiY3VzdG9tSW5zcGVjdFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAsIGBmYWxzZWAsIG9yIGBcXCdzeW1ib2xcXCdgJyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBoYXMob3B0cywgJ2luZGVudCcpXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSBudWxsXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSAnXFx0J1xuICAgICAgICAmJiAhKHBhcnNlSW50KG9wdHMuaW5kZW50LCAxMCkgPT09IG9wdHMuaW5kZW50ICYmIG9wdHMuaW5kZW50ID4gMClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiaW5kZW50XCIgbXVzdCBiZSBcIlxcXFx0XCIsIGFuIGludGVnZXIgPiAwLCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgaWYgKGhhcyhvcHRzLCAnbnVtZXJpY1NlcGFyYXRvcicpICYmIHR5cGVvZiBvcHRzLm51bWVyaWNTZXBhcmF0b3IgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJudW1lcmljU2VwYXJhdG9yXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCBvciBgZmFsc2VgJyk7XG4gICAgfVxuICAgIHZhciBudW1lcmljU2VwYXJhdG9yID0gb3B0cy5udW1lcmljU2VwYXJhdG9yO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvYmogPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZyhvYmosIG9wdHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5IC8gb2JqID4gMCA/ICcwJyA6ICctMCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ciA9IFN0cmluZyhvYmopO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBzdHIpIDogc3RyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgdmFyIGJpZ0ludFN0ciA9IFN0cmluZyhvYmopICsgJ24nO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBiaWdJbnRTdHIpIDogYmlnSW50U3RyO1xuICAgIH1cblxuICAgIHZhciBtYXhEZXB0aCA9IHR5cGVvZiBvcHRzLmRlcHRoID09PSAndW5kZWZpbmVkJyA/IDUgOiBvcHRzLmRlcHRoO1xuICAgIGlmICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnKSB7IGRlcHRoID0gMDsgfVxuICAgIGlmIChkZXB0aCA+PSBtYXhEZXB0aCAmJiBtYXhEZXB0aCA+IDAgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICdbQXJyYXldJyA6ICdbT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IGdldEluZGVudChvcHRzLCBkZXB0aCk7XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSwgbm9JbmRlbnQpIHtcbiAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgIHNlZW4gPSAkYXJyU2xpY2UuY2FsbChzZWVuKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9JbmRlbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRzID0ge1xuICAgICAgICAgICAgICAgIGRlcHRoOiBvcHRzLmRlcHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgbmV3T3B0cy5xdW90ZVN0eWxlID0gb3B0cy5xdW90ZVN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBuZXdPcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgb3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNSZWdFeHAob2JqKSkgeyAvLyBpbiBvbGRlciBlbmdpbmVzLCByZWdleGVzIGFyZSBjYWxsYWJsZVxuICAgICAgICB2YXIgbmFtZSA9IG5hbWVPZihvYmopO1xuICAgICAgICB2YXIga2V5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcgKGFub255bW91cyknKSArICddJyArIChrZXlzLmxlbmd0aCA+IDAgPyAnIHsgJyArICRqb2luLmNhbGwoa2V5cywgJywgJykgKyAnIH0nIDogJycpO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wob2JqKSkge1xuICAgICAgICB2YXIgc3ltU3RyaW5nID0gaGFzU2hhbW1lZFN5bWJvbHMgPyAkcmVwbGFjZS5jYWxsKFN0cmluZyhvYmopLCAvXihTeW1ib2xcXCguKlxcKSlfW14pXSokLywgJyQxJykgOiBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaGFzU2hhbW1lZFN5bWJvbHMgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpO1xuICAgICAgICB2YXIgYXR0cnMgPSBvYmouYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnICcgKyBhdHRyc1tpXS5uYW1lICsgJz0nICsgd3JhcFF1b3RlcyhxdW90ZShhdHRyc1tpXS52YWx1ZSksICdkb3VibGUnLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgaWYgKG9iai5jaGlsZE5vZGVzICYmIG9iai5jaGlsZE5vZGVzLmxlbmd0aCkgeyBzICs9ICcuLi4nOyB9XG4gICAgICAgIHMgKz0gJzwvJyArICR0b0xvd2VyQ2FzZS5jYWxsKFN0cmluZyhvYmoubm9kZU5hbWUpKSArICc+JztcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbXSc7IH1cbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoaW5kZW50ICYmICFzaW5nbGVMaW5lVmFsdWVzKHhzKSkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGluZGVudGVkSm9pbih4cywgaW5kZW50KSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1sgJyArICRqb2luLmNhbGwoeHMsICcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmICghKCdjYXVzZScgaW4gRXJyb3IucHJvdG90eXBlKSAmJiAnY2F1c2UnIGluIG9iaiAmJiAhaXNFbnVtZXJhYmxlLmNhbGwob2JqLCAnY2F1c2UnKSkge1xuICAgICAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoJ1tjYXVzZV06ICcgKyBpbnNwZWN0KG9iai5jYXVzZSksIHBhcnRzKSwgJywgJykgKyAnIH0nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArICRqb2luLmNhbGwocGFydHMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGN1c3RvbUluc3BlY3QpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJyAmJiB1dGlsSW5zcGVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxJbnNwZWN0KG9iaiwgeyBkZXB0aDogbWF4RGVwdGggLSBkZXB0aCB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJyAmJiB0eXBlb2Ygb2JqLmluc3BlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaW5zcGVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc01hcChvYmopKSB7XG4gICAgICAgIHZhciBtYXBQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAobWFwRm9yRWFjaCkge1xuICAgICAgICAgICAgbWFwRm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmosIHRydWUpICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1NldChvYmopKSB7XG4gICAgICAgIHZhciBzZXRQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAoc2V0Rm9yRWFjaCkge1xuICAgICAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2V0UGFydHMucHVzaChpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ1NldCcsIHNldFNpemUuY2FsbChvYmopLCBzZXRQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrUmVmKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtSZWYnKTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KE51bWJlcihvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0JpZ0ludChvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCb29sZWFuKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChib29sZWFuVmFsdWVPZi5jYWxsKG9iaikpO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoU3RyaW5nKG9iaikpKTtcbiAgICB9XG4gICAgLy8gbm90ZTogaW4gSUUgOCwgc29tZXRpbWVzIGBnbG9iYWwgIT09IHdpbmRvd2AgYnV0IGJvdGggYXJlIHRoZSBwcm90b3R5cGVzIG9mIGVhY2ggb3RoZXJcbiAgICAvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuICd7IFtvYmplY3QgV2luZG93XSB9JztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gZ2xvYmFsKSB7XG4gICAgICAgIHJldHVybiAneyBbb2JqZWN0IGdsb2JhbFRoaXNdIH0nO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgdmFyIGlzUGxhaW5PYmplY3QgPSBnUE8gPyBnUE8ob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZSA6IG9iaiBpbnN0YW5jZW9mIE9iamVjdCB8fCBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvVGFnID0gb2JqIGluc3RhbmNlb2YgT2JqZWN0ID8gJycgOiAnbnVsbCBwcm90b3R5cGUnO1xuICAgICAgICB2YXIgc3RyaW5nVGFnID0gIWlzUGxhaW5PYmplY3QgJiYgdG9TdHJpbmdUYWcgJiYgT2JqZWN0KG9iaikgPT09IG9iaiAmJiB0b1N0cmluZ1RhZyBpbiBvYmogPyAkc2xpY2UuY2FsbCh0b1N0cihvYmopLCA4LCAtMSkgOiBwcm90b1RhZyA/ICdPYmplY3QnIDogJyc7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclRhZyA9IGlzUGxhaW5PYmplY3QgfHwgdHlwZW9mIG9iai5jb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJyA/ICcnIDogb2JqLmNvbnN0cnVjdG9yLm5hbWUgPyBvYmouY29uc3RydWN0b3IubmFtZSArICcgJyA6ICcnO1xuICAgICAgICB2YXIgdGFnID0gY29uc3RydWN0b3JUYWcgKyAoc3RyaW5nVGFnIHx8IHByb3RvVGFnID8gJ1snICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoW10sIHN0cmluZ1RhZyB8fCBbXSwgcHJvdG9UYWcgfHwgW10pLCAnOiAnKSArICddICcgOiAnJyk7XG4gICAgICAgIGlmICh5cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIHRhZyArICd7fSc7IH1cbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZyArICd7JyArIGluZGVudGVkSm9pbih5cywgaW5kZW50KSArICd9JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFnICsgJ3sgJyArICRqb2luLmNhbGwoeXMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xufTtcblxuZnVuY3Rpb24gd3JhcFF1b3RlcyhzLCBkZWZhdWx0U3R5bGUsIG9wdHMpIHtcbiAgICB2YXIgcXVvdGVDaGFyID0gKG9wdHMucXVvdGVTdHlsZSB8fCBkZWZhdWx0U3R5bGUpID09PSAnZG91YmxlJyA/ICdcIicgOiBcIidcIjtcbiAgICByZXR1cm4gcXVvdGVDaGFyICsgcyArIHF1b3RlQ2hhcjtcbn1cblxuZnVuY3Rpb24gcXVvdGUocykge1xuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKFN0cmluZyhzKSwgL1wiL2csICcmcXVvdDsnKTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBOdW1iZXJdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cblxuLy8gU3ltYm9sIGFuZCBCaWdJbnQgZG8gaGF2ZSBTeW1ib2wudG9TdHJpbmdUYWcgYnkgc3BlYywgc28gdGhhdCBjYW4ndCBiZSB1c2VkIHRvIGVsaW1pbmF0ZSBmYWxzZSBwb3NpdGl2ZXNcbmZ1bmN0aW9uIGlzU3ltYm9sKG9iaikge1xuICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scykge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiBpbnN0YW5jZW9mIFN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhc3ltVG9TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhYmlnSW50VmFsdWVPZikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJpZ0ludFZhbHVlT2YuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gJG1hdGNoLmNhbGwoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGYpLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrUmVmKHgpIHtcbiAgICBpZiAoIXdlYWtSZWZEZXJlZiB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrUmVmRGVyZWYuY2FsbCh4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2V0KHgpIHtcbiAgICBpZiAoIXNldFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1NldCh4KSB7XG4gICAgaWYgKCF3ZWFrU2V0SGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KHgpIHtcbiAgICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB4Lm5vZGVOYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgeC5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RTdHJpbmcoc3RyLCBvcHRzKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPiBvcHRzLm1heFN0cmluZ0xlbmd0aCkge1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gc3RyLmxlbmd0aCAtIG9wdHMubWF4U3RyaW5nTGVuZ3RoO1xuICAgICAgICB2YXIgdHJhaWxlciA9ICcuLi4gJyArIHJlbWFpbmluZyArICcgbW9yZSBjaGFyYWN0ZXInICsgKHJlbWFpbmluZyA+IDEgPyAncycgOiAnJyk7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKCRzbGljZS5jYWxsKHN0ciwgMCwgb3B0cy5tYXhTdHJpbmdMZW5ndGgpLCBvcHRzKSArIHRyYWlsZXI7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgdmFyIHMgPSAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoc3RyLCAvKFsnXFxcXF0pL2csICdcXFxcJDEnKSwgL1tcXHgwMC1cXHgxZl0vZywgbG93Ynl0ZSk7XG4gICAgcmV0dXJuIHdyYXBRdW90ZXMocywgJ3NpbmdsZScsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBsb3dieXRlKGMpIHtcbiAgICB2YXIgbiA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgeCA9IHtcbiAgICAgICAgODogJ2InLFxuICAgICAgICA5OiAndCcsXG4gICAgICAgIDEwOiAnbicsXG4gICAgICAgIDEyOiAnZicsXG4gICAgICAgIDEzOiAncidcbiAgICB9W25dO1xuICAgIGlmICh4KSB7IHJldHVybiAnXFxcXCcgKyB4OyB9XG4gICAgcmV0dXJuICdcXFxceCcgKyAobiA8IDB4MTAgPyAnMCcgOiAnJykgKyAkdG9VcHBlckNhc2UuY2FsbChuLnRvU3RyaW5nKDE2KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcywgaW5kZW50KSB7XG4gICAgdmFyIGpvaW5lZEVudHJpZXMgPSBpbmRlbnQgPyBpbmRlbnRlZEpvaW4oZW50cmllcywgaW5kZW50KSA6ICRqb2luLmNhbGwoZW50cmllcywgJywgJyk7XG4gICAgcmV0dXJuIHR5cGUgKyAnICgnICsgc2l6ZSArICcpIHsnICsgam9pbmVkRW50cmllcyArICd9Jztcbn1cblxuZnVuY3Rpb24gc2luZ2xlTGluZVZhbHVlcyh4cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluZGV4T2YoeHNbaV0sICdcXG4nKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEluZGVudChvcHRzLCBkZXB0aCkge1xuICAgIHZhciBiYXNlSW5kZW50O1xuICAgIGlmIChvcHRzLmluZGVudCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICdcXHQnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdHMuaW5kZW50ID09PSAnbnVtYmVyJyAmJiBvcHRzLmluZGVudCA+IDApIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICRqb2luLmNhbGwoQXJyYXkob3B0cy5pbmRlbnQgKyAxKSwgJyAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogYmFzZUluZGVudCxcbiAgICAgICAgcHJldjogJGpvaW4uY2FsbChBcnJheShkZXB0aCArIDEpLCBiYXNlSW5kZW50KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudGVkSm9pbih4cywgaW5kZW50KSB7XG4gICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICB2YXIgbGluZUpvaW5lciA9ICdcXG4nICsgaW5kZW50LnByZXYgKyBpbmRlbnQuYmFzZTtcbiAgICByZXR1cm4gbGluZUpvaW5lciArICRqb2luLmNhbGwoeHMsICcsJyArIGxpbmVKb2luZXIpICsgJ1xcbicgKyBpbmRlbnQucHJldjtcbn1cblxuZnVuY3Rpb24gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iaik7XG4gICAgdmFyIHhzID0gW107XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHhzLmxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB4c1tpXSA9IGhhcyhvYmosIGkpID8gaW5zcGVjdChvYmpbaV0sIG9iaikgOiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3ltcyA9IHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nID8gZ09QUyhvYmopIDogW107XG4gICAgdmFyIHN5bU1hcDtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgc3ltTWFwID0ge307XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3ltcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgc3ltTWFwWyckJyArIHN5bXNba11dID0gc3ltc1trXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoIWhhcyhvYmosIGtleSkpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGlzQXJyICYmIFN0cmluZyhOdW1iZXIoa2V5KSkgPT09IGtleSAmJiBrZXkgPCBvYmoubGVuZ3RoKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scyAmJiBzeW1NYXBbJyQnICsga2V5XSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IHNoYW1tZWQgU3ltYm9scywgd2hpY2ggYXJlIHN0b3JlZCBhcyBzdHJpbmdzLCBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHRoZSBzdHJpbmcga2V5IHNlY3Rpb25cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKCR0ZXN0LmNhbGwoL1teXFx3JF0vLCBrZXkpKSB7XG4gICAgICAgICAgICB4cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeHMucHVzaChrZXkgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltc1tqXSkpIHtcbiAgICAgICAgICAgICAgICB4cy5wdXNoKCdbJyArIGluc3BlY3Qoc3ltc1tqXSkgKyAnXTogJyArIGluc3BlY3Qob2JqW3N5bXNbal1dLCBvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geHM7XG59XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1kYXRhLXByb3BlcnR5Jyk7XG52YXIgaGFzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdoYXMtcHJvcGVydHktZGVzY3JpcHRvcnMnKSgpO1xudmFyIGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoJyVNYXRoLmZsb29yJScpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXRGdW5jdGlvbkxlbmd0aChmbiwgbGVuZ3RoKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGZuYCBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHR9XG5cdGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBsZW5ndGggPCAwIHx8IGxlbmd0aCA+IDB4RkZGRkZGRkYgfHwgJGZsb29yKGxlbmd0aCkgIT09IGxlbmd0aCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbGVuZ3RoYCBtdXN0IGJlIGEgcG9zaXRpdmUgMzItYml0IGludGVnZXInKTtcblx0fVxuXG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmICEhYXJndW1lbnRzWzJdO1xuXG5cdHZhciBmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gdHJ1ZTtcblx0dmFyIGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IHRydWU7XG5cdGlmICgnbGVuZ3RoJyBpbiBmbiAmJiBnT1BEKSB7XG5cdFx0dmFyIGRlc2MgPSBnT1BEKGZuLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHRmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChkZXNjICYmICFkZXNjLndyaXRhYmxlKSB7XG5cdFx0XHRmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRpZiAoZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSB8fCBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgfHwgIWxvb3NlKSB7XG5cdFx0aWYgKGhhc0Rlc2NyaXB0b3JzKSB7XG5cdFx0XHRkZWZpbmUoLyoqIEB0eXBlIHtQYXJhbWV0ZXJzPGRlZmluZT5bMF19ICovIChmbiksICdsZW5ndGgnLCBsZW5ndGgsIHRydWUsIHRydWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWZpbmUoLyoqIEB0eXBlIHtQYXJhbWV0ZXJzPGRlZmluZT5bMF19ICovIChmbiksICdsZW5ndGgnLCBsZW5ndGgpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRXZWFrTWFwID0gR2V0SW50cmluc2ljKCclV2Vha01hcCUnLCB0cnVlKTtcbnZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXG52YXIgJHdlYWtNYXBHZXQgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xudmFyICR3ZWFrTWFwU2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcEhhcyA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG52YXIgJG1hcEdldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkbWFwU2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xudmFyICRtYXBIYXMgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG5cbi8qXG4qIFRoaXMgZnVuY3Rpb24gdHJhdmVyc2VzIHRoZSBsaXN0IHJldHVybmluZyB0aGUgbm9kZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBrZXkuXG4qXG4qIFRoYXQgbm9kZSBpcyBhbHNvIG1vdmVkIHRvIHRoZSBoZWFkIG9mIHRoZSBsaXN0LCBzbyB0aGF0IGlmIGl0J3MgYWNjZXNzZWQgYWdhaW4gd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSB0aGUgd2hvbGUgbGlzdC4gQnkgZG9pbmcgc28sIGFsbCB0aGUgcmVjZW50bHkgdXNlZCBub2RlcyBjYW4gYmUgYWNjZXNzZWQgcmVsYXRpdmVseSBxdWlja2x5LlxuKi9cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJykubGlzdEdldE5vZGV9ICovXG52YXIgbGlzdEdldE5vZGUgPSBmdW5jdGlvbiAobGlzdCwga2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0LyoqIEB0eXBlIHt0eXBlb2YgbGlzdCB8IE5vbk51bGxhYmxlPCh0eXBlb2YgbGlzdClbJ25leHQnXT59ICovXG5cdHZhciBwcmV2ID0gbGlzdDtcblx0LyoqIEB0eXBlIHsodHlwZW9mIGxpc3QpWyduZXh0J119ICovXG5cdHZhciBjdXJyO1xuXHRmb3IgKDsgKGN1cnIgPSBwcmV2Lm5leHQpICE9PSBudWxsOyBwcmV2ID0gY3Vycikge1xuXHRcdGlmIChjdXJyLmtleSA9PT0ga2V5KSB7XG5cdFx0XHRwcmV2Lm5leHQgPSBjdXJyLm5leHQ7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cdFx0XHRjdXJyLm5leHQgPSAvKiogQHR5cGUge05vbk51bGxhYmxlPHR5cGVvZiBsaXN0Lm5leHQ+fSAqLyAobGlzdC5uZXh0KTtcblx0XHRcdGxpc3QubmV4dCA9IGN1cnI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdHJldHVybiBjdXJyO1xuXHRcdH1cblx0fVxufTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5saXN0R2V0fSAqL1xudmFyIGxpc3RHZXQgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdHZhciBub2RlID0gbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcblx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZTtcbn07XG4vKiogQHR5cGUge2ltcG9ydCgnLicpLmxpc3RTZXR9ICovXG52YXIgbGlzdFNldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXksIHZhbHVlKSB7XG5cdHZhciBub2RlID0gbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcblx0aWYgKG5vZGUpIHtcblx0XHRub2RlLnZhbHVlID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gUHJlcGVuZCB0aGUgbmV3IG5vZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuXHRcdG9iamVjdHMubmV4dCA9IC8qKiBAdHlwZSB7aW1wb3J0KCcuJykuTGlzdE5vZGU8dHlwZW9mIHZhbHVlPn0gKi8gKHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgbm8tZXh0cmEtcGFyZW5zXG5cdFx0XHRrZXk6IGtleSxcblx0XHRcdG5leHQ6IG9iamVjdHMubmV4dCxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH0pO1xuXHR9XG59O1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5saXN0SGFzfSAqL1xudmFyIGxpc3RIYXMgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdHJldHVybiAhIWxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG59O1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbCgpIHtcblx0LyoqIEB0eXBlIHtXZWFrTWFwPG9iamVjdCwgdW5rbm93bj59ICovIHZhciAkd207XG5cdC8qKiBAdHlwZSB7TWFwPG9iamVjdCwgdW5rbm93bj59ICovIHZhciAkbTtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5Sb290Tm9kZTx1bmtub3duPn0gKi8gdmFyICRvO1xuXG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuJykuQ2hhbm5lbH0gKi9cblx0dmFyIGNoYW5uZWwgPSB7XG5cdFx0YXNzZXJ0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoIWNoYW5uZWwuaGFzKGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1NpZGUgY2hhbm5lbCBkb2VzIG5vdCBjb250YWluICcgKyBpbnNwZWN0KGtleSkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBHZXQoJHdtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRtYXBHZXQoJG0sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICgkbykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmVseS1pZlxuXHRcdFx0XHRcdHJldHVybiBsaXN0R2V0KCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBIYXMoJHdtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRtYXBIYXMoJG0sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICgkbykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmVseS1pZlxuXHRcdFx0XHRcdHJldHVybiBsaXN0SGFzKCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoISR3bSkge1xuXHRcdFx0XHRcdCR3bSA9IG5ldyAkV2Vha01hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCR3ZWFrTWFwU2V0KCR3bSwga2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHRcdCRtID0gbmV3ICRNYXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkbWFwU2V0KCRtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghJG8pIHtcblx0XHRcdFx0XHQvLyBJbml0aWFsaXplIHRoZSBsaW5rZWQgbGlzdCBhcyBhbiBlbXB0eSBub2RlLCBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gc3BlY2lhbC1jYXNlIGhhbmRsaW5nIG9mIHRoZSBmaXJzdCBub2RlOiB3ZSBjYW4gYWx3YXlzIHJlZmVyIHRvIGl0IGFzIChwcmV2aW91cyBub2RlKS5uZXh0LCBpbnN0ZWFkIG9mIHNvbWV0aGluZyBsaWtlIChsaXN0KS5oZWFkXG5cdFx0XHRcdFx0JG8gPSB7IGtleToge30sIG5leHQ6IG51bGwgfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0U2V0KCRvLCBrZXksIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBjaGFubmVsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG52YXIgRm9ybWF0ID0ge1xuICAgIFJGQzE3Mzg6ICdSRkMxNzM4JyxcbiAgICBSRkMzOTg2OiAnUkZDMzk4Nidcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdkZWZhdWx0JzogRm9ybWF0LlJGQzM5ODYsXG4gICAgZm9ybWF0dGVyczoge1xuICAgICAgICBSRkMxNzM4OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlLmNhbGwodmFsdWUsIHBlcmNlbnRUd2VudGllcywgJysnKTtcbiAgICAgICAgfSxcbiAgICAgICAgUkZDMzk4NjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgUkZDMTczODogRm9ybWF0LlJGQzE3MzgsXG4gICAgUkZDMzk4NjogRm9ybWF0LlJGQzM5ODZcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93RW1wdHlBcnJheXM6IGZhbHNlLFxuICAgIGFsbG93UHJvdG90eXBlczogZmFsc2UsXG4gICAgYWxsb3dTcGFyc2U6IGZhbHNlLFxuICAgIGFycmF5TGltaXQ6IDIwLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBjb21tYTogZmFsc2UsXG4gICAgZGVjb2RlRG90SW5LZXlzOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgZHVwbGljYXRlczogJ2NvbWJpbmUnLFxuICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IGZhbHNlLFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwLFxuICAgIHBhcnNlQXJyYXlzOiB0cnVlLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGludGVycHJldE51bWVyaWNFbnRpdGllcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYjKFxcZCspOy9nLCBmdW5jdGlvbiAoJDAsIG51bWJlclN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChudW1iZXJTdHIsIDEwKSk7XG4gICAgfSk7XG59O1xuXG52YXIgcGFyc2VBcnJheVZhbHVlID0gZnVuY3Rpb24gKHZhbCwgb3B0aW9ucykge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jb21tYSAmJiB2YWwuaW5kZXhPZignLCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5zcGxpdCgnLCcpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG59O1xuXG4vLyBUaGlzIGlzIHdoYXQgYnJvd3NlcnMgd2lsbCBzdWJtaXQgd2hlbiB0aGUg4pyTIGNoYXJhY3RlciBvY2N1cnMgaW4gYW5cbi8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBib2R5IGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBhZ2UgY29udGFpbmluZ1xuLy8gdGhlIGZvcm0gaXMgaXNvLTg4NTktMSwgb3Igd2hlbiB0aGUgc3VibWl0dGVkIGZvcm0gaGFzIGFuIGFjY2VwdC1jaGFyc2V0XG4vLyBhdHRyaWJ1dGUgb2YgaXNvLTg4NTktMS4gUHJlc3VtYWJseSBhbHNvIHdpdGggb3RoZXIgY2hhcnNldHMgdGhhdCBkbyBub3QgY29udGFpblxuLy8gdGhlIOKckyBjaGFyYWN0ZXIsIHN1Y2ggYXMgdXMtYXNjaWkuXG52YXIgaXNvU2VudGluZWwgPSAndXRmOD0lMjYlMjMxMDAwMyUzQic7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKVxuXG4vLyBUaGVzZSBhcmUgdGhlIHBlcmNlbnQtZW5jb2RlZCB1dGYtOCBvY3RldHMgcmVwcmVzZW50aW5nIGEgY2hlY2ttYXJrLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlcXVlc3QgYWN0dWFsbHkgaXMgdXRmLTggZW5jb2RlZC5cbnZhciBjaGFyc2V0U2VudGluZWwgPSAndXRmOD0lRTIlOUMlOTMnOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG5cbnZhciBwYXJzZVZhbHVlcyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdWYWx1ZXMoc3RyLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IHsgX19wcm90b19fOiBudWxsIH07XG5cbiAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cXD8vLCAnJykgOiBzdHI7XG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBsaW1pdCk7XG4gICAgdmFyIHNraXBJbmRleCA9IC0xOyAvLyBLZWVwIHRyYWNrIG9mIHdoZXJlIHRoZSB1dGY4IHNlbnRpbmVsIHdhcyBmb3VuZFxuICAgIHZhciBpO1xuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJ3V0Zjg9JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbaV0gPT09IGNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ3V0Zi04JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBpc29TZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ2lzby04ODU5LTEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBza2lwSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGkgPSBwYXJ0cy5sZW5ndGg7IC8vIFRoZSBlc2xpbnQgc2V0dGluZ3MgZG8gbm90IGFsbG93IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpID09PSBza2lwSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleSwgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gdXRpbHMubWF5YmVNYXAoXG4gICAgICAgICAgICAgICAgcGFyc2VBcnJheVZhbHVlKHBhcnQuc2xpY2UocG9zICsgMSksIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlbmNvZGVkVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRlY29kZXIoZW5jb2RlZFZhbCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgJiYgb3B0aW9ucy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgJiYgY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICB2YWwgPSBpbnRlcnByZXROdW1lcmljRW50aXRpZXModmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJ0LmluZGV4T2YoJ1tdPScpID4gLTEpIHtcbiAgICAgICAgICAgIHZhbCA9IGlzQXJyYXkodmFsKSA/IFt2YWxdIDogdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4aXN0aW5nID0gaGFzLmNhbGwob2JqLCBrZXkpO1xuICAgICAgICBpZiAoZXhpc3RpbmcgJiYgb3B0aW9ucy5kdXBsaWNhdGVzID09PSAnY29tYmluZScpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmICghZXhpc3RpbmcgfHwgb3B0aW9ucy5kdXBsaWNhdGVzID09PSAnbGFzdCcpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICB2YXIgbGVhZiA9IHZhbHVlc1BhcnNlZCA/IHZhbCA6IHBhcnNlQXJyYXlWYWx1ZSh2YWwsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5hbGxvd0VtcHR5QXJyYXlzICYmIGxlYWYgPT09ICcnID8gW10gOiBbXS5jb25jYXQobGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBkZWNvZGVkUm9vdCA9IG9wdGlvbnMuZGVjb2RlRG90SW5LZXlzID8gY2xlYW5Sb290LnJlcGxhY2UoLyUyRS9nLCAnLicpIDogY2xlYW5Sb290O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoZGVjb2RlZFJvb3QsIDEwKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJzZUFycmF5cyAmJiBkZWNvZGVkUm9vdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmogPSB7IDA6IGxlYWYgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGRlY29kZWRSb290XG4gICAgICAgICAgICAgICAgJiYgU3RyaW5nKGluZGV4KSA9PT0gZGVjb2RlZFJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlY29kZWRSb290ICE9PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgIG9ialtkZWNvZGVkUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICBpZiAoIWdpdmVuS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2Zvcm0gZG90IG5vdGF0aW9uIHRvIGJyYWNrZXQgbm90YXRpb25cbiAgICB2YXIga2V5ID0gb3B0aW9ucy5hbGxvd0RvdHMgPyBnaXZlbktleS5yZXBsYWNlKC9cXC4oW14uW10rKS9nLCAnWyQxXScpIDogZ2l2ZW5LZXk7XG5cbiAgICAvLyBUaGUgcmVnZXggY2h1bmtzXG5cbiAgICB2YXIgYnJhY2tldHMgPSAvKFxcW1teW1xcXV0qXSkvO1xuICAgIHZhciBjaGlsZCA9IC8oXFxbW15bXFxdXSpdKS9nO1xuXG4gICAgLy8gR2V0IHRoZSBwYXJlbnRcblxuICAgIHZhciBzZWdtZW50ID0gb3B0aW9ucy5kZXB0aCA+IDAgJiYgYnJhY2tldHMuZXhlYyhrZXkpO1xuICAgIHZhciBwYXJlbnQgPSBzZWdtZW50ID8ga2V5LnNsaWNlKDAsIHNlZ21lbnQuaW5kZXgpIDoga2V5O1xuXG4gICAgLy8gU3Rhc2ggdGhlIHBhcmVudCBpZiBpdCBleGlzdHNcblxuICAgIHZhciBrZXlzID0gW107XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmVuJ3QgdXNpbmcgcGxhaW4gb2JqZWN0cywgb3B0aW9uYWxseSBwcmVmaXgga2V5cyB0aGF0IHdvdWxkIG92ZXJ3cml0ZSBvYmplY3QgcHJvdG90eXBlIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBwYXJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGNoaWxkcmVuIGFwcGVuZGluZyB0byB0aGUgYXJyYXkgdW50aWwgd2UgaGl0IGRlcHRoXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKG9wdGlvbnMuZGVwdGggPiAwICYmIChzZWdtZW50ID0gY2hpbGQuZXhlYyhrZXkpKSAhPT0gbnVsbCAmJiBpIDwgb3B0aW9ucy5kZXB0aCkge1xuICAgICAgICBpICs9IDE7XG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc2VnbWVudFsxXS5zbGljZSgxLCAtMSkpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleXMucHVzaChzZWdtZW50WzFdKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgcmVtYWluZGVyLCBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0XG5cbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBrZXlzLnB1c2goJ1snICsga2V5LnNsaWNlKHNlZ21lbnQuaW5kZXgpICsgJ10nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VPYmplY3Qoa2V5cywgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhbGxvd0VtcHR5QXJyYXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuZGVjb2RlRG90SW5LZXlzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgZGVjb2RlRG90SW5LZXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHZhciBjaGFyc2V0ID0gdHlwZW9mIG9wdHMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5jaGFyc2V0IDogb3B0cy5jaGFyc2V0O1xuXG4gICAgdmFyIGR1cGxpY2F0ZXMgPSB0eXBlb2Ygb3B0cy5kdXBsaWNhdGVzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmR1cGxpY2F0ZXMgOiBvcHRzLmR1cGxpY2F0ZXM7XG5cbiAgICBpZiAoZHVwbGljYXRlcyAhPT0gJ2NvbWJpbmUnICYmIGR1cGxpY2F0ZXMgIT09ICdmaXJzdCcgJiYgZHVwbGljYXRlcyAhPT0gJ2xhc3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkdXBsaWNhdGVzIG9wdGlvbiBtdXN0IGJlIGVpdGhlciBjb21iaW5lLCBmaXJzdCwgb3IgbGFzdCcpO1xuICAgIH1cblxuICAgIHZhciBhbGxvd0RvdHMgPSB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gb3B0cy5kZWNvZGVEb3RJbktleXMgPT09IHRydWUgPyB0cnVlIDogZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd0VtcHR5QXJyYXlzOiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzID09PSAnYm9vbGVhbicgPyAhIW9wdHMuYWxsb3dFbXB0eUFycmF5cyA6IGRlZmF1bHRzLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYWxsb3dTcGFyc2U6IHR5cGVvZiBvcHRzLmFsbG93U3BhcnNlID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93U3BhcnNlIDogZGVmYXVsdHMuYWxsb3dTcGFyc2UsXG4gICAgICAgIGFycmF5TGltaXQ6IHR5cGVvZiBvcHRzLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0cy5hcnJheUxpbWl0IDogZGVmYXVsdHMuYXJyYXlMaW1pdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYTogdHlwZW9mIG9wdHMuY29tbWEgPT09ICdib29sZWFuJyA/IG9wdHMuY29tbWEgOiBkZWZhdWx0cy5jb21tYSxcbiAgICAgICAgZGVjb2RlRG90SW5LZXlzOiB0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgPT09ICdib29sZWFuJyA/IG9wdHMuZGVjb2RlRG90SW5LZXlzIDogZGVmYXVsdHMuZGVjb2RlRG90SW5LZXlzLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgICBkZXB0aDogKHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyB8fCBvcHRzLmRlcHRoID09PSBmYWxzZSkgPyArb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBkdXBsaWNhdGVzOiBkdXBsaWNhdGVzLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucywgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dTcGFyc2UgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFNpZGVDaGFubmVsID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGNvbW1hOiAnY29tbWEnLFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93RW1wdHlBcnJheXM6IGZhbHNlLFxuICAgIGFycmF5Rm9ybWF0OiAnaW5kaWNlcycsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGVuY29kZTogdHJ1ZSxcbiAgICBlbmNvZGVEb3RJbktleXM6IGZhbHNlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgZm9ybWF0dGVyOiBmb3JtYXRzLmZvcm1hdHRlcnNbZGVmYXVsdEZvcm1hdF0sXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGluZGljZXM6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ3N5bWJvbCdcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnO1xufTtcblxudmFyIHNlbnRpbmVsID0ge307XG5cbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkoXG4gICAgb2JqZWN0LFxuICAgIHByZWZpeCxcbiAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgIGNvbW1hUm91bmRUcmlwLFxuICAgIGFsbG93RW1wdHlBcnJheXMsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVEb3RJbktleXMsXG4gICAgZW5jb2RlcixcbiAgICBmaWx0ZXIsXG4gICAgc29ydCxcbiAgICBhbGxvd0RvdHMsXG4gICAgc2VyaWFsaXplRGF0ZSxcbiAgICBmb3JtYXQsXG4gICAgZm9ybWF0dGVyLFxuICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgY2hhcnNldCxcbiAgICBzaWRlQ2hhbm5lbFxuKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcblxuICAgIHZhciB0bXBTYyA9IHNpZGVDaGFubmVsO1xuICAgIHZhciBzdGVwID0gMDtcbiAgICB2YXIgZmluZEZsYWcgPSBmYWxzZTtcbiAgICB3aGlsZSAoKHRtcFNjID0gdG1wU2MuZ2V0KHNlbnRpbmVsKSkgIT09IHZvaWQgdW5kZWZpbmVkICYmICFmaW5kRmxhZykge1xuICAgICAgICAvLyBXaGVyZSBvYmplY3QgbGFzdCBhcHBlYXJlZCBpbiB0aGUgcmVmIHRyZWVcbiAgICAgICAgdmFyIHBvcyA9IHRtcFNjLmdldChvYmplY3QpO1xuICAgICAgICBzdGVwICs9IDE7XG4gICAgICAgIGlmICh0eXBlb2YgcG9zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHBvcyA9PT0gc3RlcCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDeWNsaWMgb2JqZWN0IHZhbHVlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbmRGbGFnID0gdHJ1ZTsgLy8gQnJlYWsgd2hpbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRtcFNjLmdldChzZW50aW5lbCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzdGVwID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9iaiA9IGZpbHRlcihwcmVmaXgsIG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIG9iaiA9IHNlcmlhbGl6ZURhdGUob2JqKTtcbiAgICB9IGVsc2UgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1heWJlTWFwKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURhdGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknLCBmb3JtYXQpIDogcHJlZml4O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGlzTm9uTnVsbGlzaFByaW1pdGl2ZShvYmopIHx8IHV0aWxzLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgIHZhciBrZXlWYWx1ZSA9IGVuY29kZVZhbHVlc09ubHkgPyBwcmVmaXggOiBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCk7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihrZXlWYWx1ZSkgKyAnPScgKyBmb3JtYXR0ZXIoZW5jb2RlcihvYmosIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICd2YWx1ZScsIGZvcm1hdCkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gam9pbiBlbGVtZW50cyBpblxuICAgICAgICBpZiAoZW5jb2RlVmFsdWVzT25seSAmJiBlbmNvZGVyKSB7XG4gICAgICAgICAgICBvYmogPSB1dGlscy5tYXliZU1hcChvYmosIGVuY29kZXIpO1xuICAgICAgICB9XG4gICAgICAgIG9iaktleXMgPSBbeyB2YWx1ZTogb2JqLmxlbmd0aCA+IDAgPyBvYmouam9pbignLCcpIHx8IG51bGwgOiB2b2lkIHVuZGVmaW5lZCB9XTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIHZhciBlbmNvZGVkUHJlZml4ID0gZW5jb2RlRG90SW5LZXlzID8gcHJlZml4LnJlcGxhY2UoL1xcLi9nLCAnJTJFJykgOiBwcmVmaXg7XG5cbiAgICB2YXIgYWRqdXN0ZWRQcmVmaXggPSBjb21tYVJvdW5kVHJpcCAmJiBpc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMSA/IGVuY29kZWRQcmVmaXggKyAnW10nIDogZW5jb2RlZFByZWZpeDtcblxuICAgIGlmIChhbGxvd0VtcHR5QXJyYXlzICYmIGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBhZGp1c3RlZFByZWZpeCArICdbXSc7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmpLZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2pdO1xuICAgICAgICB2YXIgdmFsdWUgPSB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Yga2V5LnZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGtleS52YWx1ZSA6IG9ialtrZXldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuY29kZWRLZXkgPSBhbGxvd0RvdHMgJiYgZW5jb2RlRG90SW5LZXlzID8ga2V5LnJlcGxhY2UoL1xcLi9nLCAnJTJFJykgOiBrZXk7XG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBpc0FycmF5KG9iailcbiAgICAgICAgICAgID8gdHlwZW9mIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdmdW5jdGlvbicgPyBnZW5lcmF0ZUFycmF5UHJlZml4KGFkanVzdGVkUHJlZml4LCBlbmNvZGVkS2V5KSA6IGFkanVzdGVkUHJlZml4XG4gICAgICAgICAgICA6IGFkanVzdGVkUHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGVuY29kZWRLZXkgOiAnWycgKyBlbmNvZGVkS2V5ICsgJ10nKTtcblxuICAgICAgICBzaWRlQ2hhbm5lbC5zZXQob2JqZWN0LCBzdGVwKTtcbiAgICAgICAgdmFyIHZhbHVlU2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgICAgICB2YWx1ZVNpZGVDaGFubmVsLnNldChzZW50aW5lbCwgc2lkZUNoYW5uZWwpO1xuICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5UHJlZml4LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIGNvbW1hUm91bmRUcmlwLFxuICAgICAgICAgICAgYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgIGVuY29kZURvdEluS2V5cyxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgZW5jb2RlVmFsdWVzT25seSAmJiBpc0FycmF5KG9iaikgPyBudWxsIDogZW5jb2RlcixcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIGNoYXJzZXQsXG4gICAgICAgICAgICB2YWx1ZVNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgYWxsb3dFbXB0eUFycmF5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmVuY29kZURvdEluS2V5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZW5jb2RlRG90SW5LZXlzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGVuY29kZURvdEluS2V5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKCdpbmRpY2VzJyBpbiBvcHRzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBkZWZhdWx0cy5hcnJheUZvcm1hdDtcbiAgICB9XG5cbiAgICBpZiAoJ2NvbW1hUm91bmRUcmlwJyBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLmNvbW1hUm91bmRUcmlwICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGNvbW1hUm91bmRUcmlwYCBtdXN0IGJlIGEgYm9vbGVhbiwgb3IgYWJzZW50Jyk7XG4gICAgfVxuXG4gICAgdmFyIGFsbG93RG90cyA9IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBvcHRzLmVuY29kZURvdEluS2V5cyA9PT0gdHJ1ZSA/IHRydWUgOiBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd0VtcHR5QXJyYXlzOiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzID09PSAnYm9vbGVhbicgPyAhIW9wdHMuYWxsb3dFbXB0eUFycmF5cyA6IGRlZmF1bHRzLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIGFycmF5Rm9ybWF0OiBhcnJheUZvcm1hdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYVJvdW5kVHJpcDogb3B0cy5jb21tYVJvdW5kVHJpcCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlRG90SW5LZXlzOiB0eXBlb2Ygb3B0cy5lbmNvZGVEb3RJbktleXMgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlRG90SW5LZXlzIDogZGVmYXVsdHMuZW5jb2RlRG90SW5LZXlzLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbb3B0aW9ucy5hcnJheUZvcm1hdF07XG4gICAgdmFyIGNvbW1hUm91bmRUcmlwID0gZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBvcHRpb25zLmNvbW1hUm91bmRUcmlwO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG4gICAgfVxuXG4gICAgdmFyIHNpZGVDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWwoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBjb21tYVJvdW5kVHJpcCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZURvdEluS2V5cyxcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlID8gb3B0aW9ucy5lbmNvZGVyIDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5zb3J0LFxuICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0RvdHMsXG4gICAgICAgICAgICBvcHRpb25zLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdCxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0dGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgb3B0aW9ucy5jaGFyc2V0LFxuICAgICAgICAgICAgc2lkZUNoYW5uZWxcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihvcHRpb25zLmRlbGltaXRlcik7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYWRkUXVlcnlQcmVmaXggPT09IHRydWUgPyAnPycgOiAnJztcblxuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKSwgdGhlIFwibnVtZXJpYyBlbnRpdHlcIiByZXByZXNlbnRhdGlvbiBvZiBhIGNoZWNrbWFya1xuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JUUyJTlDJTkzJic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gam9pbmVkLmxlbmd0aCA+IDAgPyBwcmVmaXggKyBqb2luZWQgOiAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBhcnJheVRvT2JqZWN0ID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIC8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogMCAqL1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSkgfHwgIWhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3RhcmdldCwgc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmICFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBhcnJheVRvT2JqZWN0KHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbCh0YXJnZXQsIGkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEl0ZW0gPSB0YXJnZXRbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG1lcmdlKHRhcmdldEl0ZW0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IG1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxudmFyIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIsIGRlY29kZXIsIGNoYXJzZXQpIHtcbiAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzLnJlcGxhY2UoLyVbMC05YS1mXXsyfS9naSwgdW5lc2NhcGUpO1xuICAgIH1cbiAgICAvLyB1dGYtOFxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzO1xuICAgIH1cbn07XG5cbnZhciBsaW1pdCA9IDEwMjQ7XG5cbi8qIGVzbGludCBvcGVyYXRvci1saW5lYnJlYWs6IFsyLCBcImJlZm9yZVwiXSAqL1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQsIGtpbmQsIGZvcm1hdCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gc3RyO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3ltYm9sJykge1xuICAgICAgICBzdHJpbmcgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZyA9IFN0cmluZyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdHJpbmcubGVuZ3RoOyBqICs9IGxpbWl0KSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0gc3RyaW5nLmxlbmd0aCA+PSBsaW1pdCA/IHN0cmluZy5zbGljZShqLCBqICsgbGltaXQpIDogc3RyaW5nO1xuICAgICAgICB2YXIgYXJyID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHNlZ21lbnQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDVGIC8vIF9cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICAgICAgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIC8vIGEtelxuICAgICAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgICAgICAgICB8fCAoZm9ybWF0ID09PSBmb3JtYXRzLlJGQzE3MzggJiYgKGMgPT09IDB4MjggfHwgYyA9PT0gMHgyOSkpIC8vICggKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gc2VnbWVudC5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IGhleFRhYmxlW2NdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhDMCB8IChjID4+IDYpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc2VnbWVudC5jaGFyQ29kZUF0KGkpICYgMHgzRkYpKTtcblxuICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzRildXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gYXJyLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG52YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYWN0UXVldWUocXVldWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGlzUmVnRXhwID0gZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBpc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG52YXIgbWF5YmVNYXAgPSBmdW5jdGlvbiBtYXliZU1hcCh2YWwsIGZuKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YXIgbWFwcGVkID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBtYXBwZWQucHVzaChmbih2YWxbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgIH1cbiAgICByZXR1cm4gZm4odmFsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFycmF5VG9PYmplY3Q6IGFycmF5VG9PYmplY3QsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgY29tYmluZTogY29tYmluZSxcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWF5YmVNYXA6IG1heWJlTWFwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4gKiBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbiAqIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4gKiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbiAqIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuICogT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuICogVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8qXG4gKiBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuICogY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG4gKi9cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW14/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gIC8qXG4gICAqIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAqIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAqL1xuICBkZWxpbXMgPSBbXG4gICAgJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXG4gIF0sXG5cbiAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgdW53aXNlID0gW1xuICAgICd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCdcbiAgXS5jb25jYXQoZGVsaW1zKSxcblxuICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAvKlxuICAgKiBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgKiBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gICAqIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgKiB0aGVtLlxuICAgKi9cbiAgbm9uSG9zdENoYXJzID0gW1xuICAgICclJywgJy8nLCAnPycsICc7JywgJyMnXG4gIF0uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICBob3N0RW5kaW5nQ2hhcnMgPSBbXG4gICAgJy8nLCAnPycsICcjJ1xuICBdLFxuICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICBqYXZhc2NyaXB0OiB0cnVlLFxuICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgfSxcbiAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgIGphdmFzY3JpcHQ6IHRydWUsXG4gICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICB9LFxuICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgIGh0dHA6IHRydWUsXG4gICAgaHR0cHM6IHRydWUsXG4gICAgZnRwOiB0cnVlLFxuICAgIGdvcGhlcjogdHJ1ZSxcbiAgICBmaWxlOiB0cnVlLFxuICAgICdodHRwOic6IHRydWUsXG4gICAgJ2h0dHBzOic6IHRydWUsXG4gICAgJ2Z0cDonOiB0cnVlLFxuICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAnZmlsZTonOiB0cnVlXG4gIH0sXG4gIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXMnKTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHR5cGVvZiB1cmwgPT09ICdvYmplY3QnICYmIHVybCBpbnN0YW5jZW9mIFVybCkgeyByZXR1cm4gdXJsOyB9XG5cbiAgdmFyIHUgPSBuZXcgVXJsKCk7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAndXJsJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgXCIgKyB0eXBlb2YgdXJsKTtcbiAgfVxuXG4gIC8qXG4gICAqIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLlxuICAgKiBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcbiAgICogU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTZcbiAgICovXG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICBzcGxpdHRlciA9IHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpID8gJz8nIDogJyMnLFxuICAgIHVTcGxpdCA9IHVybC5zcGxpdChzcGxpdHRlciksXG4gICAgc2xhc2hSZWdleCA9IC9cXFxcL2c7XG4gIHVTcGxpdFswXSA9IHVTcGxpdFswXS5yZXBsYWNlKHNsYXNoUmVnZXgsICcvJyk7XG4gIHVybCA9IHVTcGxpdC5qb2luKHNwbGl0dGVyKTtcblxuICB2YXIgcmVzdCA9IHVybDtcblxuICAvKlxuICAgKiB0cmltIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAgKiBUaGlzIGlzIHRvIHN1cHBvcnQgcGFyc2Ugc3R1ZmYgbGlrZSBcIiAgaHR0cDovL2Zvby5jb20gIFxcblwiXG4gICAqL1xuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLypcbiAgICogZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgICogdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAgKiByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gICAqIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICAgKi9cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkAvXStAW15AL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiYgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8qXG4gICAgICogdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgICAqIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgICogdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAgKiBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgICAqIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAgKlxuICAgICAqIGV4OlxuICAgICAqIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgICogaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuICAgICAqL1xuXG4gICAgLypcbiAgICAgKiB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgICogUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cbiAgICAgKi9cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpIHsgaG9zdEVuZCA9IGhlYzsgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgICogYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgICovXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qXG4gICAgICAgKiBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAgKiBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgICovXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBOb3cgd2UgaGF2ZSBhIHBvcnRpb24gd2hpY2ggaXMgZGVmaW5pdGVseSB0aGUgYXV0aC5cbiAgICAgKiBQdWxsIHRoYXQgb2ZmLlxuICAgICAqL1xuICAgIGlmIChhdFNpZ24gIT09IC0xKSB7XG4gICAgICBhdXRoID0gcmVzdC5zbGljZSgwLCBhdFNpZ24pO1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7XG4gICAgICB0aGlzLmF1dGggPSBkZWNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKSB7IGhvc3RFbmQgPSBoZWM7IH1cbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSkgeyBob3N0RW5kID0gcmVzdC5sZW5ndGg7IH1cblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvKlxuICAgICAqIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgICogc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICAgKi9cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8qXG4gICAgICogaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAgKiBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICAgKi9cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgKiB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICogd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAgKiBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8qXG4gICAgICAgKiBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55Y29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgICAqIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgICAqIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWZcbiAgICAgICAqIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvKlxuICAgICAqIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAgKiB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgICAqL1xuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgICogY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICAgKi9cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLypcbiAgICAgKiBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgICogZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgICogbmVlZCB0byBiZS5cbiAgICAgKi9cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF1dG9Fc2NhcGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldO1xuICAgICAgaWYgKHJlc3QuaW5kZXhPZihhZSkgPT09IC0xKSB7IGNvbnRpbnVlOyB9XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5xdWVyeSk7XG4gICAgfVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWRcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgfVxuICBpZiAocmVzdCkgeyB0aGlzLnBhdGhuYW1lID0gcmVzdDsgfVxuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmIHRoaXMuaG9zdG5hbWUgJiYgIXRoaXMucGF0aG5hbWUpIHtcbiAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLypcbiAgICogZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgICogSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgICogdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAgKiB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICAgKi9cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7IG9iaiA9IHVybFBhcnNlKG9iaik7IH1cbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgeyByZXR1cm4gVXJsLnByb3RvdHlwZS5mb3JtYXQuY2FsbChvYmopOyB9XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdGhpcy5wcm90b2NvbCB8fCAnJyxcbiAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICBob3N0ID0gZmFsc2UsXG4gICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/IHRoaXMuaG9zdG5hbWUgOiAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJiB0eXBlb2YgdGhpcy5xdWVyeSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSwge1xuICAgICAgYXJyYXlGb3JtYXQ6ICdyZXBlYXQnLFxuICAgICAgYWRkUXVlcnlQcmVmaXg6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHsgcHJvdG9jb2wgKz0gJzonOyB9XG5cbiAgLypcbiAgICogb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gICAqIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gICAqL1xuICBpZiAodGhpcy5zbGFzaGVzIHx8ICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHsgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTsgfVxuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgeyBoYXNoID0gJyMnICsgaGFzaDsgfVxuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgeyBzZWFyY2ggPSAnPycgKyBzZWFyY2g7IH1cblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlKHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHsgcmV0dXJuIHJlbGF0aXZlOyB9XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24gKHJlbGF0aXZlKSB7XG4gIGlmICh0eXBlb2YgcmVsYXRpdmUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8qXG4gICAqIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAgKiBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgICovXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKSB7IHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldOyB9XG4gICAgfVxuXG4gICAgLy8gdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZTtcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvKlxuICAgICAqIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAgKiB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAgKiBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAgKiBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgICAqIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAgKiBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgICAqIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgICAqIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICAgKi9cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSkgeyB9XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHsgcmVsYXRpdmUuaG9zdCA9ICcnOyB9XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSB7IHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7IH1cbiAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgeyByZWxQYXRoLnVuc2hpZnQoJycpOyB9XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSB7IHJlbFBhdGgudW5zaGlmdCgnJyk7IH1cbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyxcbiAgICBpc1JlbEFicyA9IHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsXG4gICAgbXVzdEVuZEFicyA9IGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8IChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSksXG4gICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8qXG4gICAqIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgICogbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAgKiB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gICAqIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gICAqIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICAgKi9cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgeyBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7IH0gZWxzZSB7IHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7IH1cbiAgICB9XG4gICAgcmVzdWx0Lmhvc3QgPSAnJztcbiAgICBpZiAocmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsO1xuICAgICAgaWYgKHJlbGF0aXZlLmhvc3QpIHtcbiAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICcnKSB7IHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0OyB9IGVsc2UgeyByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7IH1cbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycgPyByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnID8gcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8qXG4gICAgICogaXQncyByZWxhdGl2ZVxuICAgICAqIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGlmICghc3JjUGF0aCkgeyBzcmNQYXRoID0gW107IH1cbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKHJlbGF0aXZlLnNlYXJjaCAhPSBudWxsKSB7XG4gICAgLypcbiAgICAgKiBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgICogbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAgKiBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICAgKi9cbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0O1xuICAgICAgLypcbiAgICAgICAqIG9jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAgKiB0aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAgKiB1cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgICAqL1xuICAgICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID8gcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lICE9PSBudWxsIHx8IHJlc3VsdC5zZWFyY2ggIT09IG51bGwpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICAvKlxuICAgICAqIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAgKiB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgICAqL1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnNlYXJjaCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKlxuICAgKiBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgICogaG93ZXZlciwgaWYgaXQgZW5kcyBpbiBhbnl0aGluZyBlbHNlIG5vbi1zbGFzaHksXG4gICAqIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gICAqL1xuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0IHx8IHNyY1BhdGgubGVuZ3RoID4gMSkgJiYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJztcblxuICAvKlxuICAgKiBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gICAqIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gICAqL1xuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiYgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHwgKHNyY1BhdGhbMF0gJiYgc3JjUGF0aFswXS5jaGFyQXQoMCkgPT09ICcvJyk7XG5cbiAgLy8gcHV0IHRoZSBob3N0IGJhY2tcbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IGlzQWJzb2x1dGUgPyAnJyA6IHNyY1BhdGgubGVuZ3RoID8gc3JjUGF0aC5zaGlmdCgpIDogJyc7XG4gICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWU7XG4gICAgLypcbiAgICAgKiBvY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAqIHRoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgKiB1cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgKi9cbiAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgPyByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWU7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoc3JjUGF0aC5sZW5ndGggPiAwKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH1cblxuICAvLyB0byBzdXBwb3J0IHJlcXVlc3QuaHR0cFxuICBpZiAocmVzdWx0LnBhdGhuYW1lICE9PSBudWxsIHx8IHJlc3VsdC5zZWFyY2ggIT09IG51bGwpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgKyAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgeyB0aGlzLmhvc3RuYW1lID0gaG9zdDsgfVxufTtcblxuZXhwb3J0cy5wYXJzZSA9IHVybFBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG5leHBvcnRzLmZvcm1hdCA9IHVybEZvcm1hdDtcblxuZXhwb3J0cy5VcmwgPSBVcmw7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWVzc2FnZXMpIHtcbiAgICByZXR1cm4gIHtcbiAgICAgICAgQ2FtZXJhOiB7XG4gICAgICAgICAgICB0YWtlUGljdHVyZTogZnVuY3Rpb24gKHN1Y2Nlc3MsIGZhaWwsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5jYWxsKCd0YWtlUGljdHVyZScsIGFyZ3MpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncyAmJiBhcmdzWzFdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBEZXN0aW5hdGlvbiB0eXBlIGlzIERBVEFfVVJMICovXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAncmVzdWx0JyBzaG91bGQgYmUge2RhdGE6IDxBcnJheUJ1ZmZlcj4sIHR5cGU6IDxtaW1lVHlwZT59LCBmcm9tIHdoaWNoIHdlJ2xsIGNyZWF0ZSBhIGJsb2JcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3Jlc3VsdC5kYXRhXSwgeyB0eXBlOiByZXN1bHQudHlwZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1lc3NhZ2VzKSB7XG4gICAgbWVzc2FnZXMucmVnaXN0ZXIoJ2NvcmRvdmEtdmVyc2lvbicsIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAod2luZG93LmNvcmRvdmEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHdpbmRvdy5jb3Jkb3ZhLnZlcnNpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ1lvdSBtdXN0IGhhdmUgY29yZG92YS5qcyBpbmNsdWRlZCBpbiB5b3VyIHByb2plY3RzLCB0byBiZSBhYmxlIHRvIGdldCBjb3Jkb3ZhIHZlcnNpb24nKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1lc3NhZ2VzKSB7XG4gICAgbWVzc2FnZXMucmVnaXN0ZXIoJ2FsZXJ0JywgZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgYXJncyA9IGV2ZW50O1xuICAgICAgICB2YXIgdGl0bGUgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgdGV4dCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBidXR0b25OYW1lID0gYXJnc1syXTtcbiAgICAgICAgY3JlYXRlRGlhbG9nKHRpdGxlLCB0ZXh0LCBbYnV0dG9uTmFtZV0sIGZhbHNlLCBudWxsLCBjYWxsYmFjayk7XG4gICAgfSk7XG5cbiAgICBtZXNzYWdlcy5yZWdpc3RlcignY29uZmlybScsIGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBldmVudDtcbiAgICAgICAgdmFyIHRpdGxlID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIHRleHQgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgYnV0dG9ucyA9IGFyZ3NbMl07XG4gICAgICAgIGNyZWF0ZURpYWxvZyh0aXRsZSwgdGV4dCwgYnV0dG9ucywgZmFsc2UsIG51bGwsIGNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2VzLnJlZ2lzdGVyKCdwcm9tcHQnLCBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBhcmdzID0gZXZlbnQ7XG4gICAgICAgIHZhciB0aXRsZSA9IGFyZ3NbMV07XG4gICAgICAgIHZhciB0ZXh0ID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgZGVmYXVsdFRleHQgPSBhcmdzWzNdO1xuICAgICAgICBjcmVhdGVEaWFsb2codGl0bGUsIHRleHQsIGJ1dHRvbnMsIHRydWUsIGRlZmF1bHRUZXh0LCBjYWxsYmFjayk7XG4gICAgfSk7XG5cbiAgICBtZXNzYWdlcy5yZWdpc3RlcignYmVlcCcsIGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHRpbWVzID0gZXZlbnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGltZXM7IGkrKykge1xuICAgICAgICAgICAgLy8gMTcwMG1zIGJlbG93IGlzIHRoZSBiZWVwIHNvdW5kIGR1cmF0aW9uXG4gICAgICAgICAgICBzZXRUaW1lb3V0KG1ha2VCZWVwLCAxNzAwICogaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsbCBjYWxsYmFjayB3aGVuIGJlZXAocykgaXMgZG9uZVxuICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNzAwICogdGltZXMpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWFrZUJlZXAoKSB7XG4gICAgICAgIHZhciBhdWRpbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgIGF1ZGlvLnNyYyA9ICdkYXRhOmF1ZGlvL3dhdjtiYXNlNjQsVWtsR1JqUW5BQUJYUVZaRlptMTBJQkFBQUFBQkFBRUFRQjhBQUFBQUFBQUJBQWdBWkdGMFlSQW5BQUNBbWJISTIrdjIvZi84OCtmV3dhdVNlV0JJTWlBUkJ3SUJCaEFlTUVWZGRZK292OVBsOHZ2Ly92ZnQzY3EwbklOcVVUc25Gd3NEQVFRTEdDZzhVMnVFbmJYTDN1MzQvdi83OHVUVHZxYU9kRnRFTHgwUEJnRUNCeEloTTBsaGVwT3N3dGZuOVB6Ly9mYnEyc2V3bUg5bVRqY2tGUWtEQVFVTkdpcy9WMitKb3JuUDRlLzUvdjc1OE9IUHVxS0pjRmRBTEJzTkJRRURDUlFqTjAxbGZwZXd4dHJxOXYzLy9QVG8xOE9zbEh0aVNqUWhFZ2dDQVFZUEhTNURXM09OcHIzUzVQSDYvLzc0N3QvTXRwNkZiRk05S1JnTUJBRURDaFltT2xGcGdwdTB5dDNzOS83LysvUGwxTUNva0haZFJqRWVFQVlDQWdjUkh6SkhYM2lScXNIVjV2UDcvLzMzNjl6SXNwcUJhRTg1SmhZS0F3RUVEQmtxUGxWdGg2QzN6ZUR1K2Y3Lyt2SGowYnlraTNKWlFpMGNEZ1VCQWdnVElqVkxZM3lWcnNUWTZmWDgvLzMxNmRuRnJwWjlZMHMySXhNSUFnRUZEaHN0UVZseGk2UzcwT0x3K3YvKytlL2d6cmlnaDI1VlBpb1pEQVFCQXdvVkpUaFBaNENac3NqYjYvYjkvL3p6NTliQnFwSjRYMGd5SUJFSEFnSUdFQjR3UlYxMmo2aS8xT1h5Ky8vKzkremR5clNjZzJwUk95Y1hDd01CQkFzWUtEeFRhNFNldHN2ZTdmaisvL3Z5NU5LK3BvMTBXMFF2SFE4R0FRSUlFaUV6U1dGNms2ekQxK2YwL1AvOTl1cmF4N0NZZjJWTk55UVVDUU1CQlEwYUswQlhiNG1pdWMvaDcvbisvdm53NGMrNm9vbHdWMEFzR2cwRkFRTUpGQ1EzVFdWK2w3REcydXIyL2YvODlPalh3NnlVZW1GSk5DRVNDQUlCQmc4ZExrTmJkSTJtdmRMazhmci8vdmp0M3N5Mm5vVnNVendvR0F3RUFRTUxGaWM2VVdtQ25MVEszZXozL3YvNzh1WFV2NmlQZGwxR01CNFFCZ0lDQnhFZk1rZGZlSkdxd2RYbTgvei8vZmZyM01peW1vRm5UemtsRlFvREFRUU1HU28rVlcySG9Mak40Tzc1L3YvNjhlUFJ2S1NMY2xsQ0xSd09CUUVDQ0JNaU5VdGpmSld1eGRqcDlmei8vUFhwMmNXdWxueGpTelVpRXdnQ0FRVU9HeTFDV1hLTHBMdlI0dkQ2Ly83NTd1RE51S0NIYmxVK0toa01CQUVEQ2hVbE9VOW5nSnF5eU52cjkvMy8vUFBtMWNHcWtYaGZSeklnRVFjQ0FnWVFIakJGWFhhUHFML1U1Zkw3Ly83MzdOM0t0SnlEYVZFN0p4Y0xBd0VFQ3hnb1BGTnJoWjYyek43dCtQNy8rL0hrMHIybWpYUmJSQzhkRHdZQkFnZ1NJVFJKWVhxVHJNUFg2UFQ4Ly8zMjZ0ckdzSmgrWlUwM0pCUUpBd0VGRFJvclFGZHdpYUs2eitIditmNysrZS9oejdxaWlYQlhRQ3NhRFFVQkF3a1VKRGROWlg2WXNNYmE2dmI5Ly96MDZOZkRySk42WVVrMElSSUlBZ0VHRHgwdlJGdDBqYWE5MHVUeCsvLysrTzNlekxhZWhXdFRQQ2dZQ3dRQkF3c1hKenRSYVlPY3RNcmQ3UGYrLy92eTVkUy9xSTkyWFVVd0hoQUdBZ0lIRVNBeVIxOTRrYXJCMWViei9QLzk5K3ZieUxLYWdHZFBPU1VWQ2dNQkJBd1pLajVWYm9lZ3VNM2c3dm4rLy9ydzR0RzdwSXR5V1VJdEd3NEZBUUlJRXlJMVMyTjhscTdGMmVuMS9QLzg5ZW5ZeGE2VmZHTkxOU0lUQ0FJQkJRNGNMVUpaY291a3ZOSGo4ZnIvL3ZudTRNMjRvSWR0VlQ0cUdRd0VBUU1LRmlVNVQyZUJtckxJM092My9mLzg4K2JWd2FxUmVGOUhNaDhSQndJQ0JoQWVNRVpkZG8rb3Y5VGw4dnYvL3ZmczNjcTBuSUpwVVRvbkZnc0RBUVFNR0NnOFUyeUZucmJNM3UzNC92LzY4ZVRTdmFhTmRGdERMaDBQQmdFQ0NCSWhORWxoZXBTc3c5Zm85UHovL2ZicTJzYXdsMzVsVFRja0ZBa0RBUVVOR2l4QVYzQ0pvcnJQNGZENS92NzU3K0hQdWFLSmIxZEFLeG9OQlFFRENSUWtOMDFsZjVpd3g5cnE5djMvL1BUbjE4T3NrM3BoU1RNaEVnZ0NBUVlQSFM5RVczU05wcjdTNVBMNy8vNzQ3ZDdMdHA2RWExTThLQmdMQkFFREN4Y25PMUZxZzV5MHl0M3M5LzcvKy9MbDFMK29qM1pkUlRBZUVBWUNBZ2NSSURKSVgzaVNxc0hXNS9QOC8vMzI2OXZJc3BtQVowODRKUlVLQXdFRURCa3FQbFZ1aDZDNHp1RHYrZjcvK3ZEaTBMdWtpM0ZaUVMwYkRnVUJBZ2dUSXpaTFkzMldyc1haNmZYOS8vejE2ZGpFcnBWOFkwczFJaE1JQWdFRkRod3RRbGx5aTZTODBlUHgrdi8rK2U3Z3piZWdoMjFWUGlvWkRBUUJBd29XSmpsUGFJR2Fzc2pjNi9mOS8vdno1dFhCcXBGNFgwY3lIeEVIQWdJR0VCNHhSbDEya0tqQTFPWHorLy8rOSt6ZHlyU2JnbWxST2lZV0NnTUJCQXdZS1QxVGJJV2V0c3pmN3ZqKy8vcng1Tks5cG8xelcwTXVIUThHQVFJSUVpRTBTbUo3bEt6RDErajAvUC85OXVyYXhyQ1hmbVZOTnlNVUNRTUJCUTBiTEVCWGNJbWl1cy9oOFBuKy92bnY0Yys1b29sdlZ6OHJHZzBGQVFNSkZTUTNUbVovbUxESDJ1cjIvZi84OU9mWHdxeVRlbUZKTXlFU0J3SUJCZzhkTDBSYmRJNm12dFBrOHZ2Ly92anQzc3UxbllSclV6d29Gd3NFQVFNTEZ5YzdVV3FEbkxUSzNlMzMvdi83OHVYVHY2aVBkVjFGTUI0UUJnRUNCeEVnTWtoZ2VaS3J3ZGJuOC96Ly9mYnIyOGl4bVlCblR6Z2xGUW9EQVFRTkdTby9WVzZIb0xqTzRPLzUvdi82OE9MUXU2T0xjVmhCTFJzT0JRRUNDUk1qTmt4a2ZaYXZ4ZG5wOWYzLy9QWG8yTVN0bFh4alN6VWlFd2dDQVFVT0hDMUNXbktNcGJ6UjQvSDYvLzc1N3QvTnQ1K0diVlErS1JrTUJBRURDaFltT1ZCb2dacXl5ZHpyOS8zLysvUG0xY0Nwa1hkZVJ6RWZFUWNDQWdjUUh6RkdYbmVRcWNEVTVmUDcvLzMzN056SnM1dUNhVkE2SmhZS0F3RUVEQmdwUFZSc2haNjJ6Ti91K1A3Lyt2SGowcjJsalhOYVF5NGNEd1lCQWdnU0lUUktZbnVVcmNQWDZQVDgvLzMyNnRyR3I1ZCtaVXcySXhRSkFnRUZEUnNzUUZod2lxTzZ6K0x3K3Y3KytlL2h6cm1oaUc5V1B5c2FEUVVCQXdrVkpEaE9abitZc2NmYTZ2YjkvL3owNTliQ3E1TjVZRWt6SUJJSEFnRUdEeDB2UkZ4MWpxZSswK1R5Ky8vKytPM2V5N1dkaEd0U1BDZ1hDd1FCQXdzWEp6dFNhb09kdGNyZDdmaisvL3Z5NWRPL3A0OTFYRVV3SGhBR0FRSUhFU0F5U0dCNWtxdkMxdWYwL1AvOTl1dmJ5TEdaZ0dkT09DVVZDZ01CQkEwWktqOVdib2lodU03ZzcvbisvdnJ3NHRDN280cHhXRUVzR3c0RkFRSUpGQ00yVEdSOWxxL0YyZW4xL2YvODllall4SzJWZkdKS05TSVRDQUlCQlE0Y0xrSmFjNHlsdk5Iajhmci8vdmp1MzgyM240WnRWRDBwR1F3RUFRTUtGaVk1VUdpQm03UEozT3ozL2YvNzgrYlZ3S21SZDE1SE1SOFJCd0lDQnhBZk1VWmVkNUNwd05UbTgvdi8vZmZzM01tem00SnBVRG9tRmdvREFRUU1HQ2s5Vkd5R243Zk0zKzc0L3YvNjhlUFN2YVdNYzFwRExod1BCZ0VDQ0JNaU5FcGllNVN0eE5qbzlQei8vZlhxMmNhdmwzNWtURFlqRkFrQ0FRVU9HeXhCV0hHS283clE0dkQ2L3Y3NTcrSE91YUdJYjFZL0t4b05CQUVEQ1JVa09FNW1mNW14eDl2cjl2My8vUFRuMXNLcmszbGdTRE1nRWdjQ0FRWVBIUzlFWEhXT3A3N1Q1UEw3Ly83NDdkN0x0WjJFYTFJN0tCY0xCQUVFQ3hjbk8xSnFoSjIxeTk3dCtQNy8rL0xsMDc2bmpuVmNSUzhlRUFZQkFnY1NJRE5JWUhtU3E4TFc1L1Q4Ly8zMjY5dkhzWm1BWms0NEpSVUpBd0VFRFJvclAxWnZpS0c1enVEditmNysrdkRpMEx1amluRllRU3diRGdVQkFna1VJelpNWkgyWHI4WFo2Zlg5Ly96MTZOakVyWlY3WWtvMEloTUlBZ0VGRHh3dVExcHpqS1c4MGVQeCt2LysrTzdmekxlZmhtMVVQU2tZREFRQkF3b1dKanBRYUlLYnM4bmM3UGY5Ly92ejV0WEFxWkIzWGtZeEh4RUhBZ0lIRVI4eFJsNTNrS25BMWVieisvLzk5K3pjeWJPYmdtaFFPaVlXQ2dNQkJBd1lLVDFVYllhZnQ4emY3dmorLy9yeDQ5RzhwWXh6V2tNdUhBOEZBUUlJRXlJMFNtSjdsYTNFMk9qMS9QLzk5ZW5aeGErWGZXUk1OaU1VQ1FJQkJRNGJMRUZZY1lxanU5RGk4UHIrL3ZudjRNNjVvWWh2Vmo4ckdnMEVBUU1KRlNVNFRtYUFtYkhIMit2Mi9mLzg5T2ZXd3F1U2VXQklNeUFTQndJQkJoQWVMMFZjZFk2bnZ0UGw4dnYvL3ZqdDNzdTFuWVJxVWpzbkZ3c0VBUVFMRnlnN1VtdUVuYlhMM3UzNC92Lzc4dVRUdnFlT2RWeEVMeDBQQmdFQ0J4SWdNMGhnZVpPcnd0Ym45UHovL2ZicTI4ZXhtWDltVGpna0ZRa0RBUVFOR2lzL1ZtK0lvYm5PNGUvNS92NzY4T0xRdXFPS2NWaEJMQnNPQlFFQ0NSUWpOa3hrZnBldnh0bnE5ZjMvL1BUbzJNU3RsSHRpU2pRaUV3Z0NBUVlQSEM1RFduT01wYjNTNC9INi8vNzQ3dC9NdDUrR2JGUTlLUmdNQkFFRENoWW1PbEJwZ3B1enlkenM5LzMvKy9QbTFNQ3BrSGRlUmpFZkVBY0NBZ2NSSHpGSFhuZVJxY0RWNXZQNy8vMzM3TnpKczV1QmFGQTVKaFlLQXdFRURCa3BQVlJ0aHArM3pkL3UrUDcvK3ZIajBieWxqSE5hUWk0Y0RnVUJBZ2dUSWpWS1lueVZyY1RZNlBYOC8vMzE2ZG5GcjVaOVpFdzJJeFFKQWdFRkRoc3NRVmh4aXFPNzBPTHcrdjcrK2UvZ3pyaWhpRzVXUHlvWkRRUUJBd29WSlRoT1o0Q1pzY2piNi9iOS8vejA1OWJDcTVKNVlFZ3lJQkVIQWdFR0VCNHdSVngxajZlLzArWHkrLy8rK08zZHlyV2RnMnBTT3ljWEN3TUJCQXNYS0R4U2E0U2R0Y3ZlN2ZqKy8vdnk1Tk8rcDQ1MVhFUXZIUThHQVFJSEVpQXpTV0I1azZ2QzF1ZjAvUC85OXVyYXg3R1lmMlpPT0NRVkNRTUJCUTBhS3o5V2I0aWh1YzdoNy9uKy92cnc0cys2bzRwd1dFQXNHdzBGQVFJSkZDTTJUR1YrbDYvRzJ1cjIvZi84OU9qWHc2MlVlMkpLTkNFU0NBSUJCZzhjTGtOYWM0Mmx2ZExqOGZyLy92anUzOHkybm9Wc1ZEMHBHQXdFQVFNS0ZpWTZVR21DbTdQSjNlejMvZi83OCtYVXdLbVFkMTVHTVI4UUJ3SUNCeEVmTVVkZWQ1R3B3ZFhtOC92Ly9mZnIzTW15bW9Gb1VEa21GZ29EQVFRTUdTaytWRzJHbjdmTjMrNzUvdi82OGVQUnZLV01jbGxDTFJ3T0JRRUNDQk1pTlV0amZKV3V4TmpwOWZ6Ly9mWHAyY1d2bG4xa1REWWpFd2tDQVFVT0d5MUJXSEdMbzd2UTR2RDYvLzc1NytET3VLQ0hibFUvS2hrTkJBRURDaFVsT0U5bmdKbXh5TnZyOXYzLy9QUG4xc0dya25sZ1NESWdFUWNDQVFZUUhqQkZYWFdQcUwvVDVmTDcvLzczN2QzS3RKeURhbEU3SnhjTEF3RUVDeGdvUEZOcmhKMjF5OTd0K1A3LysvTGswNzZtam5SYlJDOGREd1lCQWdjU0lUTkpZWHFUck1MWDUvVDgvLzMyNnRySHNKaC9aazQzSkJVSkF3RUZEUm9yUUZkdmlhSzV6K0h2K2Y3KytmRGh6N3FpaVhCWFFDd2JEUVVCQXdrVUpEZE5aWDZYc01iYTZ2YjkvL3owNk5mRHJKUjdZVW8wSVJJSUFnRUdEeDB1UTF0emphYTkwdVR4K3YvKytPN2Z6TGFlaFd4VFBTa1lEQVFCQXdvV0pqcFJhWUtidE1yZDdQZisvL3Z6NWRUQXFKQjJYVVl4SGhBR0FnSUhFUjh5UjE5NGthckIxZWJ6Ky8vOTkrdmN5TEthZ1doUE9TWVdDZ01CQkF3WktqNVZiWWVndDgzZzd2bisvL3J4NDlHOHBJdHlXVUl0SEE0RkFRSUlFeUkxUzJOOGxhN0UyT24xL1AvOTllblp4YTZXZldOTE5pTVRDQUlCQlE0YkxVRlpjWXVrdTlEaThQci8vdm52NE02NG9JZHVWVDRxR1F3RUFRTUtGU1U0VDJlQW1iTEkyK3YyL2YvODgrZld3YXFTZUY5SU1pQVJCd0lDQmhBZU1FVmRkbytvdjlUbDh2di8vdmZzM2NxMG5JTnFVVHNuRndzREFRUUxHQ2c4VTJ1Rm5yYkwzdTM0L3YvNzh1VFN2cWFOZEZ0RUx4MFBCZ0VDQ0JJaE0wbGhlcE9zdzlmbjlQei8vZmJxMnNld21IOWxUVGNrRkFrREFRVU5HaXRBVjIrSm9yblA0ZS81L3Y3NThPSFB1cUtKY0ZkQUxCb05CUUVEQ1JRa04wMWxmcGV3eHRycTl2My8vUFRvMThPc2xIcGhTVFFoRWdnQ0FRWVBIUzVEVzNTTnByM1M1UEg2Ly83NDdkN010cDZGYkZNOEtCZ01CQUVEQ3hZbk9sRnBncHkweXQzczkvNy8rL0xsMUwrb2ozWmRSakFlRUFZQ0FnY1JIekpIWDNpUnFzSFY1dlA4Ly8zMzY5eklzcHFCWjA4NUpSVUtBd0VFREJrcVBsVnRoNkM0emVEdStmNy8rdkhqMGJ5a2kzSlpRaTBjRGdVQkFnZ1RJalZMWTN5VnJzWFk2Zlg4Ly96MTZkbkZycFo4WTBzMUloTUlBZ0VGRGhzdFFsbHlpNlM3MGVMdyt2LysrZTdnemJpZ2gyNVZQaW9aREFRQkF3b1ZKVGxQWjRDYXNzamI2L2Y5Ly96ejV0WEJxcEY0WDBjeUlCRUhBZ0lHRUI0d1JWMTJqNmkvMU9YeSsvLys5K3pkeXJTY2cybFJPeWNYQ3dNQkJBc1lLRHhUYTRXZXRzemU3ZmorLy92eDVOSzlwbzEwVzBRdkhROEdBUUlJRWlFMFNXRjZrNnpEMStqMC9QLzk5dXJheHJDWWZtVk5OeVFVQ1FNQkJRMGFLMEJYY0ltaXVzL2g3L24rL3ZudjRjKzZvb2x3VjBBckdnMEZBUU1KRkNRM1RXVittTERHMnVyMi9mLzg5T2pYdzZ5VGVtRkpOQ0VTQ0FJQkJnOGRMMFJiZEkybXZkTGs4ZnYvL3ZqdDNzeTJub1ZyVXp3b0dBc0VBUU1MRnljN1VXbURuTFRLM2V6My92Lzc4dVhVdjZpUGRsMUZNQjRRQmdJQ0J4RWdNa2RmZUpHcXdkWG04L3ovL2ZmcjI4aXltb0JuVHprbEZRb0RBUVFNR1NvK1ZXNkhvTGpONE83NS92LzY4T0xSdTZTTGNsbENMUnNPQlFFQ0NCTWlOVXRqZkphdXhkbnA5ZnovL1BYcDJNV3VsWHhqU3pVaUV3Z0NBUVVPSEMxQ1dYS0xwTHpSNC9INi8vNzU3dUROdUtDSGJWVStLaGtNQkFFRENoWWxPVTluZ1pxeXlOenI5LzMvL1BQbTFjR3FrWGhmUnpJZkVRY0NBZ1lRSGpCR1hYYVBxTC9VNWZMNy8vNzM3TjNLdEp5Q2FWRTZKeFlMQXdFRURCZ29QRk5zaFo2MnpON3QrUDcvK3ZIazByMm1qWFJiUXk0ZER3WUJBZ2dTSVRSSllYcVVyTVBYNlBUOC8vMzI2dHJHc0pkK1pVMDNKQlFKQXdFRkRSb3NRRmR3aWFLNnorSHcrZjcrK2UvaHo3bWlpVzlYUUNzYURRVUJBd2tVSkRkTlpYK1lzTWZhNnZiOS8vejA1OWZEckpONllVa3pJUklJQWdFR0R4MHZSRnQwamFhKzB1VHkrLy8rK08zZXk3YWVoR3RUUENnWUN3UUJBd3NYSnp0UmFvT2N0TXJkN1BmKy8vdnk1ZFMvcUk5MlhVVXdIaEFHQWdJSEVTQXlTRjk0a3FyQjF1ZnovUC85OXV2YnlMS1pnR2RQT0NVVkNnTUJCQXdaS2o1VmJvZWd1TTdnNy9uKy8vcnc0dEM3cEl0eFdVRXRHdzRGQVFJSUV5TTJTMk45bHE3RjJlbjEvZi84OWVuWXhLNlZmR05MTlNJVENBSUJCUTRjTFVKWmNvdWt2TkhqOGZyLy92bnU0TTIzb0lkdFZUNHFHUXdFQVFNS0ZpWTVUMmlCbXJMSTNPdjMvZi83OCtiVndhcVJlRjlITWg4UkJ3SUNCaEFlTVVaZGRwQ293TlRsOC92Ly92ZnMzY3EwbTRKcFVUb21GZ29EQVFRTUdDazlVMnlGbnJiTTMrNzQvdi82OGVUU3ZhYU5jMXRETGgwUEJnRUNDQkloTkVwaWU1U3N3OWZvOVB6Ly9mYnEyc2F3bDM1bFRUY2pGQWtEQVFVTkd5eEFWM0NKb3JyUDRmRDUvdjc1NytIUHVhS0piMWMvS3hvTkJRRURDUlVrTjA1bWY1aXd4OXJxOXYzLy9QVG4xOEtzazNwaFNUTWhFZ2NDQVFZUEhTOUVXM1NPcDc3VDVQTDcvLzc0N2Q3THRaMkVhMUk4S0JjTEJBRURDeGNuTzFGcWc1eTB5dDN0OS83LysvTGwwNytvajNWZFJUQWVFQVlCQWdjUklESklZSG1TcThIVzUvUDgvLzMyNjl2SXNabUFaMDg0SlJVS0F3RUVEUmtxUDFWdWg2QzR6dUR2K2Y3Lyt2RGkwTHVqaTNGWVFTMGJEZ1VCQWdrVEl6Wk1aSDJXcjhYWjZmWDkvL3oxNk5qRXJaVjhZMHMxSWhNSUFnRUZEaHd0UWxweWpLVzgwZVB4K3YvKytPN2Z6YmVmaG0xVVBpa1pEQVFCQXdvV0pqbFFhSUdhczhuYzYvZjkvL3Z6NXRYQXFaRjNYa2N4SHhFSEFnSUhFQjh4Umw1M2tLbkExT1h6Ky8vOTkremN5Yk9iZ21sUU9pWVdDZ01CQkF3WUtUMVViSVdmdHN6Zjd2aisvL3J4NDlLOXBZMXpXa011SEE4R0FRSUlFaUUwU21KN2xLM0QxK2owL1AvOTl1cmF4cStYZm1WTU5pTVVDUUlCQlEwYkxFQlljSXFqdXMvaThQcisvdm52NGM2NW9ZaHZWajhyR2cwRkFRTUpGU1E0VG1aL21MSEgydXIyL2YvODlPZld3cXVUZVdCSk15QVNCd0lCQmc4ZEwwUmNkWTZudnRQazh2di8vdmp0M3N1MW5ZUnJVandvRndzRUFRTUxGeWM3VW1xRG5iWEszZTM0L3YvNzh1WFR2NmVQZFZ4Rk1CNFFCZ0VDQnhFZ01raGdlWktyd3RibjlQei8vZmJyMjhpeG1ZQm5UamdsRlFvREFRUU5HU28vVm02SW9iak80Ty81L3Y3NjhPTFF1Nk9LY1ZoQkxCc09CUUVDQ1JRak5reGtmWmF2eGRucDlmMy8vUFhvMk1TdGxYdGlTalVpRXdnQ0FRVU9IQzVDV25PTXBielI0L0g2Ly83NDd0L050NStHYlZROUtSa01CQUVEQ2hZbU9WQm9nWnV6eWR6czkvMy8rL1BtMWNDcGtYZGVSekVmRVFjQ0FnY1FIekZHWG5lUXFjRFU1dlA3Ly8zMzdOekpzNXVDYVZBNkpoWUtBd0VFREJncFBWUnNocCszek4vdStQNy8rdkhqMHIybGpITmFReTRjRHdZQkFnZ1RJalJLWW51VXJjVFk2UFQ4Ly8zMTZ0bkdyNWQrWkV3Mkl4UUpBZ0VGRGhzc1FWaHhpcU82ME9Mdyt2NysrZS9oenJtaGlHOVdQeXNhRFFRQkF3a1ZKRGhPWm4rWnNjZmI2L2I5Ly96MDU5YkNxNU41WUVneklCSUhBZ0VHRHgwdlJGeDFqcWUrMCtUeSsvLysrTzNleTdXZGhHdFNPeWdYQ3dRQkJBc1hKenRTYW9TZHRjdmU3ZmorLy92eTVkTytwNDUxWEVVdkhoQUdBUUlIRWlBelNHQjVrcXZDMXVmMC9QLzk5dXZieDdHWmdHWk9PQ1VWQ1FNQkJBMGFLejlXYjRpaHVjN2c3L24rL3ZydzR0QzdvNHB4V0VFc0d3NEZBUUlKRkNNMlRHUjlsNi9GMmVuMS9mLzg5ZWpZeEsyVmUySktOQ0lUQ0FJQkJROGNMa05hYzR5bHZOSGo4ZnIvL3ZqdTM4eTNuNFp0VkQwcEdBd0VBUU1LRmlZNlVHaUNtN1BKM096My9mLzc4K2JWd0ttUWQxNUdNUjhSQndJQ0J4RWZNVVplZDVDcHdOWG04L3YvL2ZmczNNbXptNEpvVURvbUZnb0RBUVFNR0NrOVZHMkduN2ZNMys3NC92LzY4ZVBSdktXTWMxcERMaHdQQlFFQ0NCTWlORXBpZTVXdHhOam85ZnovL2ZYcDJjV3ZsMzFrVERZakZBa0NBUVVPR3l4QldIR0tvN3ZRNHZENi92NzU3K0RPdWFHSWIxWS9LeG9OQkFFRENSVWxPRTVtZ0pteHg5dnI5djMvL1BUbjFzS3JrbmxnU0RNZ0VnY0NBUVlRSGk5RlhIV09wNzdUNWZMNy8vNzQ3ZDdMdFoyRWFsSTdKeGNMQkFFRUN4Y29PMUpyaEoyMXk5N3QrUDcvKy9MazA3Nm5qblZjUkM4ZER3WUJBZ2NTSUROSVlIbVRxOExXNS9UOC8vMzI2dHZIc1psL1prNDRKQlVKQXdFRURSb3JQMVp2aUtHNXp1SHYrZjcrK3ZEaTBMcWppbkZZUVN3YkRnVUJBZ2tVSXpaTVpINlhyOGJaNnZYOS8vejA2TmpFclpSN1lrbzBJaE1JQWdFR0R4d3VRMXB6aktXOTB1UHgrdi8rK083ZnpMZWZobXhVUFNrWURBUUJBd29XSmpwUWFZS2JzOG5jN1BmOS8vdno1dFRBcVpCM1hrWXhIeEFIQWdJSEVSOHhSMTUza2FuQTFlYnorLy85OSt6Y3liT2JnV2hRT1NZV0NnTUJCQXdaS1QxVWJZYWZ0ODNmN3ZqKy8vcng0OUc4cFl4eldrSXVIQTRGQVFJSUV5STFTbUo4bGEzRTJPajEvUC85OWVuWnhhK1dmV1JNTmlNVUNRSUJCUTRiTEVGWWNZcWp1OURpOFByKy92bnY0TTY0b1lodVZqOHFHUTBFQVFNS0ZTVTRUbWVBbWJISTIrdjIvZi84OU9mV3dxdVNlV0JJTWlBUkJ3SUJCaEFlTUVWY2RZK252OVBsOHZ2Ly92anQzY3ExbllOcVVqc25Gd3NEQVFRTEZ5ZzhVbXVFbmJYTDN1MzQvdi83OHVUVHZxZU9kVnhFTHgwUEJnRUNCeElnTTBsZ2VaT3J3dGJuOVB6Ly9mYnEyc2V4bUg5bVRqZ2tGUWtEQVFVTkdpcy9WbStJb2JuTzRlLzUvdjc2OE9MUHVxT0tjRmhBTEJzTkJRRUNDUlFqTmt4bGZwZXZ4dHJxOXYzLy9QVG8xOE90bEh0aVNqUWhFZ2dDQVFZUEhDNURXbk9OcGIzUzQvSDYvLzc0N3QvTXRwNkZiRlE5S1JnTUJBRURDaFltT2xCcGdwdXp5ZDNzOS8zLysvUGwxTUNwa0hkZVJqRWZFQWNDQWdjUkh6RkhYbmVScWNIVjV2UDcvLzMzNjl6SnNwcUJhRkE1SmhZS0F3RUVEQmtwUGxSdGhwKzN6ZC91K2Y3Lyt2SGowYnlsakhKWlFpMGNEZ1VCQWdnVElqVkxZM3lWcnNUWTZmWDgvLzMxNmRuRnI1WjlaRXcySXhNSkFnRUZEaHN0UVZoeGk2UzcwT0x3K3YvKytlL2d6cmlnaDI1VlB5b1pEUVFCQXdvVkpUaFBaNENac2NqYjYvYjkvL3p6NTliQnE1SjVZRWd5SUJFSEFnRUdFQjR3UlYxMWo2aS8wK1h5Ky8vKzkrM2R5clNjZzJwUk95Y1hDd01CQkFzWUtEeFRhNFNkdGN2ZTdmaisvL3Z5NU5PK3BvNTBXMFF2SFE4R0FRSUlFaUV6U1dGNms2ekMxK2YwL1AvOTl1cmF4N0NZZjJaTk55UVZDUU1CQlEwYUswQlhiNG1pdWMvaDcvbisvdm53NGMrNm9vbHdWMEFzR3cwRkFRTUpGQ1EzVFdWK2w3REcydXIyL2YvODlPalh3NnlVZTJGS05DRVNDQUlCQmc4ZExrTmJjNDJtdmRMazhmci8vdmp1Mzh5Mm5vVnNVejBwR0F3RUFRTUtGaVk2VVdtQ203VEszZXozJyArXG4gICAgICAgICAgICAnL3YvNzgrWFV3S2lRZGwxR01SNFFCZ0lDQnhFZk1rZGZlSkdxd2RYbTgvdi8vZmZyM01peW1vRm9UemttRmdvREFRUU1HU28rVlcySG9MZk40Tzc1L3YvNjhlUFJ2S1NMY2xsQ0xSd09CUUVDQ0JNaU5VdGpmSld1eE5qcDlmei8vZlhwMmNXdWxuMWpTellqRXdnQ0FRVU9HeTFCV1hHTHBMdlE0dkQ2Ly83NTcrRE91S0NIYmxVK0toa01CQUVEQ2hVbE9FOW5nSm15eU52cjl2My8vUFBuMXNHcWtuaGZTRElnRVFjQ0FnWVFIakJGWFhhUHFML1U1Zkw3Ly83MzdOM0t0SnlEYWxFN0p4Y0xBd0VFQ3hnb1BGTnJoWjYyeTk3dCtQNy8rL0xrMHI2bWpYUmJSQzhkRHdZQkFnZ1NJVE5KWVhxVHJNUFg1L1Q4Ly8zMjZ0ckhzSmgvWlUwM0pCUUpBd0VGRFJvclFGZHZpYUs1eitIditmNysrZkRoejdxaWlYQlhRQ3dhRFFVQkF3a1VKRGROWlg2WHNNYmE2dmI5Ly96MDZOZkRySlI2WVVrMElSSUlBZ0VHRHgwdVExdDBqYWE5MHVUeCt2LysrTzNlekxhZWhXeFRQQ2dZREFRQkF3c1dKenBSYVlLY3RNcmQ3UGYrLy92eTVkUy9xSTkyWFVZd0hoQUdBZ0lIRVI4eVIxOTRrYXJCMWViei9QLzk5K3ZjeUxLYWdXZFBPU1VWQ2dNQkJBd1pLajVWYlllZ3VNM2c3dm4rLy9yeDQ5RzhwSXR5V1VJdEhBNEZBUUlJRXlJMVMyTjhsYTdGMk9uMS9QLzg5ZW5aeGE2V2ZHTkxOU0lUQ0FJQkJRNGJMVUpaY291a3U5SGk4UHIvL3ZudTRNMjRvSWR1VlQ0cUdRd0VBUU1LRlNVNVQyZUFtckxJMit2My9mLzg4K2JWd2FxUmVGOUhNaUFSQndJQ0JoQWVNRVZkZG8rb3Y5VGw4dnYvL3ZmczNjcTBuSU5wVVRzbkZ3c0RBUVFMR0NnOFUydUZucmJNM3UzNC92Lzc4ZVRTdmFhTmRGdEVMeDBQQmdFQ0NCSWhORWxoZXBPc3c5Zm85UHovL2ZicTJzYXdtSDVsVFRja0ZBa0RBUVVOR2l0QVYzQ0pvcnJQNGUvNS92NzU3K0hQdXFLSmNGZEFLeG9OQlFFRENSUWtOMDFsZnBpd3h0cnE5djMvL1BUbzE4T3NrM3BoU1RRaEVnZ0NBUVlQSFM5RVczU05wcjNTNVBINy8vNzQ3ZDdNdHA2RmExTThLQmdMQkFFREN4Y25PMUZwZzV5MHl0M3M5LzcvKy9MbDFMK29qM1pkUlRBZUVBWUNBZ2NSSURKSFgzaVJxc0hWNXZQOC8vMzM2OXZJc3BxQVowODVKUlVLQXdFRURCa3FQbFZ1aDZDNHplRHUrZjcvK3ZEaTBidWtpM0paUWkwYkRnVUJBZ2dUSWpWTFkzeVdyc1haNmZYOC8vejE2ZGpGcnBWOFkwczFJaE1JQWdFRkRod3RRbGx5aTZTODBlUHgrdi8rK2U3Z3piaWdoMjFWUGlvWkRBUUJBd29XSlRsUFo0R2Fzc2pjNi9mOS8veno1dFhCcXBGNFgwY3lIeEVIQWdJR0VCNHdSbDEyajZpLzFPWHkrLy8rOSt6ZHlyU2NnbWxST2ljV0N3TUJCQXdZS0R4VGJJV2V0c3plN2ZqKy8vcng1Tks5cG8xMFcwTXVIUThHQVFJSUVpRTBTV0Y2bEt6RDErajAvUC85OXVyYXhyQ1hmbVZOTnlRVUNRTUJCUTBhTEVCWGNJbWl1cy9oOFBuKy92bnY0Yys1b29sdlYwQXJHZzBGQVFNSkZDUTNUV1YvbUxESDJ1cjIvZi84OU9mWHc2eVRlbUZKTXlFU0NBSUJCZzhkTDBSYmRJMm12dExrOHZ2Ly92anQzc3Uybm9SclV6d29HQXNFQVFNTEZ5YzdVV3FEbkxUSzNlejMvdi83OHVYVXY2aVBkbDFGTUI0UUJnSUNCeEVnTWtoZmVKS3F3ZGJuOC96Ly9mYnIyOGl5bVlCblR6Z2xGUW9EQVFRTUdTbytWVzZIb0xqTzRPLzUvdi82OE9MUXU2U0xjVmxCTFJzT0JRRUNDQk1qTmt0amZaYXV4ZG5wOWYzLy9QWHAyTVN1bFh4alN6VWlFd2dDQVFVT0hDMUNXWEtMcEx6UjQvSDYvLzc1N3VETnQ2Q0diVlUrS2hrTUJBRURDaFltT1U5b2dacXl5TnpyOS8zLysvUG0xY0dxa1hoZlJ6SWZFUWNDQWdZUUhqRkdYWGFRcU1EVTVmUDcvLzczN04zS3RKdUNhVkU2SmhZS0F3RUVEQmdwUFZOc2haNjJ6Ti91K1A3Lyt2SGswcjJtalhOYlF5NGREd1lCQWdnU0lUUktZbnVVck1QWDZQVDgvLzMyNnRyR3NKZCtaVTAzSXhRSkF3RUZEUnNzUUZkd2lhSzZ6K0h3K2Y3KytlL2h6N21paVc5V1B5c2FEUVVCQXdrVkpEZE9abitZc01mYTZ2YjkvL3owNTlmQ3JKTjZZVWt6SVJJSEFnRUdEeDB2UkZ0MGpxZSswK1R5Ky8vKytPM2V5N1dkaEd0U1BDZ1hDd1FCQXdzWEp6dFJhb09jdE1yZDdmZisvL3Z5NWRPL3FJOTFYRVV3SGhBR0FRSUhFU0F5U0dCNWtxdkIxdWZ6L1AvOTl1dmJ5TEdaZ0dkUE9DVVZDZ01CQkEwWktqOVZib2VndU03ZzcvbisvL3J3NHRDN280dHhXRUV0R3c0RkFRSUpFeU0yVEdSOWxxL0YyZW4xL2YvODllall4SzJWZkdOTE5TSVRDQUlCQlE0Y0xVSmFjb3lsdk5Iajhmci8vdmp1MzgyM240WnRWRDRwR1F3RUFRTUtGaVk1VUdpQm1yUEozT3YzL2YvNzgrYlZ3S21SZDE1SE1SOFJCd0lDQnhBZk1VWmVkNUNwd05UbDgvdi8vZmZzM01tem00SnBVRG9tRmdvREFRUU1HQ2s5Vkd5Rm43Yk0zKzc0L3YvNjhlUFN2YVdOYzFwRExod1BCZ0VDQ0JJaE5FcGllNVN0dzlmbzlQei8vZmJxMnNhdmwzNWxURFlqRkFrQ0FRVU5HeXhBV0hDS283clA0dkQ2L3Y3NTcrSE91YUdJYjFZL0t4b05CUUVEQ1JVa09FNW1mNWl4eDlycTl2My8vUFRuMXNLcmszbGdTVE1nRWdjQ0FRWVBIUzlFWEhXT3A3N1Q1UEw3Ly83NDdkN0x0WjJFYTFJOEtCY0xCQUVEQ3hjbk8xSnFnNTIxeXQzdCtQNy8rL0xsMDcrbmozVmNSVEFlRUFZQkFnY1JJREpJWUhtU3E4TFc1L1Q4Ly8zMjY5dklzWm1BWjA0NEpSVUtBd0VFRFJrcVAxWnVpS0c0enVEditmNysrdkRpMEx1amluRllRU3diRGdVQkFna1VJelpNWkgyV3I4WFo2Zlg5Ly96MTZOakVyWlY3WWtvMUloTUlBZ0VGRGh3dVFscHpqS1c4MGVQeCt2LysrTzdmemJlZmhtMVVQU2taREFRQkF3b1dKamxRYUlHYnM4bmM3UGY5Ly92ejV0WEFxWkYzWGtjeEh4RUhBZ0lIRUI4eFJsNTNrS25BMU9ieisvLzk5K3pjeWJPYmdtbFFPaVlXQ2dNQkJBd1lLVDFVYklhZnQ4emY3dmorLy9yeDQ5SzlwWXh6V2tNdUhBOEdBUUlJRXlJMFNtSjdsSzNFMk9qMC9QLzk5ZW5aeHErWGZtUk1OaU1VQ1FJQkJRNGJMRUZZY1lxanV0RGk4UHIrL3ZudjRjNjVvWWh2Vmo4ckdnMEVBUU1KRlNRNFRtWi9tYkhIMit2Mi9mLzg5T2ZXd3F1VGVXQklNeUFTQndJQkJnOGRMMFJjZFk2bnZ0UGs4dnYvL3ZqdDNzdTFuWVJyVWpzb0Z3c0VBUVFMRnljN1VtcUVuYlhMM3UzNC92Lzc4dVhUdnFlT2RWeEZMeDRRQmdFQ0J4SWdNMGhnZVpLcnd0Ym45UHovL2ZicjI4ZXhtWUJtVGpnbEZRa0RBUVFOR2lzL1ZtK0lvYm5PNE8vNS92NzY4T0xRdTZPS2NWaEJMQnNPQlFFQ0NSUWpOa3hrZlpldnhkbnA5ZjMvL1BYbzJNU3RsWHRpU2pRaUV3Z0NBUVVQSEM1RFduT01wYnpSNC9INi8vNzQ3dC9NdDUrR2JWUTlLUmdNQkFFRENoWW1PbEJvZ3B1enlkenM5LzMvKy9QbTFjQ3BrSGRlUmpFZkVRY0NBZ2NSSHpGR1huZVFxY0RWNXZQNy8vMzM3TnpKczV1Q2FGQTZKaFlLQXdFRURCZ3BQVlJ0aHArM3pOL3UrUDcvK3ZIajBieWxqSE5hUXk0Y0R3VUJBZ2dUSWpSS1ludVZyY1RZNlBYOC8vMzE2ZG5GcjVkOVpFdzJJeFFKQWdFRkRoc3NRVmh4aXFPNzBPTHcrdjcrK2UvZ3pybWhpRzlXUHlzYURRUUJBd2tWSlRoT1pvQ1pzY2ZiNi9iOS8vejA1OWJDcTVKNVlFZ3pJQklIQWdFR0VCNHZSVngxanFlKzArWHkrLy8rK08zZXk3V2RoR3BTT3ljWEN3UUJCQXNYS0R0U2E0U2R0Y3ZlN2ZqKy8vdnk1Tk8rcDQ1MVhFUXZIUThHQVFJSEVpQXpTR0I1azZ2QzF1ZjAvUC85JztcbiAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgIH0gXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEaWFsb2cgKHRpdGxlLCBtZXNzYWdlLCBidXR0b25zLCBhZGRJbnB1dCwgZGVmYXVsdFRleHQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkbGdXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRsZ1dyYXAuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBkbGdXcmFwLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBkbGdXcmFwLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgZGxnV3JhcC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLDAsMCwwLjI1KSc7XG4gICAgICAgIGRsZ1dyYXAuc3R5bGUuekluZGV4ID0gJzEwMDAwMCc7XG4gICAgICAgIGRsZ1dyYXAuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICBkbGdXcmFwLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICAgIGRsZ1dyYXAuc3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgICBkbGdXcmFwLnN0eWxlLnBhZGRpbmcgPSAnMCc7XG5cbiAgICAgICAgdmFyIGRsZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkbGcuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICBkbGcuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XG4gICAgICAgIGRsZy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuICAgICAgICBkbGcuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICBkbGcuc3R5bGUubGluZUhlaWdodCA9ICcyJztcblxuICAgICAgICBkbGcuc3R5bGUudG9wID0gJzUwJSc7IC8vIGNlbnRlciB2ZXJ0aWNhbGx5XG4gICAgICAgIGRsZy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtNTAlKSc7XG4gICAgICAgIGRsZy5zdHlsZS5tYXJnaW4gPSAnMHB4IDMwJSc7XG4gICAgICAgIGRsZy5zdHlsZS5wYWRkaW5nID0gJzEwcHgnO1xuICAgICAgICBkbGcuc3R5bGUuYm94U2hhZG93ID0gJzJweCAycHggNXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMiknO1xuICAgICAgICBkbGcuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzJweCc7XG5cbiAgICAgICAgdmFyIHRpdGxlU3R5bGUgPSAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMnB4OyBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMnB4OyBwb3NpdGlvbjogcmVsYXRpdmU7IGJhY2tncm91bmQtY29sb3I6ICMwM2E5ZjQ7IGNvbG9yOiAjZmZmOyBmb250LXNpemU6IDE2cHg7IHBhZGRpbmc6IDdweCAxMHB4OyBoZWlnaHQ6IDI0cHg7IHRleHQtdHJhbnNmb3JtOiBub25lOyBmb250LWZhbWlseTogXFwnSGVsdmV0aWNhIE5ldWVcXCcsIFxcJ1JvYm90b1xcJywgXFwnU2Vnb2UgVUlcXCcsIFxcJ3NhbnMtc2VyaWZcXCc7IGxpbmUtaGVpZ2h0OiAyNHB4Oyc7XG4gICAgICAgIC8vIG5lZWRlZCB0byByZW1vdmUgd2hpdGUgbGluZSBhdCB0aGUgdG9wIG9mIHRoZSB0aXRsZSBjb250YWluZXJcbiAgICAgICAgaWYgKGFkZElucHV0KSB7XG4gICAgICAgICAgICB0aXRsZVN0eWxlICs9ICdtYXJnaW46IC0xMXB4IC0xMHB4IC0xMHB4Oyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZVN0eWxlICs9ICdtYXJnaW46IC0xMHB4Oyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkaWFsb2cgbGF5b3V0IHRlbXBsYXRlXG4gICAgICAgIHZhciBkbGdIdG1sID0gJzxzZWN0aW9uIGlkPVwibGJsLXRpdGxlXCIgc3R5bGU9XCInICsgdGl0bGVTdHlsZSArICdcIj48L3NlY3Rpb24+JyArXG4gICAgICAgICc8c2VjdGlvbiBpZD1cImxibC1tZXNzYWdlXCIgc3R5bGU9XCJjb2xvcjogIzNjOGI5ZTsgdGV4dC10cmFuc2Zvcm06IG5vbmU7IGZvbnQtc2l6ZTogMTRweDsgbWFyZ2luOiAyMHB4IDAgMCAwOyBmb250LWZhbWlseTogXFwnSGVsdmV0aWNhIE5ldWVcXCcsIFxcJ1JvYm90b1xcJywgXFwnU2Vnb2UgVUlcXCcsIFxcJ3NhbnMtc2VyaWZcXCc7XCI+PC9zZWN0aW9uPic7XG5cbiAgICAgICAgaWYgKGFkZElucHV0KSB7XG4gICAgICAgICAgICBkbGdIdG1sICs9ICc8aW5wdXQgaWQ9XCJwcm9tcHQtaW5wdXRcIiBzdHlsZT1cIndpZHRoOiA5Ny41JTsgYm9yZGVyOiAxcHggc29saWQgI2QzZDNkMzsgZm9udC13ZWlnaHQ6IG5vcm1hbDsgY29sb3I6ICM1NTU7IHBhZGRpbmc6IDElO1wiLz4nO1xuICAgICAgICB9XG4gICAgICAgIGRsZy5pbm5lckhUTUwgPSBkbGdIdG1sO1xuXG4gICAgICAgIGRsZy5xdWVyeVNlbGVjdG9yKCcjbGJsLXRpdGxlJykuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGl0bGUpKTtcbiAgICAgICAgZGxnLnF1ZXJ5U2VsZWN0b3IoJyNsYmwtbWVzc2FnZScpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG1lc3NhZ2UpKTtcbiAgICAgICAgaWYgKGFkZElucHV0KSB7XG4gICAgICAgICAgICBkbGcucXVlcnlTZWxlY3RvcignI3Byb21wdC1pbnB1dCcpLnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBkZWZhdWx0VGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlQnV0dG9uQ2FsbGJhY2soaWR4KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkbGcucXVlcnlTZWxlY3RvcignI3Byb21wdC1pbnB1dCcpLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkbGdXcmFwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGxnV3JhcCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSwgeyBpbnB1dDE6IHZhbHVlLCBidXR0b25JbmRleDogaWR4IH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsIGlkeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkQnV0dG9uKGlkeCwgbGFiZWwpIHtcbiAgICAgICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5mbG9hdCA9ICdyaWdodCc7XG4gICAgICAgICAgICBidXR0b24uc3R5bGUubWluV2lkdGggPSAnMTEycHgnO1xuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS56b29tID0gJzEnO1xuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmZvbnRGYW1pbHkgPSAnXFwnSGVsdmV0aWNhIE5ldWVcXCcsIFxcJ1JvYm90b1xcJywgXFwnU2Vnb2UgVUlcXCcsIFxcJ3NhbnMtc2VyaWZcXCcnO1xuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLm92ZXJmbG93ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2QzZDNkMyc7XG4gICAgICAgICAgICBidXR0b24uc3R5bGUuYmFja2dyb3VuZCA9ICcjZTZlNmU2JztcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XG4gICAgICAgICAgICBidXR0b24uc3R5bGUuY29sb3IgPSAnIzU1NSc7XG4gICAgICAgICAgICBidXR0b24uc3R5bGUubWFyZ2luID0gJzEwcHggMCAxMHB4IDEwcHgnO1xuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5mb250U2l6ZSA9ICcxNHB4JztcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5taW5IZWlnaHQgPSAnMzBweCc7XG4gICAgICAgICAgICBidXR0b24udGFiSW5kZXggPSBpZHg7XG4gICAgICAgICAgICBidXR0b24ub25jbGljayA9IG1ha2VCdXR0b25DYWxsYmFjayhpZHggKyAxKTtcbiAgICAgICAgICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYWJlbCkpO1xuICAgICAgICAgICAgZGxnLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXZlcnNlIG9yZGVyIGlzIHVzZWQgc2luY2Ugd2UgYWxpZ24gYnV0dG9ucyB0byB0aGUgcmlnaHRcbiAgICAgICAgZm9yICh2YXIgaWR4ID0gYnV0dG9ucy5sZW5ndGggLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgIGFkZEJ1dHRvbihpZHgsIGJ1dHRvbnNbaWR4XSk7XG4gICAgICAgIH1cblxuICAgICAgICBkbGdXcmFwLmFwcGVuZENoaWxkKGRsZyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGxnV3JhcCk7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIGlucHV0IGZpZWxkIGlzIHVuZGVyIGZvY3VzXG4gICAgICAgIGlmIChhZGRJbnB1dCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkbGcucXVlcnlTZWxlY3RvcignI3Byb21wdC1pbnB1dCcpLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkbGdXcmFwO1xuICAgIH1cbn07XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIEJhc2VkIG9uIEFwYWNoZSBDb3Jkb3ZhIGdlb2xvY2F0aW9uIHBsdWdpbidzIG5hdmlnYXRvci5nZW9sb2NhdGlvbiBpbXBsZW1lbnRhdGlvbi5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uL2Jsb2IvbWFzdGVyL3d3dy9nZW9sb2NhdGlvbi5qc1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCd1dGlscycpLFxuICAgIFBvc2l0aW9uRXJyb3IgPSByZXF1aXJlKCcuL1Bvc2l0aW9uRXJyb3InKSxcbiAgICBQb3NpdGlvbiA9IHJlcXVpcmUoJy4vUG9zaXRpb24nKTtcblxudmFyIHRpbWVycyA9IHt9OyAgIC8vIGxpc3Qgb2YgdGltZXJzIGluIHVzZVxuXG4vLyBSZXR1cm5zIGRlZmF1bHQgcGFyYW1zLCBvdmVycmlkZXMgaWYgcHJvdmlkZWQgd2l0aCB2YWx1ZXNcbmZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVycyhvcHRpb25zKSB7XG4gICAgdmFyIG9wdCA9IHtcbiAgICAgICAgbWF4aW11bUFnZTogMCxcbiAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiBmYWxzZSxcbiAgICAgICAgdGltZW91dDogSW5maW5pdHlcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4aW11bUFnZSAhPT0gdW5kZWZpbmVkICYmICFpc05hTihvcHRpb25zLm1heGltdW1BZ2UpICYmIG9wdGlvbnMubWF4aW11bUFnZSA+IDApIHtcbiAgICAgICAgICAgIG9wdC5tYXhpbXVtQWdlID0gb3B0aW9ucy5tYXhpbXVtQWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuYWJsZUhpZ2hBY2N1cmFjeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHQuZW5hYmxlSGlnaEFjY3VyYWN5ID0gb3B0aW9ucy5lbmFibGVIaWdoQWNjdXJhY3k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudGltZW91dCAhPT0gdW5kZWZpbmVkICYmICFpc05hTihvcHRpb25zLnRpbWVvdXQpKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy50aW1lb3V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9wdC50aW1lb3V0ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0LnRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0O1xufVxuXG4vLyBSZXR1cm5zIGEgdGltZW91dCBmYWlsdXJlLCBjbG9zZWQgb3ZlciBhIHNwZWNpZmllZCB0aW1lb3V0IHZhbHVlIGFuZCBlcnJvciBjYWxsYmFjay5cbmZ1bmN0aW9uIGNyZWF0ZVRpbWVvdXQoZXJyb3JDYWxsYmFjaywgdGltZW91dCkge1xuICAgIHZhciB0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0KTtcbiAgICAgICAgdCA9IG51bGw7XG4gICAgICAgIGVycm9yQ2FsbGJhY2soe1xuICAgICAgICAgICAgY29kZTogUG9zaXRpb25FcnJvci5USU1FT1VULFxuICAgICAgICAgICAgbWVzc2FnZTogJ1Bvc2l0aW9uIHJldHJpZXZhbCB0aW1lZCBvdXQuJ1xuICAgICAgICB9KTtcbiAgICB9LCB0aW1lb3V0KTtcbiAgICByZXR1cm4gdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWVzc2FnZXMsIGV4ZWMpIHtcbiAgICB2YXIgZ2VvbG9jYXRpb24gPSB7XG4gICAgICAgIGxhc3RQb3NpdGlvbjogbnVsbCwgLy8gcmVmZXJlbmNlIHRvIGxhc3Qga25vd24gKGNhY2hlZCkgcG9zaXRpb24gcmV0dXJuZWRcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXN5bmNocm9ub3VzbHkgYWNxdWlyZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Y2Nlc3NDYWxsYmFjayAgICBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBwb3NpdGlvbiBkYXRhIGlzIGF2YWlsYWJsZVxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvckNhbGxiYWNrICAgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGVyZSBpcyBhbiBlcnJvciBnZXR0aW5nIHRoZSBoZWFkaW5nIHBvc2l0aW9uLiAoT1BUSU9OQUwpXG4gICAgICAgICAqIEBwYXJhbSB7UG9zaXRpb25PcHRpb25zfSBvcHRpb25zICAgICBUaGUgb3B0aW9ucyBmb3IgZ2V0dGluZyB0aGUgcG9zaXRpb24gZGF0YS4gKE9QVElPTkFMKVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcGFyc2VQYXJhbWV0ZXJzKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBUaW1lciB2YXIgdGhhdCB3aWxsIGZpcmUgYW4gZXJyb3IgY2FsbGJhY2sgaWYgbm8gcG9zaXRpb24gaXMgcmV0cmlldmVkIGZyb20gbmF0aXZlXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIFwidGltZW91dFwiIHBhcmFtIHByb3ZpZGVkIGV4cGlyZXNcbiAgICAgICAgICAgIHZhciB0aW1lb3V0VGltZXIgPSB7dGltZXI6IG51bGx9O1xuXG4gICAgICAgICAgICB2YXIgd2luID0gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFRpbWVyLnRpbWVyKTtcbiAgICAgICAgICAgICAgICBpZiAoISh0aW1lb3V0VGltZXIudGltZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRpbWVvdXQgYWxyZWFkeSBoYXBwZW5lZCwgb3IgbmF0aXZlIGZpcmVkIGVycm9yIGNhbGxiYWNrIGZvclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGdlbyByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBjb250aW51ZSB3aXRoIHN1Y2Nlc3MgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IG5ldyBQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHAubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHAubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGU6IHAuYWx0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1cmFjeTogcC5hY2N1cmFjeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRpbmc6IHAuaGVhZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5OiBwLnZlbG9jaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGVBY2N1cmFjeTogcC5hbHRpdHVkZUFjY3VyYWN5XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChwLnRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkID8gbmV3IERhdGUoKSA6ICgocC50aW1lc3RhbXAgaW5zdGFuY2VvZiBEYXRlKSA/IHAudGltZXN0YW1wIDogbmV3IERhdGUocC50aW1lc3RhbXApKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGdlb2xvY2F0aW9uLmxhc3RQb3NpdGlvbiA9IHBvcztcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socG9zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZmFpbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRUaW1lci50aW1lcik7XG4gICAgICAgICAgICAgICAgdGltZW91dFRpbWVyLnRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IFBvc2l0aW9uRXJyb3IoZS5jb2RlLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDaGVjayBvdXIgY2FjaGVkIHBvc2l0aW9uLCBpZiBpdHMgdGltZXN0YW1wIGRpZmZlcmVuY2Ugd2l0aCBjdXJyZW50IHRpbWUgaXMgbGVzcyB0aGFuIHRoZSBtYXhpbXVtQWdlLCB0aGVuIGp1c3RcbiAgICAgICAgICAgIC8vIGZpcmUgdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgd2l0aCB0aGUgY2FjaGVkIHBvc2l0aW9uLlxuICAgICAgICAgICAgaWYgKGdlb2xvY2F0aW9uLmxhc3RQb3NpdGlvbiAmJiBvcHRpb25zLm1heGltdW1BZ2UgJiYgKCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gZ2VvbG9jYXRpb24ubGFzdFBvc2l0aW9uLnRpbWVzdGFtcC5nZXRUaW1lKCkpIDw9IG9wdGlvbnMubWF4aW11bUFnZSkpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soZ2VvbG9jYXRpb24ubGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY2FjaGVkIHBvc2l0aW9uIGNoZWNrIGZhaWxlZCBhbmQgdGhlIHRpbWVvdXQgd2FzIHNldCB0byAwLCBlcnJvciBvdXQgd2l0aCBhIFRJTUVPVVQgZXJyb3Igb2JqZWN0LlxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmYWlsKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogUG9zaXRpb25FcnJvci5USU1FT1VULFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAndGltZW91dCB2YWx1ZSBpbiBQb3NpdGlvbk9wdGlvbnMgc2V0IHRvIDAgYW5kIG5vIGNhY2hlZCBQb3NpdGlvbiBvYmplY3QgYXZhaWxhYmxlLCBvciBjYWNoZWQgUG9zaXRpb24gb2JqZWN0XFwncyBhZ2UgZXhjZWVkcyBwcm92aWRlZCBQb3NpdGlvbk9wdGlvbnMubWF4aW11bUFnZSBwYXJhbWV0ZXIuJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBoYXZlIHRvIGNhbGwgaW50byBuYXRpdmUgdG8gcmV0cmlldmUgYSBwb3NpdGlvbi5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudGltZW91dCAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHRpbWVvdXQgdmFsdWUgd2FzIG5vdCBzZXQgdG8gSW5maW5pdHkgKGRlZmF1bHQpLCB0aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCB1cCBhIHRpbWVvdXQgZnVuY3Rpb24gdGhhdCB3aWxsIGZpcmUgdGhlIGVycm9yIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vIHN1Y2Nlc3NmdWwgcG9zaXRpb24gd2FzIHJldHJpZXZlZCBiZWZvcmUgdGltZW91dCBleHBpcmVkLlxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0VGltZXIudGltZXIgPSBjcmVhdGVUaW1lb3V0KGZhaWwsIG9wdGlvbnMudGltZW91dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBoZXJlIHNvIHRoZSBjaGVjayBpbiB0aGUgd2luIGZ1bmN0aW9uIGRvZXNuJ3QgbWVzcyBzdHVmZiB1cFxuICAgICAgICAgICAgICAgICAgICAvLyBtYXkgc2VlbSB3ZWlyZCBidXQgdGhpcyBndWFyYW50ZWVzIHRpbWVvdXRUaW1lciBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgdHJ1dGh5IGJlZm9yZSB3ZSBjYWxsIGludG8gbmF0aXZlXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXRUaW1lci50aW1lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4ZWMod2luLCBmYWlsLCAnR2VvbG9jYXRpb24nLCAnZ2V0TG9jYXRpb24nLCBbb3B0aW9ucy5lbmFibGVIaWdoQWNjdXJhY3ksIG9wdGlvbnMubWF4aW11bUFnZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRpbWVvdXRUaW1lcjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzeW5jaHJvbm91c2x5IHdhdGNoZXMgdGhlIGdlb2xvY2F0aW9uIGZvciBjaGFuZ2VzIHRvIGdlb2xvY2F0aW9uLiAgV2hlbiBhIGNoYW5nZSBvY2N1cnMsXG4gICAgICAgICAqIHRoZSBzdWNjZXNzQ2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggdGhlIG5ldyBsb2NhdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VjY2Vzc0NhbGxiYWNrICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIGVhY2ggdGltZSB0aGUgbG9jYXRpb24gZGF0YSBpcyBhdmFpbGFibGVcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3JDYWxsYmFjayAgICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3IgZ2V0dGluZyB0aGUgbG9jYXRpb24gZGF0YS4gKE9QVElPTkFMKVxuICAgICAgICAgKiBAcGFyYW0ge1Bvc2l0aW9uT3B0aW9uc30gb3B0aW9ucyAgICAgVGhlIG9wdGlvbnMgZm9yIGdldHRpbmcgdGhlIGxvY2F0aW9uIGRhdGEgc3VjaCBhcyBmcmVxdWVuY3kuIChPUFRJT05BTClcbiAgICAgICAgICogQHJldHVybiBTdHJpbmcgICAgICAgICAgICAgICAgICAgICAgIFRoZSB3YXRjaCBpZCB0aGF0IG11c3QgYmUgcGFzc2VkIHRvICNjbGVhcldhdGNoIHRvIHN0b3Agd2F0Y2hpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB3YXRjaFBvc2l0aW9uOiBmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcGFyc2VQYXJhbWV0ZXJzKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICB2YXIgaWQgPSB1dGlscy5jcmVhdGVVVUlEKCk7XG5cbiAgICAgICAgICAgIC8vIFRlbGwgZGV2aWNlIHRvIGdldCBhIHBvc2l0aW9uIEFTQVAsIGFuZCBhbHNvIHJldHJpZXZlIGEgcmVmZXJlbmNlIHRvIHRoZSB0aW1lb3V0IHRpbWVyIGdlbmVyYXRlZCBpbiBnZXRDdXJyZW50UG9zaXRpb25cbiAgICAgICAgICAgIHRpbWVyc1tpZF0gPSBnZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgdmFyIGZhaWwgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnNbaWRdLnRpbWVyKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IFBvc2l0aW9uRXJyb3IoZS5jb2RlLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgd2luID0gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJzW2lkXS50aW1lcik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudGltZW91dCAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZXJzW2lkXS50aW1lciA9IGNyZWF0ZVRpbWVvdXQoZmFpbCwgb3B0aW9ucy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IG5ldyBQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHAubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHAubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGU6IHAuYWx0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1cmFjeTogcC5hY2N1cmFjeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRpbmc6IHAuaGVhZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5OiBwLnZlbG9jaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0aXR1ZGVBY2N1cmFjeTogcC5hbHRpdHVkZUFjY3VyYWN5XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChwLnRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkID8gbmV3IERhdGUoKSA6ICgocC50aW1lc3RhbXAgaW5zdGFuY2VvZiBEYXRlKSA/IHAudGltZXN0YW1wIDogbmV3IERhdGUocC50aW1lc3RhbXApKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGdlb2xvY2F0aW9uLmxhc3RQb3NpdGlvbiA9IHBvcztcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socG9zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGV4ZWMod2luLCBmYWlsLCAnR2VvbG9jYXRpb24nLCAnYWRkV2F0Y2gnLCBbaWQsIG9wdGlvbnMuZW5hYmxlSGlnaEFjY3VyYWN5XSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsZWFycyB0aGUgc3BlY2lmaWVkIGhlYWRpbmcgd2F0Y2guXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAgICAgICBUaGUgSUQgb2YgdGhlIHdhdGNoIHJldHVybmVkIGZyb20gI3dhdGNoUG9zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyV2F0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgaWYgKGlkICYmIHRpbWVyc1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnNbaWRdLnRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aW1lcnNbaWRdLnRpbWVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZXhlYyhudWxsLCBudWxsLCAnR2VvbG9jYXRpb24nLCAnY2xlYXJXYXRjaCcsIFtpZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldFBlcm1pc3Npb246IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsLCBhcmdzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmF2aWdhdG9yOiB7XG4gICAgICAgICAgICBnZW9sb2NhdGlvbjogZ2VvbG9jYXRpb25cbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1lc3NhZ2VzKSB7XG4gICAgdmFyIEJyb3dzZXIgPSByZXF1aXJlKCcuL2luYXBwLWJyb3dzZXInKSxcbiAgICAgICAgaW5zdGFuY2U7XG5cbiAgICBtZXNzYWdlcy5jYWxsKCdpbkFwcEJyb3dzZXJTZWxlY3RlZCcpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgQnJvd3Nlci5zZXREZWZhdWx0SW5BcHBCcm93c2VyKHZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICBtZXNzYWdlcy5vbignaW5hcHBicm93c2VyLXNlbGVjdGVkJywgZnVuY3Rpb24gKGV2ZW50LCB2YWx1ZSkge1xuICAgICAgICBCcm93c2VyLnNldERlZmF1bHRJbkFwcEJyb3dzZXIodmFsdWUpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZXhlY3V0ZShmbk5hbWUpIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZuID0gaW5zdGFuY2VbZm5OYW1lXSxcbiAgICAgICAgICAgIGFyZ3M7XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGFyZ3VtZW50cykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IHNpbmNlIGl0IGlzIHRoZSBcImZuTmFtZVwiIHBhcmFtZXRlclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNoaWZ0LmFwcGx5KGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAnSW5BcHBCcm93c2VyJzoge1xuICAgICAgICAgICAgJ29wZW4nOiBmdW5jdGlvbiAoc3VjY2VzcywgZmFpbCwgYXJncykge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gQnJvd3Nlci5jcmVhdGUoc3VjY2VzcywgZmFpbCwgYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3Nob3cnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZSgnc2hvdycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdjbG9zZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBleGVjdXRlKCdjbG9zZScpO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnaW5qZWN0U2NyaXB0Q29kZSc6IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZSgnaW5qZWN0U2NyaXB0Q29kZScsIHN1Y2Nlc3MsIGFyZ3MpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdpbmplY3RTY3JpcHRGaWxlJzogZnVuY3Rpb24gKHN1Y2Nlc3MsIGZhaWwsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICBleGVjdXRlKCdpbmplY3RTY3JpcHRGaWxlJywgc3VjY2VzcywgYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2luamVjdFN0eWxlQ29kZSc6IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZSgnaW5qZWN0U3R5bGVDb2RlJywgc3VjY2VzcywgYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2luamVjdFN0eWxlRmlsZSc6IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZSgnaW5qZWN0U3R5bGVGaWxlJywgc3VjY2VzcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gQmFzZWQgaW4gcGFydCBvbiBjb2RlIGZyb20gQXBhY2hlIFJpcHBsZSwgaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9pbmN1YmF0b3ItcmlwcGxlXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyksXG4gICAgY29uc3RhbnRzID0gcmVxdWlyZSgnc2ltLWNvbnN0YW50cycpLFxuICAgIGV2ZW50ID0gcmVxdWlyZSgnZXZlbnQnKSxcbiAgICBEQl9OQU1FID0gJ3JpcHBsZScsXG4gICAgY2FjaGUsXG4gICAgc2VsZixcbiAgICBvcGVuZGI7XG5cbi8vIFRPRE86IFRoaXMgY291bGQgdXNlIHNvbWUgcmVmYWN0b3JpbmcuLlxuXG5mdW5jdGlvbiBzYXZlVG9TdG9yYWdlKCkge1xuICAgIGxvY2FsU3RvcmFnZVtEQl9OQU1FXSA9IEpTT04uc3RyaW5naWZ5KGNhY2hlKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBbmRTZXRQcmVmaXgocHJlZml4KSB7XG4gICAgaWYgKHByZWZpeCkge1xuICAgICAgICB1dGlscy52YWxpZGF0ZUFyZ3VtZW50VHlwZShwcmVmaXgsICdzdHJpbmcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4IHx8IGNvbnN0YW50cy5DT01NT04uUFJFRklYO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoa2V5LCBwcmVmaXgpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVBbmRTZXRQcmVmaXgocHJlZml4KSArIGtleTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSXRlbShrZXksIHZhbHVlLCBwcmVmaXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogY3JlYXRlS2V5KGtleSwgcHJlZml4KSxcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcHJlZml4OiB2YWxpZGF0ZUFuZFNldFByZWZpeChwcmVmaXgpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc2F2ZShrZXksIHZhbHVlLCBwcmVmaXgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGl0ZW0gPSBjcmVhdGVJdGVtKGtleSwgdmFsdWUsIHByZWZpeCk7XG4gICAgY2FjaGVbaXRlbS5pZF0gPSBpdGVtO1xuXG4gICAgaWYgKCF3aW5kb3cub3BlbkRhdGFiYXNlKSB7XG4gICAgICAgIHNhdmVUb1N0b3JhZ2UoKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7IGNhbGxiYWNrKCk7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBvcGVuZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHR4KSB7XG4gICAgICAgICAgICB0eC5leGVjdXRlU3FsKCdSRVBMQUNFIElOVE8gcGVyc2lzdGVuY2UgKGlkLCBrZXksIHZhbHVlLCBwcmVmaXgpIFZBTFVFUyAoPywgPywgPywgPyknLCBbaXRlbS5pZCwgaXRlbS5rZXksIGl0ZW0udmFsdWUsIGl0ZW0ucHJlZml4XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmV0cmlldmUoa2V5LCBwcmVmaXgpIHtcbiAgICB2YXIgaXRlbSA9IGNhY2hlW2NyZWF0ZUtleShrZXksIHByZWZpeCldO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS52YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVBbGwocHJlZml4LCBjYWxsYmFjaykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgdXRpbHMuZm9yRWFjaChjYWNoZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUucHJlZml4ID09PSBwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbdmFsdWUua2V5XSA9IHZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2spIHsgY2FsbGJhY2socmVzdWx0KTsgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUoa2V5LCBwcmVmaXgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGlkID0gY3JlYXRlS2V5KGtleSwgcHJlZml4KTtcblxuICAgIGRlbGV0ZSBjYWNoZVtpZF07XG5cbiAgICBpZiAoIXdpbmRvdy5vcGVuRGF0YWJhc2UpIHtcbiAgICAgICAgc2F2ZVRvU3RvcmFnZSgpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHsgY2FsbGJhY2soKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG9wZW5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodHgpIHtcbiAgICAgICAgICAgIHR4LmV4ZWN1dGVTcWwoJ0RFTEVURSBGUk9NIHBlcnNpc3RlbmNlIFdIRVJFIGtleSA9ID8gQU5EIHByZWZpeCA9ID8nLCBba2V5LCB2YWxpZGF0ZUFuZFNldFByZWZpeChwcmVmaXgpXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQWxsKGNhbGxiYWNrKSB7XG4gICAgY2FjaGUgPSB7fTtcblxuICAgIGlmICghd2luZG93Lm9wZW5EYXRhYmFzZSkge1xuICAgICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0RCX05BTUVdO1xuICAgICAgICBzYXZlVG9TdG9yYWdlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3BlbmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0eCkge1xuICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnREVMRVRFIEZST00gcGVyc2lzdGVuY2UnLCBbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuc2VsZiA9IHtcbiAgICBzYXZlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgcHJlZml4LCBjYWxsYmFjaykge1xuICAgICAgICBzYXZlKGtleSwgdmFsdWUsIHByZWZpeCwgY2FsbGJhY2spO1xuICAgICAgICBldmVudC50cmlnZ2VyKCdTdG9yYWdlVXBkYXRlZEV2ZW50Jyk7XG4gICAgfSxcblxuICAgIHNhdmVPYmplY3Q6IGZ1bmN0aW9uIChrZXksIG9iaiwgcHJlZml4LCBjYWxsYmFjaykge1xuICAgICAgICBzYXZlKGtleSwgSlNPTi5zdHJpbmdpZnkob2JqKSwgcHJlZml4LCBjYWxsYmFjayk7XG4gICAgICAgIGV2ZW50LnRyaWdnZXIoJ1N0b3JhZ2VVcGRhdGVkRXZlbnQnKTtcbiAgICB9LFxuXG4gICAgcmV0cmlldmU6IGZ1bmN0aW9uIChrZXksIHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcmV0cmlldmUoa2V5LCBwcmVmaXgpO1xuICAgIH0sXG5cbiAgICByZXRyaWV2ZU9iamVjdDogZnVuY3Rpb24gKGtleSwgcHJlZml4KSB7XG4gICAgICAgIHZhciByZXRyaWV2ZWRWYWx1ZSA9IHJldHJpZXZlKGtleSwgcHJlZml4KTtcbiAgICAgICAgcmV0dXJuIHJldHJpZXZlZFZhbHVlID8gSlNPTi5wYXJzZShyZXRyaWV2ZWRWYWx1ZSkgOiByZXRyaWV2ZWRWYWx1ZTtcbiAgICB9LFxuXG4gICAgcmV0cmlldmVBbGw6IGZ1bmN0aW9uIChwcmVmaXgsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiByZXRyaWV2ZUFsbChwcmVmaXgsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5LCBwcmVmaXgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGV2ZW50LnRyaWdnZXIoJ1N0b3JhZ2VVcGRhdGVkRXZlbnQnKTtcbiAgICAgICAgcmVtb3ZlKGtleSwgcHJlZml4LCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIHJlbW92ZUFsbDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHJlbW92ZUFsbChjYWxsYmFjayk7XG4gICAgICAgIGV2ZW50LnRyaWdnZXIoJ1N0b3JhZ2VVcGRhdGVkRXZlbnQnKTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGlmICghd2luZG93Lm9wZW5EYXRhYmFzZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IGxvY2FsU3RvcmFnZVtEQl9OQU1FXTtcbiAgICAgICAgICAgICAgICBjYWNoZSA9IHN0b3JlID8gSlNPTi5wYXJzZShzdG9yZSkgOiB7fTtcbiAgICAgICAgICAgICAgICBzYXZlVG9TdG9yYWdlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWNoZSA9IHt9O1xuICAgICAgICAgICAgICAgIG9wZW5kYiA9IG9wZW5EYXRhYmFzZSgndGlueUhpcHBvcycsICcxLjAnLCAndGlueSBIaXBwb3MgcGVyc2lzdGVuY2UnLCAyICogMTAyNCAqIDEwMjQpO1xuICAgICAgICAgICAgICAgIG9wZW5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcGVyc2lzdGVuY2UgKGlkIHVuaXF1ZSwga2V5LCB2YWx1ZSwgcHJlZml4KScpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eC5leGVjdXRlU3FsKCdTRUxFQ1QgaWQsIGtleSwgdmFsdWUsIHByZWZpeCBGUk9NIHBlcnNpc3RlbmNlJywgW10sIGZ1bmN0aW9uICh0eCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IHJlc3VsdHMucm93cy5sZW5ndGgsIGksIGl0ZW07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gcmVzdWx0cy5yb3dzLml0ZW0oaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbaXRlbS5pZF0gPSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWVzc2FnZXMpIHtcbiAgICBtZXNzYWdlcy5yZWdpc3RlcignZXZlbnQnLCBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghd2luZG93LmNvcmRvdmEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdZb3UgbXVzdCBoYXZlIGNvcmRvdmEuanMgaW5jbHVkZWQgaW4geW91ciBwcm9qZWN0cywgdG8gYmUgYWJsZSB0byB0cmlnZ2VyIGV2ZW50cycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29yZG92YS5maXJlRG9jdW1lbnRFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZXZlbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBCYXNlZCBpbiBwYXJ0IG9uIGNvZGUgZnJvbSBBcGFjaGUgUmlwcGxlLCBodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2luY3ViYXRvci1yaXBwbGVcblxudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKSxcbiAgICBleGNlcHRpb24gPSByZXF1aXJlKCdleGNlcHRpb24nKSxcbiAgICBfbGlzdGVuZXJzID0ge307XG5cbmZ1bmN0aW9uIF9vbihldmVudFR5cGUsIGxpc3RlbmVyLCBzY29wZSwgb25jZSkge1xuICAgIGlmICghZXZlbnRUeXBlKSB7XG4gICAgICAgIHRocm93ICdldmVudFR5cGUgbXVzdCBiZSB0cnV0aHknO1xuICAgIH1cbiAgICBfbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBfbGlzdGVuZXJzW2V2ZW50VHlwZV0gfHwgW107XG4gICAgX2xpc3RlbmVyc1tldmVudFR5cGVdLnB1c2goe1xuICAgICAgICBmdW5jOiBsaXN0ZW5lcixcbiAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICBvbmNlOiAhIW9uY2VcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX3RyaWdnZXIobGlzdGVuZXIsIGFyZ3MsIHN5bmMpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgbGlzdGVuZXIuZnVuYy5hcHBseShsaXN0ZW5lci5zY29wZSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5mdW5jLmFwcGx5KGxpc3RlbmVyLnNjb3BlLCBhcmdzKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGV4Y2VwdGlvbi5oYW5kbGUoZSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBvbjogZnVuY3Rpb24gKGV2ZW50VHlwZSwgbGlzdGVuZXIsIHNjb3BlKSB7XG4gICAgICAgIF9vbihldmVudFR5cGUsIGxpc3RlbmVyLCBzY29wZSwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICBvbmNlOiBmdW5jdGlvbiAoZXZlbnRUeXBlLCBsaXN0ZW5lciwgc2NvcGUpIHtcbiAgICAgICAgX29uKGV2ZW50VHlwZSwgbGlzdGVuZXIsIHNjb3BlLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24gKGV2ZW50VHlwZSwgYXJncywgc3luYykge1xuICAgICAgICBhcmdzID0gYXJncyB8fCBbXTtcbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IF9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcblxuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlcihsaXN0ZW5lciwgYXJncywgc3luYyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX2xpc3RlbmVyc1tldmVudFR5cGVdID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWxpc3RlbmVyLm9uY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBldmVudEhhc1N1YnNjcmliZXI6IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcbiAgICAgICAgcmV0dXJuICEhX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuICAgIH0sXG5cbiAgICBnZXRFdmVudFN1YnNjcmliZXJzOiBmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICAgIHJldHVybiB1dGlscy5jb3B5KF9saXN0ZW5lcnNbZXZlbnRUeXBlXSkgfHwgW107XG4gICAgfSxcblxuICAgIGNsZWFyOiBmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICAgIGlmIChldmVudFR5cGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBCYXNlZCBpbiBwYXJ0IG9uIGNvZGUgZnJvbSBBcGFjaGUgUmlwcGxlLCBodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2luY3ViYXRvci1yaXBwbGVcblxuZnVuY3Rpb24gX2dldFN0YWNrKGRlcHRoKSB7XG4gICAgdmFyIGNhbGxlcixcbiAgICAgICAgc3RhY2sgPSAnJyxcbiAgICAgICAgY291bnQgPSAwO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLypqc2hpbnQgbm9hcmc6ZmFsc2UqLyAvLyBUSElTIFNIT1VMRCBOT1QgYmUgYSBjb21tb24gb2NjdXJyZW5jZS4uXG4gICAgICAgIGNhbGxlciA9IGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyLmFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO1xuXG4gICAgICAgIHdoaWxlIChjb3VudCA8PSBkZXB0aCAmJiBjYWxsZXIpIHtcbiAgICAgICAgICAgIHN0YWNrICs9ICdmdW5jdGlvbjogJyArIGNhbGxlci50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvblxccz8oLiopXFx7LylbMV0gKyAnXFxuJztcbiAgICAgICAgICAgIGNhbGxlciA9IGNhbGxlci5hcmd1bWVudHMuY2FsbGVlLmNhbGxlcjtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0YWNrID0gJ2ZhaWxlZCB0byBkZXRlcm1pbmUgc3RhY2sgdHJhY2UgKCcgKyAoZS5uYW1lIHx8IGUudHlwZSkgKyAnIDo6ICcgKyBlLm1lc3NhZ2UgKyAnKSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHR5cGVzOiB7XG4gICAgICAgIEFwcGxpY2F0aW9uOiAnQXBwbGljYXRpb24nLFxuICAgICAgICBBcmd1bWVudExlbmd0aDogJ0FyZ3VtZW50TGVuZ3RoJyxcbiAgICAgICAgQXJndW1lbnRUeXBlOiAnQXJndW1lbnRUeXBlJyxcbiAgICAgICAgQXJndW1lbnQ6ICdBcmd1bWVudCcsXG4gICAgICAgIE5vdGlmaWNhdGlvblR5cGU6ICdOb3RpZmljYXRpb25UeXBlJyxcbiAgICAgICAgTm90aWZpY2F0aW9uU3RhdGVUeXBlOiAnTm90aWZpY2F0aW9uU3RhdGVUeXBlJyxcbiAgICAgICAgRG9tT2JqZWN0Tm90Rm91bmQ6ICdEb21PYmplY3ROb3RGb3VuZCcsXG4gICAgICAgIExheW91dFR5cGU6ICdMYXlvdXRUeXBlJyxcbiAgICAgICAgRGV2aWNlTm90Rm91bmQ6ICdEZXZpY2VOb3RGb3VuZCcsXG4gICAgICAgIHRpbnlIaXBwb3NNYXNrZWRFeGNlcHRpb246ICd0aW55SGlwcG9zTWFza2VkRXhjZXB0aW9uJyxcbiAgICAgICAgR2VvOiAnR2VvJyxcbiAgICAgICAgQWNjZWxlcm9tZXRlcjogJ0FjY2VsZXJvbWV0ZXInLFxuICAgICAgICBNZXRob2ROb3RJbXBsZW1lbnRlZDogJ01ldGhvZE5vdEltcGxlbWVudGVkJyxcbiAgICAgICAgSW52YWxpZFN0YXRlOiAnSW52YWxpZFN0YXRlJyxcbiAgICAgICAgQXBwbGljYXRpb25TdGF0ZTogJ0FwcGxpY2F0aW9uU3RhdGUnXG4gICAgfSxcblxuICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV4Y2VwdGlvbiwgcmVUaHJvdykge1xuICAgICAgICByZVRocm93ID0gcmVUaHJvdyB8fCBmYWxzZTtcblxuICAgICAgICB2YXIgZU1zZyA9IGV4Y2VwdGlvbi5tZXNzYWdlIHx8ICdleGNlcHRpb24gY2F1Z2h0IScsXG4gICAgICAgICAgICBtc2cgPSBlTXNnICsgJ1xcblxcbicgKyAoZXhjZXB0aW9uLnN0YWNrIHx8ICcqbm8gc3RhY2sgcHJvdmlkZWQqJykgKyAnXFxuXFxuJztcblxuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG5cbiAgICAgICAgaWYgKHJlVGhyb3cpIHtcbiAgICAgICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByYWlzZTogZnVuY3Rpb24gcmFpc2UoZXhjZXB0aW9uVHlwZSwgbWVzc2FnZSwgY3VzdG9tRXhjZXB0aW9uT2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmogPSBjdXN0b21FeGNlcHRpb25PYmplY3QgfHwge1xuICAgICAgICAgICAgdHlwZTogJycsXG4gICAgICAgICAgICBtZXNzYWdlOiAnJyxcblxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5uYW1lICsgJzogXFwnJyArIHRoaXMubWVzc2FnZSArICdcXCcnO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgdGhpcy5zdGFjaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnJztcblxuICAgICAgICBvYmoubmFtZSA9IGV4Y2VwdGlvblR5cGU7XG4gICAgICAgIG9iai50eXBlID0gZXhjZXB0aW9uVHlwZTtcbiAgICAgICAgLy8gVE9ETzogaW5jbHVkZSB0aGUgZXhjZXB0aW9uIG9iamVjdHMgb3JpZ2luYWwgbWVzc2FnZSBpZiBleGlzdHNcbiAgICAgICAgb2JqLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBvYmouc3RhY2sgPSBfZ2V0U3RhY2soNSk7XG5cbiAgICAgICAgdGhyb3cgb2JqO1xuICAgIH1cbn07XG4iLCIvKiEgalF1ZXJ5IHYyLjEuNCB8IChjKSAyMDA1LCAyMDE1IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXG4hZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YS5kb2N1bWVudD9iKGEsITApOmZ1bmN0aW9uKGEpe2lmKCFhLmRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7cmV0dXJuIGIoYSl9OmIoYSl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPWMuc2xpY2UsZT1jLmNvbmNhdCxmPWMucHVzaCxnPWMuaW5kZXhPZixoPXt9LGk9aC50b1N0cmluZyxqPWguaGFzT3duUHJvcGVydHksaz17fSxsPWEuZG9jdW1lbnQsbT1cIjIuMS40XCIsbj1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgbi5mbi5pbml0KGEsYil9LG89L15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLHA9L14tbXMtLyxxPS8tKFtcXGRhLXpdKS9naSxyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX07bi5mbj1uLnByb3RvdHlwZT17anF1ZXJ5Om0sY29uc3RydWN0b3I6bixzZWxlY3RvcjpcIlwiLGxlbmd0aDowLHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gZC5jYWxsKHRoaXMpfSxnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWE/MD5hP3RoaXNbYSt0aGlzLmxlbmd0aF06dGhpc1thXTpkLmNhbGwodGhpcyl9LHB1c2hTdGFjazpmdW5jdGlvbihhKXt2YXIgYj1uLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSxhKTtyZXR1cm4gYi5wcmV2T2JqZWN0PXRoaXMsYi5jb250ZXh0PXRoaXMuY29udGV4dCxifSxlYWNoOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uZWFjaCh0aGlzLGEsYil9LG1hcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobi5tYXAodGhpcyxmdW5jdGlvbihiLGMpe3JldHVybiBhLmNhbGwoYixjLGIpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhkLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMubGVuZ3RoLGM9K2ErKDA+YT9iOjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhjPj0wJiZiPmM/W3RoaXNbY11dOltdKX0sZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJldk9iamVjdHx8dGhpcy5jb25zdHJ1Y3RvcihudWxsKX0scHVzaDpmLHNvcnQ6Yy5zb3J0LHNwbGljZTpjLnNwbGljZX0sbi5leHRlbmQ9bi5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZz1hcmd1bWVudHNbMF18fHt9LGg9MSxpPWFyZ3VtZW50cy5sZW5ndGgsaj0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBnJiYoaj1nLGc9YXJndW1lbnRzW2hdfHx7fSxoKyspLFwib2JqZWN0XCI9PXR5cGVvZiBnfHxuLmlzRnVuY3Rpb24oZyl8fChnPXt9KSxoPT09aSYmKGc9dGhpcyxoLS0pO2k+aDtoKyspaWYobnVsbCE9KGE9YXJndW1lbnRzW2hdKSlmb3IoYiBpbiBhKWM9Z1tiXSxkPWFbYl0sZyE9PWQmJihqJiZkJiYobi5pc1BsYWluT2JqZWN0KGQpfHwoZT1uLmlzQXJyYXkoZCkpKT8oZT8oZT0hMSxmPWMmJm4uaXNBcnJheShjKT9jOltdKTpmPWMmJm4uaXNQbGFpbk9iamVjdChjKT9jOnt9LGdbYl09bi5leHRlbmQoaixmLGQpKTp2b2lkIDAhPT1kJiYoZ1tiXT1kKSk7cmV0dXJuIGd9LG4uZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKG0rTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoYSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuXCJmdW5jdGlvblwiPT09bi50eXBlKGEpfSxpc0FycmF5OkFycmF5LmlzQXJyYXksaXNXaW5kb3c6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWEmJmE9PT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3JldHVybiFuLmlzQXJyYXkoYSkmJmEtcGFyc2VGbG9hdChhKSsxPj0wfSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCIhPT1uLnR5cGUoYSl8fGEubm9kZVR5cGV8fG4uaXNXaW5kb3coYSk/ITE6YS5jb25zdHJ1Y3RvciYmIWouY2FsbChhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcImlzUHJvdG90eXBlT2ZcIik/ITE6ITB9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7Zm9yKGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH0sdHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9hK1wiXCI6XCJvYmplY3RcIj09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGE/aFtpLmNhbGwoYSldfHxcIm9iamVjdFwiOnR5cGVvZiBhfSxnbG9iYWxFdmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGM9ZXZhbDthPW4udHJpbShhKSxhJiYoMT09PWEuaW5kZXhPZihcInVzZSBzdHJpY3RcIik/KGI9bC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpLGIudGV4dD1hLGwuaGVhZC5hcHBlbmRDaGlsZChiKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpKTpjKGEpKX0sY2FtZWxDYXNlOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UocCxcIm1zLVwiKS5yZXBsYWNlKHEscil9LG5vZGVOYW1lOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWIudG9Mb3dlckNhc2UoKX0sZWFjaDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZT0wLGY9YS5sZW5ndGgsZz1zKGEpO2lmKGMpe2lmKGcpe2Zvcig7Zj5lO2UrKylpZihkPWIuYXBwbHkoYVtlXSxjKSxkPT09ITEpYnJlYWt9ZWxzZSBmb3IoZSBpbiBhKWlmKGQ9Yi5hcHBseShhW2VdLGMpLGQ9PT0hMSlicmVha31lbHNlIGlmKGcpe2Zvcig7Zj5lO2UrKylpZihkPWIuY2FsbChhW2VdLGUsYVtlXSksZD09PSExKWJyZWFrfWVsc2UgZm9yKGUgaW4gYSlpZihkPWIuY2FsbChhW2VdLGUsYVtlXSksZD09PSExKWJyZWFrO3JldHVybiBhfSx0cmltOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1wiXCI6KGErXCJcIikucmVwbGFjZShvLFwiXCIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oYSxiKXt2YXIgYz1ifHxbXTtyZXR1cm4gbnVsbCE9YSYmKHMoT2JqZWN0KGEpKT9uLm1lcmdlKGMsXCJzdHJpbmdcIj09dHlwZW9mIGE/W2FdOmEpOmYuY2FsbChjLGEpKSxjfSxpbkFycmF5OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbnVsbD09Yj8tMTpnLmNhbGwoYixhLGMpfSxtZXJnZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0rYi5sZW5ndGgsZD0wLGU9YS5sZW5ndGg7Yz5kO2QrKylhW2UrK109YltkXTtyZXR1cm4gYS5sZW5ndGg9ZSxhfSxncmVwOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQsZT1bXSxmPTAsZz1hLmxlbmd0aCxoPSFjO2c+ZjtmKyspZD0hYihhW2ZdLGYpLGQhPT1oJiZlLnB1c2goYVtmXSk7cmV0dXJuIGV9LG1hcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZj0wLGc9YS5sZW5ndGgsaD1zKGEpLGk9W107aWYoaClmb3IoO2c+ZjtmKyspZD1iKGFbZl0sZixjKSxudWxsIT1kJiZpLnB1c2goZCk7ZWxzZSBmb3IoZiBpbiBhKWQ9YihhW2ZdLGYsYyksbnVsbCE9ZCYmaS5wdXNoKGQpO3JldHVybiBlLmFwcGx5KFtdLGkpfSxndWlkOjEscHJveHk6ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGY7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGImJihjPWFbYl0sYj1hLGE9Yyksbi5pc0Z1bmN0aW9uKGEpPyhlPWQuY2FsbChhcmd1bWVudHMsMiksZj1mdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGJ8fHRoaXMsZS5jb25jYXQoZC5jYWxsKGFyZ3VtZW50cykpKX0sZi5ndWlkPWEuZ3VpZD1hLmd1aWR8fG4uZ3VpZCsrLGYpOnZvaWQgMH0sbm93OkRhdGUubm93LHN1cHBvcnQ6a30pLG4uZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3JcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtoW1wiW29iamVjdCBcIitiK1wiXVwiXT1iLnRvTG93ZXJDYXNlKCl9KTtmdW5jdGlvbiBzKGEpe3ZhciBiPVwibGVuZ3RoXCJpbiBhJiZhLmxlbmd0aCxjPW4udHlwZShhKTtyZXR1cm5cImZ1bmN0aW9uXCI9PT1jfHxuLmlzV2luZG93KGEpPyExOjE9PT1hLm5vZGVUeXBlJiZiPyEwOlwiYXJyYXlcIj09PWN8fDA9PT1ifHxcIm51bWJlclwiPT10eXBlb2YgYiYmYj4wJiZiLTEgaW4gYX12YXIgdD1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHMsdCx1PVwic2l6emxlXCIrMSpuZXcgRGF0ZSx2PWEuZG9jdW1lbnQsdz0wLHg9MCx5PWhhKCksej1oYSgpLEE9aGEoKSxCPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1iJiYobD0hMCksMH0sQz0xPDwzMSxEPXt9Lmhhc093blByb3BlcnR5LEU9W10sRj1FLnBvcCxHPUUucHVzaCxIPUUucHVzaCxJPUUuc2xpY2UsSj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKylpZihhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sSz1cImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsTD1cIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsTT1cIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLE49TS5yZXBsYWNlKFwid1wiLFwidyNcIiksTz1cIlxcXFxbXCIrTCtcIiooXCIrTStcIikoPzpcIitMK1wiKihbKl4kfCF+XT89KVwiK0wrXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIitOK1wiKSl8KVwiK0wrXCIqXFxcXF1cIixQPVwiOihcIitNK1wiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIitPK1wiKSopfC4qKVxcXFwpfClcIixRPW5ldyBSZWdFeHAoTCtcIitcIixcImdcIiksUj1uZXcgUmVnRXhwKFwiXlwiK0wrXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiK0wrXCIrJFwiLFwiZ1wiKSxTPW5ldyBSZWdFeHAoXCJeXCIrTCtcIiosXCIrTCtcIipcIiksVD1uZXcgUmVnRXhwKFwiXlwiK0wrXCIqKFs+K35dfFwiK0wrXCIpXCIrTCtcIipcIiksVT1uZXcgUmVnRXhwKFwiPVwiK0wrXCIqKFteXFxcXF0nXFxcIl0qPylcIitMK1wiKlxcXFxdXCIsXCJnXCIpLFY9bmV3IFJlZ0V4cChQKSxXPW5ldyBSZWdFeHAoXCJeXCIrTitcIiRcIiksWD17SUQ6bmV3IFJlZ0V4cChcIl4jKFwiK00rXCIpXCIpLENMQVNTOm5ldyBSZWdFeHAoXCJeXFxcXC4oXCIrTStcIilcIiksVEFHOm5ldyBSZWdFeHAoXCJeKFwiK00ucmVwbGFjZShcIndcIixcIncqXCIpK1wiKVwiKSxBVFRSOm5ldyBSZWdFeHAoXCJeXCIrTyksUFNFVURPOm5ldyBSZWdFeHAoXCJeXCIrUCksQ0hJTEQ6bmV3IFJlZ0V4cChcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIrTCtcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiK0wrXCIqKD86KFsrLV18KVwiK0wrXCIqKFxcXFxkKyl8KSlcIitMK1wiKlxcXFwpfClcIixcImlcIiksYm9vbDpuZXcgUmVnRXhwKFwiXig/OlwiK0srXCIpJFwiLFwiaVwiKSxuZWVkc0NvbnRleHQ6bmV3IFJlZ0V4cChcIl5cIitMK1wiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIitMK1wiKigoPzotXFxcXGQpP1xcXFxkKilcIitMK1wiKlxcXFwpfCkoPz1bXi1dfCQpXCIsXCJpXCIpfSxZPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksWj0vXmhcXGQkL2ksJD0vXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLF89L14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sYWE9L1srfl0vLGJhPS8nfFxcXFwvZyxjYT1uZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIrTCtcIj98KFwiK0wrXCIpfC4pXCIsXCJpZ1wiKSxkYT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9XCIweFwiK2ItNjU1MzY7cmV0dXJuIGQhPT1kfHxjP2I6MD5kP1N0cmluZy5mcm9tQ2hhckNvZGUoZCs2NTUzNik6U3RyaW5nLmZyb21DaGFyQ29kZShkPj4xMHw1NTI5NiwxMDIzJmR8NTYzMjApfSxlYT1mdW5jdGlvbigpe20oKX07dHJ5e0guYXBwbHkoRT1JLmNhbGwodi5jaGlsZE5vZGVzKSx2LmNoaWxkTm9kZXMpLEVbdi5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZmEpe0g9e2FwcGx5OkUubGVuZ3RoP2Z1bmN0aW9uKGEsYil7Ry5hcHBseShhLEkuY2FsbChiKSl9OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5sZW5ndGgsZD0wO3doaWxlKGFbYysrXT1iW2QrK10pO2EubGVuZ3RoPWMtMX19fWZ1bmN0aW9uIGdhKGEsYixkLGUpe3ZhciBmLGgsaixrLGwsbyxyLHMsdyx4O2lmKChiP2Iub3duZXJEb2N1bWVudHx8Yjp2KSE9PW4mJm0oYiksYj1ifHxuLGQ9ZHx8W10saz1iLm5vZGVUeXBlLFwic3RyaW5nXCIhPXR5cGVvZiBhfHwhYXx8MSE9PWsmJjkhPT1rJiYxMSE9PWspcmV0dXJuIGQ7aWYoIWUmJnApe2lmKDExIT09ayYmKGY9Xy5leGVjKGEpKSlpZihqPWZbMV0pe2lmKDk9PT1rKXtpZihoPWIuZ2V0RWxlbWVudEJ5SWQoaiksIWh8fCFoLnBhcmVudE5vZGUpcmV0dXJuIGQ7aWYoaC5pZD09PWopcmV0dXJuIGQucHVzaChoKSxkfWVsc2UgaWYoYi5vd25lckRvY3VtZW50JiYoaD1iLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaikpJiZ0KGIsaCkmJmguaWQ9PT1qKXJldHVybiBkLnB1c2goaCksZH1lbHNle2lmKGZbMl0pcmV0dXJuIEguYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpKSxkO2lmKChqPWZbM10pJiZjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEguYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaikpLGR9aWYoYy5xc2EmJighcXx8IXEudGVzdChhKSkpe2lmKHM9cj11LHc9Yix4PTEhPT1rJiZhLDE9PT1rJiZcIm9iamVjdFwiIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtvPWcoYSksKHI9Yi5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk/cz1yLnJlcGxhY2UoYmEsXCJcXFxcJCZcIik6Yi5zZXRBdHRyaWJ1dGUoXCJpZFwiLHMpLHM9XCJbaWQ9J1wiK3MrXCInXSBcIixsPW8ubGVuZ3RoO3doaWxlKGwtLSlvW2xdPXMrcmEob1tsXSk7dz1hYS50ZXN0KGEpJiZwYShiLnBhcmVudE5vZGUpfHxiLHg9by5qb2luKFwiLFwiKX1pZih4KXRyeXtyZXR1cm4gSC5hcHBseShkLHcucXVlcnlTZWxlY3RvckFsbCh4KSksZH1jYXRjaCh5KXt9ZmluYWxseXtyfHxiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIGkoYS5yZXBsYWNlKFIsXCIkMVwiKSxiLGQsZSl9ZnVuY3Rpb24gaGEoKXt2YXIgYT1bXTtmdW5jdGlvbiBiKGMsZSl7cmV0dXJuIGEucHVzaChjK1wiIFwiKT5kLmNhY2hlTGVuZ3RoJiZkZWxldGUgYlthLnNoaWZ0KCldLGJbYytcIiBcIl09ZX1yZXR1cm4gYn1mdW5jdGlvbiBpYShhKXtyZXR1cm4gYVt1XT0hMCxhfWZ1bmN0aW9uIGphKGEpe3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImRpdlwiKTt0cnl7cmV0dXJuISFhKGIpfWNhdGNoKGMpe3JldHVybiExfWZpbmFsbHl7Yi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYiksYj1udWxsfX1mdW5jdGlvbiBrYShhLGIpe3ZhciBjPWEuc3BsaXQoXCJ8XCIpLGU9YS5sZW5ndGg7d2hpbGUoZS0tKWQuYXR0ckhhbmRsZVtjW2VdXT1ifWZ1bmN0aW9uIGxhKGEsYil7dmFyIGM9YiYmYSxkPWMmJjE9PT1hLm5vZGVUeXBlJiYxPT09Yi5ub2RlVHlwZSYmKH5iLnNvdXJjZUluZGV4fHxDKS0ofmEuc291cmNlSW5kZXh8fEMpO2lmKGQpcmV0dXJuIGQ7aWYoYyl3aGlsZShjPWMubmV4dFNpYmxpbmcpaWYoYz09PWIpcmV0dXJuLTE7cmV0dXJuIGE/MTotMX1mdW5jdGlvbiBtYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWMmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG5hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKFwiaW5wdXRcIj09PWN8fFwiYnV0dG9uXCI9PT1jKSYmYi50eXBlPT09YX19ZnVuY3Rpb24gb2EoYSl7cmV0dXJuIGlhKGZ1bmN0aW9uKGIpe3JldHVybiBiPStiLGlhKGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKFtdLGMubGVuZ3RoLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWNbZT1mW2ddXSYmKGNbZV09IShkW2VdPWNbZV0pKX0pfSl9ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGEmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZhfWM9Z2Euc3VwcG9ydD17fSxmPWdhLmlzWE1MPWZ1bmN0aW9uKGEpe3ZhciBiPWEmJihhLm93bmVyRG9jdW1lbnR8fGEpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4gYj9cIkhUTUxcIiE9PWIubm9kZU5hbWU6ITF9LG09Z2Euc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZSxnPWE/YS5vd25lckRvY3VtZW50fHxhOnY7cmV0dXJuIGchPT1uJiY5PT09Zy5ub2RlVHlwZSYmZy5kb2N1bWVudEVsZW1lbnQ/KG49ZyxvPWcuZG9jdW1lbnRFbGVtZW50LGU9Zy5kZWZhdWx0VmlldyxlJiZlIT09ZS50b3AmJihlLmFkZEV2ZW50TGlzdGVuZXI/ZS5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsZWEsITEpOmUuYXR0YWNoRXZlbnQmJmUuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGVhKSkscD0hZihnKSxjLmF0dHJpYnV0ZXM9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NOYW1lPVwiaVwiLCFhLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZy5jcmVhdGVDb21tZW50KFwiXCIpKSwhYS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPSQudGVzdChnLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGMuZ2V0QnlJZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gby5hcHBlbmRDaGlsZChhKS5pZD11LCFnLmdldEVsZW1lbnRzQnlOYW1lfHwhZy5nZXRFbGVtZW50c0J5TmFtZSh1KS5sZW5ndGh9KSxjLmdldEJ5SWQ/KGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRCeUlkJiZwKXt2YXIgYz1iLmdldEVsZW1lbnRCeUlkKGEpO3JldHVybiBjJiZjLnBhcmVudE5vZGU/W2NdOltdfX0sZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKGNhLGRhKTtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT1ifX0pOihkZWxldGUgZC5maW5kLklELGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShjYSxkYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUmJmEuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBjJiZjLnZhbHVlPT09Yn19KSxkLmZpbmQuVEFHPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZT9iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpOmMucXNhP2IucXVlcnlTZWxlY3RvckFsbChhKTp2b2lkIDB9OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPTAsZj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO2lmKFwiKlwiPT09YSl7d2hpbGUoYz1mW2UrK10pMT09PWMubm9kZVR5cGUmJmQucHVzaChjKTtyZXR1cm4gZH1yZXR1cm4gZn0sZC5maW5kLkNMQVNTPWMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oYSxiKXtyZXR1cm4gcD9iLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSk6dm9pZCAwfSxyPVtdLHE9W10sKGMucXNhPSQudGVzdChnLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGphKGZ1bmN0aW9uKGEpe28uYXBwZW5kQ2hpbGQoYSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK3UrXCInPjwvYT48c2VsZWN0IGlkPSdcIit1K1wiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsYS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZxLnB1c2goXCJbKl4kXT1cIitMK1wiKig/OicnfFxcXCJcXFwiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8cS5wdXNoKFwiXFxcXFtcIitMK1wiKig/OnZhbHVlfFwiK0srXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrdStcIi1dXCIpLmxlbmd0aHx8cS5wdXNoKFwifj1cIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxxLnB1c2goXCI6Y2hlY2tlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK3UrXCIrKlwiKS5sZW5ndGh8fHEucHVzaChcIi4jLitbK35dXCIpfSksamEoZnVuY3Rpb24oYSl7dmFyIGI9Zy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJoaWRkZW5cIiksYS5hcHBlbmRDaGlsZChiKS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJEXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCYmcS5wdXNoKFwibmFtZVwiK0wrXCIqWypeJHwhfl0/PVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGh8fHEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKSxxLnB1c2goXCIsLio6XCIpfSkpLChjLm1hdGNoZXNTZWxlY3Rvcj0kLnRlc3Qocz1vLm1hdGNoZXN8fG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxvLm1vek1hdGNoZXNTZWxlY3Rvcnx8by5vTWF0Y2hlc1NlbGVjdG9yfHxvLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmphKGZ1bmN0aW9uKGEpe2MuZGlzY29ubmVjdGVkTWF0Y2g9cy5jYWxsKGEsXCJkaXZcIikscy5jYWxsKGEsXCJbcyE9JyddOnhcIiksci5wdXNoKFwiIT1cIixQKX0pLHE9cS5sZW5ndGgmJm5ldyBSZWdFeHAocS5qb2luKFwifFwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSxiPSQudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx0PWJ8fCQudGVzdChvLmNvbnRhaW5zKT9mdW5jdGlvbihhLGIpe3ZhciBjPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1kfHwhKCFkfHwxIT09ZC5ub2RlVHlwZXx8IShjLmNvbnRhaW5zP2MuY29udGFpbnMoZCk6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkKSkpfTpmdW5jdGlvbihhLGIpe2lmKGIpd2hpbGUoYj1iLnBhcmVudE5vZGUpaWYoYj09PWEpcmV0dXJuITA7cmV0dXJuITF9LEI9Yj9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGQ9IWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQ/ZDooZD0oYS5vd25lckRvY3VtZW50fHxhKT09PShiLm93bmVyRG9jdW1lbnR8fGIpP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik6MSwxJmR8fCFjLnNvcnREZXRhY2hlZCYmYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKT09PWQ/YT09PWd8fGEub3duZXJEb2N1bWVudD09PXYmJnQodixhKT8tMTpiPT09Z3x8Yi5vd25lckRvY3VtZW50PT09diYmdCh2LGIpPzE6az9KKGssYSktSihrLGIpOjA6NCZkPy0xOjEpfTpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGMsZD0wLGU9YS5wYXJlbnROb2RlLGY9Yi5wYXJlbnROb2RlLGg9W2FdLGk9W2JdO2lmKCFlfHwhZilyZXR1cm4gYT09PWc/LTE6Yj09PWc/MTplPy0xOmY/MTprP0ooayxhKS1KKGssYik6MDtpZihlPT09ZilyZXR1cm4gbGEoYSxiKTtjPWE7d2hpbGUoYz1jLnBhcmVudE5vZGUpaC51bnNoaWZ0KGMpO2M9Yjt3aGlsZShjPWMucGFyZW50Tm9kZSlpLnVuc2hpZnQoYyk7d2hpbGUoaFtkXT09PWlbZF0pZCsrO3JldHVybiBkP2xhKGhbZF0saVtkXSk6aFtkXT09PXY/LTE6aVtkXT09PXY/MTowfSxnKTpufSxnYS5tYXRjaGVzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdhKGEsbnVsbCxudWxsLGIpfSxnYS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oYSxiKXtpZigoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksYj1iLnJlcGxhY2UoVSxcIj0nJDEnXVwiKSwhKCFjLm1hdGNoZXNTZWxlY3Rvcnx8IXB8fHImJnIudGVzdChiKXx8cSYmcS50ZXN0KGIpKSl0cnl7dmFyIGQ9cy5jYWxsKGEsYik7aWYoZHx8Yy5kaXNjb25uZWN0ZWRNYXRjaHx8YS5kb2N1bWVudCYmMTEhPT1hLmRvY3VtZW50Lm5vZGVUeXBlKXJldHVybiBkfWNhdGNoKGUpe31yZXR1cm4gZ2EoYixuLG51bGwsW2FdKS5sZW5ndGg+MH0sZ2EuY29udGFpbnM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksdChhLGIpfSxnYS5hdHRyPWZ1bmN0aW9uKGEsYil7KGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpO3ZhciBlPWQuYXR0ckhhbmRsZVtiLnRvTG93ZXJDYXNlKCldLGY9ZSYmRC5jYWxsKGQuYXR0ckhhbmRsZSxiLnRvTG93ZXJDYXNlKCkpP2UoYSxiLCFwKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PWY/ZjpjLmF0dHJpYnV0ZXN8fCFwP2EuZ2V0QXR0cmlidXRlKGIpOihmPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmYuc3BlY2lmaWVkP2YudmFsdWU6bnVsbH0sZ2EuZXJyb3I9ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrYSl9LGdhLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZD1bXSxlPTAsZj0wO2lmKGw9IWMuZGV0ZWN0RHVwbGljYXRlcyxrPSFjLnNvcnRTdGFibGUmJmEuc2xpY2UoMCksYS5zb3J0KEIpLGwpe3doaWxlKGI9YVtmKytdKWI9PT1hW2ZdJiYoZT1kLnB1c2goZikpO3doaWxlKGUtLSlhLnNwbGljZShkW2VdLDEpfXJldHVybiBrPW51bGwsYX0sZT1nYS5nZXRUZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9XCJcIixkPTAsZj1hLm5vZGVUeXBlO2lmKGYpe2lmKDE9PT1mfHw5PT09Znx8MTE9PT1mKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYS50ZXh0Q29udGVudClyZXR1cm4gYS50ZXh0Q29udGVudDtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpYys9ZShhKX1lbHNlIGlmKDM9PT1mfHw0PT09ZilyZXR1cm4gYS5ub2RlVmFsdWV9ZWxzZSB3aGlsZShiPWFbZCsrXSljKz1lKGIpO3JldHVybiBjfSxkPWdhLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmlhLG1hdGNoOlgsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnJlcGxhY2UoY2EsZGEpLGFbM109KGFbM118fGFbNF18fGFbNV18fFwiXCIpLnJlcGxhY2UoY2EsZGEpLFwifj1cIj09PWFbMl0mJihhWzNdPVwiIFwiK2FbM10rXCIgXCIpLGEuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1hWzFdLnNsaWNlKDAsMyk/KGFbM118fGdhLmVycm9yKGFbMF0pLGFbNF09KyhhWzRdP2FbNV0rKGFbNl18fDEpOjIqKFwiZXZlblwiPT09YVszXXx8XCJvZGRcIj09PWFbM10pKSxhWzVdPSsoYVs3XSthWzhdfHxcIm9kZFwiPT09YVszXSkpOmFbM10mJmdhLmVycm9yKGFbMF0pLGF9LFBTRVVETzpmdW5jdGlvbihhKXt2YXIgYixjPSFhWzZdJiZhWzJdO3JldHVybiBYLkNISUxELnRlc3QoYVswXSk/bnVsbDooYVszXT9hWzJdPWFbNF18fGFbNV18fFwiXCI6YyYmVi50ZXN0KGMpJiYoYj1nKGMsITApKSYmKGI9Yy5pbmRleE9mKFwiKVwiLGMubGVuZ3RoLWIpLWMubGVuZ3RoKSYmKGFbMF09YVswXS5zbGljZSgwLGIpLGFbMl09Yy5zbGljZSgwLGIpKSxhLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKGNhLGRhKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09YT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yn19LENMQVNTOmZ1bmN0aW9uKGEpe3ZhciBiPXlbYStcIiBcIl07cmV0dXJuIGJ8fChiPW5ldyBSZWdFeHAoXCIoXnxcIitMK1wiKVwiK2ErXCIoXCIrTCtcInwkKVwiKSkmJnkoYSxmdW5jdGlvbihhKXtyZXR1cm4gYi50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBhLmNsYXNzTmFtZSYmYS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWdhLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT9cIiE9XCI9PT1iOmI/KGUrPVwiXCIsXCI9XCI9PT1iP2U9PT1jOlwiIT1cIj09PWI/ZSE9PWM6XCJePVwiPT09Yj9jJiYwPT09ZS5pbmRleE9mKGMpOlwiKj1cIj09PWI/YyYmZS5pbmRleE9mKGMpPi0xOlwiJD1cIj09PWI/YyYmZS5zbGljZSgtYy5sZW5ndGgpPT09YzpcIn49XCI9PT1iPyhcIiBcIitlLnJlcGxhY2UoUSxcIiBcIikrXCIgXCIpLmluZGV4T2YoYyk+LTE6XCJ8PVwiPT09Yj9lPT09Y3x8ZS5zbGljZSgwLGMubGVuZ3RoKzEpPT09YytcIi1cIjohMSk6ITB9fSxDSElMRDpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibnRoXCIhPT1hLnNsaWNlKDAsMyksZz1cImxhc3RcIiE9PWEuc2xpY2UoLTQpLGg9XCJvZi10eXBlXCI9PT1iO3JldHVybiAxPT09ZCYmMD09PWU/ZnVuY3Rpb24oYSl7cmV0dXJuISFhLnBhcmVudE5vZGV9OmZ1bmN0aW9uKGIsYyxpKXt2YXIgaixrLGwsbSxuLG8scD1mIT09Zz9cIm5leHRTaWJsaW5nXCI6XCJwcmV2aW91c1NpYmxpbmdcIixxPWIucGFyZW50Tm9kZSxyPWgmJmIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxzPSFpJiYhaDtpZihxKXtpZihmKXt3aGlsZShwKXtsPWI7d2hpbGUobD1sW3BdKWlmKGg/bC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bC5ub2RlVHlwZSlyZXR1cm4hMTtvPXA9XCJvbmx5XCI9PT1hJiYhbyYmXCJuZXh0U2libGluZ1wifXJldHVybiEwfWlmKG89W2c/cS5maXJzdENoaWxkOnEubGFzdENoaWxkXSxnJiZzKXtrPXFbdV18fChxW3VdPXt9KSxqPWtbYV18fFtdLG49alswXT09PXcmJmpbMV0sbT1qWzBdPT09dyYmalsyXSxsPW4mJnEuY2hpbGROb2Rlc1tuXTt3aGlsZShsPSsrbiYmbCYmbFtwXXx8KG09bj0wKXx8by5wb3AoKSlpZigxPT09bC5ub2RlVHlwZSYmKyttJiZsPT09Yil7a1thXT1bdyxuLG1dO2JyZWFrfX1lbHNlIGlmKHMmJihqPShiW3VdfHwoYlt1XT17fSkpW2FdKSYmalswXT09PXcpbT1qWzFdO2Vsc2Ugd2hpbGUobD0rK24mJmwmJmxbcF18fChtPW49MCl8fG8ucG9wKCkpaWYoKGg/bC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bC5ub2RlVHlwZSkmJisrbSYmKHMmJigobFt1XXx8KGxbdV09e30pKVthXT1bdyxtXSksbD09PWIpKWJyZWFrO3JldHVybiBtLT1lLG09PT1kfHxtJWQ9PT0wJiZtL2Q+PTB9fX0sUFNFVURPOmZ1bmN0aW9uKGEsYil7dmFyIGMsZT1kLnBzZXVkb3NbYV18fGQuc2V0RmlsdGVyc1thLnRvTG93ZXJDYXNlKCldfHxnYS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrYSk7cmV0dXJuIGVbdV0/ZShiKTplLmxlbmd0aD4xPyhjPVthLGEsXCJcIixiXSxkLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoYS50b0xvd2VyQ2FzZSgpKT9pYShmdW5jdGlvbihhLGMpe3ZhciBkLGY9ZShhLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWQ9SihhLGZbZ10pLGFbZF09IShjW2RdPWZbZ10pfSk6ZnVuY3Rpb24oYSl7cmV0dXJuIGUoYSwwLGMpfSk6ZX19LHBzZXVkb3M6e25vdDppYShmdW5jdGlvbihhKXt2YXIgYj1bXSxjPVtdLGQ9aChhLnJlcGxhY2UoUixcIiQxXCIpKTtyZXR1cm4gZFt1XT9pYShmdW5jdGlvbihhLGIsYyxlKXt2YXIgZixnPWQoYSxudWxsLGUsW10pLGg9YS5sZW5ndGg7d2hpbGUoaC0tKShmPWdbaF0pJiYoYVtoXT0hKGJbaF09ZikpfSk6ZnVuY3Rpb24oYSxlLGYpe3JldHVybiBiWzBdPWEsZChiLG51bGwsZixjKSxiWzBdPW51bGwsIWMucG9wKCl9fSksaGFzOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gZ2EoYSxiKS5sZW5ndGg+MH19KSxjb250YWluczppYShmdW5jdGlvbihhKXtyZXR1cm4gYT1hLnJlcGxhY2UoY2EsZGEpLGZ1bmN0aW9uKGIpe3JldHVybihiLnRleHRDb250ZW50fHxiLmlubmVyVGV4dHx8ZShiKSkuaW5kZXhPZihhKT4tMX19KSxsYW5nOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBXLnRlc3QoYXx8XCJcIil8fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrYSksYT1hLnJlcGxhY2UoY2EsZGEpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oYil7dmFyIGM7ZG8gaWYoYz1wP2IubGFuZzpiLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpfHxiLmdldEF0dHJpYnV0ZShcImxhbmdcIikpcmV0dXJuIGM9Yy50b0xvd2VyQ2FzZSgpLGM9PT1hfHwwPT09Yy5pbmRleE9mKGErXCItXCIpO3doaWxlKChiPWIucGFyZW50Tm9kZSkmJjE9PT1iLm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24oYil7dmFyIGM9YS5sb2NhdGlvbiYmYS5sb2NhdGlvbi5oYXNoO3JldHVybiBjJiZjLnNsaWNlKDEpPT09Yi5pZH0scm9vdDpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW99LGZvY3VzOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09bi5hY3RpdmVFbGVtZW50JiYoIW4uaGFzRm9jdXN8fG4uaGFzRm9jdXMoKSkmJiEhKGEudHlwZXx8YS5ocmVmfHx+YS50YWJJbmRleCl9LGVuYWJsZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9PT0hMX0sZGlzYWJsZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9PT0hMH0sY2hlY2tlZDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YiYmISFhLmNoZWNrZWR8fFwib3B0aW9uXCI9PT1iJiYhIWEuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LGEuc2VsZWN0ZWQ9PT0hMH0sZW1wdHk6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWlmKGEubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGEpe3JldHVybiFkLnBzZXVkb3MuZW1wdHkoYSl9LGhlYWRlcjpmdW5jdGlvbihhKXtyZXR1cm4gWi50ZXN0KGEubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihhKXtyZXR1cm4gWS50ZXN0KGEubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJlwiYnV0dG9uXCI9PT1hLnR5cGV8fFwiYnV0dG9uXCI9PT1ifSx0ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVyblwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmXCJ0ZXh0XCI9PT1hLnR5cGUmJihudWxsPT0oYj1hLmdldEF0dHJpYnV0ZShcInR5cGVcIikpfHxcInRleHRcIj09PWIudG9Mb3dlckNhc2UoKSl9LGZpcnN0Om9hKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpvYShmdW5jdGlvbihhLGIpe3JldHVybltiLTFdfSksZXE6b2EoZnVuY3Rpb24oYSxiLGMpe3JldHVyblswPmM/YytiOmNdfSksZXZlbjpvYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wO2I+YztjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLG9kZDpvYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0xO2I+YztjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLGx0Om9hKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9MD5jP2MrYjpjOy0tZD49MDspYS5wdXNoKGQpO3JldHVybiBhfSksZ3Q6b2EoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wPmM/YytiOmM7KytkPGI7KWEucHVzaChkKTtyZXR1cm4gYX0pfX0sZC5wc2V1ZG9zLm50aD1kLnBzZXVkb3MuZXE7Zm9yKGIgaW57cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pZC5wc2V1ZG9zW2JdPW1hKGIpO2ZvcihiIGlue3N1Ym1pdDohMCxyZXNldDohMH0pZC5wc2V1ZG9zW2JdPW5hKGIpO2Z1bmN0aW9uIHFhKCl7fXFhLnByb3RvdHlwZT1kLmZpbHRlcnM9ZC5wc2V1ZG9zLGQuc2V0RmlsdGVycz1uZXcgcWEsZz1nYS50b2tlbml6ZT1mdW5jdGlvbihhLGIpe3ZhciBjLGUsZixnLGgsaSxqLGs9elthK1wiIFwiXTtpZihrKXJldHVybiBiPzA6ay5zbGljZSgwKTtoPWEsaT1bXSxqPWQucHJlRmlsdGVyO3doaWxlKGgpeyghY3x8KGU9Uy5leGVjKGgpKSkmJihlJiYoaD1oLnNsaWNlKGVbMF0ubGVuZ3RoKXx8aCksaS5wdXNoKGY9W10pKSxjPSExLChlPVQuZXhlYyhoKSkmJihjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTplWzBdLnJlcGxhY2UoUixcIiBcIil9KSxoPWguc2xpY2UoYy5sZW5ndGgpKTtmb3IoZyBpbiBkLmZpbHRlcikhKGU9WFtnXS5leGVjKGgpKXx8altnXSYmIShlPWpbZ10oZSkpfHwoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZyxtYXRjaGVzOmV9KSxoPWguc2xpY2UoYy5sZW5ndGgpKTtpZighYylicmVha31yZXR1cm4gYj9oLmxlbmd0aDpoP2dhLmVycm9yKGEpOnooYSxpKS5zbGljZSgwKX07ZnVuY3Rpb24gcmEoYSl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aCxkPVwiXCI7Yz5iO2IrKylkKz1hW2JdLnZhbHVlO3JldHVybiBkfWZ1bmN0aW9uIHNhKGEsYixjKXt2YXIgZD1iLmRpcixlPWMmJlwicGFyZW50Tm9kZVwiPT09ZCxmPXgrKztyZXR1cm4gYi5maXJzdD9mdW5jdGlvbihiLGMsZil7d2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxlKXJldHVybiBhKGIsYyxmKX06ZnVuY3Rpb24oYixjLGcpe3ZhciBoLGksaj1bdyxmXTtpZihnKXt3aGlsZShiPWJbZF0paWYoKDE9PT1iLm5vZGVUeXBlfHxlKSYmYShiLGMsZykpcmV0dXJuITB9ZWxzZSB3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGUpe2lmKGk9Ylt1XXx8KGJbdV09e30pLChoPWlbZF0pJiZoWzBdPT09dyYmaFsxXT09PWYpcmV0dXJuIGpbMl09aFsyXTtpZihpW2RdPWosalsyXT1hKGIsYyxnKSlyZXR1cm4hMH19fWZ1bmN0aW9uIHRhKGEpe3JldHVybiBhLmxlbmd0aD4xP2Z1bmN0aW9uKGIsYyxkKXt2YXIgZT1hLmxlbmd0aDt3aGlsZShlLS0paWYoIWFbZV0oYixjLGQpKXJldHVybiExO3JldHVybiEwfTphWzBdfWZ1bmN0aW9uIHVhKGEsYixjKXtmb3IodmFyIGQ9MCxlPWIubGVuZ3RoO2U+ZDtkKyspZ2EoYSxiW2RdLGMpO3JldHVybiBjfWZ1bmN0aW9uIHZhKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9W10saD0wLGk9YS5sZW5ndGgsaj1udWxsIT1iO2k+aDtoKyspKGY9YVtoXSkmJighY3x8YyhmLGQsZSkpJiYoZy5wdXNoKGYpLGomJmIucHVzaChoKSk7cmV0dXJuIGd9ZnVuY3Rpb24gd2EoYSxiLGMsZCxlLGYpe3JldHVybiBkJiYhZFt1XSYmKGQ9d2EoZCkpLGUmJiFlW3VdJiYoZT13YShlLGYpKSxpYShmdW5jdGlvbihmLGcsaCxpKXt2YXIgaixrLGwsbT1bXSxuPVtdLG89Zy5sZW5ndGgscD1mfHx1YShifHxcIipcIixoLm5vZGVUeXBlP1toXTpoLFtdKSxxPSFhfHwhZiYmYj9wOnZhKHAsbSxhLGgsaSkscj1jP2V8fChmP2E6b3x8ZCk/W106ZzpxO2lmKGMmJmMocSxyLGgsaSksZCl7aj12YShyLG4pLGQoaixbXSxoLGkpLGs9ai5sZW5ndGg7d2hpbGUoay0tKShsPWpba10pJiYocltuW2tdXT0hKHFbbltrXV09bCkpfWlmKGYpe2lmKGV8fGEpe2lmKGUpe2o9W10saz1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJmoucHVzaChxW2tdPWwpO2UobnVsbCxyPVtdLGosaSl9az1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJihqPWU/SihmLGwpOm1ba10pPi0xJiYoZltqXT0hKGdbal09bCkpfX1lbHNlIHI9dmEocj09PWc/ci5zcGxpY2UobyxyLmxlbmd0aCk6ciksZT9lKG51bGwsZyxyLGkpOkguYXBwbHkoZyxyKX0pfWZ1bmN0aW9uIHhhKGEpe2Zvcih2YXIgYixjLGUsZj1hLmxlbmd0aCxnPWQucmVsYXRpdmVbYVswXS50eXBlXSxoPWd8fGQucmVsYXRpdmVbXCIgXCJdLGk9Zz8xOjAsaz1zYShmdW5jdGlvbihhKXtyZXR1cm4gYT09PWJ9LGgsITApLGw9c2EoZnVuY3Rpb24oYSl7cmV0dXJuIEooYixhKT4tMX0saCwhMCksbT1bZnVuY3Rpb24oYSxjLGQpe3ZhciBlPSFnJiYoZHx8YyE9PWopfHwoKGI9Yykubm9kZVR5cGU/ayhhLGMsZCk6bChhLGMsZCkpO3JldHVybiBiPW51bGwsZX1dO2Y+aTtpKyspaWYoYz1kLnJlbGF0aXZlW2FbaV0udHlwZV0pbT1bc2EodGEobSksYyldO2Vsc2V7aWYoYz1kLmZpbHRlclthW2ldLnR5cGVdLmFwcGx5KG51bGwsYVtpXS5tYXRjaGVzKSxjW3VdKXtmb3IoZT0rK2k7Zj5lO2UrKylpZihkLnJlbGF0aXZlW2FbZV0udHlwZV0pYnJlYWs7cmV0dXJuIHdhKGk+MSYmdGEobSksaT4xJiZyYShhLnNsaWNlKDAsaS0xKS5jb25jYXQoe3ZhbHVlOlwiIFwiPT09YVtpLTJdLnR5cGU/XCIqXCI6XCJcIn0pKS5yZXBsYWNlKFIsXCIkMVwiKSxjLGU+aSYmeGEoYS5zbGljZShpLGUpKSxmPmUmJnhhKGE9YS5zbGljZShlKSksZj5lJiZyYShhKSl9bS5wdXNoKGMpfXJldHVybiB0YShtKX1mdW5jdGlvbiB5YShhLGIpe3ZhciBjPWIubGVuZ3RoPjAsZT1hLmxlbmd0aD4wLGY9ZnVuY3Rpb24oZixnLGgsaSxrKXt2YXIgbCxtLG8scD0wLHE9XCIwXCIscj1mJiZbXSxzPVtdLHQ9aix1PWZ8fGUmJmQuZmluZC5UQUcoXCIqXCIsayksdj13Kz1udWxsPT10PzE6TWF0aC5yYW5kb20oKXx8LjEseD11Lmxlbmd0aDtmb3IoayYmKGo9ZyE9PW4mJmcpO3EhPT14JiZudWxsIT0obD11W3FdKTtxKyspe2lmKGUmJmwpe209MDt3aGlsZShvPWFbbSsrXSlpZihvKGwsZyxoKSl7aS5wdXNoKGwpO2JyZWFrfWsmJih3PXYpfWMmJigobD0hbyYmbCkmJnAtLSxmJiZyLnB1c2gobCkpfWlmKHArPXEsYyYmcSE9PXApe209MDt3aGlsZShvPWJbbSsrXSlvKHIscyxnLGgpO2lmKGYpe2lmKHA+MCl3aGlsZShxLS0pcltxXXx8c1txXXx8KHNbcV09Ri5jYWxsKGkpKTtzPXZhKHMpfUguYXBwbHkoaSxzKSxrJiYhZiYmcy5sZW5ndGg+MCYmcCtiLmxlbmd0aD4xJiZnYS51bmlxdWVTb3J0KGkpfXJldHVybiBrJiYodz12LGo9dCkscn07cmV0dXJuIGM/aWEoZik6Zn1yZXR1cm4gaD1nYS5jb21waWxlPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPVtdLGY9QVthK1wiIFwiXTtpZighZil7Ynx8KGI9ZyhhKSksYz1iLmxlbmd0aDt3aGlsZShjLS0pZj14YShiW2NdKSxmW3VdP2QucHVzaChmKTplLnB1c2goZik7Zj1BKGEseWEoZSxkKSksZi5zZWxlY3Rvcj1hfXJldHVybiBmfSxpPWdhLnNlbGVjdD1mdW5jdGlvbihhLGIsZSxmKXt2YXIgaSxqLGssbCxtLG49XCJmdW5jdGlvblwiPT10eXBlb2YgYSYmYSxvPSFmJiZnKGE9bi5zZWxlY3Rvcnx8YSk7aWYoZT1lfHxbXSwxPT09by5sZW5ndGgpe2lmKGo9b1swXT1vWzBdLnNsaWNlKDApLGoubGVuZ3RoPjImJlwiSURcIj09PShrPWpbMF0pLnR5cGUmJmMuZ2V0QnlJZCYmOT09PWIubm9kZVR5cGUmJnAmJmQucmVsYXRpdmVbalsxXS50eXBlXSl7aWYoYj0oZC5maW5kLklEKGsubWF0Y2hlc1swXS5yZXBsYWNlKGNhLGRhKSxiKXx8W10pWzBdLCFiKXJldHVybiBlO24mJihiPWIucGFyZW50Tm9kZSksYT1hLnNsaWNlKGouc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWk9WC5uZWVkc0NvbnRleHQudGVzdChhKT8wOmoubGVuZ3RoO3doaWxlKGktLSl7aWYoaz1qW2ldLGQucmVsYXRpdmVbbD1rLnR5cGVdKWJyZWFrO2lmKChtPWQuZmluZFtsXSkmJihmPW0oay5tYXRjaGVzWzBdLnJlcGxhY2UoY2EsZGEpLGFhLnRlc3QoalswXS50eXBlKSYmcGEoYi5wYXJlbnROb2RlKXx8YikpKXtpZihqLnNwbGljZShpLDEpLGE9Zi5sZW5ndGgmJnJhKGopLCFhKXJldHVybiBILmFwcGx5KGUsZiksZTticmVha319fXJldHVybihufHxoKGEsbykpKGYsYiwhcCxlLGFhLnRlc3QoYSkmJnBhKGIucGFyZW50Tm9kZSl8fGIpLGV9LGMuc29ydFN0YWJsZT11LnNwbGl0KFwiXCIpLnNvcnQoQikuam9pbihcIlwiKT09PXUsYy5kZXRlY3REdXBsaWNhdGVzPSEhbCxtKCksYy5zb3J0RGV0YWNoZWQ9amEoZnVuY3Rpb24oYSl7cmV0dXJuIDEmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpfSksamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGEgaHJlZj0nIyc+PC9hPlwiLFwiI1wiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIil9KXx8a2EoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjP3ZvaWQgMDphLmdldEF0dHJpYnV0ZShiLFwidHlwZVwiPT09Yi50b0xvd2VyQ2FzZSgpPzE6Mil9KSxjLmF0dHJpYnV0ZXMmJmphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxpbnB1dC8+XCIsYS5maXJzdENoaWxkLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIiksXCJcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX0pfHxrYShcInZhbHVlXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjfHxcImlucHV0XCIhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/dm9pZCAwOmEuZGVmYXVsdFZhbHVlfSksamEoZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWEuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIil9KXx8a2EoSyxmdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGM/dm9pZCAwOmFbYl09PT0hMD9iLnRvTG93ZXJDYXNlKCk6KGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZC5zcGVjaWZpZWQ/ZC52YWx1ZTpudWxsfSksZ2F9KGEpO24uZmluZD10LG4uZXhwcj10LnNlbGVjdG9ycyxuLmV4cHJbXCI6XCJdPW4uZXhwci5wc2V1ZG9zLG4udW5pcXVlPXQudW5pcXVlU29ydCxuLnRleHQ9dC5nZXRUZXh0LG4uaXNYTUxEb2M9dC5pc1hNTCxuLmNvbnRhaW5zPXQuY29udGFpbnM7dmFyIHU9bi5leHByLm1hdGNoLm5lZWRzQ29udGV4dCx2PS9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyx3PS9eLlteOiNcXFtcXC4sXSokLztmdW5jdGlvbiB4KGEsYixjKXtpZihuLmlzRnVuY3Rpb24oYikpcmV0dXJuIG4uZ3JlcChhLGZ1bmN0aW9uKGEsZCl7cmV0dXJuISFiLmNhbGwoYSxkLGEpIT09Y30pO2lmKGIubm9kZVR5cGUpcmV0dXJuIG4uZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09YiE9PWN9KTtpZihcInN0cmluZ1wiPT10eXBlb2YgYil7aWYody50ZXN0KGIpKXJldHVybiBuLmZpbHRlcihiLGEsYyk7Yj1uLmZpbHRlcihiLGEpfXJldHVybiBuLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gZy5jYWxsKGIsYSk+PTAhPT1jfSl9bi5maWx0ZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWJbMF07cmV0dXJuIGMmJihhPVwiOm5vdChcIithK1wiKVwiKSwxPT09Yi5sZW5ndGgmJjE9PT1kLm5vZGVUeXBlP24uZmluZC5tYXRjaGVzU2VsZWN0b3IoZCxhKT9bZF06W106bi5maW5kLm1hdGNoZXMoYSxuLmdyZXAoYixmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV9KSl9LG4uZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5sZW5ndGgsZD1bXSxlPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIHRoaXMucHVzaFN0YWNrKG4oYSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKGI9MDtjPmI7YisrKWlmKG4uY29udGFpbnMoZVtiXSx0aGlzKSlyZXR1cm4hMH0pKTtmb3IoYj0wO2M+YjtiKyspbi5maW5kKGEsZVtiXSxkKTtyZXR1cm4gZD10aGlzLnB1c2hTdGFjayhjPjE/bi51bmlxdWUoZCk6ZCksZC5zZWxlY3Rvcj10aGlzLnNlbGVjdG9yP3RoaXMuc2VsZWN0b3IrXCIgXCIrYTphLGR9LGZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soeCh0aGlzLGF8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soeCh0aGlzLGF8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGEpe3JldHVybiEheCh0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBhJiZ1LnRlc3QoYSk/bihhKTphfHxbXSwhMSkubGVuZ3RofX0pO3ZhciB5LHo9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sQT1uLmZuLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkO2lmKCFhKXJldHVybiB0aGlzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXtpZihjPVwiPFwiPT09YVswXSYmXCI+XCI9PT1hW2EubGVuZ3RoLTFdJiZhLmxlbmd0aD49Mz9bbnVsbCxhLG51bGxdOnouZXhlYyhhKSwhY3x8IWNbMV0mJmIpcmV0dXJuIWJ8fGIuanF1ZXJ5PyhifHx5KS5maW5kKGEpOnRoaXMuY29uc3RydWN0b3IoYikuZmluZChhKTtpZihjWzFdKXtpZihiPWIgaW5zdGFuY2VvZiBuP2JbMF06YixuLm1lcmdlKHRoaXMsbi5wYXJzZUhUTUwoY1sxXSxiJiZiLm5vZGVUeXBlP2Iub3duZXJEb2N1bWVudHx8YjpsLCEwKSksdi50ZXN0KGNbMV0pJiZuLmlzUGxhaW5PYmplY3QoYikpZm9yKGMgaW4gYiluLmlzRnVuY3Rpb24odGhpc1tjXSk/dGhpc1tjXShiW2NdKTp0aGlzLmF0dHIoYyxiW2NdKTtyZXR1cm4gdGhpc31yZXR1cm4gZD1sLmdldEVsZW1lbnRCeUlkKGNbMl0pLGQmJmQucGFyZW50Tm9kZSYmKHRoaXMubGVuZ3RoPTEsdGhpc1swXT1kKSx0aGlzLmNvbnRleHQ9bCx0aGlzLnNlbGVjdG9yPWEsdGhpc31yZXR1cm4gYS5ub2RlVHlwZT8odGhpcy5jb250ZXh0PXRoaXNbMF09YSx0aGlzLmxlbmd0aD0xLHRoaXMpOm4uaXNGdW5jdGlvbihhKT9cInVuZGVmaW5lZFwiIT10eXBlb2YgeS5yZWFkeT95LnJlYWR5KGEpOmEobik6KHZvaWQgMCE9PWEuc2VsZWN0b3ImJih0aGlzLnNlbGVjdG9yPWEuc2VsZWN0b3IsdGhpcy5jb250ZXh0PWEuY29udGV4dCksbi5tYWtlQXJyYXkoYSx0aGlzKSl9O0EucHJvdG90eXBlPW4uZm4seT1uKGwpO3ZhciBCPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEM9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07bi5leHRlbmQoe2RpcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9W10sZT12b2lkIDAhPT1jO3doaWxlKChhPWFbYl0pJiY5IT09YS5ub2RlVHlwZSlpZigxPT09YS5ub2RlVHlwZSl7aWYoZSYmbihhKS5pcyhjKSlicmVhaztkLnB1c2goYSl9cmV0dXJuIGR9LHNpYmxpbmc6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107YTthPWEubmV4dFNpYmxpbmcpMT09PWEubm9kZVR5cGUmJmEhPT1iJiZjLnB1c2goYSk7cmV0dXJuIGN9fSksbi5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihhKXt2YXIgYj1uKGEsdGhpcyksYz1iLmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGE9MDtjPmE7YSsrKWlmKG4uY29udGFpbnModGhpcyxiW2FdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjLGQ9MCxlPXRoaXMubGVuZ3RoLGY9W10sZz11LnRlc3QoYSl8fFwic3RyaW5nXCIhPXR5cGVvZiBhP24oYSxifHx0aGlzLmNvbnRleHQpOjA7ZT5kO2QrKylmb3IoYz10aGlzW2RdO2MmJmMhPT1iO2M9Yy5wYXJlbnROb2RlKWlmKGMubm9kZVR5cGU8MTEmJihnP2cuaW5kZXgoYyk+LTE6MT09PWMubm9kZVR5cGUmJm4uZmluZC5tYXRjaGVzU2VsZWN0b3IoYyxhKSkpe2YucHVzaChjKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2soZi5sZW5ndGg+MT9uLnVuaXF1ZShmKTpmKX0saW5kZXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/XCJzdHJpbmdcIj09dHlwZW9mIGE/Zy5jYWxsKG4oYSksdGhpc1swXSk6Zy5jYWxsKHRoaXMsYS5qcXVlcnk/YVswXTphKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnB1c2hTdGFjayhuLnVuaXF1ZShuLm1lcmdlKHRoaXMuZ2V0KCksbihhLGIpKSkpfSxhZGRCYWNrOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFkZChudWxsPT1hP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGEpKX19KTtmdW5jdGlvbiBEKGEsYil7d2hpbGUoKGE9YVtiXSkmJjEhPT1hLm5vZGVUeXBlKTtyZXR1cm4gYX1uLmVhY2goe3BhcmVudDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJjExIT09Yi5ub2RlVHlwZT9iOm51bGx9LHBhcmVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIG4uZGlyKGEsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuLmRpcihhLFwicGFyZW50Tm9kZVwiLGMpfSxuZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBEKGEsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihhKXtyZXR1cm4gRChhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0QWxsOmZ1bmN0aW9uKGEpe3JldHVybiBuLmRpcihhLFwibmV4dFNpYmxpbmdcIil9LHByZXZBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIG4uZGlyKGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG4uZGlyKGEsXCJuZXh0U2libGluZ1wiLGMpfSxwcmV2VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuLmRpcihhLFwicHJldmlvdXNTaWJsaW5nXCIsYyl9LHNpYmxpbmdzOmZ1bmN0aW9uKGEpe3JldHVybiBuLnNpYmxpbmcoKGEucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsYSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGEpe3JldHVybiBuLnNpYmxpbmcoYS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY29udGVudERvY3VtZW50fHxuLm1lcmdlKFtdLGEuY2hpbGROb2Rlcyl9fSxmdW5jdGlvbihhLGIpe24uZm5bYV09ZnVuY3Rpb24oYyxkKXt2YXIgZT1uLm1hcCh0aGlzLGIsYyk7cmV0dXJuXCJVbnRpbFwiIT09YS5zbGljZSgtNSkmJihkPWMpLGQmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYoZT1uLmZpbHRlcihkLGUpKSx0aGlzLmxlbmd0aD4xJiYoQ1thXXx8bi51bmlxdWUoZSksQi50ZXN0KGEpJiZlLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIEU9L1xcUysvZyxGPXt9O2Z1bmN0aW9uIEcoYSl7dmFyIGI9RlthXT17fTtyZXR1cm4gbi5lYWNoKGEubWF0Y2goRSl8fFtdLGZ1bmN0aW9uKGEsYyl7YltjXT0hMH0pLGJ9bi5DYWxsYmFja3M9ZnVuY3Rpb24oYSl7YT1cInN0cmluZ1wiPT10eXBlb2YgYT9GW2FdfHxHKGEpOm4uZXh0ZW5kKHt9LGEpO3ZhciBiLGMsZCxlLGYsZyxoPVtdLGk9IWEub25jZSYmW10saj1mdW5jdGlvbihsKXtmb3IoYj1hLm1lbW9yeSYmbCxjPSEwLGc9ZXx8MCxlPTAsZj1oLmxlbmd0aCxkPSEwO2gmJmY+ZztnKyspaWYoaFtnXS5hcHBseShsWzBdLGxbMV0pPT09ITEmJmEuc3RvcE9uRmFsc2Upe2I9ITE7YnJlYWt9ZD0hMSxoJiYoaT9pLmxlbmd0aCYmaihpLnNoaWZ0KCkpOmI/aD1bXTprLmRpc2FibGUoKSl9LGs9e2FkZDpmdW5jdGlvbigpe2lmKGgpe3ZhciBjPWgubGVuZ3RoOyFmdW5jdGlvbiBnKGIpe24uZWFjaChiLGZ1bmN0aW9uKGIsYyl7dmFyIGQ9bi50eXBlKGMpO1wiZnVuY3Rpb25cIj09PWQ/YS51bmlxdWUmJmsuaGFzKGMpfHxoLnB1c2goYyk6YyYmYy5sZW5ndGgmJlwic3RyaW5nXCIhPT1kJiZnKGMpfSl9KGFyZ3VtZW50cyksZD9mPWgubGVuZ3RoOmImJihlPWMsaihiKSl9cmV0dXJuIHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiBoJiZuLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGEsYil7dmFyIGM7d2hpbGUoKGM9bi5pbkFycmF5KGIsaCxjKSk+LTEpaC5zcGxpY2UoYywxKSxkJiYoZj49YyYmZi0tLGc+PWMmJmctLSl9KSx0aGlzfSxoYXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/bi5pbkFycmF5KGEsaCk+LTE6ISghaHx8IWgubGVuZ3RoKX0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gaD1bXSxmPTAsdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBoPWk9Yj12b2lkIDAsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4haH0sbG9jazpmdW5jdGlvbigpe3JldHVybiBpPXZvaWQgMCxifHxrLmRpc2FibGUoKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4haX0sZmlyZVdpdGg6ZnVuY3Rpb24oYSxiKXtyZXR1cm4haHx8YyYmIWl8fChiPWJ8fFtdLGI9W2EsYi5zbGljZT9iLnNsaWNlKCk6Yl0sZD9pLnB1c2goYik6aihiKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBrLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhY319O3JldHVybiBrfSxuLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9W1tcInJlc29sdmVcIixcImRvbmVcIixuLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFwicmVzb2x2ZWRcIl0sW1wicmVqZWN0XCIsXCJmYWlsXCIsbi5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcInJlamVjdGVkXCJdLFtcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixuLkNhbGxiYWNrcyhcIm1lbW9yeVwiKV1dLGM9XCJwZW5kaW5nXCIsZD17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gY30sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIGUuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSx0aGVuOmZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzO3JldHVybiBuLkRlZmVycmVkKGZ1bmN0aW9uKGMpe24uZWFjaChiLGZ1bmN0aW9uKGIsZil7dmFyIGc9bi5pc0Z1bmN0aW9uKGFbYl0pJiZhW2JdO2VbZlsxXV0oZnVuY3Rpb24oKXt2YXIgYT1nJiZnLmFwcGx5KHRoaXMsYXJndW1lbnRzKTthJiZuLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9hLnByb21pc2UoKS5kb25lKGMucmVzb2x2ZSkuZmFpbChjLnJlamVjdCkucHJvZ3Jlc3MoYy5ub3RpZnkpOmNbZlswXStcIldpdGhcIl0odGhpcz09PWQ/Yy5wcm9taXNlKCk6dGhpcyxnP1thXTphcmd1bWVudHMpfSl9KSxhPW51bGx9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWE/bi5leHRlbmQoYSxkKTpkfX0sZT17fTtyZXR1cm4gZC5waXBlPWQudGhlbixuLmVhY2goYixmdW5jdGlvbihhLGYpe3ZhciBnPWZbMl0saD1mWzNdO2RbZlsxXV09Zy5hZGQsaCYmZy5hZGQoZnVuY3Rpb24oKXtjPWh9LGJbMV5hXVsyXS5kaXNhYmxlLGJbMl1bMl0ubG9jayksZVtmWzBdXT1mdW5jdGlvbigpe3JldHVybiBlW2ZbMF0rXCJXaXRoXCJdKHRoaXM9PT1lP2Q6dGhpcyxhcmd1bWVudHMpLHRoaXN9LGVbZlswXStcIldpdGhcIl09Zy5maXJlV2l0aH0pLGQucHJvbWlzZShlKSxhJiZhLmNhbGwoZSxlKSxlfSx3aGVuOmZ1bmN0aW9uKGEpe3ZhciBiPTAsYz1kLmNhbGwoYXJndW1lbnRzKSxlPWMubGVuZ3RoLGY9MSE9PWV8fGEmJm4uaXNGdW5jdGlvbihhLnByb21pc2UpP2U6MCxnPTE9PT1mP2E6bi5EZWZlcnJlZCgpLGg9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmdW5jdGlvbihlKXtiW2FdPXRoaXMsY1thXT1hcmd1bWVudHMubGVuZ3RoPjE/ZC5jYWxsKGFyZ3VtZW50cyk6ZSxjPT09aT9nLm5vdGlmeVdpdGgoYixjKTotLWZ8fGcucmVzb2x2ZVdpdGgoYixjKX19LGksaixrO2lmKGU+MSlmb3IoaT1uZXcgQXJyYXkoZSksaj1uZXcgQXJyYXkoZSksaz1uZXcgQXJyYXkoZSk7ZT5iO2IrKyljW2JdJiZuLmlzRnVuY3Rpb24oY1tiXS5wcm9taXNlKT9jW2JdLnByb21pc2UoKS5kb25lKGgoYixrLGMpKS5mYWlsKGcucmVqZWN0KS5wcm9ncmVzcyhoKGIsaixpKSk6LS1mO3JldHVybiBmfHxnLnJlc29sdmVXaXRoKGssYyksZy5wcm9taXNlKCl9fSk7dmFyIEg7bi5mbi5yZWFkeT1mdW5jdGlvbihhKXtyZXR1cm4gbi5yZWFkeS5wcm9taXNlKCkuZG9uZShhKSx0aGlzfSxuLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxob2xkUmVhZHk6ZnVuY3Rpb24oYSl7YT9uLnJlYWR5V2FpdCsrOm4ucmVhZHkoITApfSxyZWFkeTpmdW5jdGlvbihhKXsoYT09PSEwPy0tbi5yZWFkeVdhaXQ6bi5pc1JlYWR5KXx8KG4uaXNSZWFkeT0hMCxhIT09ITAmJi0tbi5yZWFkeVdhaXQ+MHx8KEgucmVzb2x2ZVdpdGgobCxbbl0pLG4uZm4udHJpZ2dlckhhbmRsZXImJihuKGwpLnRyaWdnZXJIYW5kbGVyKFwicmVhZHlcIiksbihsKS5vZmYoXCJyZWFkeVwiKSkpKX19KTtmdW5jdGlvbiBJKCl7bC5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLEksITEpLGEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixJLCExKSxuLnJlYWR5KCl9bi5yZWFkeS5wcm9taXNlPWZ1bmN0aW9uKGIpe3JldHVybiBIfHwoSD1uLkRlZmVycmVkKCksXCJjb21wbGV0ZVwiPT09bC5yZWFkeVN0YXRlP3NldFRpbWVvdXQobi5yZWFkeSk6KGwuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixJLCExKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsSSwhMSkpKSxILnByb21pc2UoYil9LG4ucmVhZHkucHJvbWlzZSgpO3ZhciBKPW4uYWNjZXNzPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoXCJvYmplY3RcIj09PW4udHlwZShjKSl7ZT0hMDtmb3IoaCBpbiBjKW4uYWNjZXNzKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLG4uaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChuKGEpLGMpfSkpLGIpKWZvcig7aT5oO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9O24uYWNjZXB0RGF0YT1mdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV8fDk9PT1hLm5vZGVUeXBlfHwhK2Eubm9kZVR5cGV9O2Z1bmN0aW9uIEsoKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5jYWNoZT17fSwwLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57fX19KSx0aGlzLmV4cGFuZG89bi5leHBhbmRvK0sudWlkKyt9Sy51aWQ9MSxLLmFjY2VwdHM9bi5hY2NlcHREYXRhLEsucHJvdG90eXBlPXtrZXk6ZnVuY3Rpb24oYSl7aWYoIUsuYWNjZXB0cyhhKSlyZXR1cm4gMDt2YXIgYj17fSxjPWFbdGhpcy5leHBhbmRvXTtpZighYyl7Yz1LLnVpZCsrO3RyeXtiW3RoaXMuZXhwYW5kb109e3ZhbHVlOmN9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGEsYil9Y2F0Y2goZCl7Ylt0aGlzLmV4cGFuZG9dPWMsbi5leHRlbmQoYSxiKX19cmV0dXJuIHRoaXMuY2FjaGVbY118fCh0aGlzLmNhY2hlW2NdPXt9KSxjfSxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU9dGhpcy5rZXkoYSksZj10aGlzLmNhY2hlW2VdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiKWZbYl09YztlbHNlIGlmKG4uaXNFbXB0eU9iamVjdChmKSluLmV4dGVuZCh0aGlzLmNhY2hlW2VdLGIpO2Vsc2UgZm9yKGQgaW4gYilmW2RdPWJbZF07cmV0dXJuIGZ9LGdldDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY2FjaGVbdGhpcy5rZXkoYSldO3JldHVybiB2b2lkIDA9PT1iP2M6Y1tiXX0sYWNjZXNzOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gdm9pZCAwPT09Ynx8YiYmXCJzdHJpbmdcIj09dHlwZW9mIGImJnZvaWQgMD09PWM/KGQ9dGhpcy5nZXQoYSxiKSx2b2lkIDAhPT1kP2Q6dGhpcy5nZXQoYSxuLmNhbWVsQ2FzZShiKSkpOih0aGlzLnNldChhLGIsYyksdm9pZCAwIT09Yz9jOmIpfSxyZW1vdmU6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj10aGlzLmtleShhKSxnPXRoaXMuY2FjaGVbZl07aWYodm9pZCAwPT09Yil0aGlzLmNhY2hlW2ZdPXt9O2Vsc2V7bi5pc0FycmF5KGIpP2Q9Yi5jb25jYXQoYi5tYXAobi5jYW1lbENhc2UpKTooZT1uLmNhbWVsQ2FzZShiKSxiIGluIGc/ZD1bYixlXTooZD1lLGQ9ZCBpbiBnP1tkXTpkLm1hdGNoKEUpfHxbXSkpLGM9ZC5sZW5ndGg7d2hpbGUoYy0tKWRlbGV0ZSBnW2RbY11dfX0saGFzRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4hbi5pc0VtcHR5T2JqZWN0KHRoaXMuY2FjaGVbYVt0aGlzLmV4cGFuZG9dXXx8e30pfSxkaXNjYXJkOmZ1bmN0aW9uKGEpe2FbdGhpcy5leHBhbmRvXSYmZGVsZXRlIHRoaXMuY2FjaGVbYVt0aGlzLmV4cGFuZG9dXX19O3ZhciBMPW5ldyBLLE09bmV3IEssTj0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sTz0vKFtBLVpdKS9nO2Z1bmN0aW9uIFAoYSxiLGMpe3ZhciBkO2lmKHZvaWQgMD09PWMmJjE9PT1hLm5vZGVUeXBlKWlmKGQ9XCJkYXRhLVwiK2IucmVwbGFjZShPLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCksYz1hLmdldEF0dHJpYnV0ZShkKSxcInN0cmluZ1wiPT10eXBlb2YgYyl7dHJ5e2M9XCJ0cnVlXCI9PT1jPyEwOlwiZmFsc2VcIj09PWM/ITE6XCJudWxsXCI9PT1jP251bGw6K2MrXCJcIj09PWM/K2M6Ti50ZXN0KGMpP24ucGFyc2VKU09OKGMpOmN9Y2F0Y2goZSl7fU0uc2V0KGEsYixjKX1lbHNlIGM9dm9pZCAwO3JldHVybiBjfW4uZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiBNLmhhc0RhdGEoYSl8fEwuaGFzRGF0YShhKX0sZGF0YTpmdW5jdGlvbihhLGIsYyl7XG5yZXR1cm4gTS5hY2Nlc3MoYSxiLGMpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7TS5yZW1vdmUoYSxiKX0sX2RhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBMLmFjY2VzcyhhLGIsYyl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7TC5yZW1vdmUoYSxiKX19KSxuLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPXRoaXNbMF0sZz1mJiZmLmF0dHJpYnV0ZXM7aWYodm9pZCAwPT09YSl7aWYodGhpcy5sZW5ndGgmJihlPU0uZ2V0KGYpLDE9PT1mLm5vZGVUeXBlJiYhTC5nZXQoZixcImhhc0RhdGFBdHRyc1wiKSkpe2M9Zy5sZW5ndGg7d2hpbGUoYy0tKWdbY10mJihkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKFwiZGF0YS1cIikmJihkPW4uY2FtZWxDYXNlKGQuc2xpY2UoNSkpLFAoZixkLGVbZF0pKSk7TC5zZXQoZixcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gZX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgYT90aGlzLmVhY2goZnVuY3Rpb24oKXtNLnNldCh0aGlzLGEpfSk6Sih0aGlzLGZ1bmN0aW9uKGIpe3ZhciBjLGQ9bi5jYW1lbENhc2UoYSk7aWYoZiYmdm9pZCAwPT09Yil7aWYoYz1NLmdldChmLGEpLHZvaWQgMCE9PWMpcmV0dXJuIGM7aWYoYz1NLmdldChmLGQpLHZvaWQgMCE9PWMpcmV0dXJuIGM7aWYoYz1QKGYsZCx2b2lkIDApLHZvaWQgMCE9PWMpcmV0dXJuIGN9ZWxzZSB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1NLmdldCh0aGlzLGQpO00uc2V0KHRoaXMsZCxiKSwtMSE9PWEuaW5kZXhPZihcIi1cIikmJnZvaWQgMCE9PWMmJk0uc2V0KHRoaXMsYSxiKX0pfSxudWxsLGIsYXJndW1lbnRzLmxlbmd0aD4xLG51bGwsITApfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtNLnJlbW92ZSh0aGlzLGEpfSl9fSksbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYT8oYj0oYnx8XCJmeFwiKStcInF1ZXVlXCIsZD1MLmdldChhLGIpLGMmJighZHx8bi5pc0FycmF5KGMpP2Q9TC5hY2Nlc3MoYSxiLG4ubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdKTp2b2lkIDB9LGRlcXVldWU6ZnVuY3Rpb24oYSxiKXtiPWJ8fFwiZnhcIjt2YXIgYz1uLnF1ZXVlKGEsYiksZD1jLmxlbmd0aCxlPWMuc2hpZnQoKSxmPW4uX3F1ZXVlSG9va3MoYSxiKSxnPWZ1bmN0aW9uKCl7bi5kZXF1ZXVlKGEsYil9O1wiaW5wcm9ncmVzc1wiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKFwiZnhcIj09PWImJmMudW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIGYuc3RvcCxlLmNhbGwoYSxnLGYpKSwhZCYmZiYmZi5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YitcInF1ZXVlSG9va3NcIjtyZXR1cm4gTC5nZXQoYSxjKXx8TC5hY2Nlc3MoYSxjLHtlbXB0eTpuLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpe0wucmVtb3ZlKGEsW2IrXCJxdWV1ZVwiLGNdKX0pfSl9fSksbi5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPVwiZnhcIixjLS0pLGFyZ3VtZW50cy5sZW5ndGg8Yz9uLnF1ZXVlKHRoaXNbMF0sYSk6dm9pZCAwPT09Yj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjPW4ucXVldWUodGhpcyxhLGIpO24uX3F1ZXVlSG9va3ModGhpcyxhKSxcImZ4XCI9PT1hJiZcImlucHJvZ3Jlc3NcIiE9PWNbMF0mJm4uZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24uZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MSxlPW4uRGVmZXJyZWQoKSxmPXRoaXMsZz10aGlzLmxlbmd0aCxoPWZ1bmN0aW9uKCl7LS1kfHxlLnJlc29sdmVXaXRoKGYsW2ZdKX07XCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGE9YXx8XCJmeFwiO3doaWxlKGctLSljPUwuZ2V0KGZbZ10sYStcInF1ZXVlSG9va3NcIiksYyYmYy5lbXB0eSYmKGQrKyxjLmVtcHR5LmFkZChoKSk7cmV0dXJuIGgoKSxlLnByb21pc2UoYil9fSk7dmFyIFE9L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLFI9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLFM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1ifHxhLFwibm9uZVwiPT09bi5jc3MoYSxcImRpc3BsYXlcIil8fCFuLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKX0sVD0vXig/OmNoZWNrYm94fHJhZGlvKSQvaTshZnVuY3Rpb24oKXt2YXIgYT1sLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxiPWEuYXBwZW5kQ2hpbGQobC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxjPWwuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Muc2V0QXR0cmlidXRlKFwidHlwZVwiLFwicmFkaW9cIiksYy5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGMuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwidFwiKSxiLmFwcGVuZENoaWxkKGMpLGsuY2hlY2tDbG9uZT1iLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxiLmlubmVySFRNTD1cIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIixrLm5vQ2xvbmVDaGVja2VkPSEhYi5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWV9KCk7dmFyIFU9XCJ1bmRlZmluZWRcIjtrLmZvY3VzaW5CdWJibGVzPVwib25mb2N1c2luXCJpbiBhO3ZhciBWPS9ea2V5LyxXPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFg9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFk9L14oW14uXSopKD86XFwuKC4rKXwpJC87ZnVuY3Rpb24gWigpe3JldHVybiEwfWZ1bmN0aW9uICQoKXtyZXR1cm4hMX1mdW5jdGlvbiBfKCl7dHJ5e3JldHVybiBsLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goYSl7fX1uLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxvLHAscSxyPUwuZ2V0KGEpO2lmKHIpe2MuaGFuZGxlciYmKGY9YyxjPWYuaGFuZGxlcixlPWYuc2VsZWN0b3IpLGMuZ3VpZHx8KGMuZ3VpZD1uLmd1aWQrKyksKGk9ci5ldmVudHMpfHwoaT1yLmV2ZW50cz17fSksKGc9ci5oYW5kbGUpfHwoZz1yLmhhbmRsZT1mdW5jdGlvbihiKXtyZXR1cm4gdHlwZW9mIG4hPT1VJiZuLmV2ZW50LnRyaWdnZXJlZCE9PWIudHlwZT9uLmV2ZW50LmRpc3BhdGNoLmFwcGx5KGEsYXJndW1lbnRzKTp2b2lkIDB9KSxiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWg9WS5leGVjKGJbal0pfHxbXSxvPXE9aFsxXSxwPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8mJihsPW4uZXZlbnQuc3BlY2lhbFtvXXx8e30sbz0oZT9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8byxsPW4uZXZlbnQuc3BlY2lhbFtvXXx8e30saz1uLmV4dGVuZCh7dHlwZTpvLG9yaWdUeXBlOnEsZGF0YTpkLGhhbmRsZXI6YyxndWlkOmMuZ3VpZCxzZWxlY3RvcjplLG5lZWRzQ29udGV4dDplJiZuLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoZSksbmFtZXNwYWNlOnAuam9pbihcIi5cIil9LGYpLChtPWlbb10pfHwobT1pW29dPVtdLG0uZGVsZWdhdGVDb3VudD0wLGwuc2V0dXAmJmwuc2V0dXAuY2FsbChhLGQscCxnKSE9PSExfHxhLmFkZEV2ZW50TGlzdGVuZXImJmEuYWRkRXZlbnRMaXN0ZW5lcihvLGcsITEpKSxsLmFkZCYmKGwuYWRkLmNhbGwoYSxrKSxrLmhhbmRsZXIuZ3VpZHx8KGsuaGFuZGxlci5ndWlkPWMuZ3VpZCkpLGU/bS5zcGxpY2UobS5kZWxlZ2F0ZUNvdW50KyssMCxrKTptLnB1c2goayksbi5ldmVudC5nbG9iYWxbb109ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxvLHAscSxyPUwuaGFzRGF0YShhKSYmTC5nZXQoYSk7aWYociYmKGk9ci5ldmVudHMpKXtiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9WS5leGVjKGJbal0pfHxbXSxvPXE9aFsxXSxwPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8pe2w9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxvLG09aVtvXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksZz1mPW0ubGVuZ3RoO3doaWxlKGYtLSlrPW1bZl0sIWUmJnEhPT1rLm9yaWdUeXBlfHxjJiZjLmd1aWQhPT1rLmd1aWR8fGgmJiFoLnRlc3Qoay5uYW1lc3BhY2UpfHxkJiZkIT09ay5zZWxlY3RvciYmKFwiKipcIiE9PWR8fCFrLnNlbGVjdG9yKXx8KG0uc3BsaWNlKGYsMSksay5zZWxlY3RvciYmbS5kZWxlZ2F0ZUNvdW50LS0sbC5yZW1vdmUmJmwucmVtb3ZlLmNhbGwoYSxrKSk7ZyYmIW0ubGVuZ3RoJiYobC50ZWFyZG93biYmbC50ZWFyZG93bi5jYWxsKGEscCxyLmhhbmRsZSkhPT0hMXx8bi5yZW1vdmVFdmVudChhLG8sci5oYW5kbGUpLGRlbGV0ZSBpW29dKX1lbHNlIGZvcihvIGluIGkpbi5ldmVudC5yZW1vdmUoYSxvK2Jbal0sYyxkLCEwKTtuLmlzRW1wdHlPYmplY3QoaSkmJihkZWxldGUgci5oYW5kbGUsTC5yZW1vdmUoYSxcImV2ZW50c1wiKSl9fSx0cmlnZ2VyOmZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmLGcsaCxpLGssbSxvLHA9W2R8fGxdLHE9ai5jYWxsKGIsXCJ0eXBlXCIpP2IudHlwZTpiLHI9ai5jYWxsKGIsXCJuYW1lc3BhY2VcIik/Yi5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpOltdO2lmKGc9aD1kPWR8fGwsMyE9PWQubm9kZVR5cGUmJjghPT1kLm5vZGVUeXBlJiYhWC50ZXN0KHErbi5ldmVudC50cmlnZ2VyZWQpJiYocS5pbmRleE9mKFwiLlwiKT49MCYmKHI9cS5zcGxpdChcIi5cIikscT1yLnNoaWZ0KCksci5zb3J0KCkpLGs9cS5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrcSxiPWJbbi5leHBhbmRvXT9iOm5ldyBuLkV2ZW50KHEsXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGIuaXNUcmlnZ2VyPWU/MjozLGIubmFtZXNwYWNlPXIuam9pbihcIi5cIiksYi5uYW1lc3BhY2VfcmU9Yi5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK3Iuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsYi5yZXN1bHQ9dm9pZCAwLGIudGFyZ2V0fHwoYi50YXJnZXQ9ZCksYz1udWxsPT1jP1tiXTpuLm1ha2VBcnJheShjLFtiXSksbz1uLmV2ZW50LnNwZWNpYWxbcV18fHt9LGV8fCFvLnRyaWdnZXJ8fG8udHJpZ2dlci5hcHBseShkLGMpIT09ITEpKXtpZighZSYmIW8ubm9CdWJibGUmJiFuLmlzV2luZG93KGQpKXtmb3IoaT1vLmRlbGVnYXRlVHlwZXx8cSxYLnRlc3QoaStxKXx8KGc9Zy5wYXJlbnROb2RlKTtnO2c9Zy5wYXJlbnROb2RlKXAucHVzaChnKSxoPWc7aD09PShkLm93bmVyRG9jdW1lbnR8fGwpJiZwLnB1c2goaC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3d8fGEpfWY9MDt3aGlsZSgoZz1wW2YrK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1mPjE/aTpvLmJpbmRUeXBlfHxxLG09KEwuZ2V0KGcsXCJldmVudHNcIil8fHt9KVtiLnR5cGVdJiZMLmdldChnLFwiaGFuZGxlXCIpLG0mJm0uYXBwbHkoZyxjKSxtPWsmJmdba10sbSYmbS5hcHBseSYmbi5hY2NlcHREYXRhKGcpJiYoYi5yZXN1bHQ9bS5hcHBseShnLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7cmV0dXJuIGIudHlwZT1xLGV8fGIuaXNEZWZhdWx0UHJldmVudGVkKCl8fG8uX2RlZmF1bHQmJm8uX2RlZmF1bHQuYXBwbHkocC5wb3AoKSxjKSE9PSExfHwhbi5hY2NlcHREYXRhKGQpfHxrJiZuLmlzRnVuY3Rpb24oZFtxXSkmJiFuLmlzV2luZG93KGQpJiYoaD1kW2tdLGgmJihkW2tdPW51bGwpLG4uZXZlbnQudHJpZ2dlcmVkPXEsZFtxXSgpLG4uZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxoJiYoZFtrXT1oKSksYi5yZXN1bHR9fSxkaXNwYXRjaDpmdW5jdGlvbihhKXthPW4uZXZlbnQuZml4KGEpO3ZhciBiLGMsZSxmLGcsaD1bXSxpPWQuY2FsbChhcmd1bWVudHMpLGo9KEwuZ2V0KHRoaXMsXCJldmVudHNcIil8fHt9KVthLnR5cGVdfHxbXSxrPW4uZXZlbnQuc3BlY2lhbFthLnR5cGVdfHx7fTtpZihpWzBdPWEsYS5kZWxlZ2F0ZVRhcmdldD10aGlzLCFrLnByZURpc3BhdGNofHxrLnByZURpc3BhdGNoLmNhbGwodGhpcyxhKSE9PSExKXtoPW4uZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGEsaiksYj0wO3doaWxlKChmPWhbYisrXSkmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe2EuY3VycmVudFRhcmdldD1mLmVsZW0sYz0wO3doaWxlKChnPWYuaGFuZGxlcnNbYysrXSkmJiFhLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpKCFhLm5hbWVzcGFjZV9yZXx8YS5uYW1lc3BhY2VfcmUudGVzdChnLm5hbWVzcGFjZSkpJiYoYS5oYW5kbGVPYmo9ZyxhLmRhdGE9Zy5kYXRhLGU9KChuLmV2ZW50LnNwZWNpYWxbZy5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGcuaGFuZGxlcikuYXBwbHkoZi5lbGVtLGkpLHZvaWQgMCE9PWUmJihhLnJlc3VsdD1lKT09PSExJiYoYS5wcmV2ZW50RGVmYXVsdCgpLGEuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gay5wb3N0RGlzcGF0Y2gmJmsucG9zdERpc3BhdGNoLmNhbGwodGhpcyxhKSxhLnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZz1bXSxoPWIuZGVsZWdhdGVDb3VudCxpPWEudGFyZ2V0O2lmKGgmJmkubm9kZVR5cGUmJighYS5idXR0b258fFwiY2xpY2tcIiE9PWEudHlwZSkpZm9yKDtpIT09dGhpcztpPWkucGFyZW50Tm9kZXx8dGhpcylpZihpLmRpc2FibGVkIT09ITB8fFwiY2xpY2tcIiE9PWEudHlwZSl7Zm9yKGQ9W10sYz0wO2g+YztjKyspZj1iW2NdLGU9Zi5zZWxlY3RvcitcIiBcIix2b2lkIDA9PT1kW2VdJiYoZFtlXT1mLm5lZWRzQ29udGV4dD9uKGUsdGhpcykuaW5kZXgoaSk+PTA6bi5maW5kKGUsdGhpcyxudWxsLFtpXSkubGVuZ3RoKSxkW2VdJiZkLnB1c2goZik7ZC5sZW5ndGgmJmcucHVzaCh7ZWxlbTppLGhhbmRsZXJzOmR9KX1yZXR1cm4gaDxiLmxlbmd0aCYmZy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6Yi5zbGljZShoKX0pLGd9LHByb3BzOlwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLGZpeEhvb2tzOnt9LGtleUhvb2tzOntwcm9wczpcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksZmlsdGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGw9PWEud2hpY2gmJihhLndoaWNoPW51bGwhPWIuY2hhckNvZGU/Yi5jaGFyQ29kZTpiLmtleUNvZGUpLGF9fSxtb3VzZUhvb2tzOntwcm9wczpcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxmaWx0ZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj1iLmJ1dHRvbjtyZXR1cm4gbnVsbD09YS5wYWdlWCYmbnVsbCE9Yi5jbGllbnRYJiYoYz1hLnRhcmdldC5vd25lckRvY3VtZW50fHxsLGQ9Yy5kb2N1bWVudEVsZW1lbnQsZT1jLmJvZHksYS5wYWdlWD1iLmNsaWVudFgrKGQmJmQuc2Nyb2xsTGVmdHx8ZSYmZS5zY3JvbGxMZWZ0fHwwKS0oZCYmZC5jbGllbnRMZWZ0fHxlJiZlLmNsaWVudExlZnR8fDApLGEucGFnZVk9Yi5jbGllbnRZKyhkJiZkLnNjcm9sbFRvcHx8ZSYmZS5zY3JvbGxUb3B8fDApLShkJiZkLmNsaWVudFRvcHx8ZSYmZS5jbGllbnRUb3B8fDApKSxhLndoaWNofHx2b2lkIDA9PT1mfHwoYS53aGljaD0xJmY/MToyJmY/Mzo0JmY/MjowKSxhfX0sZml4OmZ1bmN0aW9uKGEpe2lmKGFbbi5leHBhbmRvXSlyZXR1cm4gYTt2YXIgYixjLGQsZT1hLnR5cGUsZj1hLGc9dGhpcy5maXhIb29rc1tlXTtnfHwodGhpcy5maXhIb29rc1tlXT1nPVcudGVzdChlKT90aGlzLm1vdXNlSG9va3M6Vi50ZXN0KGUpP3RoaXMua2V5SG9va3M6e30pLGQ9Zy5wcm9wcz90aGlzLnByb3BzLmNvbmNhdChnLnByb3BzKTp0aGlzLnByb3BzLGE9bmV3IG4uRXZlbnQoZiksYj1kLmxlbmd0aDt3aGlsZShiLS0pYz1kW2JdLGFbY109ZltjXTtyZXR1cm4gYS50YXJnZXR8fChhLnRhcmdldD1sKSwzPT09YS50YXJnZXQubm9kZVR5cGUmJihhLnRhcmdldD1hLnRhcmdldC5wYXJlbnROb2RlKSxnLmZpbHRlcj9nLmZpbHRlcihhLGYpOmF9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxmb2N1czp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzIT09XygpJiZ0aGlzLmZvY3VzPyh0aGlzLmZvY3VzKCksITEpOnZvaWQgMH0sZGVsZWdhdGVUeXBlOlwiZm9jdXNpblwifSxibHVyOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM9PT1fKCkmJnRoaXMuYmx1cj8odGhpcy5ibHVyKCksITEpOnZvaWQgMH0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm5cImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2smJm4ubm9kZU5hbWUodGhpcyxcImlucHV0XCIpPyh0aGlzLmNsaWNrKCksITEpOnZvaWQgMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ubm9kZU5hbWUoYS50YXJnZXQsXCJhXCIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dm9pZCAwIT09YS5yZXN1bHQmJmEub3JpZ2luYWxFdmVudCYmKGEub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1hLnJlc3VsdCl9fX0sc2ltdWxhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bi5leHRlbmQobmV3IG4uRXZlbnQsYyx7dHlwZTphLGlzU2ltdWxhdGVkOiEwLG9yaWdpbmFsRXZlbnQ6e319KTtkP24uZXZlbnQudHJpZ2dlcihlLG51bGwsYik6bi5ldmVudC5kaXNwYXRjaC5jYWxsKGIsZSksZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmYy5wcmV2ZW50RGVmYXVsdCgpfX0sbi5yZW1vdmVFdmVudD1mdW5jdGlvbihhLGIsYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLCExKX0sbi5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2Ygbi5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/WjokKTp0aGlzLnR5cGU9YSxiJiZuLmV4dGVuZCh0aGlzLGIpLHRoaXMudGltZVN0YW1wPWEmJmEudGltZVN0YW1wfHxuLm5vdygpLHZvaWQodGhpc1tuLmV4cGFuZG9dPSEwKSk6bmV3IG4uRXZlbnQoYSxiKX0sbi5FdmVudC5wcm90b3R5cGU9e2lzRGVmYXVsdFByZXZlbnRlZDokLGlzUHJvcGFnYXRpb25TdG9wcGVkOiQsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6JCxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1aLGEmJmEucHJldmVudERlZmF1bHQmJmEucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9WixhJiZhLnN0b3BQcm9wYWdhdGlvbiYmYS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9WixhJiZhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0sbi5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIscG9pbnRlcmVudGVyOlwicG9pbnRlcm92ZXJcIixwb2ludGVybGVhdmU6XCJwb2ludGVyb3V0XCJ9LGZ1bmN0aW9uKGEsYil7bi5ldmVudC5zcGVjaWFsW2FdPXtkZWxlZ2F0ZVR5cGU6YixiaW5kVHlwZTpiLGhhbmRsZTpmdW5jdGlvbihhKXt2YXIgYyxkPXRoaXMsZT1hLnJlbGF0ZWRUYXJnZXQsZj1hLmhhbmRsZU9iajtyZXR1cm4oIWV8fGUhPT1kJiYhbi5jb250YWlucyhkLGUpKSYmKGEudHlwZT1mLm9yaWdUeXBlLGM9Zi5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxhLnR5cGU9YiksY319fSksay5mb2N1c2luQnViYmxlc3x8bi5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbihhKXtuLmV2ZW50LnNpbXVsYXRlKGIsYS50YXJnZXQsbi5ldmVudC5maXgoYSksITApfTtuLmV2ZW50LnNwZWNpYWxbYl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9TC5hY2Nlc3MoZCxiKTtlfHxkLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKSxMLmFjY2VzcyhkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPUwuYWNjZXNzKGQsYiktMTtlP0wuYWNjZXNzKGQsYixlKTooZC5yZW1vdmVFdmVudExpc3RlbmVyKGEsYywhMCksTC5yZW1vdmUoZCxiKSl9fX0pLG4uZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGc7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1jfHxiLGI9dm9pZCAwKTtmb3IoZyBpbiBhKXRoaXMub24oZyxiLGMsYVtnXSxlKTtyZXR1cm4gdGhpc31pZihudWxsPT1jJiZudWxsPT1kPyhkPWIsYz1iPXZvaWQgMCk6bnVsbD09ZCYmKFwic3RyaW5nXCI9PXR5cGVvZiBiPyhkPWMsYz12b2lkIDApOihkPWMsYz1iLGI9dm9pZCAwKSksZD09PSExKWQ9JDtlbHNlIGlmKCFkKXJldHVybiB0aGlzO3JldHVybiAxPT09ZSYmKGY9ZCxkPWZ1bmN0aW9uKGEpe3JldHVybiBuKCkub2ZmKGEpLGYuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxkLmd1aWQ9Zi5ndWlkfHwoZi5ndWlkPW4uZ3VpZCsrKSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bi5ldmVudC5hZGQodGhpcyxhLGQsYyxiKX0pfSxvbmU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYSxiLGMsZCwxKX0sb2ZmOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlO2lmKGEmJmEucHJldmVudERlZmF1bHQmJmEuaGFuZGxlT2JqKXJldHVybiBkPWEuaGFuZGxlT2JqLG4oYS5kZWxlZ2F0ZVRhcmdldCkub2ZmKGQubmFtZXNwYWNlP2Qub3JpZ1R5cGUrXCIuXCIrZC5uYW1lc3BhY2U6ZC5vcmlnVHlwZSxkLnNlbGVjdG9yLGQuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgYSl7Zm9yKGUgaW4gYSl0aGlzLm9mZihlLGIsYVtlXSk7cmV0dXJuIHRoaXN9cmV0dXJuKGI9PT0hMXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYikmJihjPWIsYj12b2lkIDApLGM9PT0hMSYmKGM9JCksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bi5ldmVudC5yZW1vdmUodGhpcyxhLGMsYil9KX0sdHJpZ2dlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtuLmV2ZW50LnRyaWdnZXIoYSxiLHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpc1swXTtyZXR1cm4gYz9uLmV2ZW50LnRyaWdnZXIoYSxiLGMsITApOnZvaWQgMH19KTt2YXIgYWE9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLGJhPS88KFtcXHc6XSspLyxjYT0vPHwmIz9cXHcrOy8sZGE9LzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxlYT0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLGZhPS9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksZ2E9L150cnVlXFwvKC4qKS8saGE9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLGlhPXtvcHRpb246WzEsXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsXCI8L3NlbGVjdD5cIl0sdGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSxjb2w6WzIsXCI8dGFibGU+PGNvbGdyb3VwPlwiLFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6WzAsXCJcIixcIlwiXX07aWEub3B0Z3JvdXA9aWEub3B0aW9uLGlhLnRib2R5PWlhLnRmb290PWlhLmNvbGdyb3VwPWlhLmNhcHRpb249aWEudGhlYWQsaWEudGg9aWEudGQ7ZnVuY3Rpb24gamEoYSxiKXtyZXR1cm4gbi5ub2RlTmFtZShhLFwidGFibGVcIikmJm4ubm9kZU5hbWUoMTEhPT1iLm5vZGVUeXBlP2I6Yi5maXJzdENoaWxkLFwidHJcIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdfHxhLmFwcGVuZENoaWxkKGEub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikpOmF9ZnVuY3Rpb24ga2EoYSl7cmV0dXJuIGEudHlwZT0obnVsbCE9PWEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkrXCIvXCIrYS50eXBlLGF9ZnVuY3Rpb24gbGEoYSl7dmFyIGI9Z2EuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxhfWZ1bmN0aW9uIG1hKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtkPmM7YysrKUwuc2V0KGFbY10sXCJnbG9iYWxFdmFsXCIsIWJ8fEwuZ2V0KGJbY10sXCJnbG9iYWxFdmFsXCIpKX1mdW5jdGlvbiBuYShhLGIpe3ZhciBjLGQsZSxmLGcsaCxpLGo7aWYoMT09PWIubm9kZVR5cGUpe2lmKEwuaGFzRGF0YShhKSYmKGY9TC5hY2Nlc3MoYSksZz1MLnNldChiLGYpLGo9Zi5ldmVudHMpKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGUgaW4gailmb3IoYz0wLGQ9altlXS5sZW5ndGg7ZD5jO2MrKyluLmV2ZW50LmFkZChiLGUsaltlXVtjXSl9TS5oYXNEYXRhKGEpJiYoaD1NLmFjY2VzcyhhKSxpPW4uZXh0ZW5kKHt9LGgpLE0uc2V0KGIsaSkpfX1mdW5jdGlvbiBvYShhLGIpe3ZhciBjPWEuZ2V0RWxlbWVudHNCeVRhZ05hbWU/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHxcIipcIik6YS5xdWVyeVNlbGVjdG9yQWxsP2EucXVlcnlTZWxlY3RvckFsbChifHxcIipcIik6W107cmV0dXJuIHZvaWQgMD09PWJ8fGImJm4ubm9kZU5hbWUoYSxiKT9uLm1lcmdlKFthXSxjKTpjfWZ1bmN0aW9uIHBhKGEsYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wiaW5wdXRcIj09PWMmJlQudGVzdChhLnR5cGUpP2IuY2hlY2tlZD1hLmNoZWNrZWQ6KFwiaW5wdXRcIj09PWN8fFwidGV4dGFyZWFcIj09PWMpJiYoYi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfW4uZXh0ZW5kKHtjbG9uZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNsb25lTm9kZSghMCksaT1uLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZighKGsubm9DbG9uZUNoZWNrZWR8fDEhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGV8fG4uaXNYTUxEb2MoYSkpKWZvcihnPW9hKGgpLGY9b2EoYSksZD0wLGU9Zi5sZW5ndGg7ZT5kO2QrKylwYShmW2RdLGdbZF0pO2lmKGIpaWYoYylmb3IoZj1mfHxvYShhKSxnPWd8fG9hKGgpLGQ9MCxlPWYubGVuZ3RoO2U+ZDtkKyspbmEoZltkXSxnW2RdKTtlbHNlIG5hKGEsaCk7cmV0dXJuIGc9b2EoaCxcInNjcmlwdFwiKSxnLmxlbmd0aD4wJiZtYShnLCFpJiZvYShhLFwic2NyaXB0XCIpKSxofSxidWlsZEZyYWdtZW50OmZ1bmN0aW9uKGEsYixjLGQpe2Zvcih2YXIgZSxmLGcsaCxpLGosaz1iLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxsPVtdLG09MCxvPWEubGVuZ3RoO28+bTttKyspaWYoZT1hW21dLGV8fDA9PT1lKWlmKFwib2JqZWN0XCI9PT1uLnR5cGUoZSkpbi5tZXJnZShsLGUubm9kZVR5cGU/W2VdOmUpO2Vsc2UgaWYoY2EudGVzdChlKSl7Zj1mfHxrLmFwcGVuZENoaWxkKGIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksZz0oYmEuZXhlYyhlKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksaD1pYVtnXXx8aWEuX2RlZmF1bHQsZi5pbm5lckhUTUw9aFsxXStlLnJlcGxhY2UoYWEsXCI8JDE+PC8kMj5cIikraFsyXSxqPWhbMF07d2hpbGUoai0tKWY9Zi5sYXN0Q2hpbGQ7bi5tZXJnZShsLGYuY2hpbGROb2RlcyksZj1rLmZpcnN0Q2hpbGQsZi50ZXh0Q29udGVudD1cIlwifWVsc2UgbC5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoZSkpO2sudGV4dENvbnRlbnQ9XCJcIixtPTA7d2hpbGUoZT1sW20rK10paWYoKCFkfHwtMT09PW4uaW5BcnJheShlLGQpKSYmKGk9bi5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSksZj1vYShrLmFwcGVuZENoaWxkKGUpLFwic2NyaXB0XCIpLGkmJm1hKGYpLGMpKXtqPTA7d2hpbGUoZT1mW2orK10pZmEudGVzdChlLnR5cGV8fFwiXCIpJiZjLnB1c2goZSl9cmV0dXJuIGt9LGNsZWFuRGF0YTpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkLGUsZj1uLmV2ZW50LnNwZWNpYWwsZz0wO3ZvaWQgMCE9PShjPWFbZ10pO2crKyl7aWYobi5hY2NlcHREYXRhKGMpJiYoZT1jW0wuZXhwYW5kb10sZSYmKGI9TC5jYWNoZVtlXSkpKXtpZihiLmV2ZW50cylmb3IoZCBpbiBiLmV2ZW50cylmW2RdP24uZXZlbnQucmVtb3ZlKGMsZCk6bi5yZW1vdmVFdmVudChjLGQsYi5oYW5kbGUpO0wuY2FjaGVbZV0mJmRlbGV0ZSBMLmNhY2hlW2VdfWRlbGV0ZSBNLmNhY2hlW2NbTS5leHBhbmRvXV19fX0pLG4uZm4uZXh0ZW5kKHt0ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBKKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWE/bi50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCl7KDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKSYmKHRoaXMudGV4dENvbnRlbnQ9YSl9KX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPWphKHRoaXMsYSk7Yi5hcHBlbmRDaGlsZChhKX19KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9amEodGhpcyxhKTtiLmluc2VydEJlZm9yZShhLGIuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzLm5leHRTaWJsaW5nKX0pfSxyZW1vdmU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMsZD1hP24uZmlsdGVyKGEsdGhpcyk6dGhpcyxlPTA7bnVsbCE9KGM9ZFtlXSk7ZSsrKWJ8fDEhPT1jLm5vZGVUeXBlfHxuLmNsZWFuRGF0YShvYShjKSksYy5wYXJlbnROb2RlJiYoYiYmbi5jb250YWlucyhjLm93bmVyRG9jdW1lbnQsYykmJm1hKG9hKGMsXCJzY3JpcHRcIikpLGMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKSk7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGI9MDtudWxsIT0oYT10aGlzW2JdKTtiKyspMT09PWEubm9kZVR5cGUmJihuLmNsZWFuRGF0YShvYShhLCExKSksYS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1udWxsPT1hPyExOmEsYj1udWxsPT1iP2E6Yix0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBuLmNsb25lKHRoaXMsYSxiKX0pfSxodG1sOmZ1bmN0aW9uKGEpe3JldHVybiBKKHRoaXMsZnVuY3Rpb24oYSl7dmFyIGI9dGhpc1swXXx8e30sYz0wLGQ9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09YSYmMT09PWIubm9kZVR5cGUpcmV0dXJuIGIuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiYhZGEudGVzdChhKSYmIWlhWyhiYS5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2E9YS5yZXBsYWNlKGFhLFwiPCQxPjwvJDI+XCIpO3RyeXtmb3IoO2Q+YztjKyspYj10aGlzW2NdfHx7fSwxPT09Yi5ub2RlVHlwZSYmKG4uY2xlYW5EYXRhKG9hKGIsITEpKSxiLmlubmVySFRNTD1hKTtiPTB9Y2F0Y2goZSl7fX1iJiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGEpfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihiKXthPXRoaXMucGFyZW50Tm9kZSxuLmNsZWFuRGF0YShvYSh0aGlzKSksYSYmYS5yZXBsYWNlQ2hpbGQoYix0aGlzKX0pLGEmJihhLmxlbmd0aHx8YS5ub2RlVHlwZSk/dGhpczp0aGlzLnJlbW92ZSgpfSxkZXRhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucmVtb3ZlKGEsITApfSxkb21NYW5pcDpmdW5jdGlvbihhLGIpe2E9ZS5hcHBseShbXSxhKTt2YXIgYyxkLGYsZyxoLGksaj0wLGw9dGhpcy5sZW5ndGgsbT10aGlzLG89bC0xLHA9YVswXSxxPW4uaXNGdW5jdGlvbihwKTtpZihxfHxsPjEmJlwic3RyaW5nXCI9PXR5cGVvZiBwJiYhay5jaGVja0Nsb25lJiZlYS50ZXN0KHApKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYyl7dmFyIGQ9bS5lcShjKTtxJiYoYVswXT1wLmNhbGwodGhpcyxjLGQuaHRtbCgpKSksZC5kb21NYW5pcChhLGIpfSk7aWYobCYmKGM9bi5idWlsZEZyYWdtZW50KGEsdGhpc1swXS5vd25lckRvY3VtZW50LCExLHRoaXMpLGQ9Yy5maXJzdENoaWxkLDE9PT1jLmNoaWxkTm9kZXMubGVuZ3RoJiYoYz1kKSxkKSl7Zm9yKGY9bi5tYXAob2EoYyxcInNjcmlwdFwiKSxrYSksZz1mLmxlbmd0aDtsPmo7aisrKWg9YyxqIT09byYmKGg9bi5jbG9uZShoLCEwLCEwKSxnJiZuLm1lcmdlKGYsb2EoaCxcInNjcmlwdFwiKSkpLGIuY2FsbCh0aGlzW2pdLGgsaik7aWYoZylmb3IoaT1mW2YubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsbi5tYXAoZixsYSksaj0wO2c+ajtqKyspaD1mW2pdLGZhLnRlc3QoaC50eXBlfHxcIlwiKSYmIUwuYWNjZXNzKGgsXCJnbG9iYWxFdmFsXCIpJiZuLmNvbnRhaW5zKGksaCkmJihoLnNyYz9uLl9ldmFsVXJsJiZuLl9ldmFsVXJsKGguc3JjKTpuLmdsb2JhbEV2YWwoaC50ZXh0Q29udGVudC5yZXBsYWNlKGhhLFwiXCIpKSl9cmV0dXJuIHRoaXN9fSksbi5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGEsYil7bi5mblthXT1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD1bXSxlPW4oYSksZz1lLmxlbmd0aC0xLGg9MDtnPj1oO2grKyljPWg9PT1nP3RoaXM6dGhpcy5jbG9uZSghMCksbihlW2hdKVtiXShjKSxmLmFwcGx5KGQsYy5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQpfX0pO3ZhciBxYSxyYT17fTtmdW5jdGlvbiBzYShiLGMpe3ZhciBkLGU9bihjLmNyZWF0ZUVsZW1lbnQoYikpLmFwcGVuZFRvKGMuYm9keSksZj1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlJiYoZD1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlKGVbMF0pKT9kLmRpc3BsYXk6bi5jc3MoZVswXSxcImRpc3BsYXlcIik7cmV0dXJuIGUuZGV0YWNoKCksZn1mdW5jdGlvbiB0YShhKXt2YXIgYj1sLGM9cmFbYV07cmV0dXJuIGN8fChjPXNhKGEsYiksXCJub25lXCIhPT1jJiZjfHwocWE9KHFhfHxuKFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiKSkuYXBwZW5kVG8oYi5kb2N1bWVudEVsZW1lbnQpLGI9cWFbMF0uY29udGVudERvY3VtZW50LGIud3JpdGUoKSxiLmNsb3NlKCksYz1zYShhLGIpLHFhLmRldGFjaCgpKSxyYVthXT1jKSxjfXZhciB1YT0vXm1hcmdpbi8sdmE9bmV3IFJlZ0V4cChcIl4oXCIrUStcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSx3YT1mdW5jdGlvbihiKXtyZXR1cm4gYi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW5lcj9iLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpOmEuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpfTtmdW5jdGlvbiB4YShhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fHdhKGEpLGMmJihnPWMuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXSksYyYmKFwiXCIhPT1nfHxuLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKXx8KGc9bi5zdHlsZShhLGIpKSx2YS50ZXN0KGcpJiZ1YS50ZXN0KGIpJiYoZD1oLndpZHRoLGU9aC5taW5XaWR0aCxmPWgubWF4V2lkdGgsaC5taW5XaWR0aD1oLm1heFdpZHRoPWgud2lkdGg9ZyxnPWMud2lkdGgsaC53aWR0aD1kLGgubWluV2lkdGg9ZSxoLm1heFdpZHRoPWYpKSx2b2lkIDAhPT1nP2crXCJcIjpnfWZ1bmN0aW9uIHlhKGEsYil7cmV0dXJue2dldDpmdW5jdGlvbigpe3JldHVybiBhKCk/dm9pZCBkZWxldGUgdGhpcy5nZXQ6KHRoaXMuZ2V0PWIpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fSFmdW5jdGlvbigpe3ZhciBiLGMsZD1sLmRvY3VtZW50RWxlbWVudCxlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxmPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZihmLnN0eWxlKXtmLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIixmLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIixrLmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT1mLnN0eWxlLmJhY2tncm91bmRDbGlwLGUuc3R5bGUuY3NzVGV4dD1cImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCIsZS5hcHBlbmRDaGlsZChmKTtmdW5jdGlvbiBnKCl7Zi5zdHlsZS5jc3NUZXh0PVwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIixmLmlubmVySFRNTD1cIlwiLGQuYXBwZW5kQ2hpbGQoZSk7dmFyIGc9YS5nZXRDb21wdXRlZFN0eWxlKGYsbnVsbCk7Yj1cIjElXCIhPT1nLnRvcCxjPVwiNHB4XCI9PT1nLndpZHRoLGQucmVtb3ZlQ2hpbGQoZSl9YS5nZXRDb21wdXRlZFN0eWxlJiZuLmV4dGVuZChrLHtwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGcoKSxifSxib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT1jJiZnKCksY30scmVsaWFibGVNYXJnaW5SaWdodDpmdW5jdGlvbigpe3ZhciBiLGM9Zi5hcHBlbmRDaGlsZChsLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO3JldHVybiBjLnN0eWxlLmNzc1RleHQ9Zi5zdHlsZS5jc3NUZXh0PVwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCIsYy5zdHlsZS5tYXJnaW5SaWdodD1jLnN0eWxlLndpZHRoPVwiMFwiLGYuc3R5bGUud2lkdGg9XCIxcHhcIixkLmFwcGVuZENoaWxkKGUpLGI9IXBhcnNlRmxvYXQoYS5nZXRDb21wdXRlZFN0eWxlKGMsbnVsbCkubWFyZ2luUmlnaHQpLGQucmVtb3ZlQ2hpbGQoZSksZi5yZW1vdmVDaGlsZChjKSxifX0pfX0oKSxuLnN3YXA9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXt9O2ZvcihmIGluIGIpZ1tmXT1hLnN0eWxlW2ZdLGEuc3R5bGVbZl09YltmXTtlPWMuYXBwbHkoYSxkfHxbXSk7Zm9yKGYgaW4gYilhLnN0eWxlW2ZdPWdbZl07cmV0dXJuIGV9O3ZhciB6YT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sQWE9bmV3IFJlZ0V4cChcIl4oXCIrUStcIikoLiopJFwiLFwiaVwiKSxCYT1uZXcgUmVnRXhwKFwiXihbKy1dKT0oXCIrUStcIilcIixcImlcIiksQ2E9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LERhPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn0sRWE9W1wiV2Via2l0XCIsXCJPXCIsXCJNb3pcIixcIm1zXCJdO2Z1bmN0aW9uIEZhKGEsYil7aWYoYiBpbiBhKXJldHVybiBiO3ZhciBjPWJbMF0udG9VcHBlckNhc2UoKStiLnNsaWNlKDEpLGQ9YixlPUVhLmxlbmd0aDt3aGlsZShlLS0paWYoYj1FYVtlXStjLGIgaW4gYSlyZXR1cm4gYjtyZXR1cm4gZH1mdW5jdGlvbiBHYShhLGIsYyl7dmFyIGQ9QWEuZXhlYyhiKTtyZXR1cm4gZD9NYXRoLm1heCgwLGRbMV0tKGN8fDApKSsoZFsyXXx8XCJweFwiKTpifWZ1bmN0aW9uIEhhKGEsYixjLGQsZSl7Zm9yKHZhciBmPWM9PT0oZD9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PWI/MTowLGc9MDs0PmY7Zis9MilcIm1hcmdpblwiPT09YyYmKGcrPW4uY3NzKGEsYytSW2ZdLCEwLGUpKSxkPyhcImNvbnRlbnRcIj09PWMmJihnLT1uLmNzcyhhLFwicGFkZGluZ1wiK1JbZl0sITAsZSkpLFwibWFyZ2luXCIhPT1jJiYoZy09bi5jc3MoYSxcImJvcmRlclwiK1JbZl0rXCJXaWR0aFwiLCEwLGUpKSk6KGcrPW4uY3NzKGEsXCJwYWRkaW5nXCIrUltmXSwhMCxlKSxcInBhZGRpbmdcIiE9PWMmJihnKz1uLmNzcyhhLFwiYm9yZGVyXCIrUltmXStcIldpZHRoXCIsITAsZSkpKTtyZXR1cm4gZ31mdW5jdGlvbiBJYShhLGIsYyl7dmFyIGQ9ITAsZT1cIndpZHRoXCI9PT1iP2Eub2Zmc2V0V2lkdGg6YS5vZmZzZXRIZWlnaHQsZj13YShhKSxnPVwiYm9yZGVyLWJveFwiPT09bi5jc3MoYSxcImJveFNpemluZ1wiLCExLGYpO2lmKDA+PWV8fG51bGw9PWUpe2lmKGU9eGEoYSxiLGYpLCgwPmV8fG51bGw9PWUpJiYoZT1hLnN0eWxlW2JdKSx2YS50ZXN0KGUpKXJldHVybiBlO2Q9ZyYmKGsuYm94U2l6aW5nUmVsaWFibGUoKXx8ZT09PWEuc3R5bGVbYl0pLGU9cGFyc2VGbG9hdChlKXx8MH1yZXR1cm4gZStIYShhLGIsY3x8KGc/XCJib3JkZXJcIjpcImNvbnRlbnRcIiksZCxmKStcInB4XCJ9ZnVuY3Rpb24gSmEoYSxiKXtmb3IodmFyIGMsZCxlLGY9W10sZz0wLGg9YS5sZW5ndGg7aD5nO2crKylkPWFbZ10sZC5zdHlsZSYmKGZbZ109TC5nZXQoZCxcIm9sZGRpc3BsYXlcIiksYz1kLnN0eWxlLmRpc3BsYXksYj8oZltnXXx8XCJub25lXCIhPT1jfHwoZC5zdHlsZS5kaXNwbGF5PVwiXCIpLFwiXCI9PT1kLnN0eWxlLmRpc3BsYXkmJlMoZCkmJihmW2ddPUwuYWNjZXNzKGQsXCJvbGRkaXNwbGF5XCIsdGEoZC5ub2RlTmFtZSkpKSk6KGU9UyhkKSxcIm5vbmVcIj09PWMmJmV8fEwuc2V0KGQsXCJvbGRkaXNwbGF5XCIsZT9jOm4uY3NzKGQsXCJkaXNwbGF5XCIpKSkpO2ZvcihnPTA7aD5nO2crKylkPWFbZ10sZC5zdHlsZSYmKGImJlwibm9uZVwiIT09ZC5zdHlsZS5kaXNwbGF5JiZcIlwiIT09ZC5zdHlsZS5kaXNwbGF5fHwoZC5zdHlsZS5kaXNwbGF5PWI/ZltnXXx8XCJcIjpcIm5vbmVcIikpO3JldHVybiBhfW4uZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGEsYil7aWYoYil7dmFyIGM9eGEoYSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PWM/XCIxXCI6Y319fX0sY3NzTnVtYmVyOntjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7XCJmbG9hdFwiOlwiY3NzRmxvYXRcIn0sc3R5bGU6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoYSYmMyE9PWEubm9kZVR5cGUmJjghPT1hLm5vZGVUeXBlJiZhLnN0eWxlKXt2YXIgZSxmLGcsaD1uLmNhbWVsQ2FzZShiKSxpPWEuc3R5bGU7cmV0dXJuIGI9bi5jc3NQcm9wc1toXXx8KG4uY3NzUHJvcHNbaF09RmEoaSxoKSksZz1uLmNzc0hvb2tzW2JdfHxuLmNzc0hvb2tzW2hdLHZvaWQgMD09PWM/ZyYmXCJnZXRcImluIGcmJnZvaWQgMCE9PShlPWcuZ2V0KGEsITEsZCkpP2U6aVtiXTooZj10eXBlb2YgYyxcInN0cmluZ1wiPT09ZiYmKGU9QmEuZXhlYyhjKSkmJihjPShlWzFdKzEpKmVbMl0rcGFyc2VGbG9hdChuLmNzcyhhLGIpKSxmPVwibnVtYmVyXCIpLG51bGwhPWMmJmM9PT1jJiYoXCJudW1iZXJcIiE9PWZ8fG4uY3NzTnVtYmVyW2hdfHwoYys9XCJweFwiKSxrLmNsZWFyQ2xvbmVTdHlsZXx8XCJcIiE9PWN8fDAhPT1iLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpfHwoaVtiXT1cImluaGVyaXRcIiksZyYmXCJzZXRcImluIGcmJnZvaWQgMD09PShjPWcuc2V0KGEsYyxkKSl8fChpW2JdPWMpKSx2b2lkIDApfX0sY3NzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZyxoPW4uY2FtZWxDYXNlKGIpO3JldHVybiBiPW4uY3NzUHJvcHNbaF18fChuLmNzc1Byb3BzW2hdPUZhKGEuc3R5bGUsaCkpLGc9bi5jc3NIb29rc1tiXXx8bi5jc3NIb29rc1toXSxnJiZcImdldFwiaW4gZyYmKGU9Zy5nZXQoYSwhMCxjKSksdm9pZCAwPT09ZSYmKGU9eGEoYSxiLGQpKSxcIm5vcm1hbFwiPT09ZSYmYiBpbiBEYSYmKGU9RGFbYl0pLFwiXCI9PT1jfHxjPyhmPXBhcnNlRmxvYXQoZSksYz09PSEwfHxuLmlzTnVtZXJpYyhmKT9mfHwwOmUpOmV9fSksbi5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oYSxiKXtuLmNzc0hvb2tzW2JdPXtnZXQ6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBjP3phLnRlc3Qobi5jc3MoYSxcImRpc3BsYXlcIikpJiYwPT09YS5vZmZzZXRXaWR0aD9uLnN3YXAoYSxDYSxmdW5jdGlvbigpe3JldHVybiBJYShhLGIsZCl9KTpJYShhLGIsZCk6dm9pZCAwfSxzZXQ6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPWQmJndhKGEpO3JldHVybiBHYShhLGMsZD9IYShhLGIsZCxcImJvcmRlci1ib3hcIj09PW4uY3NzKGEsXCJib3hTaXppbmdcIiwhMSxlKSxlKTowKX19fSksbi5jc3NIb29rcy5tYXJnaW5SaWdodD15YShrLnJlbGlhYmxlTWFyZ2luUmlnaHQsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj9uLnN3YXAoYSx7ZGlzcGxheTpcImlubGluZS1ibG9ja1wifSx4YSxbYSxcIm1hcmdpblJpZ2h0XCJdKTp2b2lkIDB9KSxuLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihhLGIpe24uY3NzSG9va3NbYStiXT17ZXhwYW5kOmZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9e30sZj1cInN0cmluZ1wiPT10eXBlb2YgYz9jLnNwbGl0KFwiIFwiKTpbY107ND5kO2QrKyllW2ErUltkXStiXT1mW2RdfHxmW2QtMl18fGZbMF07cmV0dXJuIGV9fSx1YS50ZXN0KGEpfHwobi5jc3NIb29rc1thK2JdLnNldD1HYSl9KSxuLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIEoodGhpcyxmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPXt9LGc9MDtpZihuLmlzQXJyYXkoYikpe2ZvcihkPXdhKGEpLGU9Yi5sZW5ndGg7ZT5nO2crKylmW2JbZ11dPW4uY3NzKGEsYltnXSwhMSxkKTtyZXR1cm4gZn1yZXR1cm4gdm9pZCAwIT09Yz9uLnN0eWxlKGEsYixjKTpuLmNzcyhhLGIpfSxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0sc2hvdzpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYT9hP3RoaXMuc2hvdygpOnRoaXMuaGlkZSgpOnRoaXMuZWFjaChmdW5jdGlvbigpe1ModGhpcyk/bih0aGlzKS5zaG93KCk6bih0aGlzKS5oaWRlKCl9KX19KTtmdW5jdGlvbiBLYShhLGIsYyxkLGUpe3JldHVybiBuZXcgS2EucHJvdG90eXBlLmluaXQoYSxiLGMsZCxlKX1uLlR3ZWVuPUthLEthLnByb3RvdHlwZT17Y29uc3RydWN0b3I6S2EsaW5pdDpmdW5jdGlvbihhLGIsYyxkLGUsZil7dGhpcy5lbGVtPWEsdGhpcy5wcm9wPWMsdGhpcy5lYXNpbmc9ZXx8XCJzd2luZ1wiLHRoaXMub3B0aW9ucz1iLHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1kLHRoaXMudW5pdD1mfHwobi5jc3NOdW1iZXJbY10/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgYT1LYS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gYSYmYS5nZXQ/YS5nZXQodGhpcyk6S2EucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiLGM9S2EucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz1iPW4uZWFzaW5nW3RoaXMuZWFzaW5nXShhLHRoaXMub3B0aW9ucy5kdXJhdGlvbiphLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPWI9YSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqYit0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxjJiZjLnNldD9jLnNldCh0aGlzKTpLYS5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSxLYS5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9S2EucHJvdG90eXBlLEthLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gbnVsbD09YS5lbGVtW2EucHJvcF18fGEuZWxlbS5zdHlsZSYmbnVsbCE9YS5lbGVtLnN0eWxlW2EucHJvcF0/KGI9bi5jc3MoYS5lbGVtLGEucHJvcCxcIlwiKSxiJiZcImF1dG9cIiE9PWI/YjowKTphLmVsZW1bYS5wcm9wXX0sc2V0OmZ1bmN0aW9uKGEpe24uZnguc3RlcFthLnByb3BdP24uZnguc3RlcFthLnByb3BdKGEpOmEuZWxlbS5zdHlsZSYmKG51bGwhPWEuZWxlbS5zdHlsZVtuLmNzc1Byb3BzW2EucHJvcF1dfHxuLmNzc0hvb2tzW2EucHJvcF0pP24uc3R5bGUoYS5lbGVtLGEucHJvcCxhLm5vdythLnVuaXQpOmEuZWxlbVthLnByb3BdPWEubm93fX19LEthLnByb3BIb29rcy5zY3JvbGxUb3A9S2EucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihhKXthLmVsZW0ubm9kZVR5cGUmJmEuZWxlbS5wYXJlbnROb2RlJiYoYS5lbGVtW2EucHJvcF09YS5ub3cpfX0sbi5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihhKXtyZXR1cm4gYX0sc3dpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuLjUtTWF0aC5jb3MoYSpNYXRoLlBJKS8yfX0sbi5meD1LYS5wcm90b3R5cGUuaW5pdCxuLmZ4LnN0ZXA9e307dmFyIExhLE1hLE5hPS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxPYT1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIitRK1wiKShbYS16JV0qKSRcIixcImlcIiksUGE9L3F1ZXVlSG9va3MkLyxRYT1bVmFdLFJhPXtcIipcIjpbZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNyZWF0ZVR3ZWVuKGEsYiksZD1jLmN1cigpLGU9T2EuZXhlYyhiKSxmPWUmJmVbM118fChuLmNzc051bWJlclthXT9cIlwiOlwicHhcIiksZz0obi5jc3NOdW1iZXJbYV18fFwicHhcIiE9PWYmJitkKSYmT2EuZXhlYyhuLmNzcyhjLmVsZW0sYSkpLGg9MSxpPTIwO2lmKGcmJmdbM10hPT1mKXtmPWZ8fGdbM10sZT1lfHxbXSxnPStkfHwxO2RvIGg9aHx8XCIuNVwiLGcvPWgsbi5zdHlsZShjLmVsZW0sYSxnK2YpO3doaWxlKGghPT0oaD1jLmN1cigpL2QpJiYxIT09aCYmLS1pKX1yZXR1cm4gZSYmKGc9Yy5zdGFydD0rZ3x8K2R8fDAsYy51bml0PWYsYy5lbmQ9ZVsxXT9nKyhlWzFdKzEpKmVbMl06K2VbMl0pLGN9XX07ZnVuY3Rpb24gU2EoKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe0xhPXZvaWQgMH0pLExhPW4ubm93KCl9ZnVuY3Rpb24gVGEoYSxiKXt2YXIgYyxkPTAsZT17aGVpZ2h0OmF9O2ZvcihiPWI/MTowOzQ+ZDtkKz0yLWIpYz1SW2RdLGVbXCJtYXJnaW5cIitjXT1lW1wicGFkZGluZ1wiK2NdPWE7cmV0dXJuIGImJihlLm9wYWNpdHk9ZS53aWR0aD1hKSxlfWZ1bmN0aW9uIFVhKGEsYixjKXtmb3IodmFyIGQsZT0oUmFbYl18fFtdKS5jb25jYXQoUmFbXCIqXCJdKSxmPTAsZz1lLmxlbmd0aDtnPmY7ZisrKWlmKGQ9ZVtmXS5jYWxsKGMsYixhKSlyZXR1cm4gZH1mdW5jdGlvbiBWYShhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosayxsPXRoaXMsbT17fSxvPWEuc3R5bGUscD1hLm5vZGVUeXBlJiZTKGEpLHE9TC5nZXQoYSxcImZ4c2hvd1wiKTtjLnF1ZXVlfHwoaD1uLl9xdWV1ZUhvb2tzKGEsXCJmeFwiKSxudWxsPT1oLnVucXVldWVkJiYoaC51bnF1ZXVlZD0wLGk9aC5lbXB0eS5maXJlLGguZW1wdHkuZmlyZT1mdW5jdGlvbigpe2gudW5xdWV1ZWR8fGkoKX0pLGgudW5xdWV1ZWQrKyxsLmFsd2F5cyhmdW5jdGlvbigpe2wuYWx3YXlzKGZ1bmN0aW9uKCl7aC51bnF1ZXVlZC0tLG4ucXVldWUoYSxcImZ4XCIpLmxlbmd0aHx8aC5lbXB0eS5maXJlKCl9KX0pKSwxPT09YS5ub2RlVHlwZSYmKFwiaGVpZ2h0XCJpbiBifHxcIndpZHRoXCJpbiBiKSYmKGMub3ZlcmZsb3c9W28ub3ZlcmZsb3csby5vdmVyZmxvd1gsby5vdmVyZmxvd1ldLGo9bi5jc3MoYSxcImRpc3BsYXlcIiksaz1cIm5vbmVcIj09PWo/TC5nZXQoYSxcIm9sZGRpc3BsYXlcIil8fHRhKGEubm9kZU5hbWUpOmosXCJpbmxpbmVcIj09PWsmJlwibm9uZVwiPT09bi5jc3MoYSxcImZsb2F0XCIpJiYoby5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxjLm92ZXJmbG93JiYoby5vdmVyZmxvdz1cImhpZGRlblwiLGwuYWx3YXlzKGZ1bmN0aW9uKCl7by5vdmVyZmxvdz1jLm92ZXJmbG93WzBdLG8ub3ZlcmZsb3dYPWMub3ZlcmZsb3dbMV0sby5vdmVyZmxvd1k9Yy5vdmVyZmxvd1syXX0pKTtmb3IoZCBpbiBiKWlmKGU9YltkXSxOYS5leGVjKGUpKXtpZihkZWxldGUgYltkXSxmPWZ8fFwidG9nZ2xlXCI9PT1lLGU9PT0ocD9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09ZXx8IXF8fHZvaWQgMD09PXFbZF0pY29udGludWU7cD0hMH1tW2RdPXEmJnFbZF18fG4uc3R5bGUoYSxkKX1lbHNlIGo9dm9pZCAwO2lmKG4uaXNFbXB0eU9iamVjdChtKSlcImlubGluZVwiPT09KFwibm9uZVwiPT09aj90YShhLm5vZGVOYW1lKTpqKSYmKG8uZGlzcGxheT1qKTtlbHNle3E/XCJoaWRkZW5cImluIHEmJihwPXEuaGlkZGVuKTpxPUwuYWNjZXNzKGEsXCJmeHNob3dcIix7fSksZiYmKHEuaGlkZGVuPSFwKSxwP24oYSkuc2hvdygpOmwuZG9uZShmdW5jdGlvbigpe24oYSkuaGlkZSgpfSksbC5kb25lKGZ1bmN0aW9uKCl7dmFyIGI7TC5yZW1vdmUoYSxcImZ4c2hvd1wiKTtmb3IoYiBpbiBtKW4uc3R5bGUoYSxiLG1bYl0pfSk7Zm9yKGQgaW4gbSlnPVVhKHA/cVtkXTowLGQsbCksZCBpbiBxfHwocVtkXT1nLnN0YXJ0LHAmJihnLmVuZD1nLnN0YXJ0LGcuc3RhcnQ9XCJ3aWR0aFwiPT09ZHx8XCJoZWlnaHRcIj09PWQ/MTowKSl9fWZ1bmN0aW9uIFdhKGEsYil7dmFyIGMsZCxlLGYsZztmb3IoYyBpbiBhKWlmKGQ9bi5jYW1lbENhc2UoYyksZT1iW2RdLGY9YVtjXSxuLmlzQXJyYXkoZikmJihlPWZbMV0sZj1hW2NdPWZbMF0pLGMhPT1kJiYoYVtkXT1mLGRlbGV0ZSBhW2NdKSxnPW4uY3NzSG9va3NbZF0sZyYmXCJleHBhbmRcImluIGcpe2Y9Zy5leHBhbmQoZiksZGVsZXRlIGFbZF07Zm9yKGMgaW4gZiljIGluIGF8fChhW2NdPWZbY10sYltjXT1lKX1lbHNlIGJbZF09ZX1mdW5jdGlvbiBYYShhLGIsYyl7dmFyIGQsZSxmPTAsZz1RYS5sZW5ndGgsaD1uLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIGkuZWxlbX0pLGk9ZnVuY3Rpb24oKXtpZihlKXJldHVybiExO2Zvcih2YXIgYj1MYXx8U2EoKSxjPU1hdGgubWF4KDAsai5zdGFydFRpbWUrai5kdXJhdGlvbi1iKSxkPWMvai5kdXJhdGlvbnx8MCxmPTEtZCxnPTAsaT1qLnR3ZWVucy5sZW5ndGg7aT5nO2crKylqLnR3ZWVuc1tnXS5ydW4oZik7cmV0dXJuIGgubm90aWZ5V2l0aChhLFtqLGYsY10pLDE+ZiYmaT9jOihoLnJlc29sdmVXaXRoKGEsW2pdKSwhMSl9LGo9aC5wcm9taXNlKHtlbGVtOmEscHJvcHM6bi5leHRlbmQoe30sYiksb3B0czpuLmV4dGVuZCghMCx7c3BlY2lhbEVhc2luZzp7fX0sYyksb3JpZ2luYWxQcm9wZXJ0aWVzOmIsb3JpZ2luYWxPcHRpb25zOmMsc3RhcnRUaW1lOkxhfHxTYSgpLGR1cmF0aW9uOmMuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9bi5Ud2VlbihhLGoub3B0cyxiLGMsai5vcHRzLnNwZWNpYWxFYXNpbmdbYl18fGoub3B0cy5lYXNpbmcpO3JldHVybiBqLnR3ZWVucy5wdXNoKGQpLGR9LHN0b3A6ZnVuY3Rpb24oYil7dmFyIGM9MCxkPWI/ai50d2VlbnMubGVuZ3RoOjA7aWYoZSlyZXR1cm4gdGhpcztmb3IoZT0hMDtkPmM7YysrKWoudHdlZW5zW2NdLnJ1bigxKTtyZXR1cm4gYj9oLnJlc29sdmVXaXRoKGEsW2osYl0pOmgucmVqZWN0V2l0aChhLFtqLGJdKSx0aGlzfX0pLGs9ai5wcm9wcztmb3IoV2EoayxqLm9wdHMuc3BlY2lhbEVhc2luZyk7Zz5mO2YrKylpZihkPVFhW2ZdLmNhbGwoaixhLGssai5vcHRzKSlyZXR1cm4gZDtyZXR1cm4gbi5tYXAoayxVYSxqKSxuLmlzRnVuY3Rpb24oai5vcHRzLnN0YXJ0KSYmai5vcHRzLnN0YXJ0LmNhbGwoYSxqKSxuLmZ4LnRpbWVyKG4uZXh0ZW5kKGkse2VsZW06YSxhbmltOmoscXVldWU6ai5vcHRzLnF1ZXVlfSkpLGoucHJvZ3Jlc3Moai5vcHRzLnByb2dyZXNzKS5kb25lKGoub3B0cy5kb25lLGoub3B0cy5jb21wbGV0ZSkuZmFpbChqLm9wdHMuZmFpbCkuYWx3YXlzKGoub3B0cy5hbHdheXMpfW4uQW5pbWF0aW9uPW4uZXh0ZW5kKFhhLHt0d2VlbmVyOmZ1bmN0aW9uKGEsYil7bi5pc0Z1bmN0aW9uKGEpPyhiPWEsYT1bXCIqXCJdKTphPWEuc3BsaXQoXCIgXCIpO2Zvcih2YXIgYyxkPTAsZT1hLmxlbmd0aDtlPmQ7ZCsrKWM9YVtkXSxSYVtjXT1SYVtjXXx8W10sUmFbY10udW5zaGlmdChiKX0scHJlZmlsdGVyOmZ1bmN0aW9uKGEsYil7Yj9RYS51bnNoaWZ0KGEpOlFhLnB1c2goYSl9fSksbi5zcGVlZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YSYmXCJvYmplY3RcIj09dHlwZW9mIGE/bi5leHRlbmQoe30sYSk6e2NvbXBsZXRlOmN8fCFjJiZifHxuLmlzRnVuY3Rpb24oYSkmJmEsZHVyYXRpb246YSxlYXNpbmc6YyYmYnx8YiYmIW4uaXNGdW5jdGlvbihiKSYmYn07cmV0dXJuIGQuZHVyYXRpb249bi5meC5vZmY/MDpcIm51bWJlclwiPT10eXBlb2YgZC5kdXJhdGlvbj9kLmR1cmF0aW9uOmQuZHVyYXRpb24gaW4gbi5meC5zcGVlZHM/bi5meC5zcGVlZHNbZC5kdXJhdGlvbl06bi5meC5zcGVlZHMuX2RlZmF1bHQsKG51bGw9PWQucXVldWV8fGQucXVldWU9PT0hMCkmJihkLnF1ZXVlPVwiZnhcIiksZC5vbGQ9ZC5jb21wbGV0ZSxkLmNvbXBsZXRlPWZ1bmN0aW9uKCl7bi5pc0Z1bmN0aW9uKGQub2xkKSYmZC5vbGQuY2FsbCh0aGlzKSxkLnF1ZXVlJiZuLmRlcXVldWUodGhpcyxkLnF1ZXVlKX0sZH0sbi5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5maWx0ZXIoUykuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OmJ9LGEsYyxkKX0sYW5pbWF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uLmlzRW1wdHlPYmplY3QoYSksZj1uLnNwZWVkKGIsYyxkKSxnPWZ1bmN0aW9uKCl7dmFyIGI9WGEodGhpcyxuLmV4dGVuZCh7fSxhKSxmKTsoZXx8TC5nZXQodGhpcyxcImZpbmlzaFwiKSkmJmIuc3RvcCghMCl9O3JldHVybiBnLmZpbmlzaD1nLGV8fGYucXVldWU9PT0hMT90aGlzLmVhY2goZyk6dGhpcy5xdWV1ZShmLnF1ZXVlLGcpfSxzdG9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhKXt2YXIgYj1hLnN0b3A7ZGVsZXRlIGEuc3RvcCxiKGMpfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGM9YixiPWEsYT12b2lkIDApLGImJmEhPT0hMSYmdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPSEwLGU9bnVsbCE9YSYmYStcInF1ZXVlSG9va3NcIixmPW4udGltZXJzLGc9TC5nZXQodGhpcyk7aWYoZSlnW2VdJiZnW2VdLnN0b3AmJmQoZ1tlXSk7ZWxzZSBmb3IoZSBpbiBnKWdbZV0mJmdbZV0uc3RvcCYmUGEudGVzdChlKSYmZChnW2VdKTtmb3IoZT1mLmxlbmd0aDtlLS07KWZbZV0uZWxlbSE9PXRoaXN8fG51bGwhPWEmJmZbZV0ucXVldWUhPT1hfHwoZltlXS5hbmltLnN0b3AoYyksYj0hMSxmLnNwbGljZShlLDEpKTsoYnx8IWMpJiZuLmRlcXVldWUodGhpcyxhKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT0hMSYmKGE9YXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixjPUwuZ2V0KHRoaXMpLGQ9Y1thK1wicXVldWVcIl0sZT1jW2ErXCJxdWV1ZUhvb2tzXCJdLGY9bi50aW1lcnMsZz1kP2QubGVuZ3RoOjA7Zm9yKGMuZmluaXNoPSEwLG4ucXVldWUodGhpcyxhLFtdKSxlJiZlLnN0b3AmJmUuc3RvcC5jYWxsKHRoaXMsITApLGI9Zi5sZW5ndGg7Yi0tOylmW2JdLmVsZW09PT10aGlzJiZmW2JdLnF1ZXVlPT09YSYmKGZbYl0uYW5pbS5zdG9wKCEwKSxmLnNwbGljZShiLDEpKTtmb3IoYj0wO2c+YjtiKyspZFtiXSYmZFtiXS5maW5pc2gmJmRbYl0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIGMuZmluaXNofSl9fSksbi5lYWNoKFtcInRvZ2dsZVwiLFwic2hvd1wiLFwiaGlkZVwiXSxmdW5jdGlvbihhLGIpe3ZhciBjPW4uZm5bYl07bi5mbltiXT1mdW5jdGlvbihhLGQsZSl7cmV0dXJuIG51bGw9PWF8fFwiYm9vbGVhblwiPT10eXBlb2YgYT9jLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp0aGlzLmFuaW1hdGUoVGEoYiwhMCksYSxkLGUpfX0pLG4uZWFjaCh7c2xpZGVEb3duOlRhKFwic2hvd1wiKSxzbGlkZVVwOlRhKFwiaGlkZVwiKSxzbGlkZVRvZ2dsZTpUYShcInRvZ2dsZVwiKSxmYWRlSW46e29wYWNpdHk6XCJzaG93XCJ9LGZhZGVPdXQ6e29wYWNpdHk6XCJoaWRlXCJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6XCJ0b2dnbGVcIn19LGZ1bmN0aW9uKGEsYil7bi5mblthXT1mdW5jdGlvbihhLGMsZCl7cmV0dXJuIHRoaXMuYW5pbWF0ZShiLGEsYyxkKX19KSxuLnRpbWVycz1bXSxuLmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgYSxiPTAsYz1uLnRpbWVycztmb3IoTGE9bi5ub3coKTtiPGMubGVuZ3RoO2IrKylhPWNbYl0sYSgpfHxjW2JdIT09YXx8Yy5zcGxpY2UoYi0tLDEpO2MubGVuZ3RofHxuLmZ4LnN0b3AoKSxMYT12b2lkIDB9LG4uZngudGltZXI9ZnVuY3Rpb24oYSl7bi50aW1lcnMucHVzaChhKSxhKCk/bi5meC5zdGFydCgpOm4udGltZXJzLnBvcCgpfSxuLmZ4LmludGVydmFsPTEzLG4uZnguc3RhcnQ9ZnVuY3Rpb24oKXtNYXx8KE1hPXNldEludGVydmFsKG4uZngudGljayxuLmZ4LmludGVydmFsKSl9LG4uZnguc3RvcD1mdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwoTWEpLE1hPW51bGx9LG4uZnguc3BlZWRzPXtzbG93OjYwMCxmYXN0OjIwMCxfZGVmYXVsdDo0MDB9LG4uZm4uZGVsYXk9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1uLmZ4P24uZnguc3BlZWRzW2FdfHxhOmEsYj1ifHxcImZ4XCIsdGhpcy5xdWV1ZShiLGZ1bmN0aW9uKGIsYyl7dmFyIGQ9c2V0VGltZW91dChiLGEpO2Muc3RvcD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChkKX19KX0sZnVuY3Rpb24oKXt2YXIgYT1sLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxiPWwuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxjPWIuYXBwZW5kQ2hpbGQobC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTthLnR5cGU9XCJjaGVja2JveFwiLGsuY2hlY2tPbj1cIlwiIT09YS52YWx1ZSxrLm9wdFNlbGVjdGVkPWMuc2VsZWN0ZWQsYi5kaXNhYmxlZD0hMCxrLm9wdERpc2FibGVkPSFjLmRpc2FibGVkLGE9bC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS52YWx1ZT1cInRcIixhLnR5cGU9XCJyYWRpb1wiLGsucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIFlhLFphLCRhPW4uZXhwci5hdHRySGFuZGxlO24uZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIEoodGhpcyxuLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24ucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKGEmJjMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIHR5cGVvZiBhLmdldEF0dHJpYnV0ZT09PVU/bi5wcm9wKGEsYixjKTooMT09PWYmJm4uaXNYTUxEb2MoYSl8fChiPWIudG9Mb3dlckNhc2UoKSxkPW4uYXR0ckhvb2tzW2JdfHwobi5leHByLm1hdGNoLmJvb2wudGVzdChiKT9aYTpZYSkpLFxudm9pZCAwPT09Yz9kJiZcImdldFwiaW4gZCYmbnVsbCE9PShlPWQuZ2V0KGEsYikpP2U6KGU9bi5maW5kLmF0dHIoYSxiKSxudWxsPT1lP3ZvaWQgMDplKTpudWxsIT09Yz9kJiZcInNldFwiaW4gZCYmdm9pZCAwIT09KGU9ZC5zZXQoYSxjLGIpKT9lOihhLnNldEF0dHJpYnV0ZShiLGMrXCJcIiksYyk6dm9pZCBuLnJlbW92ZUF0dHIoYSxiKSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9MCxmPWImJmIubWF0Y2goRSk7aWYoZiYmMT09PWEubm9kZVR5cGUpd2hpbGUoYz1mW2UrK10pZD1uLnByb3BGaXhbY118fGMsbi5leHByLm1hdGNoLmJvb2wudGVzdChjKSYmKGFbZF09ITEpLGEucmVtb3ZlQXR0cmlidXRlKGMpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihhLGIpe2lmKCFrLnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PWImJm4ubm9kZU5hbWUoYSxcImlucHV0XCIpKXt2YXIgYz1hLnZhbHVlO3JldHVybiBhLnNldEF0dHJpYnV0ZShcInR5cGVcIixiKSxjJiYoYS52YWx1ZT1jKSxifX19fX0pLFphPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiPT09ITE/bi5yZW1vdmVBdHRyKGEsYyk6YS5zZXRBdHRyaWJ1dGUoYyxjKSxjfX0sbi5lYWNoKG4uZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihhLGIpe3ZhciBjPSRhW2JdfHxuLmZpbmQuYXR0cjskYVtiXT1mdW5jdGlvbihhLGIsZCl7dmFyIGUsZjtyZXR1cm4gZHx8KGY9JGFbYl0sJGFbYl09ZSxlPW51bGwhPWMoYSxiLGQpP2IudG9Mb3dlckNhc2UoKTpudWxsLCRhW2JdPWYpLGV9fSk7dmFyIF9hPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2k7bi5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gSih0aGlzLG4ucHJvcCxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXNbbi5wcm9wRml4W2FdfHxhXX0pfX0pLG4uZXh0ZW5kKHtwcm9wRml4OntcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwifSxwcm9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZz1hLm5vZGVUeXBlO2lmKGEmJjMhPT1nJiY4IT09ZyYmMiE9PWcpcmV0dXJuIGY9MSE9PWd8fCFuLmlzWE1MRG9jKGEpLGYmJihiPW4ucHJvcEZpeFtiXXx8YixlPW4ucHJvcEhvb2tzW2JdKSx2b2lkIDAhPT1jP2UmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6YVtiXT1jOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDphW2JdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuaGFzQXR0cmlidXRlKFwidGFiaW5kZXhcIil8fF9hLnRlc3QoYS5ub2RlTmFtZSl8fGEuaHJlZj9hLnRhYkluZGV4Oi0xfX19fSksay5vcHRTZWxlY3RlZHx8KG4ucHJvcEhvb2tzLnNlbGVjdGVkPXtnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiZiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9fSksbi5lYWNoKFtcInRhYkluZGV4XCIsXCJyZWFkT25seVwiLFwibWF4TGVuZ3RoXCIsXCJjZWxsU3BhY2luZ1wiLFwiY2VsbFBhZGRpbmdcIixcInJvd1NwYW5cIixcImNvbFNwYW5cIixcInVzZU1hcFwiLFwiZnJhbWVCb3JkZXJcIixcImNvbnRlbnRFZGl0YWJsZVwiXSxmdW5jdGlvbigpe24ucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KTt2YXIgYWI9L1tcXHRcXHJcXG5cXGZdL2c7bi5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoPVwic3RyaW5nXCI9PXR5cGVvZiBhJiZhLGk9MCxqPXRoaXMubGVuZ3RoO2lmKG4uaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe24odGhpcykuYWRkQ2xhc3MoYS5jYWxsKHRoaXMsYix0aGlzLmNsYXNzTmFtZSkpfSk7aWYoaClmb3IoYj0oYXx8XCJcIikubWF0Y2goRSl8fFtdO2o+aTtpKyspaWYoYz10aGlzW2ldLGQ9MT09PWMubm9kZVR5cGUmJihjLmNsYXNzTmFtZT8oXCIgXCIrYy5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UoYWIsXCIgXCIpOlwiIFwiKSl7Zj0wO3doaWxlKGU9YltmKytdKWQuaW5kZXhPZihcIiBcIitlK1wiIFwiKTwwJiYoZCs9ZStcIiBcIik7Zz1uLnRyaW0oZCksYy5jbGFzc05hbWUhPT1nJiYoYy5jbGFzc05hbWU9Zyl9cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoPTA9PT1hcmd1bWVudHMubGVuZ3RofHxcInN0cmluZ1wiPT10eXBlb2YgYSYmYSxpPTAsaj10aGlzLmxlbmd0aDtpZihuLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtuKHRoaXMpLnJlbW92ZUNsYXNzKGEuY2FsbCh0aGlzLGIsdGhpcy5jbGFzc05hbWUpKX0pO2lmKGgpZm9yKGI9KGF8fFwiXCIpLm1hdGNoKEUpfHxbXTtqPmk7aSsrKWlmKGM9dGhpc1tpXSxkPTE9PT1jLm5vZGVUeXBlJiYoYy5jbGFzc05hbWU/KFwiIFwiK2MuY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKGFiLFwiIFwiKTpcIlwiKSl7Zj0wO3doaWxlKGU9YltmKytdKXdoaWxlKGQuaW5kZXhPZihcIiBcIitlK1wiIFwiKT49MClkPWQucmVwbGFjZShcIiBcIitlK1wiIFwiLFwiIFwiKTtnPWE/bi50cmltKGQpOlwiXCIsYy5jbGFzc05hbWUhPT1nJiYoYy5jbGFzc05hbWU9Zyl9cmV0dXJuIHRoaXN9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dHlwZW9mIGE7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBiJiZcInN0cmluZ1wiPT09Yz9iP3RoaXMuYWRkQ2xhc3MoYSk6dGhpcy5yZW1vdmVDbGFzcyhhKTp0aGlzLmVhY2gobi5pc0Z1bmN0aW9uKGEpP2Z1bmN0aW9uKGMpe24odGhpcykudG9nZ2xlQ2xhc3MoYS5jYWxsKHRoaXMsYyx0aGlzLmNsYXNzTmFtZSxiKSxiKX06ZnVuY3Rpb24oKXtpZihcInN0cmluZ1wiPT09Yyl7dmFyIGIsZD0wLGU9bih0aGlzKSxmPWEubWF0Y2goRSl8fFtdO3doaWxlKGI9ZltkKytdKWUuaGFzQ2xhc3MoYik/ZS5yZW1vdmVDbGFzcyhiKTplLmFkZENsYXNzKGIpfWVsc2UoYz09PVV8fFwiYm9vbGVhblwiPT09YykmJih0aGlzLmNsYXNzTmFtZSYmTC5zZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIix0aGlzLmNsYXNzTmFtZSksdGhpcy5jbGFzc05hbWU9dGhpcy5jbGFzc05hbWV8fGE9PT0hMT9cIlwiOkwuZ2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIpfHxcIlwiKX0pfSxoYXNDbGFzczpmdW5jdGlvbihhKXtmb3IodmFyIGI9XCIgXCIrYStcIiBcIixjPTAsZD10aGlzLmxlbmd0aDtkPmM7YysrKWlmKDE9PT10aGlzW2NdLm5vZGVUeXBlJiYoXCIgXCIrdGhpc1tjXS5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UoYWIsXCIgXCIpLmluZGV4T2YoYik+PTApcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIGJiPS9cXHIvZztuLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQ9bi5pc0Z1bmN0aW9uKGEpLHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZTsxPT09dGhpcy5ub2RlVHlwZSYmKGU9ZD9hLmNhbGwodGhpcyxjLG4odGhpcykudmFsKCkpOmEsbnVsbD09ZT9lPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIGU/ZSs9XCJcIjpuLmlzQXJyYXkoZSkmJihlPW4ubWFwKGUsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjphK1wiXCJ9KSksYj1uLnZhbEhvb2tzW3RoaXMudHlwZV18fG4udmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcInNldFwiaW4gYiYmdm9pZCAwIT09Yi5zZXQodGhpcyxlLFwidmFsdWVcIil8fCh0aGlzLnZhbHVlPWUpKX0pO2lmKGUpcmV0dXJuIGI9bi52YWxIb29rc1tlLnR5cGVdfHxuLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJnZXRcImluIGImJnZvaWQgMCE9PShjPWIuZ2V0KGUsXCJ2YWx1ZVwiKSk/YzooYz1lLnZhbHVlLFwic3RyaW5nXCI9PXR5cGVvZiBjP2MucmVwbGFjZShiYixcIlwiKTpudWxsPT1jP1wiXCI6Yyl9fX0pLG4uZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9bi5maW5kLmF0dHIoYSxcInZhbHVlXCIpO3JldHVybiBudWxsIT1iP2I6bi50cmltKG4udGV4dChhKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkPWEub3B0aW9ucyxlPWEuc2VsZWN0ZWRJbmRleCxmPVwic2VsZWN0LW9uZVwiPT09YS50eXBlfHwwPmUsZz1mP251bGw6W10saD1mP2UrMTpkLmxlbmd0aCxpPTA+ZT9oOmY/ZTowO2g+aTtpKyspaWYoYz1kW2ldLCEoIWMuc2VsZWN0ZWQmJmkhPT1lfHwoay5vcHREaXNhYmxlZD9jLmRpc2FibGVkOm51bGwhPT1jLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpKXx8Yy5wYXJlbnROb2RlLmRpc2FibGVkJiZuLm5vZGVOYW1lKGMucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYoYj1uKGMpLnZhbCgpLGYpcmV0dXJuIGI7Zy5wdXNoKGIpfXJldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9YS5vcHRpb25zLGY9bi5tYWtlQXJyYXkoYiksZz1lLmxlbmd0aDt3aGlsZShnLS0pZD1lW2ddLChkLnNlbGVjdGVkPW4uaW5BcnJheShkLnZhbHVlLGYpPj0wKSYmKGM9ITApO3JldHVybiBjfHwoYS5zZWxlY3RlZEluZGV4PS0xKSxmfX19fSksbi5lYWNoKFtcInJhZGlvXCIsXCJjaGVja2JveFwiXSxmdW5jdGlvbigpe24udmFsSG9va3NbdGhpc109e3NldDpmdW5jdGlvbihhLGIpe3JldHVybiBuLmlzQXJyYXkoYik/YS5jaGVja2VkPW4uaW5BcnJheShuKGEpLnZhbCgpLGIpPj0wOnZvaWQgMH19LGsuY2hlY2tPbnx8KG4udmFsSG9va3NbdGhpc10uZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT09YS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9cIm9uXCI6YS52YWx1ZX0pfSksbi5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe24uZm5bYl09ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wP3RoaXMub24oYixudWxsLGEsYyk6dGhpcy50cmlnZ2VyKGIpfX0pLG4uZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoYSkubW91c2VsZWF2ZShifHxhKX0sYmluZDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMub24oYSxudWxsLGIsYyl9LHVuYmluZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm9mZihhLG51bGwsYil9LGRlbGVnYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLm9uKGIsYSxjLGQpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoYSxcIioqXCIpOnRoaXMub2ZmKGIsYXx8XCIqKlwiLGMpfX0pO3ZhciBjYj1uLm5vdygpLGRiPS9cXD8vO24ucGFyc2VKU09OPWZ1bmN0aW9uKGEpe3JldHVybiBKU09OLnBhcnNlKGErXCJcIil9LG4ucGFyc2VYTUw9ZnVuY3Rpb24oYSl7dmFyIGIsYztpZighYXx8XCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e2M9bmV3IERPTVBhcnNlcixiPWMucGFyc2VGcm9tU3RyaW5nKGEsXCJ0ZXh0L3htbFwiKX1jYXRjaChkKXtiPXZvaWQgMH1yZXR1cm4oIWJ8fGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGgpJiZuLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2EpLGJ9O3ZhciBlYj0vIy4qJC8sZmI9LyhbPyZdKV89W14mXSovLGdiPS9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvZ20saGI9L14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8saWI9L14oPzpHRVR8SEVBRCkkLyxqYj0vXlxcL1xcLy8sa2I9L14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sbGI9e30sbWI9e30sbmI9XCIqL1wiLmNvbmNhdChcIipcIiksb2I9YS5sb2NhdGlvbi5ocmVmLHBiPWtiLmV4ZWMob2IudG9Mb3dlckNhc2UoKSl8fFtdO2Z1bmN0aW9uIHFiKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1iLGI9XCIqXCIpO3ZhciBkLGU9MCxmPWIudG9Mb3dlckNhc2UoKS5tYXRjaChFKXx8W107aWYobi5pc0Z1bmN0aW9uKGMpKXdoaWxlKGQ9ZltlKytdKVwiK1wiPT09ZFswXT8oZD1kLnNsaWNlKDEpfHxcIipcIiwoYVtkXT1hW2RdfHxbXSkudW5zaGlmdChjKSk6KGFbZF09YVtkXXx8W10pLnB1c2goYyl9fWZ1bmN0aW9uIHJiKGEsYixjLGQpe3ZhciBlPXt9LGY9YT09PW1iO2Z1bmN0aW9uIGcoaCl7dmFyIGk7cmV0dXJuIGVbaF09ITAsbi5lYWNoKGFbaF18fFtdLGZ1bmN0aW9uKGEsaCl7dmFyIGo9aChiLGMsZCk7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGp8fGZ8fGVbal0/Zj8hKGk9aik6dm9pZCAwOihiLmRhdGFUeXBlcy51bnNoaWZ0KGopLGcoaiksITEpfSksaX1yZXR1cm4gZyhiLmRhdGFUeXBlc1swXSl8fCFlW1wiKlwiXSYmZyhcIipcIil9ZnVuY3Rpb24gc2IoYSxiKXt2YXIgYyxkLGU9bi5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihjIGluIGIpdm9pZCAwIT09YltjXSYmKChlW2NdP2E6ZHx8KGQ9e30pKVtjXT1iW2NdKTtyZXR1cm4gZCYmbi5leHRlbmQoITAsYSxkKSxhfWZ1bmN0aW9uIHRiKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuY29udGVudHMsaT1hLmRhdGFUeXBlczt3aGlsZShcIipcIj09PWlbMF0paS5zaGlmdCgpLHZvaWQgMD09PWQmJihkPWEubWltZVR5cGV8fGIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKGQpZm9yKGUgaW4gaClpZihoW2VdJiZoW2VdLnRlc3QoZCkpe2kudW5zaGlmdChlKTticmVha31pZihpWzBdaW4gYylmPWlbMF07ZWxzZXtmb3IoZSBpbiBjKXtpZighaVswXXx8YS5jb252ZXJ0ZXJzW2UrXCIgXCIraVswXV0pe2Y9ZTticmVha31nfHwoZz1lKX1mPWZ8fGd9cmV0dXJuIGY/KGYhPT1pWzBdJiZpLnVuc2hpZnQoZiksY1tmXSk6dm9pZCAwfWZ1bmN0aW9uIHViKGEsYixjLGQpe3ZhciBlLGYsZyxoLGksaj17fSxrPWEuZGF0YVR5cGVzLnNsaWNlKCk7aWYoa1sxXSlmb3IoZyBpbiBhLmNvbnZlcnRlcnMpaltnLnRvTG93ZXJDYXNlKCldPWEuY29udmVydGVyc1tnXTtmPWsuc2hpZnQoKTt3aGlsZShmKWlmKGEucmVzcG9uc2VGaWVsZHNbZl0mJihjW2EucmVzcG9uc2VGaWVsZHNbZl1dPWIpLCFpJiZkJiZhLmRhdGFGaWx0ZXImJihiPWEuZGF0YUZpbHRlcihiLGEuZGF0YVR5cGUpKSxpPWYsZj1rLnNoaWZ0KCkpaWYoXCIqXCI9PT1mKWY9aTtlbHNlIGlmKFwiKlwiIT09aSYmaSE9PWYpe2lmKGc9altpK1wiIFwiK2ZdfHxqW1wiKiBcIitmXSwhZylmb3IoZSBpbiBqKWlmKGg9ZS5zcGxpdChcIiBcIiksaFsxXT09PWYmJihnPWpbaStcIiBcIitoWzBdXXx8altcIiogXCIraFswXV0pKXtnPT09ITA/Zz1qW2VdOmpbZV0hPT0hMCYmKGY9aFswXSxrLnVuc2hpZnQoaFsxXSkpO2JyZWFrfWlmKGchPT0hMClpZihnJiZhW1widGhyb3dzXCJdKWI9ZyhiKTtlbHNlIHRyeXtiPWcoYil9Y2F0Y2gobCl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjpnP2w6XCJObyBjb252ZXJzaW9uIGZyb20gXCIraStcIiB0byBcIitmfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6Yn19bi5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOm9iLHR5cGU6XCJHRVRcIixpc0xvY2FsOmhiLnRlc3QocGJbMV0pLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLGFjY2VwdHM6e1wiKlwiOm5iLHRleHQ6XCJ0ZXh0L3BsYWluXCIsaHRtbDpcInRleHQvaHRtbFwiLHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixqc29uOlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJ9LGNvbnRlbnRzOnt4bWw6L3htbC8saHRtbDovaHRtbC8sanNvbjovanNvbi99LHJlc3BvbnNlRmllbGRzOnt4bWw6XCJyZXNwb25zZVhNTFwiLHRleHQ6XCJyZXNwb25zZVRleHRcIixqc29uOlwicmVzcG9uc2VKU09OXCJ9LGNvbnZlcnRlcnM6e1wiKiB0ZXh0XCI6U3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjpuLnBhcnNlSlNPTixcInRleHQgeG1sXCI6bi5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/c2Ioc2IoYSxuLmFqYXhTZXR0aW5ncyksYik6c2Iobi5hamF4U2V0dGluZ3MsYSl9LGFqYXhQcmVmaWx0ZXI6cWIobGIpLGFqYXhUcmFuc3BvcnQ6cWIobWIpLGFqYXg6ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiPT10eXBlb2YgYSYmKGI9YSxhPXZvaWQgMCksYj1ifHx7fTt2YXIgYyxkLGUsZixnLGgsaSxqLGs9bi5hamF4U2V0dXAoe30sYiksbD1rLmNvbnRleHR8fGssbT1rLmNvbnRleHQmJihsLm5vZGVUeXBlfHxsLmpxdWVyeSk/bihsKTpuLmV2ZW50LG89bi5EZWZlcnJlZCgpLHA9bi5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxxPWsuc3RhdHVzQ29kZXx8e30scj17fSxzPXt9LHQ9MCx1PVwiY2FuY2VsZWRcIix2PXtyZWFkeVN0YXRlOjAsZ2V0UmVzcG9uc2VIZWFkZXI6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoMj09PXQpe2lmKCFmKXtmPXt9O3doaWxlKGI9Z2IuZXhlYyhlKSlmW2JbMV0udG9Mb3dlckNhc2UoKV09YlsyXX1iPWZbYS50b0xvd2VyQ2FzZSgpXX1yZXR1cm4gbnVsbD09Yj9udWxsOmJ9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiAyPT09dD9lOm51bGx9LHNldFJlcXVlc3RIZWFkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnRvTG93ZXJDYXNlKCk7cmV0dXJuIHR8fChhPXNbY109c1tjXXx8YSxyW2FdPWIpLHRoaXN9LG92ZXJyaWRlTWltZVR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHR8fChrLm1pbWVUeXBlPWEpLHRoaXN9LHN0YXR1c0NvZGU6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoYSlpZigyPnQpZm9yKGIgaW4gYSlxW2JdPVtxW2JdLGFbYl1dO2Vsc2Ugdi5hbHdheXMoYVt2LnN0YXR1c10pO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihhKXt2YXIgYj1hfHx1O3JldHVybiBjJiZjLmFib3J0KGIpLHgoMCxiKSx0aGlzfX07aWYoby5wcm9taXNlKHYpLmNvbXBsZXRlPXAuYWRkLHYuc3VjY2Vzcz12LmRvbmUsdi5lcnJvcj12LmZhaWwsay51cmw9KChhfHxrLnVybHx8b2IpK1wiXCIpLnJlcGxhY2UoZWIsXCJcIikucmVwbGFjZShqYixwYlsxXStcIi8vXCIpLGsudHlwZT1iLm1ldGhvZHx8Yi50eXBlfHxrLm1ldGhvZHx8ay50eXBlLGsuZGF0YVR5cGVzPW4udHJpbShrLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChFKXx8W1wiXCJdLG51bGw9PWsuY3Jvc3NEb21haW4mJihoPWtiLmV4ZWMoay51cmwudG9Mb3dlckNhc2UoKSksay5jcm9zc0RvbWFpbj0hKCFofHxoWzFdPT09cGJbMV0mJmhbMl09PT1wYlsyXSYmKGhbM118fChcImh0dHA6XCI9PT1oWzFdP1wiODBcIjpcIjQ0M1wiKSk9PT0ocGJbM118fChcImh0dHA6XCI9PT1wYlsxXT9cIjgwXCI6XCI0NDNcIikpKSksay5kYXRhJiZrLnByb2Nlc3NEYXRhJiZcInN0cmluZ1wiIT10eXBlb2Ygay5kYXRhJiYoay5kYXRhPW4ucGFyYW0oay5kYXRhLGsudHJhZGl0aW9uYWwpKSxyYihsYixrLGIsdiksMj09PXQpcmV0dXJuIHY7aT1uLmV2ZW50JiZrLmdsb2JhbCxpJiYwPT09bi5hY3RpdmUrKyYmbi5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpLGsudHlwZT1rLnR5cGUudG9VcHBlckNhc2UoKSxrLmhhc0NvbnRlbnQ9IWliLnRlc3Qoay50eXBlKSxkPWsudXJsLGsuaGFzQ29udGVudHx8KGsuZGF0YSYmKGQ9ay51cmwrPShkYi50ZXN0KGQpP1wiJlwiOlwiP1wiKStrLmRhdGEsZGVsZXRlIGsuZGF0YSksay5jYWNoZT09PSExJiYoay51cmw9ZmIudGVzdChkKT9kLnJlcGxhY2UoZmIsXCIkMV89XCIrY2IrKyk6ZCsoZGIudGVzdChkKT9cIiZcIjpcIj9cIikrXCJfPVwiK2NiKyspKSxrLmlmTW9kaWZpZWQmJihuLmxhc3RNb2RpZmllZFtkXSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIixuLmxhc3RNb2RpZmllZFtkXSksbi5ldGFnW2RdJiZ2LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsbi5ldGFnW2RdKSksKGsuZGF0YSYmay5oYXNDb250ZW50JiZrLmNvbnRlbnRUeXBlIT09ITF8fGIuY29udGVudFR5cGUpJiZ2LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixrLmNvbnRlbnRUeXBlKSx2LnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixrLmRhdGFUeXBlc1swXSYmay5hY2NlcHRzW2suZGF0YVR5cGVzWzBdXT9rLmFjY2VwdHNbay5kYXRhVHlwZXNbMF1dKyhcIipcIiE9PWsuZGF0YVR5cGVzWzBdP1wiLCBcIituYitcIjsgcT0wLjAxXCI6XCJcIik6ay5hY2NlcHRzW1wiKlwiXSk7Zm9yKGogaW4gay5oZWFkZXJzKXYuc2V0UmVxdWVzdEhlYWRlcihqLGsuaGVhZGVyc1tqXSk7aWYoay5iZWZvcmVTZW5kJiYoay5iZWZvcmVTZW5kLmNhbGwobCx2LGspPT09ITF8fDI9PT10KSlyZXR1cm4gdi5hYm9ydCgpO3U9XCJhYm9ydFwiO2ZvcihqIGlue3N1Y2Nlc3M6MSxlcnJvcjoxLGNvbXBsZXRlOjF9KXZbal0oa1tqXSk7aWYoYz1yYihtYixrLGIsdikpe3YucmVhZHlTdGF0ZT0xLGkmJm0udHJpZ2dlcihcImFqYXhTZW5kXCIsW3Ysa10pLGsuYXN5bmMmJmsudGltZW91dD4wJiYoZz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7di5hYm9ydChcInRpbWVvdXRcIil9LGsudGltZW91dCkpO3RyeXt0PTEsYy5zZW5kKHIseCl9Y2F0Y2godyl7aWYoISgyPnQpKXRocm93IHc7eCgtMSx3KX19ZWxzZSB4KC0xLFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIHgoYSxiLGYsaCl7dmFyIGoscixzLHUsdyx4PWI7MiE9PXQmJih0PTIsZyYmY2xlYXJUaW1lb3V0KGcpLGM9dm9pZCAwLGU9aHx8XCJcIix2LnJlYWR5U3RhdGU9YT4wPzQ6MCxqPWE+PTIwMCYmMzAwPmF8fDMwND09PWEsZiYmKHU9dGIoayx2LGYpKSx1PXViKGssdSx2LGopLGo/KGsuaWZNb2RpZmllZCYmKHc9di5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIiksdyYmKG4ubGFzdE1vZGlmaWVkW2RdPXcpLHc9di5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIiksdyYmKG4uZXRhZ1tkXT13KSksMjA0PT09YXx8XCJIRUFEXCI9PT1rLnR5cGU/eD1cIm5vY29udGVudFwiOjMwND09PWE/eD1cIm5vdG1vZGlmaWVkXCI6KHg9dS5zdGF0ZSxyPXUuZGF0YSxzPXUuZXJyb3Isaj0hcykpOihzPXgsKGF8fCF4KSYmKHg9XCJlcnJvclwiLDA+YSYmKGE9MCkpKSx2LnN0YXR1cz1hLHYuc3RhdHVzVGV4dD0oYnx8eCkrXCJcIixqP28ucmVzb2x2ZVdpdGgobCxbcix4LHZdKTpvLnJlamVjdFdpdGgobCxbdix4LHNdKSx2LnN0YXR1c0NvZGUocSkscT12b2lkIDAsaSYmbS50cmlnZ2VyKGo/XCJhamF4U3VjY2Vzc1wiOlwiYWpheEVycm9yXCIsW3YsayxqP3I6c10pLHAuZmlyZVdpdGgobCxbdix4XSksaSYmKG0udHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFt2LGtdKSwtLW4uYWN0aXZlfHxuLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKSkpfXJldHVybiB2fSxnZXRKU09OOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbi5nZXQoYSxiLGMsXCJqc29uXCIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbi5nZXQoYSx2b2lkIDAsYixcInNjcmlwdFwiKX19KSxuLmVhY2goW1wiZ2V0XCIsXCJwb3N0XCJdLGZ1bmN0aW9uKGEsYil7bltiXT1mdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gbi5pc0Z1bmN0aW9uKGMpJiYoZT1lfHxkLGQ9YyxjPXZvaWQgMCksbi5hamF4KHt1cmw6YSx0eXBlOmIsZGF0YVR5cGU6ZSxkYXRhOmMsc3VjY2VzczpkfSl9fSksbi5fZXZhbFVybD1mdW5jdGlvbihhKXtyZXR1cm4gbi5hamF4KHt1cmw6YSx0eXBlOlwiR0VUXCIsZGF0YVR5cGU6XCJzY3JpcHRcIixhc3luYzohMSxnbG9iYWw6ITEsXCJ0aHJvd3NcIjohMH0pfSxuLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gbi5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihiKXtuKHRoaXMpLndyYXBBbGwoYS5jYWxsKHRoaXMsYikpfSk6KHRoaXNbMF0mJihiPW4oYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSx0aGlzWzBdLnBhcmVudE5vZGUmJmIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLGIubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3aGlsZShhLmZpcnN0RWxlbWVudENoaWxkKWE9YS5maXJzdEVsZW1lbnRDaGlsZDtyZXR1cm4gYX0pLmFwcGVuZCh0aGlzKSksdGhpcyl9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKG4uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihiKXtuKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9OmZ1bmN0aW9uKCl7dmFyIGI9bih0aGlzKSxjPWIuY29udGVudHMoKTtjLmxlbmd0aD9jLndyYXBBbGwoYSk6Yi5hcHBlbmQoYSl9KX0sd3JhcDpmdW5jdGlvbihhKXt2YXIgYj1uLmlzRnVuY3Rpb24oYSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXtuKHRoaXMpLndyYXBBbGwoYj9hLmNhbGwodGhpcyxjKTphKX0pfSx1bndyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCl7bi5ub2RlTmFtZSh0aGlzLFwiYm9keVwiKXx8bih0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSkuZW5kKCl9fSksbi5leHByLmZpbHRlcnMuaGlkZGVuPWZ1bmN0aW9uKGEpe3JldHVybiBhLm9mZnNldFdpZHRoPD0wJiZhLm9mZnNldEhlaWdodDw9MH0sbi5leHByLmZpbHRlcnMudmlzaWJsZT1mdW5jdGlvbihhKXtyZXR1cm4hbi5leHByLmZpbHRlcnMuaGlkZGVuKGEpfTt2YXIgdmI9LyUyMC9nLHdiPS9cXFtcXF0kLyx4Yj0vXFxyP1xcbi9nLHliPS9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSx6Yj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7ZnVuY3Rpb24gQWIoYSxiLGMsZCl7dmFyIGU7aWYobi5pc0FycmF5KGIpKW4uZWFjaChiLGZ1bmN0aW9uKGIsZSl7Y3x8d2IudGVzdChhKT9kKGEsZSk6QWIoYStcIltcIisoXCJvYmplY3RcIj09dHlwZW9mIGU/YjpcIlwiKStcIl1cIixlLGMsZCl9KTtlbHNlIGlmKGN8fFwib2JqZWN0XCIhPT1uLnR5cGUoYikpZChhLGIpO2Vsc2UgZm9yKGUgaW4gYilBYihhK1wiW1wiK2UrXCJdXCIsYltlXSxjLGQpfW4ucGFyYW09ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9ZnVuY3Rpb24oYSxiKXtiPW4uaXNGdW5jdGlvbihiKT9iKCk6bnVsbD09Yj9cIlwiOmIsZFtkLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGEpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChiKX07aWYodm9pZCAwPT09YiYmKGI9bi5hamF4U2V0dGluZ3MmJm4uYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsKSxuLmlzQXJyYXkoYSl8fGEuanF1ZXJ5JiYhbi5pc1BsYWluT2JqZWN0KGEpKW4uZWFjaChhLGZ1bmN0aW9uKCl7ZSh0aGlzLm5hbWUsdGhpcy52YWx1ZSl9KTtlbHNlIGZvcihjIGluIGEpQWIoYyxhW2NdLGIsZSk7cmV0dXJuIGQuam9pbihcIiZcIikucmVwbGFjZSh2YixcIitcIil9LG4uZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gbi5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpfSxzZXJpYWxpemVBcnJheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBhPW4ucHJvcCh0aGlzLFwiZWxlbWVudHNcIik7cmV0dXJuIGE/bi5tYWtlQXJyYXkoYSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBhPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhbih0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSYmemIudGVzdCh0aGlzLm5vZGVOYW1lKSYmIXliLnRlc3QoYSkmJih0aGlzLmNoZWNrZWR8fCFULnRlc3QoYSkpfSkubWFwKGZ1bmN0aW9uKGEsYil7dmFyIGM9bih0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09Yz9udWxsOm4uaXNBcnJheShjKT9uLm1hcChjLGZ1bmN0aW9uKGEpe3JldHVybntuYW1lOmIubmFtZSx2YWx1ZTphLnJlcGxhY2UoeGIsXCJcXHJcXG5cIil9fSk6e25hbWU6Yi5uYW1lLHZhbHVlOmMucmVwbGFjZSh4YixcIlxcclxcblwiKX19KS5nZXQoKX19KSxuLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdH1jYXRjaChhKXt9fTt2YXIgQmI9MCxDYj17fSxEYj17MDoyMDAsMTIyMzoyMDR9LEViPW4uYWpheFNldHRpbmdzLnhocigpO2EuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIENiKUNiW2FdKCl9KSxrLmNvcnM9ISFFYiYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIEViLGsuYWpheD1FYj0hIUViLG4uYWpheFRyYW5zcG9ydChmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gay5jb3JzfHxFYiYmIWEuY3Jvc3NEb21haW4/e3NlbmQ6ZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEueGhyKCksZz0rK0JiO2lmKGYub3BlbihhLnR5cGUsYS51cmwsYS5hc3luYyxhLnVzZXJuYW1lLGEucGFzc3dvcmQpLGEueGhyRmllbGRzKWZvcihlIGluIGEueGhyRmllbGRzKWZbZV09YS54aHJGaWVsZHNbZV07YS5taW1lVHlwZSYmZi5vdmVycmlkZU1pbWVUeXBlJiZmLm92ZXJyaWRlTWltZVR5cGUoYS5taW1lVHlwZSksYS5jcm9zc0RvbWFpbnx8Y1tcIlgtUmVxdWVzdGVkLVdpdGhcIl18fChjW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXT1cIlhNTEh0dHBSZXF1ZXN0XCIpO2ZvcihlIGluIGMpZi5zZXRSZXF1ZXN0SGVhZGVyKGUsY1tlXSk7Yj1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtiJiYoZGVsZXRlIENiW2ddLGI9Zi5vbmxvYWQ9Zi5vbmVycm9yPW51bGwsXCJhYm9ydFwiPT09YT9mLmFib3J0KCk6XCJlcnJvclwiPT09YT9kKGYuc3RhdHVzLGYuc3RhdHVzVGV4dCk6ZChEYltmLnN0YXR1c118fGYuc3RhdHVzLGYuc3RhdHVzVGV4dCxcInN0cmluZ1wiPT10eXBlb2YgZi5yZXNwb25zZVRleHQ/e3RleHQ6Zi5yZXNwb25zZVRleHR9OnZvaWQgMCxmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxmLm9ubG9hZD1iKCksZi5vbmVycm9yPWIoXCJlcnJvclwiKSxiPUNiW2ddPWIoXCJhYm9ydFwiKTt0cnl7Zi5zZW5kKGEuaGFzQ29udGVudCYmYS5kYXRhfHxudWxsKX1jYXRjaChoKXtpZihiKXRocm93IGh9fSxhYm9ydDpmdW5jdGlvbigpe2ImJmIoKX19OnZvaWQgMH0pLG4uYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi8oPzpqYXZhfGVjbWEpc2NyaXB0L30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGEpe3JldHVybiBuLmdsb2JhbEV2YWwoYSksYX19fSksbi5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7dm9pZCAwPT09YS5jYWNoZSYmKGEuY2FjaGU9ITEpLGEuY3Jvc3NEb21haW4mJihhLnR5cGU9XCJHRVRcIil9KSxuLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIixmdW5jdGlvbihhKXtpZihhLmNyb3NzRG9tYWluKXt2YXIgYixjO3JldHVybntzZW5kOmZ1bmN0aW9uKGQsZSl7Yj1uKFwiPHNjcmlwdD5cIikucHJvcCh7YXN5bmM6ITAsY2hhcnNldDphLnNjcmlwdENoYXJzZXQsc3JjOmEudXJsfSkub24oXCJsb2FkIGVycm9yXCIsYz1mdW5jdGlvbihhKXtiLnJlbW92ZSgpLGM9bnVsbCxhJiZlKFwiZXJyb3JcIj09PWEudHlwZT80MDQ6MjAwLGEudHlwZSl9KSxsLmhlYWQuYXBwZW5kQ2hpbGQoYlswXSl9LGFib3J0OmZ1bmN0aW9uKCl7YyYmYygpfX19fSk7dmFyIEZiPVtdLEdiPS8oPSlcXD8oPz0mfCQpfFxcP1xcPy87bi5hamF4U2V0dXAoe2pzb25wOlwiY2FsbGJhY2tcIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGE9RmIucG9wKCl8fG4uZXhwYW5kbytcIl9cIitjYisrO3JldHVybiB0aGlzW2FdPSEwLGF9fSksbi5hamF4UHJlZmlsdGVyKFwianNvbiBqc29ucFwiLGZ1bmN0aW9uKGIsYyxkKXt2YXIgZSxmLGcsaD1iLmpzb25wIT09ITEmJihHYi50ZXN0KGIudXJsKT9cInVybFwiOlwic3RyaW5nXCI9PXR5cGVvZiBiLmRhdGEmJiEoYi5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmR2IudGVzdChiLmRhdGEpJiZcImRhdGFcIik7cmV0dXJuIGh8fFwianNvbnBcIj09PWIuZGF0YVR5cGVzWzBdPyhlPWIuanNvbnBDYWxsYmFjaz1uLmlzRnVuY3Rpb24oYi5qc29ucENhbGxiYWNrKT9iLmpzb25wQ2FsbGJhY2soKTpiLmpzb25wQ2FsbGJhY2ssaD9iW2hdPWJbaF0ucmVwbGFjZShHYixcIiQxXCIrZSk6Yi5qc29ucCE9PSExJiYoYi51cmwrPShkYi50ZXN0KGIudXJsKT9cIiZcIjpcIj9cIikrYi5qc29ucCtcIj1cIitlKSxiLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXT1mdW5jdGlvbigpe3JldHVybiBnfHxuLmVycm9yKGUrXCIgd2FzIG5vdCBjYWxsZWRcIiksZ1swXX0sYi5kYXRhVHlwZXNbMF09XCJqc29uXCIsZj1hW2VdLGFbZV09ZnVuY3Rpb24oKXtnPWFyZ3VtZW50c30sZC5hbHdheXMoZnVuY3Rpb24oKXthW2VdPWYsYltlXSYmKGIuanNvbnBDYWxsYmFjaz1jLmpzb25wQ2FsbGJhY2ssRmIucHVzaChlKSksZyYmbi5pc0Z1bmN0aW9uKGYpJiZmKGdbMF0pLGc9Zj12b2lkIDB9KSxcInNjcmlwdFwiKTp2b2lkIDB9KSxuLnBhcnNlSFRNTD1mdW5jdGlvbihhLGIsYyl7aWYoIWF8fFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybiBudWxsO1wiYm9vbGVhblwiPT10eXBlb2YgYiYmKGM9YixiPSExKSxiPWJ8fGw7dmFyIGQ9di5leGVjKGEpLGU9IWMmJltdO3JldHVybiBkP1tiLmNyZWF0ZUVsZW1lbnQoZFsxXSldOihkPW4uYnVpbGRGcmFnbWVudChbYV0sYixlKSxlJiZlLmxlbmd0aCYmbihlKS5yZW1vdmUoKSxuLm1lcmdlKFtdLGQuY2hpbGROb2RlcykpfTt2YXIgSGI9bi5mbi5sb2FkO24uZm4ubG9hZD1mdW5jdGlvbihhLGIsYyl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEmJkhiKXJldHVybiBIYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGQsZSxmLGc9dGhpcyxoPWEuaW5kZXhPZihcIiBcIik7cmV0dXJuIGg+PTAmJihkPW4udHJpbShhLnNsaWNlKGgpKSxhPWEuc2xpY2UoMCxoKSksbi5pc0Z1bmN0aW9uKGIpPyhjPWIsYj12b2lkIDApOmImJlwib2JqZWN0XCI9PXR5cGVvZiBiJiYoZT1cIlBPU1RcIiksZy5sZW5ndGg+MCYmbi5hamF4KHt1cmw6YSx0eXBlOmUsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTpifSkuZG9uZShmdW5jdGlvbihhKXtmPWFyZ3VtZW50cyxnLmh0bWwoZD9uKFwiPGRpdj5cIikuYXBwZW5kKG4ucGFyc2VIVE1MKGEpKS5maW5kKGQpOmEpfSkuY29tcGxldGUoYyYmZnVuY3Rpb24oYSxiKXtnLmVhY2goYyxmfHxbYS5yZXNwb25zZVRleHQsYixhXSl9KSx0aGlzfSxuLmVhY2goW1wiYWpheFN0YXJ0XCIsXCJhamF4U3RvcFwiLFwiYWpheENvbXBsZXRlXCIsXCJhamF4RXJyb3JcIixcImFqYXhTdWNjZXNzXCIsXCJhamF4U2VuZFwiXSxmdW5jdGlvbihhLGIpe24uZm5bYl09ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMub24oYixhKX19KSxuLmV4cHIuZmlsdGVycy5hbmltYXRlZD1mdW5jdGlvbihhKXtyZXR1cm4gbi5ncmVwKG4udGltZXJzLGZ1bmN0aW9uKGIpe3JldHVybiBhPT09Yi5lbGVtfSkubGVuZ3RofTt2YXIgSWI9YS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7ZnVuY3Rpb24gSmIoYSl7cmV0dXJuIG4uaXNXaW5kb3coYSk/YTo5PT09YS5ub2RlVHlwZSYmYS5kZWZhdWx0Vmlld31uLm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixrPW4uY3NzKGEsXCJwb3NpdGlvblwiKSxsPW4oYSksbT17fTtcInN0YXRpY1wiPT09ayYmKGEuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxoPWwub2Zmc2V0KCksZj1uLmNzcyhhLFwidG9wXCIpLGk9bi5jc3MoYSxcImxlZnRcIiksaj0oXCJhYnNvbHV0ZVwiPT09a3x8XCJmaXhlZFwiPT09aykmJihmK2kpLmluZGV4T2YoXCJhdXRvXCIpPi0xLGo/KGQ9bC5wb3NpdGlvbigpLGc9ZC50b3AsZT1kLmxlZnQpOihnPXBhcnNlRmxvYXQoZil8fDAsZT1wYXJzZUZsb2F0KGkpfHwwKSxuLmlzRnVuY3Rpb24oYikmJihiPWIuY2FsbChhLGMsaCkpLG51bGwhPWIudG9wJiYobS50b3A9Yi50b3AtaC50b3ArZyksbnVsbCE9Yi5sZWZ0JiYobS5sZWZ0PWIubGVmdC1oLmxlZnQrZSksXCJ1c2luZ1wiaW4gYj9iLnVzaW5nLmNhbGwoYSxtKTpsLmNzcyhtKX19LG4uZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXtuLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkPXRoaXNbMF0sZT17dG9wOjAsbGVmdDowfSxmPWQmJmQub3duZXJEb2N1bWVudDtpZihmKXJldHVybiBiPWYuZG9jdW1lbnRFbGVtZW50LG4uY29udGFpbnMoYixkKT8odHlwZW9mIGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0IT09VSYmKGU9ZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksYz1KYihmKSx7dG9wOmUudG9wK2MucGFnZVlPZmZzZXQtYi5jbGllbnRUb3AsbGVmdDplLmxlZnQrYy5wYWdlWE9mZnNldC1iLmNsaWVudExlZnR9KTplfSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBhLGIsYz10aGlzWzBdLGQ9e3RvcDowLGxlZnQ6MH07cmV0dXJuXCJmaXhlZFwiPT09bi5jc3MoYyxcInBvc2l0aW9uXCIpP2I9Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooYT10aGlzLm9mZnNldFBhcmVudCgpLGI9dGhpcy5vZmZzZXQoKSxuLm5vZGVOYW1lKGFbMF0sXCJodG1sXCIpfHwoZD1hLm9mZnNldCgpKSxkLnRvcCs9bi5jc3MoYVswXSxcImJvcmRlclRvcFdpZHRoXCIsITApLGQubGVmdCs9bi5jc3MoYVswXSxcImJvcmRlckxlZnRXaWR0aFwiLCEwKSkse3RvcDpiLnRvcC1kLnRvcC1uLmNzcyhjLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6Yi5sZWZ0LWQubGVmdC1uLmNzcyhjLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudHx8SWI7d2hpbGUoYSYmIW4ubm9kZU5hbWUoYSxcImh0bWxcIikmJlwic3RhdGljXCI9PT1uLmNzcyhhLFwicG9zaXRpb25cIikpYT1hLm9mZnNldFBhcmVudDtyZXR1cm4gYXx8SWJ9KX19KSxuLmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGIsYyl7dmFyIGQ9XCJwYWdlWU9mZnNldFwiPT09YztuLmZuW2JdPWZ1bmN0aW9uKGUpe3JldHVybiBKKHRoaXMsZnVuY3Rpb24oYixlLGYpe3ZhciBnPUpiKGIpO3JldHVybiB2b2lkIDA9PT1mP2c/Z1tjXTpiW2VdOnZvaWQoZz9nLnNjcm9sbFRvKGQ/YS5wYWdlWE9mZnNldDpmLGQ/ZjphLnBhZ2VZT2Zmc2V0KTpiW2VdPWYpfSxiLGUsYXJndW1lbnRzLmxlbmd0aCxudWxsKX19KSxuLmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGEsYil7bi5jc3NIb29rc1tiXT15YShrLnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oYSxjKXtyZXR1cm4gYz8oYz14YShhLGIpLHZhLnRlc3QoYyk/bihhKS5wb3NpdGlvbigpW2JdK1wicHhcIjpjKTp2b2lkIDB9KX0pLG4uZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihhLGIpe24uZWFjaCh7cGFkZGluZzpcImlubmVyXCIrYSxjb250ZW50OmIsXCJcIjpcIm91dGVyXCIrYX0sZnVuY3Rpb24oYyxkKXtuLmZuW2RdPWZ1bmN0aW9uKGQsZSl7dmFyIGY9YXJndW1lbnRzLmxlbmd0aCYmKGN8fFwiYm9vbGVhblwiIT10eXBlb2YgZCksZz1jfHwoZD09PSEwfHxlPT09ITA/XCJtYXJnaW5cIjpcImJvcmRlclwiKTtyZXR1cm4gSih0aGlzLGZ1bmN0aW9uKGIsYyxkKXt2YXIgZTtyZXR1cm4gbi5pc1dpbmRvdyhiKT9iLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2FdOjk9PT1iLm5vZGVUeXBlPyhlPWIuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGIuYm9keVtcInNjcm9sbFwiK2FdLGVbXCJzY3JvbGxcIithXSxiLmJvZHlbXCJvZmZzZXRcIithXSxlW1wib2Zmc2V0XCIrYV0sZVtcImNsaWVudFwiK2FdKSk6dm9pZCAwPT09ZD9uLmNzcyhiLGMsZyk6bi5zdHlsZShiLGMsZCxnKX0sYixmP2Q6dm9pZCAwLGYsbnVsbCl9fSl9KSxuLmZuLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGh9LG4uZm4uYW5kU2VsZj1uLmZuLmFkZEJhY2ssXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBufSk7dmFyIEtiPWEualF1ZXJ5LExiPWEuJDtyZXR1cm4gbi5ub0NvbmZsaWN0PWZ1bmN0aW9uKGIpe3JldHVybiBhLiQ9PT1uJiYoYS4kPUxiKSxiJiZhLmpRdWVyeT09PW4mJihhLmpRdWVyeT1LYiksbn0sdHlwZW9mIGI9PT1VJiYoYS5qUXVlcnk9YS4kPW4pLG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpxdWVyeS5taW4ubWFwIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbi8vIFBsdWdpbiBjb21tdW5pY2F0aW9ucyBsYXllci4gVHdvIHR5cGVzIG9mIGNvbW11bmljYXRpb24gYXJlIHN1cHBvcnRlZDpcbi8vIDEuIE1lc3NhZ2VzIC0gd2hlbiBlbWl0dGVkLCBhbnkgbG9jYWwgaGFuZGxlcnMgYXJlIG5vdGlmaWVkLCBhbmQgaXQgaXMgYWxzbyBzZW50IGFjcm9zcyB0byB3ZWIgc29ja2V0cyBjb25uZWN0aW9uXG4vLyAgICB3aGVyZSBhbnkgcmVtb3RlIGhhbmRsZXJzIGFyZSBub3RpZmllZC4gVGhlcmUgY2FuIGJlIGFueSBudW1iZXIgb2YgbG9jYWwgYW5kL29yIHJlbW90ZSBoYW5kbGVycy4gVGhlcmUgaXMgbm9cbi8vICAgIG9wcG9ydHVuaXR5IHRvIHJlc3BvbmQuXG4vLyAyLiBNZXRob2RzIC0gY2FsbHMgYWNyb3NzIHRoZSB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gd2hlcmUgdGhlcmUgY2FuIGJlIGEgc2luZ2xlIGhhbmRsZXIgdGhhdCBjYW4gcmV0dXJuIGEgc2luZ2xlXG4vLyAgICB2YWx1ZSBvciBlcnJvciB2YWx1ZS5cblxuZnVuY3Rpb24gTWVzc2FnZXMocGx1Z2luSWQsIHNvY2tldCkge1xuICAgIHRoaXMucGx1Z2luSWQgPSBwbHVnaW5JZDtcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICB0aGlzLm1lc3NhZ2VzID0ge307XG4gICAgdGhpcy5tZXRob2RzID0ge307XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgc29ja2V0Lm9uKCdwbHVnaW4tbWVzc2FnZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLnBsdWdpbklkID09PSBwbHVnaW5JZCkge1xuICAgICAgICAgICAgbm90aWZ5LmNhbGwodGhhdCwgdGhhdC5tZXNzYWdlcywgZGF0YS5tZXNzYWdlLCBkYXRhLmRhdGEpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc29ja2V0Lm9uKCdwbHVnaW4tbWV0aG9kJywgZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChkYXRhLnBsdWdpbklkID09PSBwbHVnaW5JZCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGF0Lm1ldGhvZHMgJiYgdGhhdC5tZXRob2RzW2RhdGEubWV0aG9kXTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBkYXRhLmFyZ3M7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbk1lc3NhZ2VzLl9nbG9iYWxNZXNzYWdlcyA9IHt9O1xuXG5mdW5jdGlvbiBub3RpZnkobWVzc2FnZXNPYmosIG1lc3NhZ2UsIGRhdGEpIHtcbiAgICAvLyBOb3RpZmllcyBsb2NhbCBsaXN0ZW5lcnMgb2YgYSBtZXNzYWdlXG4gICAgdmFyIGhhbmRsZXJzID0gbWVzc2FnZXNPYmogJiYgbWVzc2FnZXNPYmpbbWVzc2FnZV07XG4gICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5NZXNzYWdlcy5wcm90b3R5cGUgPSB7XG4gICAgLy8gQ2FsbCBhbmQgcmVnaXN0ZXIgZm9yIG1ldGhvZHNcblxuICAgIC8qKlxuICAgICAqIEBkZXNjIENhbGxzIHRoZSBzcGVjaWZpZWQgbWV0aG9kLCB3aXRoIGFueSBudW1iZXIgb2YgcGFyYW1ldGVycy4gUmV0dXJuIGEgcHJvbWlzZS5cbiAgICAgKiBAcGFyYW0gbWV0aG9kXG4gICAgICovXG4gICAgY2FsbDogZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgncGx1Z2luLW1ldGhvZCcsIHtcbiAgICAgICAgICAgICAgICBwbHVnaW5JZDogdGhpcy5wbHVnaW5JZCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICBhcmdzOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbihtZXRob2QsIGhhbmRsZXIpIHtcbiAgICAgICAgLy8gQ2FuIG9ubHkgZXZlciBoYXZlIG9uZSBoYW5kbGVyIGZvciBhIG1ldGhvZC4gQ2FuY2VsIGJ5IGNhbGxpbmcgd2l0aCBoYW5kbGVyIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgICAgICB0aGlzLm1ldGhvZHNbbWV0aG9kXSA9IGhhbmRsZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBFbWl0IGFuZCBoYW5kbGUgbWVzc2FnZXNcbiAgICBlbWl0OiBmdW5jdGlvbiAobWVzc2FnZSwgZGF0YSwgaXNHbG9iYWwpIHtcbiAgICAgICAgLy8gUGFzcyB0aGUgbWVzc2FnZSBhY3Jvc3MgdGhlIHNvY2tldFxuICAgICAgICB2YXIgZXZlbnROYW1lLFxuICAgICAgICAgICAgbWVzc2FnZXNPYmo7XG5cbiAgICAgICAgaWYgKGlzR2xvYmFsKSB7XG4gICAgICAgICAgICBldmVudE5hbWUgPSAnZ2xvYmFsLXBsdWdpbi1tZXNzYWdlJztcbiAgICAgICAgICAgIG1lc3NhZ2VzT2JqID0gTWVzc2FnZXMuX2dsb2JhbE1lc3NhZ2VzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXZlbnROYW1lID0gJ3BsdWdpbi1tZXNzYWdlJztcbiAgICAgICAgICAgIG1lc3NhZ2VzT2JqID0gdGhpcy5tZXNzYWdlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc29ja2V0LmVtaXQoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICBwbHVnaW5JZDogdGhpcy5wbHVnaW5JZCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE5vdGlmeSBhbnkgbG9jYWwgbGlzdGVuZXJzXG4gICAgICAgIG5vdGlmeS5jYWxsKHRoaXMsIG1lc3NhZ2VzT2JqLCBtZXNzYWdlLCBkYXRhKTtcbiAgICB9LFxuICAgIFxuICAgIC8vIEVtaXQgbWVzc2FnZXMgZGVzdGluZWQgdG8gZXh0ZXJuYWwgZGVidWctaG9zdHNcbiAgICBlbWl0RGVidWc6IGZ1bmN0aW9uKG1lc3NhZ2UsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnZGVidWctbWVzc2FnZScsIHtcbiAgICAgICAgICAgIHBsdWdpbklkOiB0aGlzLnBsdWdpbklkLFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlZnJlc2hBcHBIb3N0OiBmdW5jdGlvbiAoZGV2aWNlKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3JlZnJlc2gtYXBwLWhvc3QnLCBkZXZpY2UpO1xuICAgIH0sXG5cbiAgICBvbjogZnVuY3Rpb24gKG1lc3NhZ2UsIGhhbmRsZXIsIGlzR2xvYmFsKSB7XG4gICAgICAgIHZhciBtZXNzYWdlc09iaiA9ICghaXNHbG9iYWwpID8gdGhpcy5tZXNzYWdlcyA6IE1lc3NhZ2VzLl9nbG9iYWxNZXNzYWdlcztcblxuICAgICAgICBpZiAoIW1lc3NhZ2VzT2JqW21lc3NhZ2VdKSB7XG4gICAgICAgICAgICBtZXNzYWdlc09ialttZXNzYWdlXSA9IFtoYW5kbGVyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzT2JqW21lc3NhZ2VdLnB1c2goaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIG9mZjogZnVuY3Rpb24gKG1lc3NhZ2UsIGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5tZXNzYWdlc1ttZXNzYWdlXTtcbiAgICAgICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgICAgICAgLy8gdHJ5IG9uIHRoZSBnbG9iYWwgbWVzc2FnZXMgaGFuZGxlcnNcbiAgICAgICAgICAgIGhhbmRsZXJzID0gTWVzc2FnZXMuX2dsb2JhbE1lc3NhZ2VzW21lc3NhZ2VdO1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvcyA9IGhhbmRsZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgICAgIHdoaWxlIChwb3MgPiAtMSkge1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKHBvcywgMSk7XG4gICAgICAgICAgICBwb3MgPSBoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlcztcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG5cbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPSAnZnVuY3Rpb24nKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgbmV4dEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH0pKCk7XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIEJhc2VkIGluIHBhcnQgb24gY29kZSBmcm9tIEFwYWNoZSBSaXBwbGUsIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvaW5jdWJhdG9yLXJpcHBsZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnQ09NTU9OJzoge1xuICAgICAgICAnUFJFRklYJzogJ3RpbnloaXBwb3MtJyxcbiAgICB9LFxuXG4gICAgJ0dFTyc6IHtcbiAgICAgICAgJ09QVElPTlMnOiB7XG4gICAgICAgICAgICAnTEFUSVRVREUnOiAnZ2VvLWxhdGl0dWRlJyxcbiAgICAgICAgICAgICdMT05HSVRVREUnOiAnZ2VvLWxvbmdpdHVkZScsXG4gICAgICAgICAgICAnQUxUSVRVREUnOiAnZ2VvLWFsdGl0dWRlJyxcbiAgICAgICAgICAgICdDRUxMX0lEJzogJ2dlby1jZWxsaWQnLFxuICAgICAgICAgICAgJ0FDQ1VSQUNZJzogJ2dlby1hY2N1cmFjeScsXG4gICAgICAgICAgICAnQUxUSVRVREVfQUNDVVJBQ1knOiAnZ2VvLWFsdGl0dWRlLWFjY3VyYWN5JyxcbiAgICAgICAgICAgICdIRUFESU5HJzogJ2dlby1oZWFkaW5nJyxcbiAgICAgICAgICAgICdTUEVFRCc6ICdnZW8tc3BlZWQnLFxuICAgICAgICAgICAgJ1RJTUVfU1RBTVAnOiAnZ2VvLXRpbWVzdGFtcCcsXG4gICAgICAgICAgICAnREVMQVknOiAnZ2VvLWRlbGF5JyxcbiAgICAgICAgICAgICdERUxBWV9MQUJFTCc6ICdnZW8tZGVsYXktbGFiZWwnLFxuICAgICAgICAgICAgJ0hFQURJTkdfTEFCRUwnOiAnZ2VvLWhlYWRpbmctbGFiZWwnLFxuICAgICAgICAgICAgJ0hFQURJTkdfTUFQX0xBQkVMJzogJ2dlby1tYXAtZGlyZWN0aW9uLWxhYmVsJyxcbiAgICAgICAgICAgICdJTUFHRSc6ICdnZW8tbWFwLWltZycsXG4gICAgICAgICAgICAnTUFQX01BUktFUic6ICdnZW8tbWFwLW1hcmtlcicsXG4gICAgICAgICAgICAnTUFQX0NPTlRBSU5FUic6ICdnZW8tbWFwLWNvbnRhaW5lcicsXG4gICAgICAgICAgICAnVElNRU9VVCc6ICdnZW8tdGltZW91dCcsXG4gICAgICAgICAgICAnR1BYRklMRSc6ICdnZW8tZ3B4ZmlsZScsXG4gICAgICAgICAgICAnR1BYR08nOiAnZ2VvLWdweC1nbycsXG4gICAgICAgICAgICAnR1BYTVVMVElQTElFUic6ICdnZW8tZ3B4bXVsdGlwbGllci1zZWxlY3QnLFxuICAgICAgICAgICAgJ0dQWFJFUExBWVNUQVRVUyc6ICdnZW8tZ3B4cmVwbGF5c3RhdHVzJ1xuICAgICAgICB9LFxuICAgICAgICAnTUFQX1pPT01fTUFYJzogMTgsXG4gICAgICAgICdNQVBfWk9PTV9NSU4nOiAwLFxuICAgICAgICAnTUFQX1pPT01fTEVWRUxfQ09OVEFJTkVSJzogJ2dlby1tYXAtem9vbWxldmVsLXZhbHVlJyxcbiAgICAgICAgJ01BUF9aT09NX0tFWSc6ICdnZW8tbWFwLXpvb20ta2V5JyxcbiAgICAgICAgJ0dQWEdPX0xBQkVMUyc6IHtcbiAgICAgICAgICAgICdHTyc6ICdHbycsXG4gICAgICAgICAgICAnU1RPUCc6ICdTdG9wJ1xuICAgICAgICB9XG4gICAgfSxcblxuICAgICdCQVRURVJZX1NUQVRVUyc6IHtcbiAgICAgICAgJ0JBVFRFUllfU1RBVFVTX0tFWSc6ICdiYXR0ZXJ5LXN0YXR1cy1rZXknLFxuICAgICAgICAnSVNfUExVR0dFRF9LRVknOiAnaXMtcGx1Z2dlZC1rZXknLFxuICAgICAgICAnTEVWRUxfTEFCRUwnOiAnYmF0dGVyeS1sZXZlbC1sYWJlbCcsXG4gICAgICAgICdMRVZFTF9WQUxVRSc6ICdiYXR0ZXJ5LWxldmVsJyxcbiAgICAgICAgJ0lTX1BMVUdHRURfQ0hFQ0tCT1gnOiAnaXMtcGx1Z2dlZCdcbiAgICB9LFxufTtcbiIsIi8qIEB2ZXJzaW9uIDEuNC41ICovXG4oZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5pbz1mKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiBmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30oezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPV9kZXJlcV8oXCIuL2xpYi9cIil9LHtcIi4vbGliL1wiOjJ9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1fZGVyZXFfKFwiLi9zb2NrZXRcIik7bW9kdWxlLmV4cG9ydHMucGFyc2VyPV9kZXJlcV8oXCJlbmdpbmUuaW8tcGFyc2VyXCIpfSx7XCIuL3NvY2tldFwiOjMsXCJlbmdpbmUuaW8tcGFyc2VyXCI6MTl9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXt2YXIgdHJhbnNwb3J0cz1fZGVyZXFfKFwiLi90cmFuc3BvcnRzXCIpO3ZhciBFbWl0dGVyPV9kZXJlcV8oXCJjb21wb25lbnQtZW1pdHRlclwiKTt2YXIgZGVidWc9X2RlcmVxXyhcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpzb2NrZXRcIik7dmFyIGluZGV4PV9kZXJlcV8oXCJpbmRleG9mXCIpO3ZhciBwYXJzZXI9X2RlcmVxXyhcImVuZ2luZS5pby1wYXJzZXJcIik7dmFyIHBhcnNldXJpPV9kZXJlcV8oXCJwYXJzZXVyaVwiKTt2YXIgcGFyc2Vqc29uPV9kZXJlcV8oXCJwYXJzZWpzb25cIik7dmFyIHBhcnNlcXM9X2RlcmVxXyhcInBhcnNlcXNcIik7bW9kdWxlLmV4cG9ydHM9U29ja2V0O2Z1bmN0aW9uIG5vb3AoKXt9ZnVuY3Rpb24gU29ja2V0KHVyaSxvcHRzKXtpZighKHRoaXMgaW5zdGFuY2VvZiBTb2NrZXQpKXJldHVybiBuZXcgU29ja2V0KHVyaSxvcHRzKTtvcHRzPW9wdHN8fHt9O2lmKHVyaSYmXCJvYmplY3RcIj09dHlwZW9mIHVyaSl7b3B0cz11cmk7dXJpPW51bGx9aWYodXJpKXt1cmk9cGFyc2V1cmkodXJpKTtvcHRzLmhvc3RuYW1lPXVyaS5ob3N0O29wdHMuc2VjdXJlPXVyaS5wcm90b2NvbD09XCJodHRwc1wifHx1cmkucHJvdG9jb2w9PVwid3NzXCI7b3B0cy5wb3J0PXVyaS5wb3J0O2lmKHVyaS5xdWVyeSlvcHRzLnF1ZXJ5PXVyaS5xdWVyeX1lbHNlIGlmKG9wdHMuaG9zdCl7b3B0cy5ob3N0bmFtZT1wYXJzZXVyaShvcHRzLmhvc3QpLmhvc3R9dGhpcy5zZWN1cmU9bnVsbCE9b3B0cy5zZWN1cmU/b3B0cy5zZWN1cmU6Z2xvYmFsLmxvY2F0aW9uJiZcImh0dHBzOlwiPT1sb2NhdGlvbi5wcm90b2NvbDtpZihvcHRzLmhvc3RuYW1lJiYhb3B0cy5wb3J0KXtvcHRzLnBvcnQ9dGhpcy5zZWN1cmU/XCI0NDNcIjpcIjgwXCJ9dGhpcy5hZ2VudD1vcHRzLmFnZW50fHxmYWxzZTt0aGlzLmhvc3RuYW1lPW9wdHMuaG9zdG5hbWV8fChnbG9iYWwubG9jYXRpb24/bG9jYXRpb24uaG9zdG5hbWU6XCJsb2NhbGhvc3RcIik7dGhpcy5wb3J0PW9wdHMucG9ydHx8KGdsb2JhbC5sb2NhdGlvbiYmbG9jYXRpb24ucG9ydD9sb2NhdGlvbi5wb3J0OnRoaXMuc2VjdXJlPzQ0Mzo4MCk7dGhpcy5xdWVyeT1vcHRzLnF1ZXJ5fHx7fTtpZihcInN0cmluZ1wiPT10eXBlb2YgdGhpcy5xdWVyeSl0aGlzLnF1ZXJ5PXBhcnNlcXMuZGVjb2RlKHRoaXMucXVlcnkpO3RoaXMudXBncmFkZT1mYWxzZSE9PW9wdHMudXBncmFkZTt0aGlzLnBhdGg9KG9wdHMucGF0aHx8XCIvZW5naW5lLmlvXCIpLnJlcGxhY2UoL1xcLyQvLFwiXCIpK1wiL1wiO3RoaXMuZm9yY2VKU09OUD0hIW9wdHMuZm9yY2VKU09OUDt0aGlzLmpzb25wPWZhbHNlIT09b3B0cy5qc29ucDt0aGlzLmZvcmNlQmFzZTY0PSEhb3B0cy5mb3JjZUJhc2U2NDt0aGlzLmVuYWJsZXNYRFI9ISFvcHRzLmVuYWJsZXNYRFI7dGhpcy50aW1lc3RhbXBQYXJhbT1vcHRzLnRpbWVzdGFtcFBhcmFtfHxcInRcIjt0aGlzLnRpbWVzdGFtcFJlcXVlc3RzPW9wdHMudGltZXN0YW1wUmVxdWVzdHM7dGhpcy50cmFuc3BvcnRzPW9wdHMudHJhbnNwb3J0c3x8W1wicG9sbGluZ1wiLFwid2Vic29ja2V0XCJdO3RoaXMucmVhZHlTdGF0ZT1cIlwiO3RoaXMud3JpdGVCdWZmZXI9W107dGhpcy5wb2xpY3lQb3J0PW9wdHMucG9saWN5UG9ydHx8ODQzO3RoaXMucmVtZW1iZXJVcGdyYWRlPW9wdHMucmVtZW1iZXJVcGdyYWRlfHxmYWxzZTt0aGlzLmJpbmFyeVR5cGU9bnVsbDt0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcz1vcHRzLm9ubHlCaW5hcnlVcGdyYWRlczt0aGlzLnBlck1lc3NhZ2VEZWZsYXRlPWZhbHNlIT09b3B0cy5wZXJNZXNzYWdlRGVmbGF0ZT9vcHRzLnBlck1lc3NhZ2VEZWZsYXRlfHx7fTpmYWxzZTtpZih0cnVlPT09dGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSl0aGlzLnBlck1lc3NhZ2VEZWZsYXRlPXt9O2lmKHRoaXMucGVyTWVzc2FnZURlZmxhdGUmJm51bGw9PXRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKXt0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZD0xMDI0fXRoaXMucGZ4PW9wdHMucGZ4fHxudWxsO3RoaXMua2V5PW9wdHMua2V5fHxudWxsO3RoaXMucGFzc3BocmFzZT1vcHRzLnBhc3NwaHJhc2V8fG51bGw7dGhpcy5jZXJ0PW9wdHMuY2VydHx8bnVsbDt0aGlzLmNhPW9wdHMuY2F8fG51bGw7dGhpcy5jaXBoZXJzPW9wdHMuY2lwaGVyc3x8bnVsbDt0aGlzLnJlamVjdFVuYXV0aG9yaXplZD1vcHRzLnJlamVjdFVuYXV0aG9yaXplZD09PXVuZGVmaW5lZD9udWxsOm9wdHMucmVqZWN0VW5hdXRob3JpemVkO3ZhciBmcmVlR2xvYmFsPXR5cGVvZiBnbG9iYWw9PVwib2JqZWN0XCImJmdsb2JhbDtpZihmcmVlR2xvYmFsLmdsb2JhbD09PWZyZWVHbG9iYWwpe2lmKG9wdHMuZXh0cmFIZWFkZXJzJiZPYmplY3Qua2V5cyhvcHRzLmV4dHJhSGVhZGVycykubGVuZ3RoPjApe3RoaXMuZXh0cmFIZWFkZXJzPW9wdHMuZXh0cmFIZWFkZXJzfX10aGlzLm9wZW4oKX1Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzPWZhbHNlO0VtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7U29ja2V0LnByb3RvY29sPXBhcnNlci5wcm90b2NvbDtTb2NrZXQuU29ja2V0PVNvY2tldDtTb2NrZXQuVHJhbnNwb3J0PV9kZXJlcV8oXCIuL3RyYW5zcG9ydFwiKTtTb2NrZXQudHJhbnNwb3J0cz1fZGVyZXFfKFwiLi90cmFuc3BvcnRzXCIpO1NvY2tldC5wYXJzZXI9X2RlcmVxXyhcImVuZ2luZS5pby1wYXJzZXJcIik7U29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQ9ZnVuY3Rpb24obmFtZSl7ZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLG5hbWUpO3ZhciBxdWVyeT1jbG9uZSh0aGlzLnF1ZXJ5KTtxdWVyeS5FSU89cGFyc2VyLnByb3RvY29sO3F1ZXJ5LnRyYW5zcG9ydD1uYW1lO2lmKHRoaXMuaWQpcXVlcnkuc2lkPXRoaXMuaWQ7dmFyIHRyYW5zcG9ydD1uZXcgdHJhbnNwb3J0c1tuYW1lXSh7YWdlbnQ6dGhpcy5hZ2VudCxob3N0bmFtZTp0aGlzLmhvc3RuYW1lLHBvcnQ6dGhpcy5wb3J0LHNlY3VyZTp0aGlzLnNlY3VyZSxwYXRoOnRoaXMucGF0aCxxdWVyeTpxdWVyeSxmb3JjZUpTT05QOnRoaXMuZm9yY2VKU09OUCxqc29ucDp0aGlzLmpzb25wLGZvcmNlQmFzZTY0OnRoaXMuZm9yY2VCYXNlNjQsZW5hYmxlc1hEUjp0aGlzLmVuYWJsZXNYRFIsdGltZXN0YW1wUmVxdWVzdHM6dGhpcy50aW1lc3RhbXBSZXF1ZXN0cyx0aW1lc3RhbXBQYXJhbTp0aGlzLnRpbWVzdGFtcFBhcmFtLHBvbGljeVBvcnQ6dGhpcy5wb2xpY3lQb3J0LHNvY2tldDp0aGlzLHBmeDp0aGlzLnBmeCxrZXk6dGhpcy5rZXkscGFzc3BocmFzZTp0aGlzLnBhc3NwaHJhc2UsY2VydDp0aGlzLmNlcnQsY2E6dGhpcy5jYSxjaXBoZXJzOnRoaXMuY2lwaGVycyxyZWplY3RVbmF1dGhvcml6ZWQ6dGhpcy5yZWplY3RVbmF1dGhvcml6ZWQscGVyTWVzc2FnZURlZmxhdGU6dGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSxleHRyYUhlYWRlcnM6dGhpcy5leHRyYUhlYWRlcnN9KTtyZXR1cm4gdHJhbnNwb3J0fTtmdW5jdGlvbiBjbG9uZShvYmope3ZhciBvPXt9O2Zvcih2YXIgaSBpbiBvYmope2lmKG9iai5oYXNPd25Qcm9wZXJ0eShpKSl7b1tpXT1vYmpbaV19fXJldHVybiBvfVNvY2tldC5wcm90b3R5cGUub3Blbj1mdW5jdGlvbigpe3ZhciB0cmFuc3BvcnQ7aWYodGhpcy5yZW1lbWJlclVwZ3JhZGUmJlNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MmJnRoaXMudHJhbnNwb3J0cy5pbmRleE9mKFwid2Vic29ja2V0XCIpIT0tMSl7dHJhbnNwb3J0PVwid2Vic29ja2V0XCJ9ZWxzZSBpZigwPT09dGhpcy50cmFuc3BvcnRzLmxlbmd0aCl7dmFyIHNlbGY9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2VsZi5lbWl0KFwiZXJyb3JcIixcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpfSwwKTtyZXR1cm59ZWxzZXt0cmFuc3BvcnQ9dGhpcy50cmFuc3BvcnRzWzBdfXRoaXMucmVhZHlTdGF0ZT1cIm9wZW5pbmdcIjt0cnl7dHJhbnNwb3J0PXRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCl9Y2F0Y2goZSl7dGhpcy50cmFuc3BvcnRzLnNoaWZ0KCk7dGhpcy5vcGVuKCk7cmV0dXJufXRyYW5zcG9ydC5vcGVuKCk7dGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KX07U29ja2V0LnByb3RvdHlwZS5zZXRUcmFuc3BvcnQ9ZnVuY3Rpb24odHJhbnNwb3J0KXtkZWJ1ZyhcInNldHRpbmcgdHJhbnNwb3J0ICVzXCIsdHJhbnNwb3J0Lm5hbWUpO3ZhciBzZWxmPXRoaXM7aWYodGhpcy50cmFuc3BvcnQpe2RlYnVnKFwiY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzXCIsdGhpcy50cmFuc3BvcnQubmFtZSk7dGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCl9dGhpcy50cmFuc3BvcnQ9dHJhbnNwb3J0O3RyYW5zcG9ydC5vbihcImRyYWluXCIsZnVuY3Rpb24oKXtzZWxmLm9uRHJhaW4oKX0pLm9uKFwicGFja2V0XCIsZnVuY3Rpb24ocGFja2V0KXtzZWxmLm9uUGFja2V0KHBhY2tldCl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7c2VsZi5vbkVycm9yKGUpfSkub24oXCJjbG9zZVwiLGZ1bmN0aW9uKCl7c2VsZi5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpfSl9O1NvY2tldC5wcm90b3R5cGUucHJvYmU9ZnVuY3Rpb24obmFtZSl7ZGVidWcoJ3Byb2JpbmcgdHJhbnNwb3J0IFwiJXNcIicsbmFtZSk7dmFyIHRyYW5zcG9ydD10aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLHtwcm9iZToxfSksZmFpbGVkPWZhbHNlLHNlbGY9dGhpcztTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzPWZhbHNlO2Z1bmN0aW9uIG9uVHJhbnNwb3J0T3Blbigpe2lmKHNlbGYub25seUJpbmFyeVVwZ3JhZGVzKXt2YXIgdXBncmFkZUxvc2VzQmluYXJ5PSF0aGlzLnN1cHBvcnRzQmluYXJ5JiZzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtmYWlsZWQ9ZmFpbGVkfHx1cGdyYWRlTG9zZXNCaW5hcnl9aWYoZmFpbGVkKXJldHVybjtkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBvcGVuZWQnLG5hbWUpO3RyYW5zcG9ydC5zZW5kKFt7dHlwZTpcInBpbmdcIixkYXRhOlwicHJvYmVcIn1dKTt0cmFuc3BvcnQub25jZShcInBhY2tldFwiLGZ1bmN0aW9uKG1zZyl7aWYoZmFpbGVkKXJldHVybjtpZihcInBvbmdcIj09bXNnLnR5cGUmJlwicHJvYmVcIj09bXNnLmRhdGEpe2RlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLG5hbWUpO3NlbGYudXBncmFkaW5nPXRydWU7c2VsZi5lbWl0KFwidXBncmFkaW5nXCIsdHJhbnNwb3J0KTtpZighdHJhbnNwb3J0KXJldHVybjtTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzPVwid2Vic29ja2V0XCI9PXRyYW5zcG9ydC5uYW1lO2RlYnVnKCdwYXVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0IFwiJXNcIicsc2VsZi50cmFuc3BvcnQubmFtZSk7c2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24oKXtpZihmYWlsZWQpcmV0dXJuO2lmKFwiY2xvc2VkXCI9PXNlbGYucmVhZHlTdGF0ZSlyZXR1cm47ZGVidWcoXCJjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXRcIik7Y2xlYW51cCgpO3NlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7dHJhbnNwb3J0LnNlbmQoW3t0eXBlOlwidXBncmFkZVwifV0pO3NlbGYuZW1pdChcInVwZ3JhZGVcIix0cmFuc3BvcnQpO3RyYW5zcG9ydD1udWxsO3NlbGYudXBncmFkaW5nPWZhbHNlO3NlbGYuZmx1c2goKX0pfWVsc2V7ZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJyxuYW1lKTt2YXIgZXJyPW5ldyBFcnJvcihcInByb2JlIGVycm9yXCIpO2Vyci50cmFuc3BvcnQ9dHJhbnNwb3J0Lm5hbWU7c2VsZi5lbWl0KFwidXBncmFkZUVycm9yXCIsZXJyKX19KX1mdW5jdGlvbiBmcmVlemVUcmFuc3BvcnQoKXtpZihmYWlsZWQpcmV0dXJuO2ZhaWxlZD10cnVlO2NsZWFudXAoKTt0cmFuc3BvcnQuY2xvc2UoKTt0cmFuc3BvcnQ9bnVsbH1mdW5jdGlvbiBvbmVycm9yKGVycil7dmFyIGVycm9yPW5ldyBFcnJvcihcInByb2JlIGVycm9yOiBcIitlcnIpO2Vycm9yLnRyYW5zcG9ydD10cmFuc3BvcnQubmFtZTtmcmVlemVUcmFuc3BvcnQoKTtkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLG5hbWUsZXJyKTtzZWxmLmVtaXQoXCJ1cGdyYWRlRXJyb3JcIixlcnJvcil9ZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSgpe29uZXJyb3IoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpfWZ1bmN0aW9uIG9uY2xvc2UoKXtvbmVycm9yKFwic29ja2V0IGNsb3NlZFwiKX1mdW5jdGlvbiBvbnVwZ3JhZGUodG8pe2lmKHRyYW5zcG9ydCYmdG8ubmFtZSE9dHJhbnNwb3J0Lm5hbWUpe2RlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLHRvLm5hbWUsdHJhbnNwb3J0Lm5hbWUpO2ZyZWV6ZVRyYW5zcG9ydCgpfX1mdW5jdGlvbiBjbGVhbnVwKCl7dHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwib3BlblwiLG9uVHJhbnNwb3J0T3Blbik7dHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixvbmVycm9yKTt0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLG9uVHJhbnNwb3J0Q2xvc2UpO3NlbGYucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLG9uY2xvc2UpO3NlbGYucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRpbmdcIixvbnVwZ3JhZGUpfXRyYW5zcG9ydC5vbmNlKFwib3BlblwiLG9uVHJhbnNwb3J0T3Blbik7dHJhbnNwb3J0Lm9uY2UoXCJlcnJvclwiLG9uZXJyb3IpO3RyYW5zcG9ydC5vbmNlKFwiY2xvc2VcIixvblRyYW5zcG9ydENsb3NlKTt0aGlzLm9uY2UoXCJjbG9zZVwiLG9uY2xvc2UpO3RoaXMub25jZShcInVwZ3JhZGluZ1wiLG9udXBncmFkZSk7dHJhbnNwb3J0Lm9wZW4oKX07U29ja2V0LnByb3RvdHlwZS5vbk9wZW49ZnVuY3Rpb24oKXtkZWJ1ZyhcInNvY2tldCBvcGVuXCIpO3RoaXMucmVhZHlTdGF0ZT1cIm9wZW5cIjtTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzPVwid2Vic29ja2V0XCI9PXRoaXMudHJhbnNwb3J0Lm5hbWU7dGhpcy5lbWl0KFwib3BlblwiKTt0aGlzLmZsdXNoKCk7aWYoXCJvcGVuXCI9PXRoaXMucmVhZHlTdGF0ZSYmdGhpcy51cGdyYWRlJiZ0aGlzLnRyYW5zcG9ydC5wYXVzZSl7ZGVidWcoXCJzdGFydGluZyB1cGdyYWRlIHByb2Jlc1wiKTtmb3IodmFyIGk9MCxsPXRoaXMudXBncmFkZXMubGVuZ3RoO2k8bDtpKyspe3RoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSl9fX07U29ja2V0LnByb3RvdHlwZS5vblBhY2tldD1mdW5jdGlvbihwYWNrZXQpe2lmKFwib3BlbmluZ1wiPT10aGlzLnJlYWR5U3RhdGV8fFwib3BlblwiPT10aGlzLnJlYWR5U3RhdGUpe2RlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJyxwYWNrZXQudHlwZSxwYWNrZXQuZGF0YSk7dGhpcy5lbWl0KFwicGFja2V0XCIscGFja2V0KTt0aGlzLmVtaXQoXCJoZWFydGJlYXRcIik7c3dpdGNoKHBhY2tldC50eXBlKXtjYXNlXCJvcGVuXCI6dGhpcy5vbkhhbmRzaGFrZShwYXJzZWpzb24ocGFja2V0LmRhdGEpKTticmVhaztjYXNlXCJwb25nXCI6dGhpcy5zZXRQaW5nKCk7dGhpcy5lbWl0KFwicG9uZ1wiKTticmVhaztjYXNlXCJlcnJvclwiOnZhciBlcnI9bmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO2Vyci5jb2RlPXBhY2tldC5kYXRhO3RoaXMub25FcnJvcihlcnIpO2JyZWFrO2Nhc2VcIm1lc3NhZ2VcIjp0aGlzLmVtaXQoXCJkYXRhXCIscGFja2V0LmRhdGEpO3RoaXMuZW1pdChcIm1lc3NhZ2VcIixwYWNrZXQuZGF0YSk7YnJlYWt9fWVsc2V7ZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsdGhpcy5yZWFkeVN0YXRlKX19O1NvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2U9ZnVuY3Rpb24oZGF0YSl7dGhpcy5lbWl0KFwiaGFuZHNoYWtlXCIsZGF0YSk7dGhpcy5pZD1kYXRhLnNpZDt0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQ9ZGF0YS5zaWQ7dGhpcy51cGdyYWRlcz10aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO3RoaXMucGluZ0ludGVydmFsPWRhdGEucGluZ0ludGVydmFsO3RoaXMucGluZ1RpbWVvdXQ9ZGF0YS5waW5nVGltZW91dDt0aGlzLm9uT3BlbigpO2lmKFwiY2xvc2VkXCI9PXRoaXMucmVhZHlTdGF0ZSlyZXR1cm47dGhpcy5zZXRQaW5nKCk7dGhpcy5yZW1vdmVMaXN0ZW5lcihcImhlYXJ0YmVhdFwiLHRoaXMub25IZWFydGJlYXQpO3RoaXMub24oXCJoZWFydGJlYXRcIix0aGlzLm9uSGVhcnRiZWF0KX07U29ja2V0LnByb3RvdHlwZS5vbkhlYXJ0YmVhdD1mdW5jdGlvbih0aW1lb3V0KXtjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTt2YXIgc2VsZj10aGlzO3NlbGYucGluZ1RpbWVvdXRUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aWYoXCJjbG9zZWRcIj09c2VsZi5yZWFkeVN0YXRlKXJldHVybjtzZWxmLm9uQ2xvc2UoXCJwaW5nIHRpbWVvdXRcIil9LHRpbWVvdXR8fHNlbGYucGluZ0ludGVydmFsK3NlbGYucGluZ1RpbWVvdXQpfTtTb2NrZXQucHJvdG90eXBlLnNldFBpbmc9ZnVuY3Rpb24oKXt2YXIgc2VsZj10aGlzO2NsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtzZWxmLnBpbmdJbnRlcnZhbFRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtkZWJ1ZyhcIndyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtc1wiLHNlbGYucGluZ1RpbWVvdXQpO3NlbGYucGluZygpO3NlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCl9LHNlbGYucGluZ0ludGVydmFsKX07U29ja2V0LnByb3RvdHlwZS5waW5nPWZ1bmN0aW9uKCl7dmFyIHNlbGY9dGhpczt0aGlzLnNlbmRQYWNrZXQoXCJwaW5nXCIsZnVuY3Rpb24oKXtzZWxmLmVtaXQoXCJwaW5nXCIpfSl9O1NvY2tldC5wcm90b3R5cGUub25EcmFpbj1mdW5jdGlvbigpe3RoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsdGhpcy5wcmV2QnVmZmVyTGVuKTt0aGlzLnByZXZCdWZmZXJMZW49MDtpZigwPT09dGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpe3RoaXMuZW1pdChcImRyYWluXCIpfWVsc2V7dGhpcy5mbHVzaCgpfX07U29ja2V0LnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2lmKFwiY2xvc2VkXCIhPXRoaXMucmVhZHlTdGF0ZSYmdGhpcy50cmFuc3BvcnQud3JpdGFibGUmJiF0aGlzLnVwZ3JhZGluZyYmdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpe2RlYnVnKFwiZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXRcIix0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7dGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTt0aGlzLnByZXZCdWZmZXJMZW49dGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7dGhpcy5lbWl0KFwiZmx1c2hcIil9fTtTb2NrZXQucHJvdG90eXBlLndyaXRlPVNvY2tldC5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihtc2csb3B0aW9ucyxmbil7dGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLG1zZyxvcHRpb25zLGZuKTtyZXR1cm4gdGhpc307U29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0PWZ1bmN0aW9uKHR5cGUsZGF0YSxvcHRpb25zLGZuKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkYXRhKXtmbj1kYXRhO2RhdGE9dW5kZWZpbmVkfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG9wdGlvbnMpe2ZuPW9wdGlvbnM7b3B0aW9ucz1udWxsfWlmKFwiY2xvc2luZ1wiPT10aGlzLnJlYWR5U3RhdGV8fFwiY2xvc2VkXCI9PXRoaXMucmVhZHlTdGF0ZSl7cmV0dXJufW9wdGlvbnM9b3B0aW9uc3x8e307b3B0aW9ucy5jb21wcmVzcz1mYWxzZSE9PW9wdGlvbnMuY29tcHJlc3M7dmFyIHBhY2tldD17dHlwZTp0eXBlLGRhdGE6ZGF0YSxvcHRpb25zOm9wdGlvbnN9O3RoaXMuZW1pdChcInBhY2tldENyZWF0ZVwiLHBhY2tldCk7dGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7aWYoZm4pdGhpcy5vbmNlKFwiZmx1c2hcIixmbik7dGhpcy5mbHVzaCgpfTtTb2NrZXQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7aWYoXCJvcGVuaW5nXCI9PXRoaXMucmVhZHlTdGF0ZXx8XCJvcGVuXCI9PXRoaXMucmVhZHlTdGF0ZSl7dGhpcy5yZWFkeVN0YXRlPVwiY2xvc2luZ1wiO3ZhciBzZWxmPXRoaXM7aWYodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpe3RoaXMub25jZShcImRyYWluXCIsZnVuY3Rpb24oKXtpZih0aGlzLnVwZ3JhZGluZyl7d2FpdEZvclVwZ3JhZGUoKX1lbHNle2Nsb3NlKCl9fSl9ZWxzZSBpZih0aGlzLnVwZ3JhZGluZyl7d2FpdEZvclVwZ3JhZGUoKX1lbHNle2Nsb3NlKCl9fWZ1bmN0aW9uIGNsb3NlKCl7c2VsZi5vbkNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO2RlYnVnKFwic29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZVwiKTtzZWxmLnRyYW5zcG9ydC5jbG9zZSgpfWZ1bmN0aW9uIGNsZWFudXBBbmRDbG9zZSgpe3NlbGYucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRlXCIsY2xlYW51cEFuZENsb3NlKTtzZWxmLnJlbW92ZUxpc3RlbmVyKFwidXBncmFkZUVycm9yXCIsY2xlYW51cEFuZENsb3NlKTtjbG9zZSgpfWZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlKCl7c2VsZi5vbmNlKFwidXBncmFkZVwiLGNsZWFudXBBbmRDbG9zZSk7c2VsZi5vbmNlKFwidXBncmFkZUVycm9yXCIsY2xlYW51cEFuZENsb3NlKX1yZXR1cm4gdGhpc307U29ja2V0LnByb3RvdHlwZS5vbkVycm9yPWZ1bmN0aW9uKGVycil7ZGVidWcoXCJzb2NrZXQgZXJyb3IgJWpcIixlcnIpO1NvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3M9ZmFsc2U7dGhpcy5lbWl0KFwiZXJyb3JcIixlcnIpO3RoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLGVycil9O1NvY2tldC5wcm90b3R5cGUub25DbG9zZT1mdW5jdGlvbihyZWFzb24sZGVzYyl7aWYoXCJvcGVuaW5nXCI9PXRoaXMucmVhZHlTdGF0ZXx8XCJvcGVuXCI9PXRoaXMucmVhZHlTdGF0ZXx8XCJjbG9zaW5nXCI9PXRoaXMucmVhZHlTdGF0ZSl7ZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJyxyZWFzb24pO3ZhciBzZWxmPXRoaXM7Y2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO2NsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO3RoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycyhcImNsb3NlXCIpO3RoaXMudHJhbnNwb3J0LmNsb3NlKCk7dGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7dGhpcy5yZWFkeVN0YXRlPVwiY2xvc2VkXCI7dGhpcy5pZD1udWxsO3RoaXMuZW1pdChcImNsb3NlXCIscmVhc29uLGRlc2MpO3NlbGYud3JpdGVCdWZmZXI9W107c2VsZi5wcmV2QnVmZmVyTGVuPTB9fTtTb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzPWZ1bmN0aW9uKHVwZ3JhZGVzKXt2YXIgZmlsdGVyZWRVcGdyYWRlcz1bXTtmb3IodmFyIGk9MCxqPXVwZ3JhZGVzLmxlbmd0aDtpPGo7aSsrKXtpZih+aW5kZXgodGhpcy50cmFuc3BvcnRzLHVwZ3JhZGVzW2ldKSlmaWx0ZXJlZFVwZ3JhZGVzLnB1c2godXBncmFkZXNbaV0pfXJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzfX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se1wiLi90cmFuc3BvcnRcIjo0LFwiLi90cmFuc3BvcnRzXCI6NSxcImNvbXBvbmVudC1lbWl0dGVyXCI6MTUsZGVidWc6MTcsXCJlbmdpbmUuaW8tcGFyc2VyXCI6MTksaW5kZXhvZjoyMyxwYXJzZWpzb246MjYscGFyc2VxczoyNyxwYXJzZXVyaToyOH1dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe3ZhciBwYXJzZXI9X2RlcmVxXyhcImVuZ2luZS5pby1wYXJzZXJcIik7dmFyIEVtaXR0ZXI9X2RlcmVxXyhcImNvbXBvbmVudC1lbWl0dGVyXCIpO21vZHVsZS5leHBvcnRzPVRyYW5zcG9ydDtmdW5jdGlvbiBUcmFuc3BvcnQob3B0cyl7dGhpcy5wYXRoPW9wdHMucGF0aDt0aGlzLmhvc3RuYW1lPW9wdHMuaG9zdG5hbWU7dGhpcy5wb3J0PW9wdHMucG9ydDt0aGlzLnNlY3VyZT1vcHRzLnNlY3VyZTt0aGlzLnF1ZXJ5PW9wdHMucXVlcnk7dGhpcy50aW1lc3RhbXBQYXJhbT1vcHRzLnRpbWVzdGFtcFBhcmFtO3RoaXMudGltZXN0YW1wUmVxdWVzdHM9b3B0cy50aW1lc3RhbXBSZXF1ZXN0czt0aGlzLnJlYWR5U3RhdGU9XCJcIjt0aGlzLmFnZW50PW9wdHMuYWdlbnR8fGZhbHNlO3RoaXMuc29ja2V0PW9wdHMuc29ja2V0O3RoaXMuZW5hYmxlc1hEUj1vcHRzLmVuYWJsZXNYRFI7dGhpcy5wZng9b3B0cy5wZng7dGhpcy5rZXk9b3B0cy5rZXk7dGhpcy5wYXNzcGhyYXNlPW9wdHMucGFzc3BocmFzZTt0aGlzLmNlcnQ9b3B0cy5jZXJ0O3RoaXMuY2E9b3B0cy5jYTt0aGlzLmNpcGhlcnM9b3B0cy5jaXBoZXJzO3RoaXMucmVqZWN0VW5hdXRob3JpemVkPW9wdHMucmVqZWN0VW5hdXRob3JpemVkO3RoaXMuZXh0cmFIZWFkZXJzPW9wdHMuZXh0cmFIZWFkZXJzfUVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7VHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yPWZ1bmN0aW9uKG1zZyxkZXNjKXt2YXIgZXJyPW5ldyBFcnJvcihtc2cpO2Vyci50eXBlPVwiVHJhbnNwb3J0RXJyb3JcIjtlcnIuZGVzY3JpcHRpb249ZGVzYzt0aGlzLmVtaXQoXCJlcnJvclwiLGVycik7cmV0dXJuIHRoaXN9O1RyYW5zcG9ydC5wcm90b3R5cGUub3Blbj1mdW5jdGlvbigpe2lmKFwiY2xvc2VkXCI9PXRoaXMucmVhZHlTdGF0ZXx8XCJcIj09dGhpcy5yZWFkeVN0YXRlKXt0aGlzLnJlYWR5U3RhdGU9XCJvcGVuaW5nXCI7dGhpcy5kb09wZW4oKX1yZXR1cm4gdGhpc307VHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe2lmKFwib3BlbmluZ1wiPT10aGlzLnJlYWR5U3RhdGV8fFwib3BlblwiPT10aGlzLnJlYWR5U3RhdGUpe3RoaXMuZG9DbG9zZSgpO3RoaXMub25DbG9zZSgpfXJldHVybiB0aGlzfTtUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24ocGFja2V0cyl7aWYoXCJvcGVuXCI9PXRoaXMucmVhZHlTdGF0ZSl7dGhpcy53cml0ZShwYWNrZXRzKX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlRyYW5zcG9ydCBub3Qgb3BlblwiKX19O1RyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuPWZ1bmN0aW9uKCl7dGhpcy5yZWFkeVN0YXRlPVwib3BlblwiO3RoaXMud3JpdGFibGU9dHJ1ZTt0aGlzLmVtaXQoXCJvcGVuXCIpfTtUcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihkYXRhKXt2YXIgcGFja2V0PXBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSx0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTt0aGlzLm9uUGFja2V0KHBhY2tldCl9O1RyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQ9ZnVuY3Rpb24ocGFja2V0KXt0aGlzLmVtaXQoXCJwYWNrZXRcIixwYWNrZXQpfTtUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2U9ZnVuY3Rpb24oKXt0aGlzLnJlYWR5U3RhdGU9XCJjbG9zZWRcIjt0aGlzLmVtaXQoXCJjbG9zZVwiKX19LHtcImNvbXBvbmVudC1lbWl0dGVyXCI6MTUsXCJlbmdpbmUuaW8tcGFyc2VyXCI6MTl9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXt2YXIgWE1MSHR0cFJlcXVlc3Q9X2RlcmVxXyhcInhtbGh0dHByZXF1ZXN0LXNzbFwiKTt2YXIgWEhSPV9kZXJlcV8oXCIuL3BvbGxpbmcteGhyXCIpO3ZhciBKU09OUD1fZGVyZXFfKFwiLi9wb2xsaW5nLWpzb25wXCIpO3ZhciB3ZWJzb2NrZXQ9X2RlcmVxXyhcIi4vd2Vic29ja2V0XCIpO2V4cG9ydHMucG9sbGluZz1wb2xsaW5nO2V4cG9ydHMud2Vic29ja2V0PXdlYnNvY2tldDtmdW5jdGlvbiBwb2xsaW5nKG9wdHMpe3ZhciB4aHI7dmFyIHhkPWZhbHNlO3ZhciB4cz1mYWxzZTt2YXIganNvbnA9ZmFsc2UhPT1vcHRzLmpzb25wO2lmKGdsb2JhbC5sb2NhdGlvbil7dmFyIGlzU1NMPVwiaHR0cHM6XCI9PWxvY2F0aW9uLnByb3RvY29sO3ZhciBwb3J0PWxvY2F0aW9uLnBvcnQ7aWYoIXBvcnQpe3BvcnQ9aXNTU0w/NDQzOjgwfXhkPW9wdHMuaG9zdG5hbWUhPWxvY2F0aW9uLmhvc3RuYW1lfHxwb3J0IT1vcHRzLnBvcnQ7eHM9b3B0cy5zZWN1cmUhPWlzU1NMfW9wdHMueGRvbWFpbj14ZDtvcHRzLnhzY2hlbWU9eHM7eGhyPW5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtpZihcIm9wZW5cImluIHhociYmIW9wdHMuZm9yY2VKU09OUCl7cmV0dXJuIG5ldyBYSFIob3B0cyl9ZWxzZXtpZighanNvbnApdGhyb3cgbmV3IEVycm9yKFwiSlNPTlAgZGlzYWJsZWRcIik7cmV0dXJuIG5ldyBKU09OUChvcHRzKX19fSkuY2FsbCh0aGlzLHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIj9zZWxmOnR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIj9nbG9iYWw6e30pfSx7XCIuL3BvbGxpbmctanNvbnBcIjo2LFwiLi9wb2xsaW5nLXhoclwiOjcsXCIuL3dlYnNvY2tldFwiOjksXCJ4bWxodHRwcmVxdWVzdC1zc2xcIjoxMH1dLDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpeyhmdW5jdGlvbihnbG9iYWwpe3ZhciBQb2xsaW5nPV9kZXJlcV8oXCIuL3BvbGxpbmdcIik7dmFyIGluaGVyaXQ9X2RlcmVxXyhcImNvbXBvbmVudC1pbmhlcml0XCIpO21vZHVsZS5leHBvcnRzPUpTT05QUG9sbGluZzt2YXIgck5ld2xpbmU9L1xcbi9nO3ZhciByRXNjYXBlZE5ld2xpbmU9L1xcXFxuL2c7dmFyIGNhbGxiYWNrczt2YXIgaW5kZXg9MDtmdW5jdGlvbiBlbXB0eSgpe31mdW5jdGlvbiBKU09OUFBvbGxpbmcob3B0cyl7UG9sbGluZy5jYWxsKHRoaXMsb3B0cyk7dGhpcy5xdWVyeT10aGlzLnF1ZXJ5fHx7fTtpZighY2FsbGJhY2tzKXtpZighZ2xvYmFsLl9fX2VpbylnbG9iYWwuX19fZWlvPVtdO2NhbGxiYWNrcz1nbG9iYWwuX19fZWlvfXRoaXMuaW5kZXg9Y2FsbGJhY2tzLmxlbmd0aDt2YXIgc2VsZj10aGlzO2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKG1zZyl7c2VsZi5vbkRhdGEobXNnKX0pO3RoaXMucXVlcnkuaj10aGlzLmluZGV4O2lmKGdsb2JhbC5kb2N1bWVudCYmZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpe2dsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsZnVuY3Rpb24oKXtpZihzZWxmLnNjcmlwdClzZWxmLnNjcmlwdC5vbmVycm9yPWVtcHR5fSxmYWxzZSl9fWluaGVyaXQoSlNPTlBQb2xsaW5nLFBvbGxpbmcpO0pTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnk9ZmFsc2U7SlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlPWZ1bmN0aW9uKCl7aWYodGhpcy5zY3JpcHQpe3RoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO3RoaXMuc2NyaXB0PW51bGx9aWYodGhpcy5mb3JtKXt0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO3RoaXMuZm9ybT1udWxsO3RoaXMuaWZyYW1lPW51bGx9UG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpfTtKU09OUFBvbGxpbmcucHJvdG90eXBlLmRvUG9sbD1mdW5jdGlvbigpe3ZhciBzZWxmPXRoaXM7dmFyIHNjcmlwdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmKHRoaXMuc2NyaXB0KXt0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTt0aGlzLnNjcmlwdD1udWxsfXNjcmlwdC5hc3luYz10cnVlO3NjcmlwdC5zcmM9dGhpcy51cmkoKTtzY3JpcHQub25lcnJvcj1mdW5jdGlvbihlKXtzZWxmLm9uRXJyb3IoXCJqc29ucCBwb2xsIGVycm9yXCIsZSl9O3ZhciBpbnNlcnRBdD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtpZihpbnNlcnRBdCl7aW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LGluc2VydEF0KX1lbHNleyhkb2N1bWVudC5oZWFkfHxkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpfXRoaXMuc2NyaXB0PXNjcmlwdDt2YXIgaXNVQWdlY2tvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoaXNVQWdlY2tvKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGlmcmFtZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSl9LDEwMCl9fTtKU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGU9ZnVuY3Rpb24oZGF0YSxmbil7dmFyIHNlbGY9dGhpcztpZighdGhpcy5mb3JtKXt2YXIgZm9ybT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTt2YXIgYXJlYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7dmFyIGlkPXRoaXMuaWZyYW1lSWQ9XCJlaW9faWZyYW1lX1wiK3RoaXMuaW5kZXg7dmFyIGlmcmFtZTtmb3JtLmNsYXNzTmFtZT1cInNvY2tldGlvXCI7Zm9ybS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCI7Zm9ybS5zdHlsZS50b3A9XCItMTAwMHB4XCI7Zm9ybS5zdHlsZS5sZWZ0PVwiLTEwMDBweFwiO2Zvcm0udGFyZ2V0PWlkO2Zvcm0ubWV0aG9kPVwiUE9TVFwiO2Zvcm0uc2V0QXR0cmlidXRlKFwiYWNjZXB0LWNoYXJzZXRcIixcInV0Zi04XCIpO2FyZWEubmFtZT1cImRcIjtmb3JtLmFwcGVuZENoaWxkKGFyZWEpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7dGhpcy5mb3JtPWZvcm07dGhpcy5hcmVhPWFyZWF9dGhpcy5mb3JtLmFjdGlvbj10aGlzLnVyaSgpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aW5pdElmcmFtZSgpO2ZuKCl9ZnVuY3Rpb24gaW5pdElmcmFtZSgpe2lmKHNlbGYuaWZyYW1lKXt0cnl7c2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKX1jYXRjaChlKXtzZWxmLm9uRXJyb3IoXCJqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yXCIsZSl9fXRyeXt2YXIgaHRtbD0nPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJytzZWxmLmlmcmFtZUlkKydcIj4nO2lmcmFtZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpfWNhdGNoKGUpe2lmcmFtZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO2lmcmFtZS5uYW1lPXNlbGYuaWZyYW1lSWQ7aWZyYW1lLnNyYz1cImphdmFzY3JpcHQ6MFwifWlmcmFtZS5pZD1zZWxmLmlmcmFtZUlkO3NlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO3NlbGYuaWZyYW1lPWlmcmFtZX1pbml0SWZyYW1lKCk7ZGF0YT1kYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLFwiXFxcXFxcblwiKTt0aGlzLmFyZWEudmFsdWU9ZGF0YS5yZXBsYWNlKHJOZXdsaW5lLFwiXFxcXG5cIik7dHJ5e3RoaXMuZm9ybS5zdWJtaXQoKX1jYXRjaChlKXt9aWYodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpe3RoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKHNlbGYuaWZyYW1lLnJlYWR5U3RhdGU9PVwiY29tcGxldGVcIil7Y29tcGxldGUoKX19fWVsc2V7dGhpcy5pZnJhbWUub25sb2FkPWNvbXBsZXRlfX19KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiP3NlbGY6dHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCI/d2luZG93OnR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiP2dsb2JhbDp7fSl9LHtcIi4vcG9sbGluZ1wiOjgsXCJjb21wb25lbnQtaW5oZXJpdFwiOjE2fV0sNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKGdsb2JhbCl7dmFyIFhNTEh0dHBSZXF1ZXN0PV9kZXJlcV8oXCJ4bWxodHRwcmVxdWVzdC1zc2xcIik7dmFyIFBvbGxpbmc9X2RlcmVxXyhcIi4vcG9sbGluZ1wiKTt2YXIgRW1pdHRlcj1fZGVyZXFfKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7dmFyIGluaGVyaXQ9X2RlcmVxXyhcImNvbXBvbmVudC1pbmhlcml0XCIpO3ZhciBkZWJ1Zz1fZGVyZXFfKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcteGhyXCIpO21vZHVsZS5leHBvcnRzPVhIUjttb2R1bGUuZXhwb3J0cy5SZXF1ZXN0PVJlcXVlc3Q7ZnVuY3Rpb24gZW1wdHkoKXt9ZnVuY3Rpb24gWEhSKG9wdHMpe1BvbGxpbmcuY2FsbCh0aGlzLG9wdHMpO2lmKGdsb2JhbC5sb2NhdGlvbil7dmFyIGlzU1NMPVwiaHR0cHM6XCI9PWxvY2F0aW9uLnByb3RvY29sO3ZhciBwb3J0PWxvY2F0aW9uLnBvcnQ7aWYoIXBvcnQpe3BvcnQ9aXNTU0w/NDQzOjgwfXRoaXMueGQ9b3B0cy5ob3N0bmFtZSE9Z2xvYmFsLmxvY2F0aW9uLmhvc3RuYW1lfHxwb3J0IT1vcHRzLnBvcnQ7dGhpcy54cz1vcHRzLnNlY3VyZSE9aXNTU0x9ZWxzZXt0aGlzLmV4dHJhSGVhZGVycz1vcHRzLmV4dHJhSGVhZGVyc319aW5oZXJpdChYSFIsUG9sbGluZyk7WEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeT10cnVlO1hIUi5wcm90b3R5cGUucmVxdWVzdD1mdW5jdGlvbihvcHRzKXtvcHRzPW9wdHN8fHt9O29wdHMudXJpPXRoaXMudXJpKCk7b3B0cy54ZD10aGlzLnhkO29wdHMueHM9dGhpcy54cztvcHRzLmFnZW50PXRoaXMuYWdlbnR8fGZhbHNlO29wdHMuc3VwcG9ydHNCaW5hcnk9dGhpcy5zdXBwb3J0c0JpbmFyeTtvcHRzLmVuYWJsZXNYRFI9dGhpcy5lbmFibGVzWERSO29wdHMucGZ4PXRoaXMucGZ4O29wdHMua2V5PXRoaXMua2V5O29wdHMucGFzc3BocmFzZT10aGlzLnBhc3NwaHJhc2U7b3B0cy5jZXJ0PXRoaXMuY2VydDtvcHRzLmNhPXRoaXMuY2E7b3B0cy5jaXBoZXJzPXRoaXMuY2lwaGVycztvcHRzLnJlamVjdFVuYXV0aG9yaXplZD10aGlzLnJlamVjdFVuYXV0aG9yaXplZDtvcHRzLmV4dHJhSGVhZGVycz10aGlzLmV4dHJhSGVhZGVycztyZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyl9O1hIUi5wcm90b3R5cGUuZG9Xcml0ZT1mdW5jdGlvbihkYXRhLGZuKXt2YXIgaXNCaW5hcnk9dHlwZW9mIGRhdGEhPT1cInN0cmluZ1wiJiZkYXRhIT09dW5kZWZpbmVkO3ZhciByZXE9dGhpcy5yZXF1ZXN0KHttZXRob2Q6XCJQT1NUXCIsZGF0YTpkYXRhLGlzQmluYXJ5OmlzQmluYXJ5fSk7dmFyIHNlbGY9dGhpcztyZXEub24oXCJzdWNjZXNzXCIsZm4pO3JlcS5vbihcImVycm9yXCIsZnVuY3Rpb24oZXJyKXtzZWxmLm9uRXJyb3IoXCJ4aHIgcG9zdCBlcnJvclwiLGVycil9KTt0aGlzLnNlbmRYaHI9cmVxfTtYSFIucHJvdG90eXBlLmRvUG9sbD1mdW5jdGlvbigpe2RlYnVnKFwieGhyIHBvbGxcIik7dmFyIHJlcT10aGlzLnJlcXVlc3QoKTt2YXIgc2VsZj10aGlzO3JlcS5vbihcImRhdGFcIixmdW5jdGlvbihkYXRhKXtzZWxmLm9uRGF0YShkYXRhKX0pO3JlcS5vbihcImVycm9yXCIsZnVuY3Rpb24oZXJyKXtzZWxmLm9uRXJyb3IoXCJ4aHIgcG9sbCBlcnJvclwiLGVycil9KTt0aGlzLnBvbGxYaHI9cmVxfTtmdW5jdGlvbiBSZXF1ZXN0KG9wdHMpe3RoaXMubWV0aG9kPW9wdHMubWV0aG9kfHxcIkdFVFwiO3RoaXMudXJpPW9wdHMudXJpO3RoaXMueGQ9ISFvcHRzLnhkO3RoaXMueHM9ISFvcHRzLnhzO3RoaXMuYXN5bmM9ZmFsc2UhPT1vcHRzLmFzeW5jO3RoaXMuZGF0YT11bmRlZmluZWQhPW9wdHMuZGF0YT9vcHRzLmRhdGE6bnVsbDt0aGlzLmFnZW50PW9wdHMuYWdlbnQ7dGhpcy5pc0JpbmFyeT1vcHRzLmlzQmluYXJ5O3RoaXMuc3VwcG9ydHNCaW5hcnk9b3B0cy5zdXBwb3J0c0JpbmFyeTt0aGlzLmVuYWJsZXNYRFI9b3B0cy5lbmFibGVzWERSO3RoaXMucGZ4PW9wdHMucGZ4O3RoaXMua2V5PW9wdHMua2V5O3RoaXMucGFzc3BocmFzZT1vcHRzLnBhc3NwaHJhc2U7dGhpcy5jZXJ0PW9wdHMuY2VydDt0aGlzLmNhPW9wdHMuY2E7dGhpcy5jaXBoZXJzPW9wdHMuY2lwaGVyczt0aGlzLnJlamVjdFVuYXV0aG9yaXplZD1vcHRzLnJlamVjdFVuYXV0aG9yaXplZDt0aGlzLmV4dHJhSGVhZGVycz1vcHRzLmV4dHJhSGVhZGVyczt0aGlzLmNyZWF0ZSgpfUVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1JlcXVlc3QucHJvdG90eXBlLmNyZWF0ZT1mdW5jdGlvbigpe3ZhciBvcHRzPXthZ2VudDp0aGlzLmFnZW50LHhkb21haW46dGhpcy54ZCx4c2NoZW1lOnRoaXMueHMsZW5hYmxlc1hEUjp0aGlzLmVuYWJsZXNYRFJ9O29wdHMucGZ4PXRoaXMucGZ4O29wdHMua2V5PXRoaXMua2V5O29wdHMucGFzc3BocmFzZT10aGlzLnBhc3NwaHJhc2U7b3B0cy5jZXJ0PXRoaXMuY2VydDtvcHRzLmNhPXRoaXMuY2E7b3B0cy5jaXBoZXJzPXRoaXMuY2lwaGVycztvcHRzLnJlamVjdFVuYXV0aG9yaXplZD10aGlzLnJlamVjdFVuYXV0aG9yaXplZDt2YXIgeGhyPXRoaXMueGhyPW5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTt2YXIgc2VsZj10aGlzO3RyeXtkZWJ1ZyhcInhociBvcGVuICVzOiAlc1wiLHRoaXMubWV0aG9kLHRoaXMudXJpKTt4aHIub3Blbih0aGlzLm1ldGhvZCx0aGlzLnVyaSx0aGlzLmFzeW5jKTt0cnl7aWYodGhpcy5leHRyYUhlYWRlcnMpe3hoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7Zm9yKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKXtpZih0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSl7eGhyLnNldFJlcXVlc3RIZWFkZXIoaSx0aGlzLmV4dHJhSGVhZGVyc1tpXSl9fX19Y2F0Y2goZSl7fWlmKHRoaXMuc3VwcG9ydHNCaW5hcnkpe3hoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwifWlmKFwiUE9TVFwiPT10aGlzLm1ldGhvZCl7dHJ5e2lmKHRoaXMuaXNCaW5hcnkpe3hoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIil9ZWxzZXt4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpfX1jYXRjaChlKXt9fWlmKFwid2l0aENyZWRlbnRpYWxzXCJpbiB4aHIpe3hoci53aXRoQ3JlZGVudGlhbHM9dHJ1ZX1pZih0aGlzLmhhc1hEUigpKXt4aHIub25sb2FkPWZ1bmN0aW9uKCl7c2VsZi5vbkxvYWQoKX07eGhyLm9uZXJyb3I9ZnVuY3Rpb24oKXtzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCl9fWVsc2V7eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKDQhPXhoci5yZWFkeVN0YXRlKXJldHVybjtpZigyMDA9PXhoci5zdGF0dXN8fDEyMjM9PXhoci5zdGF0dXMpe3NlbGYub25Mb2FkKCl9ZWxzZXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2VsZi5vbkVycm9yKHhoci5zdGF0dXMpfSwwKX19fWRlYnVnKFwieGhyIGRhdGEgJXNcIix0aGlzLmRhdGEpO3hoci5zZW5kKHRoaXMuZGF0YSl9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3NlbGYub25FcnJvcihlKX0sMCk7cmV0dXJufWlmKGdsb2JhbC5kb2N1bWVudCl7dGhpcy5pbmRleD1SZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdPXRoaXN9fTtSZXF1ZXN0LnByb3RvdHlwZS5vblN1Y2Nlc3M9ZnVuY3Rpb24oKXt0aGlzLmVtaXQoXCJzdWNjZXNzXCIpO3RoaXMuY2xlYW51cCgpfTtSZXF1ZXN0LnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZGF0YSl7dGhpcy5lbWl0KFwiZGF0YVwiLGRhdGEpO3RoaXMub25TdWNjZXNzKCl9O1JlcXVlc3QucHJvdG90eXBlLm9uRXJyb3I9ZnVuY3Rpb24oZXJyKXt0aGlzLmVtaXQoXCJlcnJvclwiLGVycik7dGhpcy5jbGVhbnVwKHRydWUpfTtSZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwPWZ1bmN0aW9uKGZyb21FcnJvcil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRoaXMueGhyfHxudWxsPT09dGhpcy54aHIpe3JldHVybn1pZih0aGlzLmhhc1hEUigpKXt0aGlzLnhoci5vbmxvYWQ9dGhpcy54aHIub25lcnJvcj1lbXB0eX1lbHNle3RoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZT1lbXB0eX1pZihmcm9tRXJyb3Ipe3RyeXt0aGlzLnhoci5hYm9ydCgpfWNhdGNoKGUpe319aWYoZ2xvYmFsLmRvY3VtZW50KXtkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XX10aGlzLnhocj1udWxsfTtSZXF1ZXN0LnByb3RvdHlwZS5vbkxvYWQ9ZnVuY3Rpb24oKXt2YXIgZGF0YTt0cnl7dmFyIGNvbnRlbnRUeXBlO3RyeXtjb250ZW50VHlwZT10aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKS5zcGxpdChcIjtcIilbMF19Y2F0Y2goZSl7fWlmKGNvbnRlbnRUeXBlPT09XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIil7ZGF0YT10aGlzLnhoci5yZXNwb25zZX1lbHNle2lmKCF0aGlzLnN1cHBvcnRzQmluYXJ5KXtkYXRhPXRoaXMueGhyLnJlc3BvbnNlVGV4dH1lbHNle3RyeXtkYXRhPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSh0aGlzLnhoci5yZXNwb25zZSkpfWNhdGNoKGUpe3ZhciB1aThBcnI9bmV3IFVpbnQ4QXJyYXkodGhpcy54aHIucmVzcG9uc2UpO3ZhciBkYXRhQXJyYXk9W107Zm9yKHZhciBpZHg9MCxsZW5ndGg9dWk4QXJyLmxlbmd0aDtpZHg8bGVuZ3RoO2lkeCsrKXtkYXRhQXJyYXkucHVzaCh1aThBcnJbaWR4XSl9ZGF0YT1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZGF0YUFycmF5KX19fX1jYXRjaChlKXt0aGlzLm9uRXJyb3IoZSl9aWYobnVsbCE9ZGF0YSl7dGhpcy5vbkRhdGEoZGF0YSl9fTtSZXF1ZXN0LnByb3RvdHlwZS5oYXNYRFI9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGdsb2JhbC5YRG9tYWluUmVxdWVzdCYmIXRoaXMueHMmJnRoaXMuZW5hYmxlc1hEUn07UmVxdWVzdC5wcm90b3R5cGUuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmNsZWFudXAoKX07aWYoZ2xvYmFsLmRvY3VtZW50KXtSZXF1ZXN0LnJlcXVlc3RzQ291bnQ9MDtSZXF1ZXN0LnJlcXVlc3RzPXt9O2lmKGdsb2JhbC5hdHRhY2hFdmVudCl7Z2xvYmFsLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIix1bmxvYWRIYW5kbGVyKX1lbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKXtnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLHVubG9hZEhhbmRsZXIsZmFsc2UpfX1mdW5jdGlvbiB1bmxvYWRIYW5kbGVyKCl7Zm9yKHZhciBpIGluIFJlcXVlc3QucmVxdWVzdHMpe2lmKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpe1JlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKX19fX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se1wiLi9wb2xsaW5nXCI6OCxcImNvbXBvbmVudC1lbWl0dGVyXCI6MTUsXCJjb21wb25lbnQtaW5oZXJpdFwiOjE2LGRlYnVnOjE3LFwieG1saHR0cHJlcXVlc3Qtc3NsXCI6MTB9XSw4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXt2YXIgVHJhbnNwb3J0PV9kZXJlcV8oXCIuLi90cmFuc3BvcnRcIik7dmFyIHBhcnNlcXM9X2RlcmVxXyhcInBhcnNlcXNcIik7dmFyIHBhcnNlcj1fZGVyZXFfKFwiZW5naW5lLmlvLXBhcnNlclwiKTt2YXIgaW5oZXJpdD1fZGVyZXFfKFwiY29tcG9uZW50LWluaGVyaXRcIik7dmFyIHllYXN0PV9kZXJlcV8oXCJ5ZWFzdFwiKTt2YXIgZGVidWc9X2RlcmVxXyhcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nXCIpO21vZHVsZS5leHBvcnRzPVBvbGxpbmc7dmFyIGhhc1hIUjI9ZnVuY3Rpb24oKXt2YXIgWE1MSHR0cFJlcXVlc3Q9X2RlcmVxXyhcInhtbGh0dHByZXF1ZXN0LXNzbFwiKTt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdCh7eGRvbWFpbjpmYWxzZX0pO3JldHVybiBudWxsIT14aHIucmVzcG9uc2VUeXBlfSgpO2Z1bmN0aW9uIFBvbGxpbmcob3B0cyl7dmFyIGZvcmNlQmFzZTY0PW9wdHMmJm9wdHMuZm9yY2VCYXNlNjQ7aWYoIWhhc1hIUjJ8fGZvcmNlQmFzZTY0KXt0aGlzLnN1cHBvcnRzQmluYXJ5PWZhbHNlfVRyYW5zcG9ydC5jYWxsKHRoaXMsb3B0cyl9aW5oZXJpdChQb2xsaW5nLFRyYW5zcG9ydCk7UG9sbGluZy5wcm90b3R5cGUubmFtZT1cInBvbGxpbmdcIjtQb2xsaW5nLnByb3RvdHlwZS5kb09wZW49ZnVuY3Rpb24oKXt0aGlzLnBvbGwoKX07UG9sbGluZy5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24ob25QYXVzZSl7dmFyIHBlbmRpbmc9MDt2YXIgc2VsZj10aGlzO3RoaXMucmVhZHlTdGF0ZT1cInBhdXNpbmdcIjtmdW5jdGlvbiBwYXVzZSgpe2RlYnVnKFwicGF1c2VkXCIpO3NlbGYucmVhZHlTdGF0ZT1cInBhdXNlZFwiO29uUGF1c2UoKX1pZih0aGlzLnBvbGxpbmd8fCF0aGlzLndyaXRhYmxlKXt2YXIgdG90YWw9MDtpZih0aGlzLnBvbGxpbmcpe2RlYnVnKFwid2UgYXJlIGN1cnJlbnRseSBwb2xsaW5nIC0gd2FpdGluZyB0byBwYXVzZVwiKTt0b3RhbCsrO3RoaXMub25jZShcInBvbGxDb21wbGV0ZVwiLGZ1bmN0aW9uKCl7ZGVidWcoXCJwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZVwiKTstLXRvdGFsfHxwYXVzZSgpfSl9aWYoIXRoaXMud3JpdGFibGUpe2RlYnVnKFwid2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZVwiKTt0b3RhbCsrO3RoaXMub25jZShcImRyYWluXCIsZnVuY3Rpb24oKXtkZWJ1ZyhcInByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlXCIpOy0tdG90YWx8fHBhdXNlKCl9KX19ZWxzZXtwYXVzZSgpfX07UG9sbGluZy5wcm90b3R5cGUucG9sbD1mdW5jdGlvbigpe2RlYnVnKFwicG9sbGluZ1wiKTt0aGlzLnBvbGxpbmc9dHJ1ZTt0aGlzLmRvUG9sbCgpO3RoaXMuZW1pdChcInBvbGxcIil9O1BvbGxpbmcucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihkYXRhKXt2YXIgc2VsZj10aGlzO2RlYnVnKFwicG9sbGluZyBnb3QgZGF0YSAlc1wiLGRhdGEpO3ZhciBjYWxsYmFjaz1mdW5jdGlvbihwYWNrZXQsaW5kZXgsdG90YWwpe2lmKFwib3BlbmluZ1wiPT1zZWxmLnJlYWR5U3RhdGUpe3NlbGYub25PcGVuKCl9aWYoXCJjbG9zZVwiPT1wYWNrZXQudHlwZSl7c2VsZi5vbkNsb3NlKCk7cmV0dXJuIGZhbHNlfXNlbGYub25QYWNrZXQocGFja2V0KX07cGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSx0aGlzLnNvY2tldC5iaW5hcnlUeXBlLGNhbGxiYWNrKTtpZihcImNsb3NlZFwiIT10aGlzLnJlYWR5U3RhdGUpe3RoaXMucG9sbGluZz1mYWxzZTt0aGlzLmVtaXQoXCJwb2xsQ29tcGxldGVcIik7aWYoXCJvcGVuXCI9PXRoaXMucmVhZHlTdGF0ZSl7dGhpcy5wb2xsKCl9ZWxzZXtkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLHRoaXMucmVhZHlTdGF0ZSl9fX07UG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZT1mdW5jdGlvbigpe3ZhciBzZWxmPXRoaXM7ZnVuY3Rpb24gY2xvc2UoKXtkZWJ1ZyhcIndyaXRpbmcgY2xvc2UgcGFja2V0XCIpO3NlbGYud3JpdGUoW3t0eXBlOlwiY2xvc2VcIn1dKX1pZihcIm9wZW5cIj09dGhpcy5yZWFkeVN0YXRlKXtkZWJ1ZyhcInRyYW5zcG9ydCBvcGVuIC0gY2xvc2luZ1wiKTtjbG9zZSgpfWVsc2V7ZGVidWcoXCJ0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2VcIik7dGhpcy5vbmNlKFwib3BlblwiLGNsb3NlKX19O1BvbGxpbmcucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHBhY2tldHMpe3ZhciBzZWxmPXRoaXM7dGhpcy53cml0YWJsZT1mYWxzZTt2YXIgY2FsbGJhY2tmbj1mdW5jdGlvbigpe3NlbGYud3JpdGFibGU9dHJ1ZTtzZWxmLmVtaXQoXCJkcmFpblwiKX07dmFyIHNlbGY9dGhpcztwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLHRoaXMuc3VwcG9ydHNCaW5hcnksZnVuY3Rpb24oZGF0YSl7c2VsZi5kb1dyaXRlKGRhdGEsY2FsbGJhY2tmbil9KX07UG9sbGluZy5wcm90b3R5cGUudXJpPWZ1bmN0aW9uKCl7dmFyIHF1ZXJ5PXRoaXMucXVlcnl8fHt9O3ZhciBzY2hlbWE9dGhpcy5zZWN1cmU/XCJodHRwc1wiOlwiaHR0cFwiO3ZhciBwb3J0PVwiXCI7aWYoZmFsc2UhPT10aGlzLnRpbWVzdGFtcFJlcXVlc3RzKXtxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXT15ZWFzdCgpfWlmKCF0aGlzLnN1cHBvcnRzQmluYXJ5JiYhcXVlcnkuc2lkKXtxdWVyeS5iNjQ9MX1xdWVyeT1wYXJzZXFzLmVuY29kZShxdWVyeSk7aWYodGhpcy5wb3J0JiYoXCJodHRwc1wiPT1zY2hlbWEmJnRoaXMucG9ydCE9NDQzfHxcImh0dHBcIj09c2NoZW1hJiZ0aGlzLnBvcnQhPTgwKSl7cG9ydD1cIjpcIit0aGlzLnBvcnR9aWYocXVlcnkubGVuZ3RoKXtxdWVyeT1cIj9cIitxdWVyeX12YXIgaXB2Nj10aGlzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpIT09LTE7cmV0dXJuIHNjaGVtYStcIjovL1wiKyhpcHY2P1wiW1wiK3RoaXMuaG9zdG5hbWUrXCJdXCI6dGhpcy5ob3N0bmFtZSkrcG9ydCt0aGlzLnBhdGgrcXVlcnl9fSx7XCIuLi90cmFuc3BvcnRcIjo0LFwiY29tcG9uZW50LWluaGVyaXRcIjoxNixkZWJ1ZzoxNyxcImVuZ2luZS5pby1wYXJzZXJcIjoxOSxwYXJzZXFzOjI3LFwieG1saHR0cHJlcXVlc3Qtc3NsXCI6MTAseWVhc3Q6MzB9XSw5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXt2YXIgVHJhbnNwb3J0PV9kZXJlcV8oXCIuLi90cmFuc3BvcnRcIik7dmFyIHBhcnNlcj1fZGVyZXFfKFwiZW5naW5lLmlvLXBhcnNlclwiKTt2YXIgcGFyc2Vxcz1fZGVyZXFfKFwicGFyc2Vxc1wiKTt2YXIgaW5oZXJpdD1fZGVyZXFfKFwiY29tcG9uZW50LWluaGVyaXRcIik7dmFyIHllYXN0PV9kZXJlcV8oXCJ5ZWFzdFwiKTt2YXIgZGVidWc9X2RlcmVxXyhcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXRcIik7dmFyIEJyb3dzZXJXZWJTb2NrZXQ9Z2xvYmFsLldlYlNvY2tldHx8Z2xvYmFsLk1veldlYlNvY2tldDt2YXIgV2ViU29ja2V0PUJyb3dzZXJXZWJTb2NrZXQ7aWYoIVdlYlNvY2tldCYmdHlwZW9mIHdpbmRvdz09PVwidW5kZWZpbmVkXCIpe3RyeXtXZWJTb2NrZXQ9X2RlcmVxXyhcIndzXCIpfWNhdGNoKGUpe319bW9kdWxlLmV4cG9ydHM9V1M7ZnVuY3Rpb24gV1Mob3B0cyl7dmFyIGZvcmNlQmFzZTY0PW9wdHMmJm9wdHMuZm9yY2VCYXNlNjQ7aWYoZm9yY2VCYXNlNjQpe3RoaXMuc3VwcG9ydHNCaW5hcnk9ZmFsc2V9dGhpcy5wZXJNZXNzYWdlRGVmbGF0ZT1vcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1RyYW5zcG9ydC5jYWxsKHRoaXMsb3B0cyl9aW5oZXJpdChXUyxUcmFuc3BvcnQpO1dTLnByb3RvdHlwZS5uYW1lPVwid2Vic29ja2V0XCI7V1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5PXRydWU7V1MucHJvdG90eXBlLmRvT3Blbj1mdW5jdGlvbigpe2lmKCF0aGlzLmNoZWNrKCkpe3JldHVybn12YXIgc2VsZj10aGlzO3ZhciB1cmk9dGhpcy51cmkoKTt2YXIgcHJvdG9jb2xzPXZvaWQgMDt2YXIgb3B0cz17YWdlbnQ6dGhpcy5hZ2VudCxwZXJNZXNzYWdlRGVmbGF0ZTp0aGlzLnBlck1lc3NhZ2VEZWZsYXRlfTtvcHRzLnBmeD10aGlzLnBmeDtvcHRzLmtleT10aGlzLmtleTtvcHRzLnBhc3NwaHJhc2U9dGhpcy5wYXNzcGhyYXNlO29wdHMuY2VydD10aGlzLmNlcnQ7b3B0cy5jYT10aGlzLmNhO29wdHMuY2lwaGVycz10aGlzLmNpcGhlcnM7b3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ9dGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7aWYodGhpcy5leHRyYUhlYWRlcnMpe29wdHMuaGVhZGVycz10aGlzLmV4dHJhSGVhZGVyc310aGlzLndzPUJyb3dzZXJXZWJTb2NrZXQ/bmV3IFdlYlNvY2tldCh1cmkpOm5ldyBXZWJTb2NrZXQodXJpLHByb3RvY29scyxvcHRzKTtpZih0aGlzLndzLmJpbmFyeVR5cGU9PT11bmRlZmluZWQpe3RoaXMuc3VwcG9ydHNCaW5hcnk9ZmFsc2V9aWYodGhpcy53cy5zdXBwb3J0cyYmdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpe3RoaXMuc3VwcG9ydHNCaW5hcnk9dHJ1ZTt0aGlzLndzLmJpbmFyeVR5cGU9XCJidWZmZXJcIn1lbHNle3RoaXMud3MuYmluYXJ5VHlwZT1cImFycmF5YnVmZmVyXCJ9dGhpcy5hZGRFdmVudExpc3RlbmVycygpfTtXUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgc2VsZj10aGlzO3RoaXMud3Mub25vcGVuPWZ1bmN0aW9uKCl7c2VsZi5vbk9wZW4oKX07dGhpcy53cy5vbmNsb3NlPWZ1bmN0aW9uKCl7c2VsZi5vbkNsb3NlKCl9O3RoaXMud3Mub25tZXNzYWdlPWZ1bmN0aW9uKGV2KXtzZWxmLm9uRGF0YShldi5kYXRhKX07dGhpcy53cy5vbmVycm9yPWZ1bmN0aW9uKGUpe3NlbGYub25FcnJvcihcIndlYnNvY2tldCBlcnJvclwiLGUpfX07aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmL2lQYWR8aVBob25lfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtXUy5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKGRhdGEpe3ZhciBzZWxmPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe1RyYW5zcG9ydC5wcm90b3R5cGUub25EYXRhLmNhbGwoc2VsZixkYXRhKX0sMCl9fVdTLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihwYWNrZXRzKXt2YXIgc2VsZj10aGlzO3RoaXMud3JpdGFibGU9ZmFsc2U7dmFyIHRvdGFsPXBhY2tldHMubGVuZ3RoO2Zvcih2YXIgaT0wLGw9dG90YWw7aTxsO2krKyl7KGZ1bmN0aW9uKHBhY2tldCl7cGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsc2VsZi5zdXBwb3J0c0JpbmFyeSxmdW5jdGlvbihkYXRhKXtpZighQnJvd3NlcldlYlNvY2tldCl7dmFyIG9wdHM9e307aWYocGFja2V0Lm9wdGlvbnMpe29wdHMuY29tcHJlc3M9cGFja2V0Lm9wdGlvbnMuY29tcHJlc3N9aWYoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSl7dmFyIGxlbj1cInN0cmluZ1wiPT10eXBlb2YgZGF0YT9nbG9iYWwuQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSk6ZGF0YS5sZW5ndGg7aWYobGVuPHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKXtvcHRzLmNvbXByZXNzPWZhbHNlfX19dHJ5e2lmKEJyb3dzZXJXZWJTb2NrZXQpe3NlbGYud3Muc2VuZChkYXRhKX1lbHNle3NlbGYud3Muc2VuZChkYXRhLG9wdHMpfX1jYXRjaChlKXtkZWJ1ZyhcIndlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnRcIil9LS10b3RhbHx8ZG9uZSgpfSl9KShwYWNrZXRzW2ldKX1mdW5jdGlvbiBkb25lKCl7c2VsZi5lbWl0KFwiZmx1c2hcIik7c2V0VGltZW91dChmdW5jdGlvbigpe3NlbGYud3JpdGFibGU9dHJ1ZTtzZWxmLmVtaXQoXCJkcmFpblwiKX0sMCl9fTtXUy5wcm90b3R5cGUub25DbG9zZT1mdW5jdGlvbigpe1RyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpfTtXUy5wcm90b3R5cGUuZG9DbG9zZT1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLndzIT09XCJ1bmRlZmluZWRcIil7dGhpcy53cy5jbG9zZSgpfX07V1MucHJvdG90eXBlLnVyaT1mdW5jdGlvbigpe3ZhciBxdWVyeT10aGlzLnF1ZXJ5fHx7fTt2YXIgc2NoZW1hPXRoaXMuc2VjdXJlP1wid3NzXCI6XCJ3c1wiO3ZhciBwb3J0PVwiXCI7aWYodGhpcy5wb3J0JiYoXCJ3c3NcIj09c2NoZW1hJiZ0aGlzLnBvcnQhPTQ0M3x8XCJ3c1wiPT1zY2hlbWEmJnRoaXMucG9ydCE9ODApKXtwb3J0PVwiOlwiK3RoaXMucG9ydH1pZih0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKXtxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXT15ZWFzdCgpfWlmKCF0aGlzLnN1cHBvcnRzQmluYXJ5KXtxdWVyeS5iNjQ9MX1xdWVyeT1wYXJzZXFzLmVuY29kZShxdWVyeSk7aWYocXVlcnkubGVuZ3RoKXtxdWVyeT1cIj9cIitxdWVyeX12YXIgaXB2Nj10aGlzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpIT09LTE7cmV0dXJuIHNjaGVtYStcIjovL1wiKyhpcHY2P1wiW1wiK3RoaXMuaG9zdG5hbWUrXCJdXCI6dGhpcy5ob3N0bmFtZSkrcG9ydCt0aGlzLnBhdGgrcXVlcnl9O1dTLnByb3RvdHlwZS5jaGVjaz1mdW5jdGlvbigpe3JldHVybiEhV2ViU29ja2V0JiYhKFwiX19pbml0aWFsaXplXCJpbiBXZWJTb2NrZXQmJnRoaXMubmFtZT09PVdTLnByb3RvdHlwZS5uYW1lKX19KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiP3NlbGY6dHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCI/d2luZG93OnR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiP2dsb2JhbDp7fSl9LHtcIi4uL3RyYW5zcG9ydFwiOjQsXCJjb21wb25lbnQtaW5oZXJpdFwiOjE2LGRlYnVnOjE3LFwiZW5naW5lLmlvLXBhcnNlclwiOjE5LHBhcnNlcXM6Mjcsd3M6dW5kZWZpbmVkLHllYXN0OjMwfV0sMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe3ZhciBoYXNDT1JTPV9kZXJlcV8oXCJoYXMtY29yc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvcHRzKXt2YXIgeGRvbWFpbj1vcHRzLnhkb21haW47dmFyIHhzY2hlbWU9b3B0cy54c2NoZW1lO3ZhciBlbmFibGVzWERSPW9wdHMuZW5hYmxlc1hEUjt0cnl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiYoIXhkb21haW58fGhhc0NPUlMpKXtyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0fX1jYXRjaChlKXt9dHJ5e2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBYRG9tYWluUmVxdWVzdCYmIXhzY2hlbWUmJmVuYWJsZXNYRFIpe3JldHVybiBuZXcgWERvbWFpblJlcXVlc3R9fWNhdGNoKGUpe31pZigheGRvbWFpbil7dHJ5e3JldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpfWNhdGNoKGUpe319fX0se1wiaGFzLWNvcnNcIjoyMn1dLDExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1hZnRlcjtmdW5jdGlvbiBhZnRlcihjb3VudCxjYWxsYmFjayxlcnJfY2Ipe3ZhciBiYWlsPWZhbHNlO2Vycl9jYj1lcnJfY2J8fG5vb3A7cHJveHkuY291bnQ9Y291bnQ7cmV0dXJuIGNvdW50PT09MD9jYWxsYmFjaygpOnByb3h5O2Z1bmN0aW9uIHByb3h5KGVycixyZXN1bHQpe2lmKHByb3h5LmNvdW50PD0wKXt0aHJvdyBuZXcgRXJyb3IoXCJhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXNcIil9LS1wcm94eS5jb3VudDtpZihlcnIpe2JhaWw9dHJ1ZTtjYWxsYmFjayhlcnIpO2NhbGxiYWNrPWVycl9jYn1lbHNlIGlmKHByb3h5LmNvdW50PT09MCYmIWJhaWwpe2NhbGxiYWNrKG51bGwscmVzdWx0KX19fWZ1bmN0aW9uIG5vb3AoKXt9fSx7fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGFycmF5YnVmZmVyLHN0YXJ0LGVuZCl7dmFyIGJ5dGVzPWFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7c3RhcnQ9c3RhcnR8fDA7ZW5kPWVuZHx8Ynl0ZXM7aWYoYXJyYXlidWZmZXIuc2xpY2Upe3JldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCxlbmQpfWlmKHN0YXJ0PDApe3N0YXJ0Kz1ieXRlc31pZihlbmQ8MCl7ZW5kKz1ieXRlc31pZihlbmQ+Ynl0ZXMpe2VuZD1ieXRlc31pZihzdGFydD49Ynl0ZXN8fHN0YXJ0Pj1lbmR8fGJ5dGVzPT09MCl7cmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKX12YXIgYWJ2PW5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTt2YXIgcmVzdWx0PW5ldyBVaW50OEFycmF5KGVuZC1zdGFydCk7Zm9yKHZhciBpPXN0YXJ0LGlpPTA7aTxlbmQ7aSsrLGlpKyspe3Jlc3VsdFtpaV09YWJ2W2ldfXJldHVybiByZXN1bHQuYnVmZmVyfX0se31dLDEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oY2hhcnMpe1widXNlIHN0cmljdFwiO2V4cG9ydHMuZW5jb2RlPWZ1bmN0aW9uKGFycmF5YnVmZmVyKXt2YXIgYnl0ZXM9bmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLGksbGVuPWJ5dGVzLmxlbmd0aCxiYXNlNjQ9XCJcIjtmb3IoaT0wO2k8bGVuO2krPTMpe2Jhc2U2NCs9Y2hhcnNbYnl0ZXNbaV0+PjJdO1xuYmFzZTY0Kz1jaGFyc1soYnl0ZXNbaV0mMyk8PDR8Ynl0ZXNbaSsxXT4+NF07YmFzZTY0Kz1jaGFyc1soYnl0ZXNbaSsxXSYxNSk8PDJ8Ynl0ZXNbaSsyXT4+Nl07YmFzZTY0Kz1jaGFyc1tieXRlc1tpKzJdJjYzXX1pZihsZW4lMz09PTIpe2Jhc2U2ND1iYXNlNjQuc3Vic3RyaW5nKDAsYmFzZTY0Lmxlbmd0aC0xKStcIj1cIn1lbHNlIGlmKGxlbiUzPT09MSl7YmFzZTY0PWJhc2U2NC5zdWJzdHJpbmcoMCxiYXNlNjQubGVuZ3RoLTIpK1wiPT1cIn1yZXR1cm4gYmFzZTY0fTtleHBvcnRzLmRlY29kZT1mdW5jdGlvbihiYXNlNjQpe3ZhciBidWZmZXJMZW5ndGg9YmFzZTY0Lmxlbmd0aCouNzUsbGVuPWJhc2U2NC5sZW5ndGgsaSxwPTAsZW5jb2RlZDEsZW5jb2RlZDIsZW5jb2RlZDMsZW5jb2RlZDQ7aWYoYmFzZTY0W2Jhc2U2NC5sZW5ndGgtMV09PT1cIj1cIil7YnVmZmVyTGVuZ3RoLS07aWYoYmFzZTY0W2Jhc2U2NC5sZW5ndGgtMl09PT1cIj1cIil7YnVmZmVyTGVuZ3RoLS19fXZhciBhcnJheWJ1ZmZlcj1uZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxieXRlcz1uZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7Zm9yKGk9MDtpPGxlbjtpKz00KXtlbmNvZGVkMT1jaGFycy5pbmRleE9mKGJhc2U2NFtpXSk7ZW5jb2RlZDI9Y2hhcnMuaW5kZXhPZihiYXNlNjRbaSsxXSk7ZW5jb2RlZDM9Y2hhcnMuaW5kZXhPZihiYXNlNjRbaSsyXSk7ZW5jb2RlZDQ9Y2hhcnMuaW5kZXhPZihiYXNlNjRbaSszXSk7Ynl0ZXNbcCsrXT1lbmNvZGVkMTw8MnxlbmNvZGVkMj4+NDtieXRlc1twKytdPShlbmNvZGVkMiYxNSk8PDR8ZW5jb2RlZDM+PjI7Ynl0ZXNbcCsrXT0oZW5jb2RlZDMmMyk8PDZ8ZW5jb2RlZDQmNjN9cmV0dXJuIGFycmF5YnVmZmVyfX0pKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiKX0se31dLDE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXt2YXIgQmxvYkJ1aWxkZXI9Z2xvYmFsLkJsb2JCdWlsZGVyfHxnbG9iYWwuV2ViS2l0QmxvYkJ1aWxkZXJ8fGdsb2JhbC5NU0Jsb2JCdWlsZGVyfHxnbG9iYWwuTW96QmxvYkJ1aWxkZXI7dmFyIGJsb2JTdXBwb3J0ZWQ9ZnVuY3Rpb24oKXt0cnl7dmFyIGE9bmV3IEJsb2IoW1wiaGlcIl0pO3JldHVybiBhLnNpemU9PT0yfWNhdGNoKGUpe3JldHVybiBmYWxzZX19KCk7dmFyIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldz1ibG9iU3VwcG9ydGVkJiZmdW5jdGlvbigpe3RyeXt2YXIgYj1uZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7cmV0dXJuIGIuc2l6ZT09PTJ9Y2F0Y2goZSl7cmV0dXJuIGZhbHNlfX0oKTt2YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQ9QmxvYkJ1aWxkZXImJkJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmQmJkJsb2JCdWlsZGVyLnByb3RvdHlwZS5nZXRCbG9iO2Z1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KXtmb3IodmFyIGk9MDtpPGFyeS5sZW5ndGg7aSsrKXt2YXIgY2h1bms9YXJ5W2ldO2lmKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YXIgYnVmPWNodW5rLmJ1ZmZlcjtpZihjaHVuay5ieXRlTGVuZ3RoIT09YnVmLmJ5dGVMZW5ndGgpe3ZhciBjb3B5PW5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO2NvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZixjaHVuay5ieXRlT2Zmc2V0LGNodW5rLmJ5dGVMZW5ndGgpKTtidWY9Y29weS5idWZmZXJ9YXJ5W2ldPWJ1Zn19fWZ1bmN0aW9uIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IoYXJ5LG9wdGlvbnMpe29wdGlvbnM9b3B0aW9uc3x8e307dmFyIGJiPW5ldyBCbG9iQnVpbGRlcjttYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7Zm9yKHZhciBpPTA7aTxhcnkubGVuZ3RoO2krKyl7YmIuYXBwZW5kKGFyeVtpXSl9cmV0dXJuIG9wdGlvbnMudHlwZT9iYi5nZXRCbG9iKG9wdGlvbnMudHlwZSk6YmIuZ2V0QmxvYigpfWZ1bmN0aW9uIEJsb2JDb25zdHJ1Y3Rvcihhcnksb3B0aW9ucyl7bWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO3JldHVybiBuZXcgQmxvYihhcnksb3B0aW9uc3x8e30pfW1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKCl7aWYoYmxvYlN1cHBvcnRlZCl7cmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldz9nbG9iYWwuQmxvYjpCbG9iQ29uc3RydWN0b3J9ZWxzZSBpZihibG9iQnVpbGRlclN1cHBvcnRlZCl7cmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3J9ZWxzZXtyZXR1cm4gdW5kZWZpbmVkfX0oKX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se31dLDE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1FbWl0dGVyO2Z1bmN0aW9uIEVtaXR0ZXIob2JqKXtpZihvYmopcmV0dXJuIG1peGluKG9iail9ZnVuY3Rpb24gbWl4aW4ob2JqKXtmb3IodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSl7b2JqW2tleV09RW1pdHRlci5wcm90b3R5cGVba2V5XX1yZXR1cm4gb2JqfUVtaXR0ZXIucHJvdG90eXBlLm9uPUVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZXZlbnQsZm4pe3RoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9Oyh0aGlzLl9jYWxsYmFja3NbZXZlbnRdPXRoaXMuX2NhbGxiYWNrc1tldmVudF18fFtdKS5wdXNoKGZuKTtyZXR1cm4gdGhpc307RW1pdHRlci5wcm90b3R5cGUub25jZT1mdW5jdGlvbihldmVudCxmbil7dmFyIHNlbGY9dGhpczt0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fTtmdW5jdGlvbiBvbigpe3NlbGYub2ZmKGV2ZW50LG9uKTtmbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9b24uZm49Zm47dGhpcy5vbihldmVudCxvbik7cmV0dXJuIHRoaXN9O0VtaXR0ZXIucHJvdG90eXBlLm9mZj1FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihldmVudCxmbil7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e307aWYoMD09YXJndW1lbnRzLmxlbmd0aCl7dGhpcy5fY2FsbGJhY2tzPXt9O3JldHVybiB0aGlzfXZhciBjYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtpZighY2FsbGJhY2tzKXJldHVybiB0aGlzO2lmKDE9PWFyZ3VtZW50cy5sZW5ndGgpe2RlbGV0ZSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO3JldHVybiB0aGlzfXZhciBjYjtmb3IodmFyIGk9MDtpPGNhbGxiYWNrcy5sZW5ndGg7aSsrKXtjYj1jYWxsYmFja3NbaV07aWYoY2I9PT1mbnx8Y2IuZm49PT1mbil7Y2FsbGJhY2tzLnNwbGljZShpLDEpO2JyZWFrfX1yZXR1cm4gdGhpc307RW1pdHRlci5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihldmVudCl7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e307dmFyIGFyZ3M9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc1tldmVudF07aWYoY2FsbGJhY2tzKXtjYWxsYmFja3M9Y2FsbGJhY2tzLnNsaWNlKDApO2Zvcih2YXIgaT0wLGxlbj1jYWxsYmFja3MubGVuZ3RoO2k8bGVuOysraSl7Y2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsYXJncyl9fXJldHVybiB0aGlzfTtFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZXZlbnQpe3RoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9O3JldHVybiB0aGlzLl9jYWxsYmFja3NbZXZlbnRdfHxbXX07RW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzPWZ1bmN0aW9uKGV2ZW50KXtyZXR1cm4hIXRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGh9fSx7fV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGEsYil7dmFyIGZuPWZ1bmN0aW9uKCl7fTtmbi5wcm90b3R5cGU9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGZuO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWF9fSx7fV0sMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe2V4cG9ydHM9bW9kdWxlLmV4cG9ydHM9X2RlcmVxXyhcIi4vZGVidWdcIik7ZXhwb3J0cy5sb2c9bG9nO2V4cG9ydHMuZm9ybWF0QXJncz1mb3JtYXRBcmdzO2V4cG9ydHMuc2F2ZT1zYXZlO2V4cG9ydHMubG9hZD1sb2FkO2V4cG9ydHMudXNlQ29sb3JzPXVzZUNvbG9ycztleHBvcnRzLnN0b3JhZ2U9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNocm9tZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNocm9tZS5zdG9yYWdlP2Nocm9tZS5zdG9yYWdlLmxvY2FsOmxvY2Fsc3RvcmFnZSgpO2V4cG9ydHMuY29sb3JzPVtcImxpZ2h0c2VhZ3JlZW5cIixcImZvcmVzdGdyZWVuXCIsXCJnb2xkZW5yb2RcIixcImRvZGdlcmJsdWVcIixcImRhcmtvcmNoaWRcIixcImNyaW1zb25cIl07ZnVuY3Rpb24gdXNlQ29sb3JzKCl7cmV0dXJuXCJXZWJraXRBcHBlYXJhbmNlXCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGV8fHdpbmRvdy5jb25zb2xlJiYoY29uc29sZS5maXJlYnVnfHxjb25zb2xlLmV4Y2VwdGlvbiYmY29uc29sZS50YWJsZSl8fG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pJiZwYXJzZUludChSZWdFeHAuJDEsMTApPj0zMX1leHBvcnRzLmZvcm1hdHRlcnMuaj1mdW5jdGlvbih2KXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkodil9O2Z1bmN0aW9uIGZvcm1hdEFyZ3MoKXt2YXIgYXJncz1hcmd1bWVudHM7dmFyIHVzZUNvbG9ycz10aGlzLnVzZUNvbG9yczthcmdzWzBdPSh1c2VDb2xvcnM/XCIlY1wiOlwiXCIpK3RoaXMubmFtZXNwYWNlKyh1c2VDb2xvcnM/XCIgJWNcIjpcIiBcIikrYXJnc1swXSsodXNlQ29sb3JzP1wiJWMgXCI6XCIgXCIpK1wiK1wiK2V4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtpZighdXNlQ29sb3JzKXJldHVybiBhcmdzO3ZhciBjPVwiY29sb3I6IFwiK3RoaXMuY29sb3I7YXJncz1bYXJnc1swXSxjLFwiY29sb3I6IGluaGVyaXRcIl0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsMSkpO3ZhciBpbmRleD0wO3ZhciBsYXN0Qz0wO2FyZ3NbMF0ucmVwbGFjZSgvJVthLXolXS9nLGZ1bmN0aW9uKG1hdGNoKXtpZihcIiUlXCI9PT1tYXRjaClyZXR1cm47aW5kZXgrKztpZihcIiVjXCI9PT1tYXRjaCl7bGFzdEM9aW5kZXh9fSk7YXJncy5zcGxpY2UobGFzdEMsMCxjKTtyZXR1cm4gYXJnc31mdW5jdGlvbiBsb2coKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUubG9nJiZGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZyxjb25zb2xlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKXt0cnl7aWYobnVsbD09bmFtZXNwYWNlcyl7ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oXCJkZWJ1Z1wiKX1lbHNle2V4cG9ydHMuc3RvcmFnZS5kZWJ1Zz1uYW1lc3BhY2VzfX1jYXRjaChlKXt9fWZ1bmN0aW9uIGxvYWQoKXt2YXIgcjt0cnl7cj1leHBvcnRzLnN0b3JhZ2UuZGVidWd9Y2F0Y2goZSl7fXJldHVybiByfWV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7ZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCl7dHJ5e3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlfWNhdGNoKGUpe319fSx7XCIuL2RlYnVnXCI6MTh9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7ZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1kZWJ1ZztleHBvcnRzLmNvZXJjZT1jb2VyY2U7ZXhwb3J0cy5kaXNhYmxlPWRpc2FibGU7ZXhwb3J0cy5lbmFibGU9ZW5hYmxlO2V4cG9ydHMuZW5hYmxlZD1lbmFibGVkO2V4cG9ydHMuaHVtYW5pemU9X2RlcmVxXyhcIm1zXCIpO2V4cG9ydHMubmFtZXM9W107ZXhwb3J0cy5za2lwcz1bXTtleHBvcnRzLmZvcm1hdHRlcnM9e307dmFyIHByZXZDb2xvcj0wO3ZhciBwcmV2VGltZTtmdW5jdGlvbiBzZWxlY3RDb2xvcigpe3JldHVybiBleHBvcnRzLmNvbG9yc1twcmV2Q29sb3IrKyVleHBvcnRzLmNvbG9ycy5sZW5ndGhdfWZ1bmN0aW9uIGRlYnVnKG5hbWVzcGFjZSl7ZnVuY3Rpb24gZGlzYWJsZWQoKXt9ZGlzYWJsZWQuZW5hYmxlZD1mYWxzZTtmdW5jdGlvbiBlbmFibGVkKCl7dmFyIHNlbGY9ZW5hYmxlZDt2YXIgY3Vycj0rbmV3IERhdGU7dmFyIG1zPWN1cnItKHByZXZUaW1lfHxjdXJyKTtzZWxmLmRpZmY9bXM7c2VsZi5wcmV2PXByZXZUaW1lO3NlbGYuY3Vycj1jdXJyO3ByZXZUaW1lPWN1cnI7aWYobnVsbD09c2VsZi51c2VDb2xvcnMpc2VsZi51c2VDb2xvcnM9ZXhwb3J0cy51c2VDb2xvcnMoKTtpZihudWxsPT1zZWxmLmNvbG9yJiZzZWxmLnVzZUNvbG9ycylzZWxmLmNvbG9yPXNlbGVjdENvbG9yKCk7dmFyIGFyZ3M9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTthcmdzWzBdPWV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYXJnc1swXSl7YXJncz1bXCIlb1wiXS5jb25jYXQoYXJncyl9dmFyIGluZGV4PTA7YXJnc1swXT1hcmdzWzBdLnJlcGxhY2UoLyUoW2EteiVdKS9nLGZ1bmN0aW9uKG1hdGNoLGZvcm1hdCl7aWYobWF0Y2g9PT1cIiUlXCIpcmV0dXJuIG1hdGNoO2luZGV4Kys7dmFyIGZvcm1hdHRlcj1leHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZm9ybWF0dGVyKXt2YXIgdmFsPWFyZ3NbaW5kZXhdO21hdGNoPWZvcm1hdHRlci5jYWxsKHNlbGYsdmFsKTthcmdzLnNwbGljZShpbmRleCwxKTtpbmRleC0tfXJldHVybiBtYXRjaH0pO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBleHBvcnRzLmZvcm1hdEFyZ3Mpe2FyZ3M9ZXhwb3J0cy5mb3JtYXRBcmdzLmFwcGx5KHNlbGYsYXJncyl9dmFyIGxvZ0ZuPWVuYWJsZWQubG9nfHxleHBvcnRzLmxvZ3x8Y29uc29sZS5sb2cuYmluZChjb25zb2xlKTtsb2dGbi5hcHBseShzZWxmLGFyZ3MpfWVuYWJsZWQuZW5hYmxlZD10cnVlO3ZhciBmbj1leHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKT9lbmFibGVkOmRpc2FibGVkO2ZuLm5hbWVzcGFjZT1uYW1lc3BhY2U7cmV0dXJuIGZufWZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKXtleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7dmFyIHNwbGl0PShuYW1lc3BhY2VzfHxcIlwiKS5zcGxpdCgvW1xccyxdKy8pO3ZhciBsZW49c3BsaXQubGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuO2krKyl7aWYoIXNwbGl0W2ldKWNvbnRpbnVlO25hbWVzcGFjZXM9c3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csXCIuKj9cIik7aWYobmFtZXNwYWNlc1swXT09PVwiLVwiKXtleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cChcIl5cIituYW1lc3BhY2VzLnN1YnN0cigxKStcIiRcIikpfWVsc2V7ZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoXCJeXCIrbmFtZXNwYWNlcytcIiRcIikpfX19ZnVuY3Rpb24gZGlzYWJsZSgpe2V4cG9ydHMuZW5hYmxlKFwiXCIpfWZ1bmN0aW9uIGVuYWJsZWQobmFtZSl7dmFyIGksbGVuO2ZvcihpPTAsbGVuPWV4cG9ydHMuc2tpcHMubGVuZ3RoO2k8bGVuO2krKyl7aWYoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKXtyZXR1cm4gZmFsc2V9fWZvcihpPTAsbGVuPWV4cG9ydHMubmFtZXMubGVuZ3RoO2k8bGVuO2krKyl7aWYoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIGNvZXJjZSh2YWwpe2lmKHZhbCBpbnN0YW5jZW9mIEVycm9yKXJldHVybiB2YWwuc3RhY2t8fHZhbC5tZXNzYWdlO3JldHVybiB2YWx9fSx7bXM6MjV9XSwxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKGdsb2JhbCl7dmFyIGtleXM9X2RlcmVxXyhcIi4va2V5c1wiKTt2YXIgaGFzQmluYXJ5PV9kZXJlcV8oXCJoYXMtYmluYXJ5XCIpO3ZhciBzbGljZUJ1ZmZlcj1fZGVyZXFfKFwiYXJyYXlidWZmZXIuc2xpY2VcIik7dmFyIGJhc2U2NGVuY29kZXI9X2RlcmVxXyhcImJhc2U2NC1hcnJheWJ1ZmZlclwiKTt2YXIgYWZ0ZXI9X2RlcmVxXyhcImFmdGVyXCIpO3ZhciB1dGY4PV9kZXJlcV8oXCJ1dGY4XCIpO3ZhciBpc0FuZHJvaWQ9bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKTt2YXIgaXNQaGFudG9tSlM9L1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7dmFyIGRvbnRTZW5kQmxvYnM9aXNBbmRyb2lkfHxpc1BoYW50b21KUztleHBvcnRzLnByb3RvY29sPTM7dmFyIHBhY2tldHM9ZXhwb3J0cy5wYWNrZXRzPXtvcGVuOjAsY2xvc2U6MSxwaW5nOjIscG9uZzozLG1lc3NhZ2U6NCx1cGdyYWRlOjUsbm9vcDo2fTt2YXIgcGFja2V0c2xpc3Q9a2V5cyhwYWNrZXRzKTt2YXIgZXJyPXt0eXBlOlwiZXJyb3JcIixkYXRhOlwicGFyc2VyIGVycm9yXCJ9O3ZhciBCbG9iPV9kZXJlcV8oXCJibG9iXCIpO2V4cG9ydHMuZW5jb2RlUGFja2V0PWZ1bmN0aW9uKHBhY2tldCxzdXBwb3J0c0JpbmFyeSx1dGY4ZW5jb2RlLGNhbGxiYWNrKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBzdXBwb3J0c0JpbmFyeSl7Y2FsbGJhY2s9c3VwcG9ydHNCaW5hcnk7c3VwcG9ydHNCaW5hcnk9ZmFsc2V9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdXRmOGVuY29kZSl7Y2FsbGJhY2s9dXRmOGVuY29kZTt1dGY4ZW5jb2RlPW51bGx9dmFyIGRhdGE9cGFja2V0LmRhdGE9PT11bmRlZmluZWQ/dW5kZWZpbmVkOnBhY2tldC5kYXRhLmJ1ZmZlcnx8cGFja2V0LmRhdGE7aWYoZ2xvYmFsLkFycmF5QnVmZmVyJiZkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpe3JldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsc3VwcG9ydHNCaW5hcnksY2FsbGJhY2spfWVsc2UgaWYoQmxvYiYmZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKXtyZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsc3VwcG9ydHNCaW5hcnksY2FsbGJhY2spfWlmKGRhdGEmJmRhdGEuYmFzZTY0KXtyZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCxjYWxsYmFjayl9dmFyIGVuY29kZWQ9cGFja2V0c1twYWNrZXQudHlwZV07aWYodW5kZWZpbmVkIT09cGFja2V0LmRhdGEpe2VuY29kZWQrPXV0ZjhlbmNvZGU/dXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSk6U3RyaW5nKHBhY2tldC5kYXRhKX1yZXR1cm4gY2FsbGJhY2soXCJcIitlbmNvZGVkKX07ZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCxjYWxsYmFjayl7dmFyIG1lc3NhZ2U9XCJiXCIrZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXStwYWNrZXQuZGF0YS5kYXRhO3JldHVybiBjYWxsYmFjayhtZXNzYWdlKX1mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsc3VwcG9ydHNCaW5hcnksY2FsbGJhY2spe2lmKCFzdXBwb3J0c0JpbmFyeSl7cmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCxjYWxsYmFjayl9dmFyIGRhdGE9cGFja2V0LmRhdGE7dmFyIGNvbnRlbnRBcnJheT1uZXcgVWludDhBcnJheShkYXRhKTt2YXIgcmVzdWx0QnVmZmVyPW5ldyBVaW50OEFycmF5KDErZGF0YS5ieXRlTGVuZ3RoKTtyZXN1bHRCdWZmZXJbMF09cGFja2V0c1twYWNrZXQudHlwZV07Zm9yKHZhciBpPTA7aTxjb250ZW50QXJyYXkubGVuZ3RoO2krKyl7cmVzdWx0QnVmZmVyW2krMV09Y29udGVudEFycmF5W2ldfXJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKX1mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsc3VwcG9ydHNCaW5hcnksY2FsbGJhY2spe2lmKCFzdXBwb3J0c0JpbmFyeSl7cmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCxjYWxsYmFjayl9dmFyIGZyPW5ldyBGaWxlUmVhZGVyO2ZyLm9ubG9hZD1mdW5jdGlvbigpe3BhY2tldC5kYXRhPWZyLnJlc3VsdDtleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsc3VwcG9ydHNCaW5hcnksdHJ1ZSxjYWxsYmFjayl9O3JldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSl9ZnVuY3Rpb24gZW5jb2RlQmxvYihwYWNrZXQsc3VwcG9ydHNCaW5hcnksY2FsbGJhY2spe2lmKCFzdXBwb3J0c0JpbmFyeSl7cmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCxjYWxsYmFjayl9aWYoZG9udFNlbmRCbG9icyl7cmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCxzdXBwb3J0c0JpbmFyeSxjYWxsYmFjayl9dmFyIGxlbmd0aD1uZXcgVWludDhBcnJheSgxKTtsZW5ndGhbMF09cGFja2V0c1twYWNrZXQudHlwZV07dmFyIGJsb2I9bmV3IEJsb2IoW2xlbmd0aC5idWZmZXIscGFja2V0LmRhdGFdKTtyZXR1cm4gY2FsbGJhY2soYmxvYil9ZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQ9ZnVuY3Rpb24ocGFja2V0LGNhbGxiYWNrKXt2YXIgbWVzc2FnZT1cImJcIitleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO2lmKEJsb2ImJnBhY2tldC5kYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2Ipe3ZhciBmcj1uZXcgRmlsZVJlYWRlcjtmci5vbmxvYWQ9ZnVuY3Rpb24oKXt2YXIgYjY0PWZyLnJlc3VsdC5zcGxpdChcIixcIilbMV07Y2FsbGJhY2sobWVzc2FnZStiNjQpfTtyZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSl9dmFyIGI2NGRhdGE7dHJ5e2I2NGRhdGE9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSl9Y2F0Y2goZSl7dmFyIHR5cGVkPW5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTt2YXIgYmFzaWM9bmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTx0eXBlZC5sZW5ndGg7aSsrKXtiYXNpY1tpXT10eXBlZFtpXX1iNjRkYXRhPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxiYXNpYyl9bWVzc2FnZSs9Z2xvYmFsLmJ0b2EoYjY0ZGF0YSk7cmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpfTtleHBvcnRzLmRlY29kZVBhY2tldD1mdW5jdGlvbihkYXRhLGJpbmFyeVR5cGUsdXRmOGRlY29kZSl7aWYodHlwZW9mIGRhdGE9PVwic3RyaW5nXCJ8fGRhdGE9PT11bmRlZmluZWQpe2lmKGRhdGEuY2hhckF0KDApPT1cImJcIil7cmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLGJpbmFyeVR5cGUpfWlmKHV0ZjhkZWNvZGUpe3RyeXtkYXRhPXV0ZjguZGVjb2RlKGRhdGEpfWNhdGNoKGUpe3JldHVybiBlcnJ9fXZhciB0eXBlPWRhdGEuY2hhckF0KDApO2lmKE51bWJlcih0eXBlKSE9dHlwZXx8IXBhY2tldHNsaXN0W3R5cGVdKXtyZXR1cm4gZXJyfWlmKGRhdGEubGVuZ3RoPjEpe3JldHVybnt0eXBlOnBhY2tldHNsaXN0W3R5cGVdLGRhdGE6ZGF0YS5zdWJzdHJpbmcoMSl9fWVsc2V7cmV0dXJue3R5cGU6cGFja2V0c2xpc3RbdHlwZV19fX12YXIgYXNBcnJheT1uZXcgVWludDhBcnJheShkYXRhKTt2YXIgdHlwZT1hc0FycmF5WzBdO3ZhciByZXN0PXNsaWNlQnVmZmVyKGRhdGEsMSk7aWYoQmxvYiYmYmluYXJ5VHlwZT09PVwiYmxvYlwiKXtyZXN0PW5ldyBCbG9iKFtyZXN0XSl9cmV0dXJue3R5cGU6cGFja2V0c2xpc3RbdHlwZV0sZGF0YTpyZXN0fX07ZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQ9ZnVuY3Rpb24obXNnLGJpbmFyeVR5cGUpe3ZhciB0eXBlPXBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO2lmKCFnbG9iYWwuQXJyYXlCdWZmZXIpe3JldHVybnt0eXBlOnR5cGUsZGF0YTp7YmFzZTY0OnRydWUsZGF0YTptc2cuc3Vic3RyKDEpfX19dmFyIGRhdGE9YmFzZTY0ZW5jb2Rlci5kZWNvZGUobXNnLnN1YnN0cigxKSk7aWYoYmluYXJ5VHlwZT09PVwiYmxvYlwiJiZCbG9iKXtkYXRhPW5ldyBCbG9iKFtkYXRhXSl9cmV0dXJue3R5cGU6dHlwZSxkYXRhOmRhdGF9fTtleHBvcnRzLmVuY29kZVBheWxvYWQ9ZnVuY3Rpb24ocGFja2V0cyxzdXBwb3J0c0JpbmFyeSxjYWxsYmFjayl7aWYodHlwZW9mIHN1cHBvcnRzQmluYXJ5PT1cImZ1bmN0aW9uXCIpe2NhbGxiYWNrPXN1cHBvcnRzQmluYXJ5O3N1cHBvcnRzQmluYXJ5PW51bGx9dmFyIGlzQmluYXJ5PWhhc0JpbmFyeShwYWNrZXRzKTtpZihzdXBwb3J0c0JpbmFyeSYmaXNCaW5hcnkpe2lmKEJsb2ImJiFkb250U2VuZEJsb2JzKXtyZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsY2FsbGJhY2spfXJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsY2FsbGJhY2spfWlmKCFwYWNrZXRzLmxlbmd0aCl7cmV0dXJuIGNhbGxiYWNrKFwiMDpcIil9ZnVuY3Rpb24gc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2Upe3JldHVybiBtZXNzYWdlLmxlbmd0aCtcIjpcIittZXNzYWdlfWZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsZG9uZUNhbGxiYWNrKXtleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIWlzQmluYXJ5P2ZhbHNlOnN1cHBvcnRzQmluYXJ5LHRydWUsZnVuY3Rpb24obWVzc2FnZSl7ZG9uZUNhbGxiYWNrKG51bGwsc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKX0pfW1hcChwYWNrZXRzLGVuY29kZU9uZSxmdW5jdGlvbihlcnIscmVzdWx0cyl7cmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbihcIlwiKSl9KX07ZnVuY3Rpb24gbWFwKGFyeSxlYWNoLGRvbmUpe3ZhciByZXN1bHQ9bmV3IEFycmF5KGFyeS5sZW5ndGgpO3ZhciBuZXh0PWFmdGVyKGFyeS5sZW5ndGgsZG9uZSk7dmFyIGVhY2hXaXRoSW5kZXg9ZnVuY3Rpb24oaSxlbCxjYil7ZWFjaChlbCxmdW5jdGlvbihlcnJvcixtc2cpe3Jlc3VsdFtpXT1tc2c7Y2IoZXJyb3IscmVzdWx0KX0pfTtmb3IodmFyIGk9MDtpPGFyeS5sZW5ndGg7aSsrKXtlYWNoV2l0aEluZGV4KGksYXJ5W2ldLG5leHQpfX1leHBvcnRzLmRlY29kZVBheWxvYWQ9ZnVuY3Rpb24oZGF0YSxiaW5hcnlUeXBlLGNhbGxiYWNrKXtpZih0eXBlb2YgZGF0YSE9XCJzdHJpbmdcIil7cmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsYmluYXJ5VHlwZSxjYWxsYmFjayl9aWYodHlwZW9mIGJpbmFyeVR5cGU9PT1cImZ1bmN0aW9uXCIpe2NhbGxiYWNrPWJpbmFyeVR5cGU7YmluYXJ5VHlwZT1udWxsfXZhciBwYWNrZXQ7aWYoZGF0YT09XCJcIil7cmV0dXJuIGNhbGxiYWNrKGVyciwwLDEpfXZhciBsZW5ndGg9XCJcIixuLG1zZztmb3IodmFyIGk9MCxsPWRhdGEubGVuZ3RoO2k8bDtpKyspe3ZhciBjaHI9ZGF0YS5jaGFyQXQoaSk7aWYoXCI6XCIhPWNocil7bGVuZ3RoKz1jaHJ9ZWxzZXtpZihcIlwiPT1sZW5ndGh8fGxlbmd0aCE9KG49TnVtYmVyKGxlbmd0aCkpKXtyZXR1cm4gY2FsbGJhY2soZXJyLDAsMSl9bXNnPWRhdGEuc3Vic3RyKGkrMSxuKTtpZihsZW5ndGghPW1zZy5sZW5ndGgpe3JldHVybiBjYWxsYmFjayhlcnIsMCwxKX1pZihtc2cubGVuZ3RoKXtwYWNrZXQ9ZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLGJpbmFyeVR5cGUsdHJ1ZSk7aWYoZXJyLnR5cGU9PXBhY2tldC50eXBlJiZlcnIuZGF0YT09cGFja2V0LmRhdGEpe3JldHVybiBjYWxsYmFjayhlcnIsMCwxKX12YXIgcmV0PWNhbGxiYWNrKHBhY2tldCxpK24sbCk7aWYoZmFsc2U9PT1yZXQpcmV0dXJufWkrPW47bGVuZ3RoPVwiXCJ9fWlmKGxlbmd0aCE9XCJcIil7cmV0dXJuIGNhbGxiYWNrKGVyciwwLDEpfX07ZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcj1mdW5jdGlvbihwYWNrZXRzLGNhbGxiYWNrKXtpZighcGFja2V0cy5sZW5ndGgpe3JldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpfWZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsZG9uZUNhbGxiYWNrKXtleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsdHJ1ZSx0cnVlLGZ1bmN0aW9uKGRhdGEpe3JldHVybiBkb25lQ2FsbGJhY2sobnVsbCxkYXRhKX0pfW1hcChwYWNrZXRzLGVuY29kZU9uZSxmdW5jdGlvbihlcnIsZW5jb2RlZFBhY2tldHMpe3ZhciB0b3RhbExlbmd0aD1lbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLHApe3ZhciBsZW47aWYodHlwZW9mIHA9PT1cInN0cmluZ1wiKXtsZW49cC5sZW5ndGh9ZWxzZXtsZW49cC5ieXRlTGVuZ3RofXJldHVybiBhY2MrbGVuLnRvU3RyaW5nKCkubGVuZ3RoK2xlbisyfSwwKTt2YXIgcmVzdWx0QXJyYXk9bmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO3ZhciBidWZmZXJJbmRleD0wO2VuY29kZWRQYWNrZXRzLmZvckVhY2goZnVuY3Rpb24ocCl7dmFyIGlzU3RyaW5nPXR5cGVvZiBwPT09XCJzdHJpbmdcIjt2YXIgYWI9cDtpZihpc1N0cmluZyl7dmFyIHZpZXc9bmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8cC5sZW5ndGg7aSsrKXt2aWV3W2ldPXAuY2hhckNvZGVBdChpKX1hYj12aWV3LmJ1ZmZlcn1pZihpc1N0cmluZyl7cmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK109MH1lbHNle3Jlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdPTF9dmFyIGxlblN0cj1hYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7Zm9yKHZhciBpPTA7aTxsZW5TdHIubGVuZ3RoO2krKyl7cmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK109cGFyc2VJbnQobGVuU3RyW2ldKX1yZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXT0yNTU7dmFyIHZpZXc9bmV3IFVpbnQ4QXJyYXkoYWIpO2Zvcih2YXIgaT0wO2k8dmlldy5sZW5ndGg7aSsrKXtyZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXT12aWV3W2ldfX0pO3JldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpfSl9O2V4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYj1mdW5jdGlvbihwYWNrZXRzLGNhbGxiYWNrKXtmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LGRvbmVDYWxsYmFjayl7ZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LHRydWUsdHJ1ZSxmdW5jdGlvbihlbmNvZGVkKXt2YXIgYmluYXJ5SWRlbnRpZmllcj1uZXcgVWludDhBcnJheSgxKTtiaW5hcnlJZGVudGlmaWVyWzBdPTE7aWYodHlwZW9mIGVuY29kZWQ9PT1cInN0cmluZ1wiKXt2YXIgdmlldz1uZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxlbmNvZGVkLmxlbmd0aDtpKyspe3ZpZXdbaV09ZW5jb2RlZC5jaGFyQ29kZUF0KGkpfWVuY29kZWQ9dmlldy5idWZmZXI7YmluYXJ5SWRlbnRpZmllclswXT0wfXZhciBsZW49ZW5jb2RlZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP2VuY29kZWQuYnl0ZUxlbmd0aDplbmNvZGVkLnNpemU7dmFyIGxlblN0cj1sZW4udG9TdHJpbmcoKTt2YXIgbGVuZ3RoQXJ5PW5ldyBVaW50OEFycmF5KGxlblN0ci5sZW5ndGgrMSk7Zm9yKHZhciBpPTA7aTxsZW5TdHIubGVuZ3RoO2krKyl7bGVuZ3RoQXJ5W2ldPXBhcnNlSW50KGxlblN0cltpXSl9bGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdPTI1NTtpZihCbG9iKXt2YXIgYmxvYj1uZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsbGVuZ3RoQXJ5LmJ1ZmZlcixlbmNvZGVkXSk7ZG9uZUNhbGxiYWNrKG51bGwsYmxvYil9fSl9bWFwKHBhY2tldHMsZW5jb2RlT25lLGZ1bmN0aW9uKGVycixyZXN1bHRzKXtyZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpfSl9O2V4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5PWZ1bmN0aW9uKGRhdGEsYmluYXJ5VHlwZSxjYWxsYmFjayl7aWYodHlwZW9mIGJpbmFyeVR5cGU9PT1cImZ1bmN0aW9uXCIpe2NhbGxiYWNrPWJpbmFyeVR5cGU7YmluYXJ5VHlwZT1udWxsfXZhciBidWZmZXJUYWlsPWRhdGE7dmFyIGJ1ZmZlcnM9W107dmFyIG51bWJlclRvb0xvbmc9ZmFsc2U7d2hpbGUoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoPjApe3ZhciB0YWlsQXJyYXk9bmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7dmFyIGlzU3RyaW5nPXRhaWxBcnJheVswXT09PTA7dmFyIG1zZ0xlbmd0aD1cIlwiO2Zvcih2YXIgaT0xOztpKyspe2lmKHRhaWxBcnJheVtpXT09MjU1KWJyZWFrO2lmKG1zZ0xlbmd0aC5sZW5ndGg+MzEwKXtudW1iZXJUb29Mb25nPXRydWU7YnJlYWt9bXNnTGVuZ3RoKz10YWlsQXJyYXlbaV19aWYobnVtYmVyVG9vTG9uZylyZXR1cm4gY2FsbGJhY2soZXJyLDAsMSk7YnVmZmVyVGFpbD1zbGljZUJ1ZmZlcihidWZmZXJUYWlsLDIrbXNnTGVuZ3RoLmxlbmd0aCk7bXNnTGVuZ3RoPXBhcnNlSW50KG1zZ0xlbmd0aCk7dmFyIG1zZz1zbGljZUJ1ZmZlcihidWZmZXJUYWlsLDAsbXNnTGVuZ3RoKTtpZihpc1N0cmluZyl7dHJ5e21zZz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQ4QXJyYXkobXNnKSl9Y2F0Y2goZSl7dmFyIHR5cGVkPW5ldyBVaW50OEFycmF5KG1zZyk7bXNnPVwiXCI7Zm9yKHZhciBpPTA7aTx0eXBlZC5sZW5ndGg7aSsrKXttc2crPVN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pfX19YnVmZmVycy5wdXNoKG1zZyk7YnVmZmVyVGFpbD1zbGljZUJ1ZmZlcihidWZmZXJUYWlsLG1zZ0xlbmd0aCl9dmFyIHRvdGFsPWJ1ZmZlcnMubGVuZ3RoO2J1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihidWZmZXIsaSl7Y2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLGJpbmFyeVR5cGUsdHJ1ZSksaSx0b3RhbCl9KX19KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiP3NlbGY6dHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCI/d2luZG93OnR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiP2dsb2JhbDp7fSl9LHtcIi4va2V5c1wiOjIwLGFmdGVyOjExLFwiYXJyYXlidWZmZXIuc2xpY2VcIjoxMixcImJhc2U2NC1hcnJheWJ1ZmZlclwiOjEzLGJsb2I6MTQsXCJoYXMtYmluYXJ5XCI6MjEsdXRmODoyOX1dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24ga2V5cyhvYmope3ZhciBhcnI9W107dmFyIGhhcz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Zvcih2YXIgaSBpbiBvYmope2lmKGhhcy5jYWxsKG9iaixpKSl7YXJyLnB1c2goaSl9fXJldHVybiBhcnJ9fSx7fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpeyhmdW5jdGlvbihnbG9iYWwpe3ZhciBpc0FycmF5PV9kZXJlcV8oXCJpc2FycmF5XCIpO21vZHVsZS5leHBvcnRzPWhhc0JpbmFyeTtmdW5jdGlvbiBoYXNCaW5hcnkoZGF0YSl7ZnVuY3Rpb24gX2hhc0JpbmFyeShvYmope2lmKCFvYmopcmV0dXJuIGZhbHNlO2lmKGdsb2JhbC5CdWZmZXImJmdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKXx8Z2xvYmFsLkFycmF5QnVmZmVyJiZvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8Z2xvYmFsLkJsb2ImJm9iaiBpbnN0YW5jZW9mIEJsb2J8fGdsb2JhbC5GaWxlJiZvYmogaW5zdGFuY2VvZiBGaWxlKXtyZXR1cm4gdHJ1ZX1pZihpc0FycmF5KG9iaikpe2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspe2lmKF9oYXNCaW5hcnkob2JqW2ldKSl7cmV0dXJuIHRydWV9fX1lbHNlIGlmKG9iaiYmXCJvYmplY3RcIj09dHlwZW9mIG9iail7aWYob2JqLnRvSlNPTil7b2JqPW9iai50b0pTT04oKX1mb3IodmFyIGtleSBpbiBvYmope2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosa2V5KSYmX2hhc0JpbmFyeShvYmpba2V5XSkpe3JldHVybiB0cnVlfX19cmV0dXJuIGZhbHNlfXJldHVybiBfaGFzQmluYXJ5KGRhdGEpfX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se2lzYXJyYXk6MjR9XSwyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7dHJ5e21vZHVsZS5leHBvcnRzPXR5cGVvZiBYTUxIdHRwUmVxdWVzdCE9PVwidW5kZWZpbmVkXCImJlwid2l0aENyZWRlbnRpYWxzXCJpbiBuZXcgWE1MSHR0cFJlcXVlc3R9Y2F0Y2goZXJyKXttb2R1bGUuZXhwb3J0cz1mYWxzZX19LHt9XSwyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7dmFyIGluZGV4T2Y9W10uaW5kZXhPZjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihhcnIsb2JqKXtpZihpbmRleE9mKXJldHVybiBhcnIuaW5kZXhPZihvYmopO2Zvcih2YXIgaT0wO2k8YXJyLmxlbmd0aDsrK2kpe2lmKGFycltpXT09PW9iailyZXR1cm4gaX1yZXR1cm4tMX19LHt9XSwyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oYXJyKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycik9PVwiW29iamVjdCBBcnJheV1cIn19LHt9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7dmFyIHM9MWUzO3ZhciBtPXMqNjA7dmFyIGg9bSo2MDt2YXIgZD1oKjI0O3ZhciB5PWQqMzY1LjI1O21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHZhbCxvcHRpb25zKXtvcHRpb25zPW9wdGlvbnN8fHt9O2lmKFwic3RyaW5nXCI9PXR5cGVvZiB2YWwpcmV0dXJuIHBhcnNlKHZhbCk7cmV0dXJuIG9wdGlvbnMubG9uZz9sb25nKHZhbCk6c2hvcnQodmFsKX07ZnVuY3Rpb24gcGFyc2Uoc3RyKXtzdHI9XCJcIitzdHI7aWYoc3RyLmxlbmd0aD4xZTQpcmV0dXJuO3ZhciBtYXRjaD0vXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHN0cik7aWYoIW1hdGNoKXJldHVybjt2YXIgbj1wYXJzZUZsb2F0KG1hdGNoWzFdKTt2YXIgdHlwZT0obWF0Y2hbMl18fFwibXNcIikudG9Mb3dlckNhc2UoKTtzd2l0Y2godHlwZSl7Y2FzZVwieWVhcnNcIjpjYXNlXCJ5ZWFyXCI6Y2FzZVwieXJzXCI6Y2FzZVwieXJcIjpjYXNlXCJ5XCI6cmV0dXJuIG4qeTtjYXNlXCJkYXlzXCI6Y2FzZVwiZGF5XCI6Y2FzZVwiZFwiOnJldHVybiBuKmQ7Y2FzZVwiaG91cnNcIjpjYXNlXCJob3VyXCI6Y2FzZVwiaHJzXCI6Y2FzZVwiaHJcIjpjYXNlXCJoXCI6cmV0dXJuIG4qaDtjYXNlXCJtaW51dGVzXCI6Y2FzZVwibWludXRlXCI6Y2FzZVwibWluc1wiOmNhc2VcIm1pblwiOmNhc2VcIm1cIjpyZXR1cm4gbiptO2Nhc2VcInNlY29uZHNcIjpjYXNlXCJzZWNvbmRcIjpjYXNlXCJzZWNzXCI6Y2FzZVwic2VjXCI6Y2FzZVwic1wiOnJldHVybiBuKnM7Y2FzZVwibWlsbGlzZWNvbmRzXCI6Y2FzZVwibWlsbGlzZWNvbmRcIjpjYXNlXCJtc2Vjc1wiOmNhc2VcIm1zZWNcIjpjYXNlXCJtc1wiOnJldHVybiBufX1mdW5jdGlvbiBzaG9ydChtcyl7aWYobXM+PWQpcmV0dXJuIE1hdGgucm91bmQobXMvZCkrXCJkXCI7aWYobXM+PWgpcmV0dXJuIE1hdGgucm91bmQobXMvaCkrXCJoXCI7aWYobXM+PW0pcmV0dXJuIE1hdGgucm91bmQobXMvbSkrXCJtXCI7aWYobXM+PXMpcmV0dXJuIE1hdGgucm91bmQobXMvcykrXCJzXCI7cmV0dXJuIG1zK1wibXNcIn1mdW5jdGlvbiBsb25nKG1zKXtyZXR1cm4gcGx1cmFsKG1zLGQsXCJkYXlcIil8fHBsdXJhbChtcyxoLFwiaG91clwiKXx8cGx1cmFsKG1zLG0sXCJtaW51dGVcIil8fHBsdXJhbChtcyxzLFwic2Vjb25kXCIpfHxtcytcIiBtc1wifWZ1bmN0aW9uIHBsdXJhbChtcyxuLG5hbWUpe2lmKG1zPG4pcmV0dXJuO2lmKG1zPG4qMS41KXJldHVybiBNYXRoLmZsb29yKG1zL24pK1wiIFwiK25hbWU7cmV0dXJuIE1hdGguY2VpbChtcy9uKStcIiBcIituYW1lK1wic1wifX0se31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXt2YXIgcnZhbGlkY2hhcnM9L15bXFxdLDp7fVxcc10qJC87dmFyIHJ2YWxpZGVzY2FwZT0vXFxcXCg/OltcIlxcXFxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nO3ZhciBydmFsaWR0b2tlbnM9L1wiW15cIlxcXFxcXG5cXHJdKlwifHRydWV8ZmFsc2V8bnVsbHwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPy9nO3ZhciBydmFsaWRicmFjZXM9Lyg/Ol58OnwsKSg/OlxccypcXFspKy9nO3ZhciBydHJpbUxlZnQ9L15cXHMrLzt2YXIgcnRyaW1SaWdodD0vXFxzKyQvO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHBhcnNlanNvbihkYXRhKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZGF0YXx8IWRhdGEpe3JldHVybiBudWxsfWRhdGE9ZGF0YS5yZXBsYWNlKHJ0cmltTGVmdCxcIlwiKS5yZXBsYWNlKHJ0cmltUmlnaHQsXCJcIik7aWYoZ2xvYmFsLkpTT04mJkpTT04ucGFyc2Upe3JldHVybiBKU09OLnBhcnNlKGRhdGEpfWlmKHJ2YWxpZGNoYXJzLnRlc3QoZGF0YS5yZXBsYWNlKHJ2YWxpZGVzY2FwZSxcIkBcIikucmVwbGFjZShydmFsaWR0b2tlbnMsXCJdXCIpLnJlcGxhY2UocnZhbGlkYnJhY2VzLFwiXCIpKSl7cmV0dXJuIG5ldyBGdW5jdGlvbihcInJldHVybiBcIitkYXRhKSgpfX19KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiP3NlbGY6dHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCI/d2luZG93OnR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiP2dsb2JhbDp7fSl9LHt9XSwyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7ZXhwb3J0cy5lbmNvZGU9ZnVuY3Rpb24ob2JqKXt2YXIgc3RyPVwiXCI7Zm9yKHZhciBpIGluIG9iail7aWYob2JqLmhhc093blByb3BlcnR5KGkpKXtpZihzdHIubGVuZ3RoKXN0cis9XCImXCI7c3RyKz1lbmNvZGVVUklDb21wb25lbnQoaSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSl9fXJldHVybiBzdHJ9O2V4cG9ydHMuZGVjb2RlPWZ1bmN0aW9uKHFzKXt2YXIgcXJ5PXt9O3ZhciBwYWlycz1xcy5zcGxpdChcIiZcIik7Zm9yKHZhciBpPTAsbD1wYWlycy5sZW5ndGg7aTxsO2krKyl7dmFyIHBhaXI9cGFpcnNbaV0uc3BsaXQoXCI9XCIpO3FyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldPWRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKX1yZXR1cm4gcXJ5fX0se31dLDI4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXt2YXIgcmU9L14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87dmFyIHBhcnRzPVtcInNvdXJjZVwiLFwicHJvdG9jb2xcIixcImF1dGhvcml0eVwiLFwidXNlckluZm9cIixcInVzZXJcIixcInBhc3N3b3JkXCIsXCJob3N0XCIsXCJwb3J0XCIsXCJyZWxhdGl2ZVwiLFwicGF0aFwiLFwiZGlyZWN0b3J5XCIsXCJmaWxlXCIsXCJxdWVyeVwiLFwiYW5jaG9yXCJdO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHBhcnNldXJpKHN0cil7dmFyIHNyYz1zdHIsYj1zdHIuaW5kZXhPZihcIltcIiksZT1zdHIuaW5kZXhPZihcIl1cIik7aWYoYiE9LTEmJmUhPS0xKXtzdHI9c3RyLnN1YnN0cmluZygwLGIpK3N0ci5zdWJzdHJpbmcoYixlKS5yZXBsYWNlKC86L2csXCI7XCIpK3N0ci5zdWJzdHJpbmcoZSxzdHIubGVuZ3RoKX12YXIgbT1yZS5leGVjKHN0cnx8XCJcIiksdXJpPXt9LGk9MTQ7d2hpbGUoaS0tKXt1cmlbcGFydHNbaV1dPW1baV18fFwiXCJ9aWYoYiE9LTEmJmUhPS0xKXt1cmkuc291cmNlPXNyYzt1cmkuaG9zdD11cmkuaG9zdC5zdWJzdHJpbmcoMSx1cmkuaG9zdC5sZW5ndGgtMSkucmVwbGFjZSgvOy9nLFwiOlwiKTt1cmkuYXV0aG9yaXR5PXVyaS5hdXRob3JpdHkucmVwbGFjZShcIltcIixcIlwiKS5yZXBsYWNlKFwiXVwiLFwiXCIpLnJlcGxhY2UoLzsvZyxcIjpcIik7dXJpLmlwdjZ1cmk9dHJ1ZX1yZXR1cm4gdXJpfX0se31dLDI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXsoZnVuY3Rpb24ocm9vdCl7dmFyIGZyZWVFeHBvcnRzPXR5cGVvZiBleHBvcnRzPT1cIm9iamVjdFwiJiZleHBvcnRzO3ZhciBmcmVlTW9kdWxlPXR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZSYmbW9kdWxlLmV4cG9ydHM9PWZyZWVFeHBvcnRzJiZtb2R1bGU7dmFyIGZyZWVHbG9iYWw9dHlwZW9mIGdsb2JhbD09XCJvYmplY3RcIiYmZ2xvYmFsO2lmKGZyZWVHbG9iYWwuZ2xvYmFsPT09ZnJlZUdsb2JhbHx8ZnJlZUdsb2JhbC53aW5kb3c9PT1mcmVlR2xvYmFsKXtyb290PWZyZWVHbG9iYWx9dmFyIHN0cmluZ0Zyb21DaGFyQ29kZT1TdHJpbmcuZnJvbUNoYXJDb2RlO2Z1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKXt2YXIgb3V0cHV0PVtdO3ZhciBjb3VudGVyPTA7dmFyIGxlbmd0aD1zdHJpbmcubGVuZ3RoO3ZhciB2YWx1ZTt2YXIgZXh0cmE7d2hpbGUoY291bnRlcjxsZW5ndGgpe3ZhbHVlPXN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7aWYodmFsdWU+PTU1Mjk2JiZ2YWx1ZTw9NTYzMTkmJmNvdW50ZXI8bGVuZ3RoKXtleHRyYT1zdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO2lmKChleHRyYSY2NDUxMik9PTU2MzIwKXtvdXRwdXQucHVzaCgoKHZhbHVlJjEwMjMpPDwxMCkrKGV4dHJhJjEwMjMpKzY1NTM2KX1lbHNle291dHB1dC5wdXNoKHZhbHVlKTtjb3VudGVyLS19fWVsc2V7b3V0cHV0LnB1c2godmFsdWUpfX1yZXR1cm4gb3V0cHV0fWZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpe3ZhciBsZW5ndGg9YXJyYXkubGVuZ3RoO3ZhciBpbmRleD0tMTt2YXIgdmFsdWU7dmFyIG91dHB1dD1cIlwiO3doaWxlKCsraW5kZXg8bGVuZ3RoKXt2YWx1ZT1hcnJheVtpbmRleF07aWYodmFsdWU+NjU1MzUpe3ZhbHVlLT02NTUzNjtvdXRwdXQrPXN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZT4+PjEwJjEwMjN8NTUyOTYpO3ZhbHVlPTU2MzIwfHZhbHVlJjEwMjN9b3V0cHV0Kz1zdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpfXJldHVybiBvdXRwdXR9ZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpe2lmKGNvZGVQb2ludD49NTUyOTYmJmNvZGVQb2ludDw9NTczNDMpe3Rocm93IEVycm9yKFwiTG9uZSBzdXJyb2dhdGUgVStcIitjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkrXCIgaXMgbm90IGEgc2NhbGFyIHZhbHVlXCIpfX1mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCxzaGlmdCl7cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQ+PnNoaWZ0JjYzfDEyOCl9ZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCl7aWYoKGNvZGVQb2ludCY0Mjk0OTY3MTY4KT09MCl7cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpfXZhciBzeW1ib2w9XCJcIjtpZigoY29kZVBvaW50JjQyOTQ5NjUyNDgpPT0wKXtzeW1ib2w9c3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludD4+NiYzMXwxOTIpfWVsc2UgaWYoKGNvZGVQb2ludCY0Mjk0OTAxNzYwKT09MCl7Y2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpO3N5bWJvbD1zdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50Pj4xMiYxNXwyMjQpO3N5bWJvbCs9Y3JlYXRlQnl0ZShjb2RlUG9pbnQsNil9ZWxzZSBpZigoY29kZVBvaW50JjQyOTI4NzAxNDQpPT0wKXtzeW1ib2w9c3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludD4+MTgmN3wyNDApO3N5bWJvbCs9Y3JlYXRlQnl0ZShjb2RlUG9pbnQsMTIpO3N5bWJvbCs9Y3JlYXRlQnl0ZShjb2RlUG9pbnQsNil9c3ltYm9sKz1zdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50JjYzfDEyOCk7cmV0dXJuIHN5bWJvbH1mdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZyl7dmFyIGNvZGVQb2ludHM9dWNzMmRlY29kZShzdHJpbmcpO3ZhciBsZW5ndGg9Y29kZVBvaW50cy5sZW5ndGg7dmFyIGluZGV4PS0xO3ZhciBjb2RlUG9pbnQ7dmFyIGJ5dGVTdHJpbmc9XCJcIjt3aGlsZSgrK2luZGV4PGxlbmd0aCl7Y29kZVBvaW50PWNvZGVQb2ludHNbaW5kZXhdO2J5dGVTdHJpbmcrPWVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQpfXJldHVybiBieXRlU3RyaW5nfWZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCl7aWYoYnl0ZUluZGV4Pj1ieXRlQ291bnQpe3Rocm93IEVycm9yKFwiSW52YWxpZCBieXRlIGluZGV4XCIpfXZhciBjb250aW51YXRpb25CeXRlPWJ5dGVBcnJheVtieXRlSW5kZXhdJjI1NTtieXRlSW5kZXgrKztpZigoY29udGludWF0aW9uQnl0ZSYxOTIpPT0xMjgpe3JldHVybiBjb250aW51YXRpb25CeXRlJjYzfXRocm93IEVycm9yKFwiSW52YWxpZCBjb250aW51YXRpb24gYnl0ZVwiKX1mdW5jdGlvbiBkZWNvZGVTeW1ib2woKXt2YXIgYnl0ZTE7dmFyIGJ5dGUyO3ZhciBieXRlMzt2YXIgYnl0ZTQ7dmFyIGNvZGVQb2ludDtpZihieXRlSW5kZXg+Ynl0ZUNvdW50KXt0aHJvdyBFcnJvcihcIkludmFsaWQgYnl0ZSBpbmRleFwiKX1pZihieXRlSW5kZXg9PWJ5dGVDb3VudCl7cmV0dXJuIGZhbHNlfWJ5dGUxPWJ5dGVBcnJheVtieXRlSW5kZXhdJjI1NTtieXRlSW5kZXgrKztpZigoYnl0ZTEmMTI4KT09MCl7cmV0dXJuIGJ5dGUxfWlmKChieXRlMSYyMjQpPT0xOTIpe3ZhciBieXRlMj1yZWFkQ29udGludWF0aW9uQnl0ZSgpO2NvZGVQb2ludD0oYnl0ZTEmMzEpPDw2fGJ5dGUyO2lmKGNvZGVQb2ludD49MTI4KXtyZXR1cm4gY29kZVBvaW50fWVsc2V7dGhyb3cgRXJyb3IoXCJJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXCIpfX1pZigoYnl0ZTEmMjQwKT09MjI0KXtieXRlMj1yZWFkQ29udGludWF0aW9uQnl0ZSgpO2J5dGUzPXJlYWRDb250aW51YXRpb25CeXRlKCk7Y29kZVBvaW50PShieXRlMSYxNSk8PDEyfGJ5dGUyPDw2fGJ5dGUzO2lmKGNvZGVQb2ludD49MjA0OCl7Y2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpO3JldHVybiBjb2RlUG9pbnR9ZWxzZXt0aHJvdyBFcnJvcihcIkludmFsaWQgY29udGludWF0aW9uIGJ5dGVcIil9fWlmKChieXRlMSYyNDgpPT0yNDApe2J5dGUyPXJlYWRDb250aW51YXRpb25CeXRlKCk7Ynl0ZTM9cmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtieXRlND1yZWFkQ29udGludWF0aW9uQnl0ZSgpO2NvZGVQb2ludD0oYnl0ZTEmMTUpPDwxOHxieXRlMjw8MTJ8Ynl0ZTM8PDZ8Ynl0ZTQ7aWYoY29kZVBvaW50Pj02NTUzNiYmY29kZVBvaW50PD0xMTE0MTExKXtyZXR1cm4gY29kZVBvaW50fX10aHJvdyBFcnJvcihcIkludmFsaWQgVVRGLTggZGV0ZWN0ZWRcIil9dmFyIGJ5dGVBcnJheTt2YXIgYnl0ZUNvdW50O3ZhciBieXRlSW5kZXg7ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nKXtieXRlQXJyYXk9dWNzMmRlY29kZShieXRlU3RyaW5nKTtieXRlQ291bnQ9Ynl0ZUFycmF5Lmxlbmd0aDtieXRlSW5kZXg9MDt2YXIgY29kZVBvaW50cz1bXTt2YXIgdG1wO3doaWxlKCh0bXA9ZGVjb2RlU3ltYm9sKCkpIT09ZmFsc2Upe2NvZGVQb2ludHMucHVzaCh0bXApfXJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpfXZhciB1dGY4PXt2ZXJzaW9uOlwiMi4wLjBcIixlbmNvZGU6dXRmOGVuY29kZSxkZWNvZGU6dXRmOGRlY29kZX07aWYodHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgZGVmaW5lLmFtZD09XCJvYmplY3RcIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIHV0Zjh9KX1lbHNlIGlmKGZyZWVFeHBvcnRzJiYhZnJlZUV4cG9ydHMubm9kZVR5cGUpe2lmKGZyZWVNb2R1bGUpe2ZyZWVNb2R1bGUuZXhwb3J0cz11dGY4fWVsc2V7dmFyIG9iamVjdD17fTt2YXIgaGFzT3duUHJvcGVydHk9b2JqZWN0Lmhhc093blByb3BlcnR5O2Zvcih2YXIga2V5IGluIHV0Zjgpe2hhc093blByb3BlcnR5LmNhbGwodXRmOCxrZXkpJiYoZnJlZUV4cG9ydHNba2V5XT11dGY4W2tleV0pfX19ZWxzZXtyb290LnV0Zjg9dXRmOH19KSh0aGlzKX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se31dLDMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgYWxwaGFiZXQ9XCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fXCIuc3BsaXQoXCJcIiksbGVuZ3RoPTY0LG1hcD17fSxzZWVkPTAsaT0wLHByZXY7ZnVuY3Rpb24gZW5jb2RlKG51bSl7dmFyIGVuY29kZWQ9XCJcIjtkb3tlbmNvZGVkPWFscGhhYmV0W251bSVsZW5ndGhdK2VuY29kZWQ7bnVtPU1hdGguZmxvb3IobnVtL2xlbmd0aCl9d2hpbGUobnVtPjApO3JldHVybiBlbmNvZGVkfWZ1bmN0aW9uIGRlY29kZShzdHIpe3ZhciBkZWNvZGVkPTA7Zm9yKGk9MDtpPHN0ci5sZW5ndGg7aSsrKXtkZWNvZGVkPWRlY29kZWQqbGVuZ3RoK21hcFtzdHIuY2hhckF0KGkpXX1yZXR1cm4gZGVjb2RlZH1mdW5jdGlvbiB5ZWFzdCgpe3ZhciBub3c9ZW5jb2RlKCtuZXcgRGF0ZSk7aWYobm93IT09cHJldilyZXR1cm4gc2VlZD0wLHByZXY9bm93O3JldHVybiBub3crXCIuXCIrZW5jb2RlKHNlZWQrKyl9Zm9yKDtpPGxlbmd0aDtpKyspbWFwW2FscGhhYmV0W2ldXT1pO3llYXN0LmVuY29kZT1lbmNvZGU7eWVhc3QuZGVjb2RlPWRlY29kZTttb2R1bGUuZXhwb3J0cz15ZWFzdH0se31dLDMxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXt2YXIgdXJsPV9kZXJlcV8oXCIuL3VybFwiKTt2YXIgcGFyc2VyPV9kZXJlcV8oXCJzb2NrZXQuaW8tcGFyc2VyXCIpO3ZhciBNYW5hZ2VyPV9kZXJlcV8oXCIuL21hbmFnZXJcIik7dmFyIGRlYnVnPV9kZXJlcV8oXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnRcIik7bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cz1sb29rdXA7dmFyIGNhY2hlPWV4cG9ydHMubWFuYWdlcnM9e307ZnVuY3Rpb24gbG9va3VwKHVyaSxvcHRzKXtpZih0eXBlb2YgdXJpPT1cIm9iamVjdFwiKXtvcHRzPXVyaTt1cmk9dW5kZWZpbmVkfW9wdHM9b3B0c3x8e307dmFyIHBhcnNlZD11cmwodXJpKTt2YXIgc291cmNlPXBhcnNlZC5zb3VyY2U7dmFyIGlkPXBhcnNlZC5pZDt2YXIgcGF0aD1wYXJzZWQucGF0aDt2YXIgc2FtZU5hbWVzcGFjZT1jYWNoZVtpZF0mJnBhdGggaW4gY2FjaGVbaWRdLm5zcHM7dmFyIG5ld0Nvbm5lY3Rpb249b3B0cy5mb3JjZU5ld3x8b3B0c1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdfHxmYWxzZT09PW9wdHMubXVsdGlwbGV4fHxzYW1lTmFtZXNwYWNlO3ZhciBpbztpZihuZXdDb25uZWN0aW9uKXtkZWJ1ZyhcImlnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXNcIixzb3VyY2UpO2lvPU1hbmFnZXIoc291cmNlLG9wdHMpfWVsc2V7aWYoIWNhY2hlW2lkXSl7ZGVidWcoXCJuZXcgaW8gaW5zdGFuY2UgZm9yICVzXCIsc291cmNlKTtjYWNoZVtpZF09TWFuYWdlcihzb3VyY2Usb3B0cyl9aW89Y2FjaGVbaWRdfXJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgpfWV4cG9ydHMucHJvdG9jb2w9cGFyc2VyLnByb3RvY29sO2V4cG9ydHMuY29ubmVjdD1sb29rdXA7ZXhwb3J0cy5NYW5hZ2VyPV9kZXJlcV8oXCIuL21hbmFnZXJcIik7ZXhwb3J0cy5Tb2NrZXQ9X2RlcmVxXyhcIi4vc29ja2V0XCIpfSx7XCIuL21hbmFnZXJcIjozMixcIi4vc29ja2V0XCI6MzQsXCIuL3VybFwiOjM1LGRlYnVnOjM5LFwic29ja2V0LmlvLXBhcnNlclwiOjQ3fV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe3ZhciBlaW89X2RlcmVxXyhcImVuZ2luZS5pby1jbGllbnRcIik7dmFyIFNvY2tldD1fZGVyZXFfKFwiLi9zb2NrZXRcIik7dmFyIEVtaXR0ZXI9X2RlcmVxXyhcImNvbXBvbmVudC1lbWl0dGVyXCIpO3ZhciBwYXJzZXI9X2RlcmVxXyhcInNvY2tldC5pby1wYXJzZXJcIik7dmFyIG9uPV9kZXJlcV8oXCIuL29uXCIpO3ZhciBiaW5kPV9kZXJlcV8oXCJjb21wb25lbnQtYmluZFwiKTt2YXIgZGVidWc9X2RlcmVxXyhcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudDptYW5hZ2VyXCIpO3ZhciBpbmRleE9mPV9kZXJlcV8oXCJpbmRleG9mXCIpO3ZhciBCYWNrb2ZmPV9kZXJlcV8oXCJiYWNrbzJcIik7dmFyIGhhcz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O21vZHVsZS5leHBvcnRzPU1hbmFnZXI7ZnVuY3Rpb24gTWFuYWdlcih1cmksb3B0cyl7aWYoISh0aGlzIGluc3RhbmNlb2YgTWFuYWdlcikpcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSxvcHRzKTtpZih1cmkmJlwib2JqZWN0XCI9PXR5cGVvZiB1cmkpe29wdHM9dXJpO3VyaT11bmRlZmluZWR9b3B0cz1vcHRzfHx7fTtvcHRzLnBhdGg9b3B0cy5wYXRofHxcIi9zb2NrZXQuaW9cIjt0aGlzLm5zcHM9e307dGhpcy5zdWJzPVtdO3RoaXMub3B0cz1vcHRzO3RoaXMucmVjb25uZWN0aW9uKG9wdHMucmVjb25uZWN0aW9uIT09ZmFsc2UpO3RoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMob3B0cy5yZWNvbm5lY3Rpb25BdHRlbXB0c3x8SW5maW5pdHkpO3RoaXMucmVjb25uZWN0aW9uRGVsYXkob3B0cy5yZWNvbm5lY3Rpb25EZWxheXx8MWUzKTt0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXh8fDVlMyk7dGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3Rvcnx8LjUpO3RoaXMuYmFja29mZj1uZXcgQmFja29mZih7bWluOnRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxtYXg6dGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLGppdHRlcjp0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKX0pO3RoaXMudGltZW91dChudWxsPT1vcHRzLnRpbWVvdXQ/MmU0Om9wdHMudGltZW91dCk7dGhpcy5yZWFkeVN0YXRlPVwiY2xvc2VkXCI7dGhpcy51cmk9dXJpO3RoaXMuY29ubmVjdGluZz1bXTt0aGlzLmxhc3RQaW5nPW51bGw7dGhpcy5lbmNvZGluZz1mYWxzZTt0aGlzLnBhY2tldEJ1ZmZlcj1bXTt0aGlzLmVuY29kZXI9bmV3IHBhcnNlci5FbmNvZGVyO3RoaXMuZGVjb2Rlcj1uZXcgcGFyc2VyLkRlY29kZXI7dGhpcy5hdXRvQ29ubmVjdD1vcHRzLmF1dG9Db25uZWN0IT09ZmFsc2U7aWYodGhpcy5hdXRvQ29ubmVjdCl0aGlzLm9wZW4oKX1NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsPWZ1bmN0aW9uKCl7dGhpcy5lbWl0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtmb3IodmFyIG5zcCBpbiB0aGlzLm5zcHMpe2lmKGhhcy5jYWxsKHRoaXMubnNwcyxuc3ApKXt0aGlzLm5zcHNbbnNwXS5lbWl0LmFwcGx5KHRoaXMubnNwc1tuc3BdLGFyZ3VtZW50cyl9fX07TWFuYWdlci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzPWZ1bmN0aW9uKCl7Zm9yKHZhciBuc3AgaW4gdGhpcy5uc3BzKXtpZihoYXMuY2FsbCh0aGlzLm5zcHMsbnNwKSl7dGhpcy5uc3BzW25zcF0uaWQ9dGhpcy5lbmdpbmUuaWR9fX07RW1pdHRlcihNYW5hZ2VyLnByb3RvdHlwZSk7TWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uPWZ1bmN0aW9uKHYpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247dGhpcy5fcmVjb25uZWN0aW9uPSEhdjtyZXR1cm4gdGhpc307TWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uQXR0ZW1wdHM9ZnVuY3Rpb24odil7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO3RoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzPXY7cmV0dXJuIHRoaXN9O01hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5PWZ1bmN0aW9uKHYpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTt0aGlzLl9yZWNvbm5lY3Rpb25EZWxheT12O3RoaXMuYmFja29mZiYmdGhpcy5iYWNrb2ZmLnNldE1pbih2KTtyZXR1cm4gdGhpc307TWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3Rvcj1mdW5jdGlvbih2KXtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3Rvcjt0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yPXY7dGhpcy5iYWNrb2ZmJiZ0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO3JldHVybiB0aGlzfTtNYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heD1mdW5jdGlvbih2KXtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7dGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg9djt0aGlzLmJhY2tvZmYmJnRoaXMuYmFja29mZi5zZXRNYXgodik7cmV0dXJuIHRoaXN9O01hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQ9ZnVuY3Rpb24odil7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3RpbWVvdXQ7dGhpcy5fdGltZW91dD12O3JldHVybiB0aGlzfTtNYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3Blbj1mdW5jdGlvbigpe2lmKCF0aGlzLnJlY29ubmVjdGluZyYmdGhpcy5fcmVjb25uZWN0aW9uJiZ0aGlzLmJhY2tvZmYuYXR0ZW1wdHM9PT0wKXt0aGlzLnJlY29ubmVjdCgpfX07TWFuYWdlci5wcm90b3R5cGUub3Blbj1NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0PWZ1bmN0aW9uKGZuKXtkZWJ1ZyhcInJlYWR5U3RhdGUgJXNcIix0aGlzLnJlYWR5U3RhdGUpO2lmKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZihcIm9wZW5cIikpcmV0dXJuIHRoaXM7ZGVidWcoXCJvcGVuaW5nICVzXCIsdGhpcy51cmkpO3RoaXMuZW5naW5lPWVpbyh0aGlzLnVyaSx0aGlzLm9wdHMpO3ZhciBzb2NrZXQ9dGhpcy5lbmdpbmU7dmFyIHNlbGY9dGhpczt0aGlzLnJlYWR5U3RhdGU9XCJvcGVuaW5nXCI7dGhpcy5za2lwUmVjb25uZWN0PWZhbHNlO3ZhciBvcGVuU3ViPW9uKHNvY2tldCxcIm9wZW5cIixmdW5jdGlvbigpe3NlbGYub25vcGVuKCk7Zm4mJmZuKCl9KTt2YXIgZXJyb3JTdWI9b24oc29ja2V0LFwiZXJyb3JcIixmdW5jdGlvbihkYXRhKXtkZWJ1ZyhcImNvbm5lY3RfZXJyb3JcIik7c2VsZi5jbGVhbnVwKCk7c2VsZi5yZWFkeVN0YXRlPVwiY2xvc2VkXCI7c2VsZi5lbWl0QWxsKFwiY29ubmVjdF9lcnJvclwiLGRhdGEpO2lmKGZuKXt2YXIgZXJyPW5ldyBFcnJvcihcIkNvbm5lY3Rpb24gZXJyb3JcIik7ZXJyLmRhdGE9ZGF0YTtmbihlcnIpfWVsc2V7c2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpfX0pO2lmKGZhbHNlIT09dGhpcy5fdGltZW91dCl7dmFyIHRpbWVvdXQ9dGhpcy5fdGltZW91dDtkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB3aWxsIHRpbWVvdXQgYWZ0ZXIgJWRcIix0aW1lb3V0KTt2YXIgdGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2RlYnVnKFwiY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZFwiLHRpbWVvdXQpO29wZW5TdWIuZGVzdHJveSgpO3NvY2tldC5jbG9zZSgpO3NvY2tldC5lbWl0KFwiZXJyb3JcIixcInRpbWVvdXRcIik7c2VsZi5lbWl0QWxsKFwiY29ubmVjdF90aW1lb3V0XCIsdGltZW91dCl9LHRpbWVvdXQpO3RoaXMuc3Vicy5wdXNoKHtkZXN0cm95OmZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRpbWVyKX19KX10aGlzLnN1YnMucHVzaChvcGVuU3ViKTt0aGlzLnN1YnMucHVzaChlcnJvclN1Yik7cmV0dXJuIHRoaXN9O01hbmFnZXIucHJvdG90eXBlLm9ub3Blbj1mdW5jdGlvbigpe2RlYnVnKFwib3BlblwiKTt0aGlzLmNsZWFudXAoKTt0aGlzLnJlYWR5U3RhdGU9XCJvcGVuXCI7dGhpcy5lbWl0KFwib3BlblwiKTt2YXIgc29ja2V0PXRoaXMuZW5naW5lO3RoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCxcImRhdGFcIixiaW5kKHRoaXMsXCJvbmRhdGFcIikpKTt0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsXCJwaW5nXCIsYmluZCh0aGlzLFwib25waW5nXCIpKSk7dGhpcy5zdWJzLnB1c2gob24oc29ja2V0LFwicG9uZ1wiLGJpbmQodGhpcyxcIm9ucG9uZ1wiKSkpO3RoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCxcImVycm9yXCIsYmluZCh0aGlzLFwib25lcnJvclwiKSkpO3RoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCxcImNsb3NlXCIsYmluZCh0aGlzLFwib25jbG9zZVwiKSkpO3RoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlcixcImRlY29kZWRcIixiaW5kKHRoaXMsXCJvbmRlY29kZWRcIikpKX07TWFuYWdlci5wcm90b3R5cGUub25waW5nPWZ1bmN0aW9uKCl7dGhpcy5sYXN0UGluZz1uZXcgRGF0ZTt0aGlzLmVtaXRBbGwoXCJwaW5nXCIpfTtNYW5hZ2VyLnByb3RvdHlwZS5vbnBvbmc9ZnVuY3Rpb24oKXt0aGlzLmVtaXRBbGwoXCJwb25nXCIsbmV3IERhdGUtdGhpcy5sYXN0UGluZyl9O01hbmFnZXIucHJvdG90eXBlLm9uZGF0YT1mdW5jdGlvbihkYXRhKXt0aGlzLmRlY29kZXIuYWRkKGRhdGEpfTtNYW5hZ2VyLnByb3RvdHlwZS5vbmRlY29kZWQ9ZnVuY3Rpb24ocGFja2V0KXt0aGlzLmVtaXQoXCJwYWNrZXRcIixwYWNrZXQpfTtNYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yPWZ1bmN0aW9uKGVycil7ZGVidWcoXCJlcnJvclwiLGVycik7dGhpcy5lbWl0QWxsKFwiZXJyb3JcIixlcnIpfTtNYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQ9ZnVuY3Rpb24obnNwKXt2YXIgc29ja2V0PXRoaXMubnNwc1tuc3BdO2lmKCFzb2NrZXQpe3NvY2tldD1uZXcgU29ja2V0KHRoaXMsbnNwKTt0aGlzLm5zcHNbbnNwXT1zb2NrZXQ7dmFyIHNlbGY9dGhpcztzb2NrZXQub24oXCJjb25uZWN0aW5nXCIsb25Db25uZWN0aW5nKTtcbnNvY2tldC5vbihcImNvbm5lY3RcIixmdW5jdGlvbigpe3NvY2tldC5pZD1zZWxmLmVuZ2luZS5pZH0pO2lmKHRoaXMuYXV0b0Nvbm5lY3Qpe29uQ29ubmVjdGluZygpfX1mdW5jdGlvbiBvbkNvbm5lY3RpbmcoKXtpZighfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLHNvY2tldCkpe3NlbGYuY29ubmVjdGluZy5wdXNoKHNvY2tldCl9fXJldHVybiBzb2NrZXR9O01hbmFnZXIucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oc29ja2V0KXt2YXIgaW5kZXg9aW5kZXhPZih0aGlzLmNvbm5lY3Rpbmcsc29ja2V0KTtpZih+aW5kZXgpdGhpcy5jb25uZWN0aW5nLnNwbGljZShpbmRleCwxKTtpZih0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKXJldHVybjt0aGlzLmNsb3NlKCl9O01hbmFnZXIucHJvdG90eXBlLnBhY2tldD1mdW5jdGlvbihwYWNrZXQpe2RlYnVnKFwid3JpdGluZyBwYWNrZXQgJWpcIixwYWNrZXQpO3ZhciBzZWxmPXRoaXM7aWYoIXNlbGYuZW5jb2Rpbmcpe3NlbGYuZW5jb2Rpbmc9dHJ1ZTt0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCxmdW5jdGlvbihlbmNvZGVkUGFja2V0cyl7Zm9yKHZhciBpPTA7aTxlbmNvZGVkUGFja2V0cy5sZW5ndGg7aSsrKXtzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSxwYWNrZXQub3B0aW9ucyl9c2VsZi5lbmNvZGluZz1mYWxzZTtzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpfSl9ZWxzZXtzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCl9fTtNYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWU9ZnVuY3Rpb24oKXtpZih0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGg+MCYmIXRoaXMuZW5jb2Rpbmcpe3ZhciBwYWNrPXRoaXMucGFja2V0QnVmZmVyLnNoaWZ0KCk7dGhpcy5wYWNrZXQocGFjayl9fTtNYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwPWZ1bmN0aW9uKCl7ZGVidWcoXCJjbGVhbnVwXCIpO3ZhciBzdWI7d2hpbGUoc3ViPXRoaXMuc3Vicy5zaGlmdCgpKXN1Yi5kZXN0cm95KCk7dGhpcy5wYWNrZXRCdWZmZXI9W107dGhpcy5lbmNvZGluZz1mYWxzZTt0aGlzLmxhc3RQaW5nPW51bGw7dGhpcy5kZWNvZGVyLmRlc3Ryb3koKX07TWFuYWdlci5wcm90b3R5cGUuY2xvc2U9TWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdD1mdW5jdGlvbigpe2RlYnVnKFwiZGlzY29ubmVjdFwiKTt0aGlzLnNraXBSZWNvbm5lY3Q9dHJ1ZTt0aGlzLnJlY29ubmVjdGluZz1mYWxzZTtpZihcIm9wZW5pbmdcIj09dGhpcy5yZWFkeVN0YXRlKXt0aGlzLmNsZWFudXAoKX10aGlzLmJhY2tvZmYucmVzZXQoKTt0aGlzLnJlYWR5U3RhdGU9XCJjbG9zZWRcIjtpZih0aGlzLmVuZ2luZSl0aGlzLmVuZ2luZS5jbG9zZSgpfTtNYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlPWZ1bmN0aW9uKHJlYXNvbil7ZGVidWcoXCJvbmNsb3NlXCIpO3RoaXMuY2xlYW51cCgpO3RoaXMuYmFja29mZi5yZXNldCgpO3RoaXMucmVhZHlTdGF0ZT1cImNsb3NlZFwiO3RoaXMuZW1pdChcImNsb3NlXCIscmVhc29uKTtpZih0aGlzLl9yZWNvbm5lY3Rpb24mJiF0aGlzLnNraXBSZWNvbm5lY3Qpe3RoaXMucmVjb25uZWN0KCl9fTtNYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Q9ZnVuY3Rpb24oKXtpZih0aGlzLnJlY29ubmVjdGluZ3x8dGhpcy5za2lwUmVjb25uZWN0KXJldHVybiB0aGlzO3ZhciBzZWxmPXRoaXM7aWYodGhpcy5iYWNrb2ZmLmF0dGVtcHRzPj10aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyl7ZGVidWcoXCJyZWNvbm5lY3QgZmFpbGVkXCIpO3RoaXMuYmFja29mZi5yZXNldCgpO3RoaXMuZW1pdEFsbChcInJlY29ubmVjdF9mYWlsZWRcIik7dGhpcy5yZWNvbm5lY3Rpbmc9ZmFsc2V9ZWxzZXt2YXIgZGVsYXk9dGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7ZGVidWcoXCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRcIixkZWxheSk7dGhpcy5yZWNvbm5lY3Rpbmc9dHJ1ZTt2YXIgdGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2lmKHNlbGYuc2tpcFJlY29ubmVjdClyZXR1cm47ZGVidWcoXCJhdHRlbXB0aW5nIHJlY29ubmVjdFwiKTtzZWxmLmVtaXRBbGwoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLHNlbGYuYmFja29mZi5hdHRlbXB0cyk7c2VsZi5lbWl0QWxsKFwicmVjb25uZWN0aW5nXCIsc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtpZihzZWxmLnNraXBSZWNvbm5lY3QpcmV0dXJuO3NlbGYub3BlbihmdW5jdGlvbihlcnIpe2lmKGVycil7ZGVidWcoXCJyZWNvbm5lY3QgYXR0ZW1wdCBlcnJvclwiKTtzZWxmLnJlY29ubmVjdGluZz1mYWxzZTtzZWxmLnJlY29ubmVjdCgpO3NlbGYuZW1pdEFsbChcInJlY29ubmVjdF9lcnJvclwiLGVyci5kYXRhKX1lbHNle2RlYnVnKFwicmVjb25uZWN0IHN1Y2Nlc3NcIik7c2VsZi5vbnJlY29ubmVjdCgpfX0pfSxkZWxheSk7dGhpcy5zdWJzLnB1c2goe2Rlc3Ryb3k6ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGltZXIpfX0pfX07TWFuYWdlci5wcm90b3R5cGUub25yZWNvbm5lY3Q9ZnVuY3Rpb24oKXt2YXIgYXR0ZW1wdD10aGlzLmJhY2tvZmYuYXR0ZW1wdHM7dGhpcy5yZWNvbm5lY3Rpbmc9ZmFsc2U7dGhpcy5iYWNrb2ZmLnJlc2V0KCk7dGhpcy51cGRhdGVTb2NrZXRJZHMoKTt0aGlzLmVtaXRBbGwoXCJyZWNvbm5lY3RcIixhdHRlbXB0KX19LHtcIi4vb25cIjozMyxcIi4vc29ja2V0XCI6MzQsYmFja28yOjM2LFwiY29tcG9uZW50LWJpbmRcIjozNyxcImNvbXBvbmVudC1lbWl0dGVyXCI6MzgsZGVidWc6MzksXCJlbmdpbmUuaW8tY2xpZW50XCI6MSxpbmRleG9mOjQyLFwic29ja2V0LmlvLXBhcnNlclwiOjQ3fV0sMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPW9uO2Z1bmN0aW9uIG9uKG9iaixldixmbil7b2JqLm9uKGV2LGZuKTtyZXR1cm57ZGVzdHJveTpmdW5jdGlvbigpe29iai5yZW1vdmVMaXN0ZW5lcihldixmbil9fX19LHt9XSwzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7dmFyIHBhcnNlcj1fZGVyZXFfKFwic29ja2V0LmlvLXBhcnNlclwiKTt2YXIgRW1pdHRlcj1fZGVyZXFfKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7dmFyIHRvQXJyYXk9X2RlcmVxXyhcInRvLWFycmF5XCIpO3ZhciBvbj1fZGVyZXFfKFwiLi9vblwiKTt2YXIgYmluZD1fZGVyZXFfKFwiY29tcG9uZW50LWJpbmRcIik7dmFyIGRlYnVnPV9kZXJlcV8oXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6c29ja2V0XCIpO3ZhciBoYXNCaW49X2RlcmVxXyhcImhhcy1iaW5hcnlcIik7bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cz1Tb2NrZXQ7dmFyIGV2ZW50cz17Y29ubmVjdDoxLGNvbm5lY3RfZXJyb3I6MSxjb25uZWN0X3RpbWVvdXQ6MSxjb25uZWN0aW5nOjEsZGlzY29ubmVjdDoxLGVycm9yOjEscmVjb25uZWN0OjEscmVjb25uZWN0X2F0dGVtcHQ6MSxyZWNvbm5lY3RfZmFpbGVkOjEscmVjb25uZWN0X2Vycm9yOjEscmVjb25uZWN0aW5nOjEscGluZzoxLHBvbmc6MX07dmFyIGVtaXQ9RW1pdHRlci5wcm90b3R5cGUuZW1pdDtmdW5jdGlvbiBTb2NrZXQoaW8sbnNwKXt0aGlzLmlvPWlvO3RoaXMubnNwPW5zcDt0aGlzLmpzb249dGhpczt0aGlzLmlkcz0wO3RoaXMuYWNrcz17fTt0aGlzLnJlY2VpdmVCdWZmZXI9W107dGhpcy5zZW5kQnVmZmVyPVtdO3RoaXMuY29ubmVjdGVkPWZhbHNlO3RoaXMuZGlzY29ubmVjdGVkPXRydWU7aWYodGhpcy5pby5hdXRvQ29ubmVjdCl0aGlzLm9wZW4oKX1FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1NvY2tldC5wcm90b3R5cGUuc3ViRXZlbnRzPWZ1bmN0aW9uKCl7aWYodGhpcy5zdWJzKXJldHVybjt2YXIgaW89dGhpcy5pbzt0aGlzLnN1YnM9W29uKGlvLFwib3BlblwiLGJpbmQodGhpcyxcIm9ub3BlblwiKSksb24oaW8sXCJwYWNrZXRcIixiaW5kKHRoaXMsXCJvbnBhY2tldFwiKSksb24oaW8sXCJjbG9zZVwiLGJpbmQodGhpcyxcIm9uY2xvc2VcIikpXX07U29ja2V0LnByb3RvdHlwZS5vcGVuPVNvY2tldC5wcm90b3R5cGUuY29ubmVjdD1mdW5jdGlvbigpe2lmKHRoaXMuY29ubmVjdGVkKXJldHVybiB0aGlzO3RoaXMuc3ViRXZlbnRzKCk7dGhpcy5pby5vcGVuKCk7aWYoXCJvcGVuXCI9PXRoaXMuaW8ucmVhZHlTdGF0ZSl0aGlzLm9ub3BlbigpO3RoaXMuZW1pdChcImNvbm5lY3RpbmdcIik7cmV0dXJuIHRoaXN9O1NvY2tldC5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbigpe3ZhciBhcmdzPXRvQXJyYXkoYXJndW1lbnRzKTthcmdzLnVuc2hpZnQoXCJtZXNzYWdlXCIpO3RoaXMuZW1pdC5hcHBseSh0aGlzLGFyZ3MpO3JldHVybiB0aGlzfTtTb2NrZXQucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZXYpe2lmKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldikpe2VtaXQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0aGlzfXZhciBhcmdzPXRvQXJyYXkoYXJndW1lbnRzKTt2YXIgcGFyc2VyVHlwZT1wYXJzZXIuRVZFTlQ7aWYoaGFzQmluKGFyZ3MpKXtwYXJzZXJUeXBlPXBhcnNlci5CSU5BUllfRVZFTlR9dmFyIHBhY2tldD17dHlwZTpwYXJzZXJUeXBlLGRhdGE6YXJnc307cGFja2V0Lm9wdGlvbnM9e307cGFja2V0Lm9wdGlvbnMuY29tcHJlc3M9IXRoaXMuZmxhZ3N8fGZhbHNlIT09dGhpcy5mbGFncy5jb21wcmVzcztpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoLTFdKXtkZWJ1ZyhcImVtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZFwiLHRoaXMuaWRzKTt0aGlzLmFja3NbdGhpcy5pZHNdPWFyZ3MucG9wKCk7cGFja2V0LmlkPXRoaXMuaWRzKyt9aWYodGhpcy5jb25uZWN0ZWQpe3RoaXMucGFja2V0KHBhY2tldCl9ZWxzZXt0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpfWRlbGV0ZSB0aGlzLmZsYWdzO3JldHVybiB0aGlzfTtTb2NrZXQucHJvdG90eXBlLnBhY2tldD1mdW5jdGlvbihwYWNrZXQpe3BhY2tldC5uc3A9dGhpcy5uc3A7dGhpcy5pby5wYWNrZXQocGFja2V0KX07U29ja2V0LnByb3RvdHlwZS5vbm9wZW49ZnVuY3Rpb24oKXtkZWJ1ZyhcInRyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZ1wiKTtpZihcIi9cIiE9dGhpcy5uc3Ape3RoaXMucGFja2V0KHt0eXBlOnBhcnNlci5DT05ORUNUfSl9fTtTb2NrZXQucHJvdG90eXBlLm9uY2xvc2U9ZnVuY3Rpb24ocmVhc29uKXtkZWJ1ZyhcImNsb3NlICglcylcIixyZWFzb24pO3RoaXMuY29ubmVjdGVkPWZhbHNlO3RoaXMuZGlzY29ubmVjdGVkPXRydWU7ZGVsZXRlIHRoaXMuaWQ7dGhpcy5lbWl0KFwiZGlzY29ubmVjdFwiLHJlYXNvbil9O1NvY2tldC5wcm90b3R5cGUub25wYWNrZXQ9ZnVuY3Rpb24ocGFja2V0KXtpZihwYWNrZXQubnNwIT10aGlzLm5zcClyZXR1cm47c3dpdGNoKHBhY2tldC50eXBlKXtjYXNlIHBhcnNlci5DT05ORUNUOnRoaXMub25jb25uZWN0KCk7YnJlYWs7Y2FzZSBwYXJzZXIuRVZFTlQ6dGhpcy5vbmV2ZW50KHBhY2tldCk7YnJlYWs7Y2FzZSBwYXJzZXIuQklOQVJZX0VWRU5UOnRoaXMub25ldmVudChwYWNrZXQpO2JyZWFrO2Nhc2UgcGFyc2VyLkFDSzp0aGlzLm9uYWNrKHBhY2tldCk7YnJlYWs7Y2FzZSBwYXJzZXIuQklOQVJZX0FDSzp0aGlzLm9uYWNrKHBhY2tldCk7YnJlYWs7Y2FzZSBwYXJzZXIuRElTQ09OTkVDVDp0aGlzLm9uZGlzY29ubmVjdCgpO2JyZWFrO2Nhc2UgcGFyc2VyLkVSUk9SOnRoaXMuZW1pdChcImVycm9yXCIscGFja2V0LmRhdGEpO2JyZWFrfX07U29ja2V0LnByb3RvdHlwZS5vbmV2ZW50PWZ1bmN0aW9uKHBhY2tldCl7dmFyIGFyZ3M9cGFja2V0LmRhdGF8fFtdO2RlYnVnKFwiZW1pdHRpbmcgZXZlbnQgJWpcIixhcmdzKTtpZihudWxsIT1wYWNrZXQuaWQpe2RlYnVnKFwiYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudFwiKTthcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSl9aWYodGhpcy5jb25uZWN0ZWQpe2VtaXQuYXBwbHkodGhpcyxhcmdzKX1lbHNle3RoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpfX07U29ja2V0LnByb3RvdHlwZS5hY2s9ZnVuY3Rpb24oaWQpe3ZhciBzZWxmPXRoaXM7dmFyIHNlbnQ9ZmFsc2U7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoc2VudClyZXR1cm47c2VudD10cnVlO3ZhciBhcmdzPXRvQXJyYXkoYXJndW1lbnRzKTtkZWJ1ZyhcInNlbmRpbmcgYWNrICVqXCIsYXJncyk7dmFyIHR5cGU9aGFzQmluKGFyZ3MpP3BhcnNlci5CSU5BUllfQUNLOnBhcnNlci5BQ0s7c2VsZi5wYWNrZXQoe3R5cGU6dHlwZSxpZDppZCxkYXRhOmFyZ3N9KX19O1NvY2tldC5wcm90b3R5cGUub25hY2s9ZnVuY3Rpb24ocGFja2V0KXt2YXIgYWNrPXRoaXMuYWNrc1twYWNrZXQuaWRdO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGFjayl7ZGVidWcoXCJjYWxsaW5nIGFjayAlcyB3aXRoICVqXCIscGFja2V0LmlkLHBhY2tldC5kYXRhKTthY2suYXBwbHkodGhpcyxwYWNrZXQuZGF0YSk7ZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdfWVsc2V7ZGVidWcoXCJiYWQgYWNrICVzXCIscGFja2V0LmlkKX19O1NvY2tldC5wcm90b3R5cGUub25jb25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5jb25uZWN0ZWQ9dHJ1ZTt0aGlzLmRpc2Nvbm5lY3RlZD1mYWxzZTt0aGlzLmVtaXQoXCJjb25uZWN0XCIpO3RoaXMuZW1pdEJ1ZmZlcmVkKCl9O1NvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkPWZ1bmN0aW9uKCl7dmFyIGk7Zm9yKGk9MDtpPHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7aSsrKXtlbWl0LmFwcGx5KHRoaXMsdGhpcy5yZWNlaXZlQnVmZmVyW2ldKX10aGlzLnJlY2VpdmVCdWZmZXI9W107Zm9yKGk9MDtpPHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7aSsrKXt0aGlzLnBhY2tldCh0aGlzLnNlbmRCdWZmZXJbaV0pfXRoaXMuc2VuZEJ1ZmZlcj1bXX07U29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3Q9ZnVuY3Rpb24oKXtkZWJ1ZyhcInNlcnZlciBkaXNjb25uZWN0ICglcylcIix0aGlzLm5zcCk7dGhpcy5kZXN0cm95KCk7dGhpcy5vbmNsb3NlKFwiaW8gc2VydmVyIGRpc2Nvbm5lY3RcIil9O1NvY2tldC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe2lmKHRoaXMuc3Vicyl7Zm9yKHZhciBpPTA7aTx0aGlzLnN1YnMubGVuZ3RoO2krKyl7dGhpcy5zdWJzW2ldLmRlc3Ryb3koKX10aGlzLnN1YnM9bnVsbH10aGlzLmlvLmRlc3Ryb3kodGhpcyl9O1NvY2tldC5wcm90b3R5cGUuY2xvc2U9U29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7aWYodGhpcy5jb25uZWN0ZWQpe2RlYnVnKFwicGVyZm9ybWluZyBkaXNjb25uZWN0ICglcylcIix0aGlzLm5zcCk7dGhpcy5wYWNrZXQoe3R5cGU6cGFyc2VyLkRJU0NPTk5FQ1R9KX10aGlzLmRlc3Ryb3koKTtpZih0aGlzLmNvbm5lY3RlZCl7dGhpcy5vbmNsb3NlKFwiaW8gY2xpZW50IGRpc2Nvbm5lY3RcIil9cmV0dXJuIHRoaXN9O1NvY2tldC5wcm90b3R5cGUuY29tcHJlc3M9ZnVuY3Rpb24oY29tcHJlc3Mpe3RoaXMuZmxhZ3M9dGhpcy5mbGFnc3x8e307dGhpcy5mbGFncy5jb21wcmVzcz1jb21wcmVzcztyZXR1cm4gdGhpc319LHtcIi4vb25cIjozMyxcImNvbXBvbmVudC1iaW5kXCI6MzcsXCJjb21wb25lbnQtZW1pdHRlclwiOjM4LGRlYnVnOjM5LFwiaGFzLWJpbmFyeVwiOjQxLFwic29ja2V0LmlvLXBhcnNlclwiOjQ3LFwidG8tYXJyYXlcIjo1MX1dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXt2YXIgcGFyc2V1cmk9X2RlcmVxXyhcInBhcnNldXJpXCIpO3ZhciBkZWJ1Zz1fZGVyZXFfKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tY2xpZW50OnVybFwiKTttb2R1bGUuZXhwb3J0cz11cmw7ZnVuY3Rpb24gdXJsKHVyaSxsb2Mpe3ZhciBvYmo9dXJpO3ZhciBsb2M9bG9jfHxnbG9iYWwubG9jYXRpb247aWYobnVsbD09dXJpKXVyaT1sb2MucHJvdG9jb2wrXCIvL1wiK2xvYy5ob3N0O2lmKFwic3RyaW5nXCI9PXR5cGVvZiB1cmkpe2lmKFwiL1wiPT11cmkuY2hhckF0KDApKXtpZihcIi9cIj09dXJpLmNoYXJBdCgxKSl7dXJpPWxvYy5wcm90b2NvbCt1cml9ZWxzZXt1cmk9bG9jLmhvc3QrdXJpfX1pZighL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKXtkZWJ1ZyhcInByb3RvY29sLWxlc3MgdXJsICVzXCIsdXJpKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgbG9jKXt1cmk9bG9jLnByb3RvY29sK1wiLy9cIit1cml9ZWxzZXt1cmk9XCJodHRwczovL1wiK3VyaX19ZGVidWcoXCJwYXJzZSAlc1wiLHVyaSk7b2JqPXBhcnNldXJpKHVyaSl9aWYoIW9iai5wb3J0KXtpZigvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSl7b2JqLnBvcnQ9XCI4MFwifWVsc2UgaWYoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKXtvYmoucG9ydD1cIjQ0M1wifX1vYmoucGF0aD1vYmoucGF0aHx8XCIvXCI7dmFyIGlwdjY9b2JqLmhvc3QuaW5kZXhPZihcIjpcIikhPT0tMTt2YXIgaG9zdD1pcHY2P1wiW1wiK29iai5ob3N0K1wiXVwiOm9iai5ob3N0O29iai5pZD1vYmoucHJvdG9jb2wrXCI6Ly9cIitob3N0K1wiOlwiK29iai5wb3J0O29iai5ocmVmPW9iai5wcm90b2NvbCtcIjovL1wiK2hvc3QrKGxvYyYmbG9jLnBvcnQ9PW9iai5wb3J0P1wiXCI6XCI6XCIrb2JqLnBvcnQpO3JldHVybiBvYmp9fSkuY2FsbCh0aGlzLHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIj9zZWxmOnR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIj9nbG9iYWw6e30pfSx7ZGVidWc6MzkscGFyc2V1cmk6NDV9XSwzNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9QmFja29mZjtmdW5jdGlvbiBCYWNrb2ZmKG9wdHMpe29wdHM9b3B0c3x8e307dGhpcy5tcz1vcHRzLm1pbnx8MTAwO3RoaXMubWF4PW9wdHMubWF4fHwxZTQ7dGhpcy5mYWN0b3I9b3B0cy5mYWN0b3J8fDI7dGhpcy5qaXR0ZXI9b3B0cy5qaXR0ZXI+MCYmb3B0cy5qaXR0ZXI8PTE/b3B0cy5qaXR0ZXI6MDt0aGlzLmF0dGVtcHRzPTB9QmFja29mZi5wcm90b3R5cGUuZHVyYXRpb249ZnVuY3Rpb24oKXt2YXIgbXM9dGhpcy5tcypNYXRoLnBvdyh0aGlzLmZhY3Rvcix0aGlzLmF0dGVtcHRzKyspO2lmKHRoaXMuaml0dGVyKXt2YXIgcmFuZD1NYXRoLnJhbmRvbSgpO3ZhciBkZXZpYXRpb249TWF0aC5mbG9vcihyYW5kKnRoaXMuaml0dGVyKm1zKTttcz0oTWF0aC5mbG9vcihyYW5kKjEwKSYxKT09MD9tcy1kZXZpYXRpb246bXMrZGV2aWF0aW9ufXJldHVybiBNYXRoLm1pbihtcyx0aGlzLm1heCl8MH07QmFja29mZi5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmF0dGVtcHRzPTB9O0JhY2tvZmYucHJvdG90eXBlLnNldE1pbj1mdW5jdGlvbihtaW4pe3RoaXMubXM9bWlufTtCYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXg9ZnVuY3Rpb24obWF4KXt0aGlzLm1heD1tYXh9O0JhY2tvZmYucHJvdG90eXBlLnNldEppdHRlcj1mdW5jdGlvbihqaXR0ZXIpe3RoaXMuaml0dGVyPWppdHRlcn19LHt9XSwzNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7dmFyIHNsaWNlPVtdLnNsaWNlO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG9iaixmbil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGZuKWZuPW9ialtmbl07aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZm4pdGhyb3cgbmV3IEVycm9yKFwiYmluZCgpIHJlcXVpcmVzIGEgZnVuY3Rpb25cIik7dmFyIGFyZ3M9c2xpY2UuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGZuLmFwcGx5KG9iaixhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKX19fSx7fV0sMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPUVtaXR0ZXI7ZnVuY3Rpb24gRW1pdHRlcihvYmope2lmKG9iailyZXR1cm4gbWl4aW4ob2JqKX1mdW5jdGlvbiBtaXhpbihvYmope2Zvcih2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKXtvYmpba2V5XT1FbWl0dGVyLnByb3RvdHlwZVtrZXldfXJldHVybiBvYmp9RW1pdHRlci5wcm90b3R5cGUub249RW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihldmVudCxmbil7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e307KHRoaXMuX2NhbGxiYWNrc1tcIiRcIitldmVudF09dGhpcy5fY2FsbGJhY2tzW1wiJFwiK2V2ZW50XXx8W10pLnB1c2goZm4pO3JldHVybiB0aGlzfTtFbWl0dGVyLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGV2ZW50LGZuKXtmdW5jdGlvbiBvbigpe3RoaXMub2ZmKGV2ZW50LG9uKTtmbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9b24uZm49Zm47dGhpcy5vbihldmVudCxvbik7cmV0dXJuIHRoaXN9O0VtaXR0ZXIucHJvdG90eXBlLm9mZj1FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihldmVudCxmbil7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e307aWYoMD09YXJndW1lbnRzLmxlbmd0aCl7dGhpcy5fY2FsbGJhY2tzPXt9O3JldHVybiB0aGlzfXZhciBjYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzW1wiJFwiK2V2ZW50XTtpZighY2FsbGJhY2tzKXJldHVybiB0aGlzO2lmKDE9PWFyZ3VtZW50cy5sZW5ndGgpe2RlbGV0ZSB0aGlzLl9jYWxsYmFja3NbXCIkXCIrZXZlbnRdO3JldHVybiB0aGlzfXZhciBjYjtmb3IodmFyIGk9MDtpPGNhbGxiYWNrcy5sZW5ndGg7aSsrKXtjYj1jYWxsYmFja3NbaV07aWYoY2I9PT1mbnx8Y2IuZm49PT1mbil7Y2FsbGJhY2tzLnNwbGljZShpLDEpO2JyZWFrfX1yZXR1cm4gdGhpc307RW1pdHRlci5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihldmVudCl7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e307dmFyIGFyZ3M9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc1tcIiRcIitldmVudF07aWYoY2FsbGJhY2tzKXtjYWxsYmFja3M9Y2FsbGJhY2tzLnNsaWNlKDApO2Zvcih2YXIgaT0wLGxlbj1jYWxsYmFja3MubGVuZ3RoO2k8bGVuOysraSl7Y2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsYXJncyl9fXJldHVybiB0aGlzfTtFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZXZlbnQpe3RoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9O3JldHVybiB0aGlzLl9jYWxsYmFja3NbXCIkXCIrZXZlbnRdfHxbXX07RW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzPWZ1bmN0aW9uKGV2ZW50KXtyZXR1cm4hIXRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGh9fSx7fV0sMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe2FyZ3VtZW50c1s0XVsxN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpfSx7XCIuL2RlYnVnXCI6NDAsZHVwOjE3fV0sNDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe2FyZ3VtZW50c1s0XVsxOF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpfSx7ZHVwOjE4LG1zOjQ0fV0sNDE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpeyhmdW5jdGlvbihnbG9iYWwpe3ZhciBpc0FycmF5PV9kZXJlcV8oXCJpc2FycmF5XCIpO21vZHVsZS5leHBvcnRzPWhhc0JpbmFyeTtmdW5jdGlvbiBoYXNCaW5hcnkoZGF0YSl7ZnVuY3Rpb24gX2hhc0JpbmFyeShvYmope2lmKCFvYmopcmV0dXJuIGZhbHNlO2lmKGdsb2JhbC5CdWZmZXImJmdsb2JhbC5CdWZmZXIuaXNCdWZmZXImJmdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKXx8Z2xvYmFsLkFycmF5QnVmZmVyJiZvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8Z2xvYmFsLkJsb2ImJm9iaiBpbnN0YW5jZW9mIEJsb2J8fGdsb2JhbC5GaWxlJiZvYmogaW5zdGFuY2VvZiBGaWxlKXtyZXR1cm4gdHJ1ZX1pZihpc0FycmF5KG9iaikpe2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspe2lmKF9oYXNCaW5hcnkob2JqW2ldKSl7cmV0dXJuIHRydWV9fX1lbHNlIGlmKG9iaiYmXCJvYmplY3RcIj09dHlwZW9mIG9iail7aWYob2JqLnRvSlNPTiYmXCJmdW5jdGlvblwiPT10eXBlb2Ygb2JqLnRvSlNPTil7b2JqPW9iai50b0pTT04oKX1mb3IodmFyIGtleSBpbiBvYmope2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosa2V5KSYmX2hhc0JpbmFyeShvYmpba2V5XSkpe3JldHVybiB0cnVlfX19cmV0dXJuIGZhbHNlfXJldHVybiBfaGFzQmluYXJ5KGRhdGEpfX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se2lzYXJyYXk6NDN9XSw0MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7YXJndW1lbnRzWzRdWzIzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cyl9LHtkdXA6MjN9XSw0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7YXJndW1lbnRzWzRdWzI0XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cyl9LHtkdXA6MjR9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7YXJndW1lbnRzWzRdWzI1XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cyl9LHtkdXA6MjV9XSw0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7YXJndW1lbnRzWzRdWzI4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cyl9LHtkdXA6Mjh9XSw0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKGdsb2JhbCl7dmFyIGlzQXJyYXk9X2RlcmVxXyhcImlzYXJyYXlcIik7dmFyIGlzQnVmPV9kZXJlcV8oXCIuL2lzLWJ1ZmZlclwiKTtleHBvcnRzLmRlY29uc3RydWN0UGFja2V0PWZ1bmN0aW9uKHBhY2tldCl7dmFyIGJ1ZmZlcnM9W107dmFyIHBhY2tldERhdGE9cGFja2V0LmRhdGE7ZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEpe2lmKCFkYXRhKXJldHVybiBkYXRhO2lmKGlzQnVmKGRhdGEpKXt2YXIgcGxhY2Vob2xkZXI9e19wbGFjZWhvbGRlcjp0cnVlLG51bTpidWZmZXJzLmxlbmd0aH07YnVmZmVycy5wdXNoKGRhdGEpO3JldHVybiBwbGFjZWhvbGRlcn1lbHNlIGlmKGlzQXJyYXkoZGF0YSkpe3ZhciBuZXdEYXRhPW5ldyBBcnJheShkYXRhLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxkYXRhLmxlbmd0aDtpKyspe25ld0RhdGFbaV09X2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0pfXJldHVybiBuZXdEYXRhfWVsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGRhdGEmJiEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKXt2YXIgbmV3RGF0YT17fTtmb3IodmFyIGtleSBpbiBkYXRhKXtuZXdEYXRhW2tleV09X2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSl9cmV0dXJuIG5ld0RhdGF9cmV0dXJuIGRhdGF9dmFyIHBhY2s9cGFja2V0O3BhY2suZGF0YT1fZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSk7cGFjay5hdHRhY2htZW50cz1idWZmZXJzLmxlbmd0aDtyZXR1cm57cGFja2V0OnBhY2ssYnVmZmVyczpidWZmZXJzfX07ZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldD1mdW5jdGlvbihwYWNrZXQsYnVmZmVycyl7dmFyIGN1clBsYWNlSG9sZGVyPTA7ZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEpe2lmKGRhdGEmJmRhdGEuX3BsYWNlaG9sZGVyKXt2YXIgYnVmPWJ1ZmZlcnNbZGF0YS5udW1dO3JldHVybiBidWZ9ZWxzZSBpZihpc0FycmF5KGRhdGEpKXtmb3IodmFyIGk9MDtpPGRhdGEubGVuZ3RoO2krKyl7ZGF0YVtpXT1fcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSl9cmV0dXJuIGRhdGF9ZWxzZSBpZihkYXRhJiZcIm9iamVjdFwiPT10eXBlb2YgZGF0YSl7Zm9yKHZhciBrZXkgaW4gZGF0YSl7ZGF0YVtrZXldPV9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0pfXJldHVybiBkYXRhfXJldHVybiBkYXRhfXBhY2tldC5kYXRhPV9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSk7cGFja2V0LmF0dGFjaG1lbnRzPXVuZGVmaW5lZDtyZXR1cm4gcGFja2V0fTtleHBvcnRzLnJlbW92ZUJsb2JzPWZ1bmN0aW9uKGRhdGEsY2FsbGJhY2spe2Z1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosY3VyS2V5LGNvbnRhaW5pbmdPYmplY3Qpe2lmKCFvYmopcmV0dXJuIG9iajtpZihnbG9iYWwuQmxvYiYmb2JqIGluc3RhbmNlb2YgQmxvYnx8Z2xvYmFsLkZpbGUmJm9iaiBpbnN0YW5jZW9mIEZpbGUpe3BlbmRpbmdCbG9icysrO3ZhciBmaWxlUmVhZGVyPW5ldyBGaWxlUmVhZGVyO2ZpbGVSZWFkZXIub25sb2FkPWZ1bmN0aW9uKCl7aWYoY29udGFpbmluZ09iamVjdCl7Y29udGFpbmluZ09iamVjdFtjdXJLZXldPXRoaXMucmVzdWx0fWVsc2V7YmxvYmxlc3NEYXRhPXRoaXMucmVzdWx0fWlmKCEtLXBlbmRpbmdCbG9icyl7Y2FsbGJhY2soYmxvYmxlc3NEYXRhKX19O2ZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKX1lbHNlIGlmKGlzQXJyYXkob2JqKSl7Zm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7X3JlbW92ZUJsb2JzKG9ialtpXSxpLG9iail9fWVsc2UgaWYob2JqJiZcIm9iamVjdFwiPT10eXBlb2Ygb2JqJiYhaXNCdWYob2JqKSl7Zm9yKHZhciBrZXkgaW4gb2JqKXtfcmVtb3ZlQmxvYnMob2JqW2tleV0sa2V5LG9iail9fX12YXIgcGVuZGluZ0Jsb2JzPTA7dmFyIGJsb2JsZXNzRGF0YT1kYXRhO19yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO2lmKCFwZW5kaW5nQmxvYnMpe2NhbGxiYWNrKGJsb2JsZXNzRGF0YSl9fX0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnt9KX0se1wiLi9pcy1idWZmZXJcIjo0OCxpc2FycmF5OjQzfV0sNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe3ZhciBkZWJ1Zz1fZGVyZXFfKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tcGFyc2VyXCIpO3ZhciBqc29uPV9kZXJlcV8oXCJqc29uM1wiKTt2YXIgaXNBcnJheT1fZGVyZXFfKFwiaXNhcnJheVwiKTt2YXIgRW1pdHRlcj1fZGVyZXFfKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7dmFyIGJpbmFyeT1fZGVyZXFfKFwiLi9iaW5hcnlcIik7dmFyIGlzQnVmPV9kZXJlcV8oXCIuL2lzLWJ1ZmZlclwiKTtleHBvcnRzLnByb3RvY29sPTQ7ZXhwb3J0cy50eXBlcz1bXCJDT05ORUNUXCIsXCJESVNDT05ORUNUXCIsXCJFVkVOVFwiLFwiQklOQVJZX0VWRU5UXCIsXCJBQ0tcIixcIkJJTkFSWV9BQ0tcIixcIkVSUk9SXCJdO2V4cG9ydHMuQ09OTkVDVD0wO2V4cG9ydHMuRElTQ09OTkVDVD0xO2V4cG9ydHMuRVZFTlQ9MjtleHBvcnRzLkFDSz0zO2V4cG9ydHMuRVJST1I9NDtleHBvcnRzLkJJTkFSWV9FVkVOVD01O2V4cG9ydHMuQklOQVJZX0FDSz02O2V4cG9ydHMuRW5jb2Rlcj1FbmNvZGVyO2V4cG9ydHMuRGVjb2Rlcj1EZWNvZGVyO2Z1bmN0aW9uIEVuY29kZXIoKXt9RW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKG9iaixjYWxsYmFjayl7ZGVidWcoXCJlbmNvZGluZyBwYWNrZXQgJWpcIixvYmopO2lmKGV4cG9ydHMuQklOQVJZX0VWRU5UPT1vYmoudHlwZXx8ZXhwb3J0cy5CSU5BUllfQUNLPT1vYmoudHlwZSl7ZW5jb2RlQXNCaW5hcnkob2JqLGNhbGxiYWNrKX1lbHNle3ZhciBlbmNvZGluZz1lbmNvZGVBc1N0cmluZyhvYmopO2NhbGxiYWNrKFtlbmNvZGluZ10pfX07ZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKXt2YXIgc3RyPVwiXCI7dmFyIG5zcD1mYWxzZTtzdHIrPW9iai50eXBlO2lmKGV4cG9ydHMuQklOQVJZX0VWRU5UPT1vYmoudHlwZXx8ZXhwb3J0cy5CSU5BUllfQUNLPT1vYmoudHlwZSl7c3RyKz1vYmouYXR0YWNobWVudHM7c3RyKz1cIi1cIn1pZihvYmoubnNwJiZcIi9cIiE9b2JqLm5zcCl7bnNwPXRydWU7c3RyKz1vYmoubnNwfWlmKG51bGwhPW9iai5pZCl7aWYobnNwKXtzdHIrPVwiLFwiO25zcD1mYWxzZX1zdHIrPW9iai5pZH1pZihudWxsIT1vYmouZGF0YSl7aWYobnNwKXN0cis9XCIsXCI7c3RyKz1qc29uLnN0cmluZ2lmeShvYmouZGF0YSl9ZGVidWcoXCJlbmNvZGVkICVqIGFzICVzXCIsb2JqLHN0cik7cmV0dXJuIHN0cn1mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosY2FsbGJhY2spe2Z1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKXt2YXIgZGVjb25zdHJ1Y3Rpb249YmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7dmFyIHBhY2s9ZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTt2YXIgYnVmZmVycz1kZWNvbnN0cnVjdGlvbi5idWZmZXJzO2J1ZmZlcnMudW5zaGlmdChwYWNrKTtjYWxsYmFjayhidWZmZXJzKX1iaW5hcnkucmVtb3ZlQmxvYnMob2JqLHdyaXRlRW5jb2RpbmcpfWZ1bmN0aW9uIERlY29kZXIoKXt0aGlzLnJlY29uc3RydWN0b3I9bnVsbH1FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtEZWNvZGVyLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24ob2JqKXt2YXIgcGFja2V0O2lmKFwic3RyaW5nXCI9PXR5cGVvZiBvYmope3BhY2tldD1kZWNvZGVTdHJpbmcob2JqKTtpZihleHBvcnRzLkJJTkFSWV9FVkVOVD09cGFja2V0LnR5cGV8fGV4cG9ydHMuQklOQVJZX0FDSz09cGFja2V0LnR5cGUpe3RoaXMucmVjb25zdHJ1Y3Rvcj1uZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO2lmKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHM9PT0wKXt0aGlzLmVtaXQoXCJkZWNvZGVkXCIscGFja2V0KX19ZWxzZXt0aGlzLmVtaXQoXCJkZWNvZGVkXCIscGFja2V0KX19ZWxzZSBpZihpc0J1ZihvYmopfHxvYmouYmFzZTY0KXtpZighdGhpcy5yZWNvbnN0cnVjdG9yKXt0aHJvdyBuZXcgRXJyb3IoXCJnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXRcIil9ZWxzZXtwYWNrZXQ9dGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7aWYocGFja2V0KXt0aGlzLnJlY29uc3RydWN0b3I9bnVsbDt0aGlzLmVtaXQoXCJkZWNvZGVkXCIscGFja2V0KX19fWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlOiBcIitvYmopfX07ZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cil7dmFyIHA9e307dmFyIGk9MDtwLnR5cGU9TnVtYmVyKHN0ci5jaGFyQXQoMCkpO2lmKG51bGw9PWV4cG9ydHMudHlwZXNbcC50eXBlXSlyZXR1cm4gZXJyb3IoKTtpZihleHBvcnRzLkJJTkFSWV9FVkVOVD09cC50eXBlfHxleHBvcnRzLkJJTkFSWV9BQ0s9PXAudHlwZSl7dmFyIGJ1Zj1cIlwiO3doaWxlKHN0ci5jaGFyQXQoKytpKSE9XCItXCIpe2J1Zis9c3RyLmNoYXJBdChpKTtpZihpPT1zdHIubGVuZ3RoKWJyZWFrfWlmKGJ1ZiE9TnVtYmVyKGJ1Zil8fHN0ci5jaGFyQXQoaSkhPVwiLVwiKXt0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGF0dGFjaG1lbnRzXCIpfXAuYXR0YWNobWVudHM9TnVtYmVyKGJ1Zil9aWYoXCIvXCI9PXN0ci5jaGFyQXQoaSsxKSl7cC5uc3A9XCJcIjt3aGlsZSgrK2kpe3ZhciBjPXN0ci5jaGFyQXQoaSk7aWYoXCIsXCI9PWMpYnJlYWs7cC5uc3ArPWM7aWYoaT09c3RyLmxlbmd0aClicmVha319ZWxzZXtwLm5zcD1cIi9cIn12YXIgbmV4dD1zdHIuY2hhckF0KGkrMSk7aWYoXCJcIiE9PW5leHQmJk51bWJlcihuZXh0KT09bmV4dCl7cC5pZD1cIlwiO3doaWxlKCsraSl7dmFyIGM9c3RyLmNoYXJBdChpKTtpZihudWxsPT1jfHxOdW1iZXIoYykhPWMpey0taTticmVha31wLmlkKz1zdHIuY2hhckF0KGkpO2lmKGk9PXN0ci5sZW5ndGgpYnJlYWt9cC5pZD1OdW1iZXIocC5pZCl9aWYoc3RyLmNoYXJBdCgrK2kpKXt0cnl7cC5kYXRhPWpzb24ucGFyc2Uoc3RyLnN1YnN0cihpKSl9Y2F0Y2goZSl7cmV0dXJuIGVycm9yKCl9fWRlYnVnKFwiZGVjb2RlZCAlcyBhcyAlalwiLHN0cixwKTtyZXR1cm4gcH1EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7aWYodGhpcy5yZWNvbnN0cnVjdG9yKXt0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpfX07ZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpe3RoaXMucmVjb25QYWNrPXBhY2tldDt0aGlzLmJ1ZmZlcnM9W119QmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGE9ZnVuY3Rpb24oYmluRGF0YSl7dGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7aWYodGhpcy5idWZmZXJzLmxlbmd0aD09dGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpe3ZhciBwYWNrZXQ9YmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLHRoaXMuYnVmZmVycyk7dGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7cmV0dXJuIHBhY2tldH1yZXR1cm4gbnVsbH07QmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbj1mdW5jdGlvbigpe3RoaXMucmVjb25QYWNrPW51bGw7dGhpcy5idWZmZXJzPVtdfTtmdW5jdGlvbiBlcnJvcihkYXRhKXtyZXR1cm57dHlwZTpleHBvcnRzLkVSUk9SLGRhdGE6XCJwYXJzZXIgZXJyb3JcIn19fSx7XCIuL2JpbmFyeVwiOjQ2LFwiLi9pcy1idWZmZXJcIjo0OCxcImNvbXBvbmVudC1lbWl0dGVyXCI6NDksZGVidWc6MzksaXNhcnJheTo0Myxqc29uMzo1MH1dLDQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24oZ2xvYmFsKXttb2R1bGUuZXhwb3J0cz1pc0J1ZjtmdW5jdGlvbiBpc0J1ZihvYmope3JldHVybiBnbG9iYWwuQnVmZmVyJiZnbG9iYWwuQnVmZmVyLmlzQnVmZmVyKG9iail8fGdsb2JhbC5BcnJheUJ1ZmZlciYmb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ9fSkuY2FsbCh0aGlzLHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIj9zZWxmOnR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIj9nbG9iYWw6e30pfSx7fV0sNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe2FyZ3VtZW50c1s0XVsxNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpfSx7ZHVwOjE1fV0sNTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpeyhmdW5jdGlvbihnbG9iYWwpeyhmdW5jdGlvbigpe3ZhciBpc0xvYWRlcj10eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kO3ZhciBvYmplY3RUeXBlcz17XCJmdW5jdGlvblwiOnRydWUsb2JqZWN0OnRydWV9O3ZhciBmcmVlRXhwb3J0cz1vYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10mJmV4cG9ydHMmJiFleHBvcnRzLm5vZGVUeXBlJiZleHBvcnRzO3ZhciByb290PW9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddJiZ3aW5kb3d8fHRoaXMsZnJlZUdsb2JhbD1mcmVlRXhwb3J0cyYmb2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0mJm1vZHVsZSYmIW1vZHVsZS5ub2RlVHlwZSYmdHlwZW9mIGdsb2JhbD09XCJvYmplY3RcIiYmZ2xvYmFsO2lmKGZyZWVHbG9iYWwmJihmcmVlR2xvYmFsW1wiZ2xvYmFsXCJdPT09ZnJlZUdsb2JhbHx8ZnJlZUdsb2JhbFtcIndpbmRvd1wiXT09PWZyZWVHbG9iYWx8fGZyZWVHbG9iYWxbXCJzZWxmXCJdPT09ZnJlZUdsb2JhbCkpe3Jvb3Q9ZnJlZUdsb2JhbH1mdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCxleHBvcnRzKXtjb250ZXh0fHwoY29udGV4dD1yb290W1wiT2JqZWN0XCJdKCkpO2V4cG9ydHN8fChleHBvcnRzPXJvb3RbXCJPYmplY3RcIl0oKSk7dmFyIE51bWJlcj1jb250ZXh0W1wiTnVtYmVyXCJdfHxyb290W1wiTnVtYmVyXCJdLFN0cmluZz1jb250ZXh0W1wiU3RyaW5nXCJdfHxyb290W1wiU3RyaW5nXCJdLE9iamVjdD1jb250ZXh0W1wiT2JqZWN0XCJdfHxyb290W1wiT2JqZWN0XCJdLERhdGU9Y29udGV4dFtcIkRhdGVcIl18fHJvb3RbXCJEYXRlXCJdLFN5bnRheEVycm9yPWNvbnRleHRbXCJTeW50YXhFcnJvclwiXXx8cm9vdFtcIlN5bnRheEVycm9yXCJdLFR5cGVFcnJvcj1jb250ZXh0W1wiVHlwZUVycm9yXCJdfHxyb290W1wiVHlwZUVycm9yXCJdLE1hdGg9Y29udGV4dFtcIk1hdGhcIl18fHJvb3RbXCJNYXRoXCJdLG5hdGl2ZUpTT049Y29udGV4dFtcIkpTT05cIl18fHJvb3RbXCJKU09OXCJdO2lmKHR5cGVvZiBuYXRpdmVKU09OPT1cIm9iamVjdFwiJiZuYXRpdmVKU09OKXtleHBvcnRzLnN0cmluZ2lmeT1uYXRpdmVKU09OLnN0cmluZ2lmeTtleHBvcnRzLnBhcnNlPW5hdGl2ZUpTT04ucGFyc2V9dmFyIG9iamVjdFByb3RvPU9iamVjdC5wcm90b3R5cGUsZ2V0Q2xhc3M9b2JqZWN0UHJvdG8udG9TdHJpbmcsaXNQcm9wZXJ0eSxmb3JFYWNoLHVuZGVmO3ZhciBpc0V4dGVuZGVkPW5ldyBEYXRlKC0weGM3ODJiNWI4MDBjZWMpO3RyeXtpc0V4dGVuZGVkPWlzRXh0ZW5kZWQuZ2V0VVRDRnVsbFllYXIoKT09LTEwOTI1MiYmaXNFeHRlbmRlZC5nZXRVVENNb250aCgpPT09MCYmaXNFeHRlbmRlZC5nZXRVVENEYXRlKCk9PT0xJiZpc0V4dGVuZGVkLmdldFVUQ0hvdXJzKCk9PTEwJiZpc0V4dGVuZGVkLmdldFVUQ01pbnV0ZXMoKT09MzcmJmlzRXh0ZW5kZWQuZ2V0VVRDU2Vjb25kcygpPT02JiZpc0V4dGVuZGVkLmdldFVUQ01pbGxpc2Vjb25kcygpPT03MDh9Y2F0Y2goZXhjZXB0aW9uKXt9ZnVuY3Rpb24gaGFzKG5hbWUpe2lmKGhhc1tuYW1lXSE9PXVuZGVmKXtyZXR1cm4gaGFzW25hbWVdfXZhciBpc1N1cHBvcnRlZDtpZihuYW1lPT1cImJ1Zy1zdHJpbmctY2hhci1pbmRleFwiKXtpc1N1cHBvcnRlZD1cImFcIlswXSE9XCJhXCJ9ZWxzZSBpZihuYW1lPT1cImpzb25cIil7aXNTdXBwb3J0ZWQ9aGFzKFwianNvbi1zdHJpbmdpZnlcIikmJmhhcyhcImpzb24tcGFyc2VcIil9ZWxzZXt2YXIgdmFsdWUsc2VyaWFsaXplZD0ne1wiYVwiOlsxLHRydWUsZmFsc2UsbnVsbCxcIlxcXFx1MDAwMFxcXFxiXFxcXG5cXFxcZlxcXFxyXFxcXHRcIl19JztpZihuYW1lPT1cImpzb24tc3RyaW5naWZ5XCIpe3ZhciBzdHJpbmdpZnk9ZXhwb3J0cy5zdHJpbmdpZnksc3RyaW5naWZ5U3VwcG9ydGVkPXR5cGVvZiBzdHJpbmdpZnk9PVwiZnVuY3Rpb25cIiYmaXNFeHRlbmRlZDtpZihzdHJpbmdpZnlTdXBwb3J0ZWQpeyh2YWx1ZT1mdW5jdGlvbigpe3JldHVybiAxfSkudG9KU09OPXZhbHVlO3RyeXtzdHJpbmdpZnlTdXBwb3J0ZWQ9c3RyaW5naWZ5KDApPT09XCIwXCImJnN0cmluZ2lmeShuZXcgTnVtYmVyKT09PVwiMFwiJiZzdHJpbmdpZnkobmV3IFN0cmluZyk9PSdcIlwiJyYmc3RyaW5naWZ5KGdldENsYXNzKT09PXVuZGVmJiZzdHJpbmdpZnkodW5kZWYpPT09dW5kZWYmJnN0cmluZ2lmeSgpPT09dW5kZWYmJnN0cmluZ2lmeSh2YWx1ZSk9PT1cIjFcIiYmc3RyaW5naWZ5KFt2YWx1ZV0pPT1cIlsxXVwiJiZzdHJpbmdpZnkoW3VuZGVmXSk9PVwiW251bGxdXCImJnN0cmluZ2lmeShudWxsKT09XCJudWxsXCImJnN0cmluZ2lmeShbdW5kZWYsZ2V0Q2xhc3MsbnVsbF0pPT1cIltudWxsLG51bGwsbnVsbF1cIiYmc3RyaW5naWZ5KHthOlt2YWx1ZSx0cnVlLGZhbHNlLG51bGwsXCJcXHgwMFxcYlxcblxcZlxcclx0XCJdfSk9PXNlcmlhbGl6ZWQmJnN0cmluZ2lmeShudWxsLHZhbHVlKT09PVwiMVwiJiZzdHJpbmdpZnkoWzEsMl0sbnVsbCwxKT09XCJbXFxuIDEsXFxuIDJcXG5dXCImJnN0cmluZ2lmeShuZXcgRGF0ZSgtODY0ZTEzKSk9PSdcIi0yNzE4MjEtMDQtMjBUMDA6MDA6MDAuMDAwWlwiJyYmc3RyaW5naWZ5KG5ldyBEYXRlKDg2NGUxMykpPT0nXCIrMjc1NzYwLTA5LTEzVDAwOjAwOjAwLjAwMFpcIicmJnN0cmluZ2lmeShuZXcgRGF0ZSgtNjIxOTg3NTUyZTUpKT09J1wiLTAwMDAwMS0wMS0wMVQwMDowMDowMC4wMDBaXCInJiZzdHJpbmdpZnkobmV3IERhdGUoLTEpKT09J1wiMTk2OS0xMi0zMVQyMzo1OTo1OS45OTlaXCInfWNhdGNoKGV4Y2VwdGlvbil7c3RyaW5naWZ5U3VwcG9ydGVkPWZhbHNlfX1pc1N1cHBvcnRlZD1zdHJpbmdpZnlTdXBwb3J0ZWR9aWYobmFtZT09XCJqc29uLXBhcnNlXCIpe3ZhciBwYXJzZT1leHBvcnRzLnBhcnNlO2lmKHR5cGVvZiBwYXJzZT09XCJmdW5jdGlvblwiKXt0cnl7aWYocGFyc2UoXCIwXCIpPT09MCYmIXBhcnNlKGZhbHNlKSl7dmFsdWU9cGFyc2Uoc2VyaWFsaXplZCk7dmFyIHBhcnNlU3VwcG9ydGVkPXZhbHVlW1wiYVwiXS5sZW5ndGg9PTUmJnZhbHVlW1wiYVwiXVswXT09PTE7aWYocGFyc2VTdXBwb3J0ZWQpe3RyeXtwYXJzZVN1cHBvcnRlZD0hcGFyc2UoJ1wiXHRcIicpfWNhdGNoKGV4Y2VwdGlvbil7fWlmKHBhcnNlU3VwcG9ydGVkKXt0cnl7cGFyc2VTdXBwb3J0ZWQ9cGFyc2UoXCIwMVwiKSE9PTF9Y2F0Y2goZXhjZXB0aW9uKXt9fWlmKHBhcnNlU3VwcG9ydGVkKXt0cnl7cGFyc2VTdXBwb3J0ZWQ9cGFyc2UoXCIxLlwiKSE9PTF9Y2F0Y2goZXhjZXB0aW9uKXt9fX19fWNhdGNoKGV4Y2VwdGlvbil7cGFyc2VTdXBwb3J0ZWQ9ZmFsc2V9fWlzU3VwcG9ydGVkPXBhcnNlU3VwcG9ydGVkfX1yZXR1cm4gaGFzW25hbWVdPSEhaXNTdXBwb3J0ZWR9aWYoIWhhcyhcImpzb25cIikpe3ZhciBmdW5jdGlvbkNsYXNzPVwiW29iamVjdCBGdW5jdGlvbl1cIixkYXRlQ2xhc3M9XCJbb2JqZWN0IERhdGVdXCIsbnVtYmVyQ2xhc3M9XCJbb2JqZWN0IE51bWJlcl1cIixzdHJpbmdDbGFzcz1cIltvYmplY3QgU3RyaW5nXVwiLGFycmF5Q2xhc3M9XCJbb2JqZWN0IEFycmF5XVwiLGJvb2xlYW5DbGFzcz1cIltvYmplY3QgQm9vbGVhbl1cIjt2YXIgY2hhckluZGV4QnVnZ3k9aGFzKFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpO2lmKCFpc0V4dGVuZGVkKXt2YXIgZmxvb3I9TWF0aC5mbG9vcjt2YXIgTW9udGhzPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdO3ZhciBnZXREYXk9ZnVuY3Rpb24oeWVhcixtb250aCl7cmV0dXJuIE1vbnRoc1ttb250aF0rMzY1Kih5ZWFyLTE5NzApK2Zsb29yKCh5ZWFyLTE5NjkrKG1vbnRoPSsobW9udGg+MSkpKS80KS1mbG9vcigoeWVhci0xOTAxK21vbnRoKS8xMDApK2Zsb29yKCh5ZWFyLTE2MDErbW9udGgpLzQwMCl9fWlmKCEoaXNQcm9wZXJ0eT1vYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eSkpe2lzUHJvcGVydHk9ZnVuY3Rpb24ocHJvcGVydHkpe3ZhciBtZW1iZXJzPXt9LGNvbnN0cnVjdG9yO2lmKChtZW1iZXJzLl9fcHJvdG9fXz1udWxsLG1lbWJlcnMuX19wcm90b19fPXt0b1N0cmluZzoxfSxtZW1iZXJzKS50b1N0cmluZyE9Z2V0Q2xhc3Mpe2lzUHJvcGVydHk9ZnVuY3Rpb24ocHJvcGVydHkpe3ZhciBvcmlnaW5hbD10aGlzLl9fcHJvdG9fXyxyZXN1bHQ9cHJvcGVydHkgaW4odGhpcy5fX3Byb3RvX189bnVsbCx0aGlzKTt0aGlzLl9fcHJvdG9fXz1vcmlnaW5hbDtyZXR1cm4gcmVzdWx0fX1lbHNle2NvbnN0cnVjdG9yPW1lbWJlcnMuY29uc3RydWN0b3I7aXNQcm9wZXJ0eT1mdW5jdGlvbihwcm9wZXJ0eSl7dmFyIHBhcmVudD0odGhpcy5jb25zdHJ1Y3Rvcnx8Y29uc3RydWN0b3IpLnByb3RvdHlwZTtyZXR1cm4gcHJvcGVydHkgaW4gdGhpcyYmIShwcm9wZXJ0eSBpbiBwYXJlbnQmJnRoaXNbcHJvcGVydHldPT09cGFyZW50W3Byb3BlcnR5XSl9fW1lbWJlcnM9bnVsbDtyZXR1cm4gaXNQcm9wZXJ0eS5jYWxsKHRoaXMscHJvcGVydHkpfX1mb3JFYWNoPWZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayl7dmFyIHNpemU9MCxQcm9wZXJ0aWVzLG1lbWJlcnMscHJvcGVydHk7KFByb3BlcnRpZXM9ZnVuY3Rpb24oKXt0aGlzLnZhbHVlT2Y9MH0pLnByb3RvdHlwZS52YWx1ZU9mPTA7bWVtYmVycz1uZXcgUHJvcGVydGllcztmb3IocHJvcGVydHkgaW4gbWVtYmVycyl7aWYoaXNQcm9wZXJ0eS5jYWxsKG1lbWJlcnMscHJvcGVydHkpKXtzaXplKyt9fVByb3BlcnRpZXM9bWVtYmVycz1udWxsO2lmKCFzaXplKXttZW1iZXJzPVtcInZhbHVlT2ZcIixcInRvU3RyaW5nXCIsXCJ0b0xvY2FsZVN0cmluZ1wiLFwicHJvcGVydHlJc0VudW1lcmFibGVcIixcImlzUHJvdG90eXBlT2ZcIixcImhhc093blByb3BlcnR5XCIsXCJjb25zdHJ1Y3RvclwiXTtmb3JFYWNoPWZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayl7dmFyIGlzRnVuY3Rpb249Z2V0Q2xhc3MuY2FsbChvYmplY3QpPT1mdW5jdGlvbkNsYXNzLHByb3BlcnR5LGxlbmd0aDt2YXIgaGFzUHJvcGVydHk9IWlzRnVuY3Rpb24mJnR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IhPVwiZnVuY3Rpb25cIiYmb2JqZWN0VHlwZXNbdHlwZW9mIG9iamVjdC5oYXNPd25Qcm9wZXJ0eV0mJm9iamVjdC5oYXNPd25Qcm9wZXJ0eXx8aXNQcm9wZXJ0eTtmb3IocHJvcGVydHkgaW4gb2JqZWN0KXtpZighKGlzRnVuY3Rpb24mJnByb3BlcnR5PT1cInByb3RvdHlwZVwiKSYmaGFzUHJvcGVydHkuY2FsbChvYmplY3QscHJvcGVydHkpKXtjYWxsYmFjayhwcm9wZXJ0eSl9fWZvcihsZW5ndGg9bWVtYmVycy5sZW5ndGg7cHJvcGVydHk9bWVtYmVyc1stLWxlbmd0aF07aGFzUHJvcGVydHkuY2FsbChvYmplY3QscHJvcGVydHkpJiZjYWxsYmFjayhwcm9wZXJ0eSkpO319ZWxzZSBpZihzaXplPT0yKXtmb3JFYWNoPWZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayl7dmFyIG1lbWJlcnM9e30saXNGdW5jdGlvbj1nZXRDbGFzcy5jYWxsKG9iamVjdCk9PWZ1bmN0aW9uQ2xhc3MscHJvcGVydHk7Zm9yKHByb3BlcnR5IGluIG9iamVjdCl7aWYoIShpc0Z1bmN0aW9uJiZwcm9wZXJ0eT09XCJwcm90b3R5cGVcIikmJiFpc1Byb3BlcnR5LmNhbGwobWVtYmVycyxwcm9wZXJ0eSkmJihtZW1iZXJzW3Byb3BlcnR5XT0xKSYmaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCxwcm9wZXJ0eSkpe2NhbGxiYWNrKHByb3BlcnR5KX19fX1lbHNle2ZvckVhY2g9ZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrKXt2YXIgaXNGdW5jdGlvbj1nZXRDbGFzcy5jYWxsKG9iamVjdCk9PWZ1bmN0aW9uQ2xhc3MscHJvcGVydHksaXNDb25zdHJ1Y3Rvcjtmb3IocHJvcGVydHkgaW4gb2JqZWN0KXtpZighKGlzRnVuY3Rpb24mJnByb3BlcnR5PT1cInByb3RvdHlwZVwiKSYmaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCxwcm9wZXJ0eSkmJiEoaXNDb25zdHJ1Y3Rvcj1wcm9wZXJ0eT09PVwiY29uc3RydWN0b3JcIikpe2NhbGxiYWNrKHByb3BlcnR5KX19aWYoaXNDb25zdHJ1Y3Rvcnx8aXNQcm9wZXJ0eS5jYWxsKG9iamVjdCxwcm9wZXJ0eT1cImNvbnN0cnVjdG9yXCIpKXtjYWxsYmFjayhwcm9wZXJ0eSl9fX1yZXR1cm4gZm9yRWFjaChvYmplY3QsY2FsbGJhY2spfTtpZighaGFzKFwianNvbi1zdHJpbmdpZnlcIikpe3ZhciBFc2NhcGVzPXs5MjpcIlxcXFxcXFxcXCIsMzQ6J1xcXFxcIicsODpcIlxcXFxiXCIsMTI6XCJcXFxcZlwiLDEwOlwiXFxcXG5cIiwxMzpcIlxcXFxyXCIsOTpcIlxcXFx0XCJ9O3ZhciBsZWFkaW5nWmVyb2VzPVwiMDAwMDAwXCI7dmFyIHRvUGFkZGVkU3RyaW5nPWZ1bmN0aW9uKHdpZHRoLHZhbHVlKXtyZXR1cm4obGVhZGluZ1plcm9lcysodmFsdWV8fDApKS5zbGljZSgtd2lkdGgpfTt2YXIgdW5pY29kZVByZWZpeD1cIlxcXFx1MDBcIjt2YXIgcXVvdGU9ZnVuY3Rpb24odmFsdWUpe3ZhciByZXN1bHQ9J1wiJyxpbmRleD0wLGxlbmd0aD12YWx1ZS5sZW5ndGgsdXNlQ2hhckluZGV4PSFjaGFySW5kZXhCdWdneXx8bGVuZ3RoPjEwO3ZhciBzeW1ib2xzPXVzZUNoYXJJbmRleCYmKGNoYXJJbmRleEJ1Z2d5P3ZhbHVlLnNwbGl0KFwiXCIpOnZhbHVlKTtmb3IoO2luZGV4PGxlbmd0aDtpbmRleCsrKXt2YXIgY2hhckNvZGU9dmFsdWUuY2hhckNvZGVBdChpbmRleCk7c3dpdGNoKGNoYXJDb2RlKXtjYXNlIDg6Y2FzZSA5OmNhc2UgMTA6Y2FzZSAxMjpjYXNlIDEzOmNhc2UgMzQ6Y2FzZSA5MjpyZXN1bHQrPUVzY2FwZXNbY2hhckNvZGVdO2JyZWFrO2RlZmF1bHQ6aWYoY2hhckNvZGU8MzIpe3Jlc3VsdCs9dW5pY29kZVByZWZpeCt0b1BhZGRlZFN0cmluZygyLGNoYXJDb2RlLnRvU3RyaW5nKDE2KSk7YnJlYWt9cmVzdWx0Kz11c2VDaGFySW5kZXg/c3ltYm9sc1tpbmRleF06dmFsdWUuY2hhckF0KGluZGV4KX19cmV0dXJuIHJlc3VsdCsnXCInfTt2YXIgc2VyaWFsaXplPWZ1bmN0aW9uKHByb3BlcnR5LG9iamVjdCxjYWxsYmFjayxwcm9wZXJ0aWVzLHdoaXRlc3BhY2UsaW5kZW50YXRpb24sc3RhY2spe3ZhciB2YWx1ZSxjbGFzc05hbWUseWVhcixtb250aCxkYXRlLHRpbWUsaG91cnMsbWludXRlcyxzZWNvbmRzLG1pbGxpc2Vjb25kcyxyZXN1bHRzLGVsZW1lbnQsaW5kZXgsbGVuZ3RoLHByZWZpeCxyZXN1bHQ7dHJ5e3ZhbHVlPW9iamVjdFtwcm9wZXJ0eV19Y2F0Y2goZXhjZXB0aW9uKXt9aWYodHlwZW9mIHZhbHVlPT1cIm9iamVjdFwiJiZ2YWx1ZSl7Y2xhc3NOYW1lPWdldENsYXNzLmNhbGwodmFsdWUpO2lmKGNsYXNzTmFtZT09ZGF0ZUNsYXNzJiYhaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLFwidG9KU09OXCIpKXtpZih2YWx1ZT4tMS8wJiZ2YWx1ZTwxLzApe2lmKGdldERheSl7ZGF0ZT1mbG9vcih2YWx1ZS84NjRlNSk7Zm9yKHllYXI9Zmxvb3IoZGF0ZS8zNjUuMjQyNSkrMTk3MC0xO2dldERheSh5ZWFyKzEsMCk8PWRhdGU7eWVhcisrKTtmb3IobW9udGg9Zmxvb3IoKGRhdGUtZ2V0RGF5KHllYXIsMCkpLzMwLjQyKTtnZXREYXkoeWVhcixtb250aCsxKTw9ZGF0ZTttb250aCsrKTtkYXRlPTErZGF0ZS1nZXREYXkoeWVhcixtb250aCk7dGltZT0odmFsdWUlODY0ZTUrODY0ZTUpJTg2NGU1O2hvdXJzPWZsb29yKHRpbWUvMzZlNSklMjQ7bWludXRlcz1mbG9vcih0aW1lLzZlNCklNjA7c2Vjb25kcz1mbG9vcih0aW1lLzFlMyklNjA7bWlsbGlzZWNvbmRzPXRpbWUlMWUzfWVsc2V7eWVhcj12YWx1ZS5nZXRVVENGdWxsWWVhcigpO21vbnRoPXZhbHVlLmdldFVUQ01vbnRoKCk7ZGF0ZT12YWx1ZS5nZXRVVENEYXRlKCk7aG91cnM9dmFsdWUuZ2V0VVRDSG91cnMoKTttaW51dGVzPXZhbHVlLmdldFVUQ01pbnV0ZXMoKTtzZWNvbmRzPXZhbHVlLmdldFVUQ1NlY29uZHMoKTttaWxsaXNlY29uZHM9dmFsdWUuZ2V0VVRDTWlsbGlzZWNvbmRzKCl9dmFsdWU9KHllYXI8PTB8fHllYXI+PTFlND8oeWVhcjwwP1wiLVwiOlwiK1wiKSt0b1BhZGRlZFN0cmluZyg2LHllYXI8MD8teWVhcjp5ZWFyKTp0b1BhZGRlZFN0cmluZyg0LHllYXIpKStcIi1cIit0b1BhZGRlZFN0cmluZygyLG1vbnRoKzEpK1wiLVwiK3RvUGFkZGVkU3RyaW5nKDIsZGF0ZSkrXCJUXCIrdG9QYWRkZWRTdHJpbmcoMixob3VycykrXCI6XCIrdG9QYWRkZWRTdHJpbmcoMixtaW51dGVzKStcIjpcIit0b1BhZGRlZFN0cmluZygyLHNlY29uZHMpK1wiLlwiK3RvUGFkZGVkU3RyaW5nKDMsbWlsbGlzZWNvbmRzKStcIlpcIn1lbHNle3ZhbHVlPW51bGx9fWVsc2UgaWYodHlwZW9mIHZhbHVlLnRvSlNPTj09XCJmdW5jdGlvblwiJiYoY2xhc3NOYW1lIT1udW1iZXJDbGFzcyYmY2xhc3NOYW1lIT1zdHJpbmdDbGFzcyYmY2xhc3NOYW1lIT1hcnJheUNsYXNzfHxpc1Byb3BlcnR5LmNhbGwodmFsdWUsXCJ0b0pTT05cIikpKXt2YWx1ZT12YWx1ZS50b0pTT04ocHJvcGVydHkpfX1pZihjYWxsYmFjayl7dmFsdWU9Y2FsbGJhY2suY2FsbChvYmplY3QscHJvcGVydHksdmFsdWUpfWlmKHZhbHVlPT09bnVsbCl7cmV0dXJuXCJudWxsXCJ9Y2xhc3NOYW1lPWdldENsYXNzLmNhbGwodmFsdWUpO2lmKGNsYXNzTmFtZT09Ym9vbGVhbkNsYXNzKXtyZXR1cm5cIlwiK3ZhbHVlfWVsc2UgaWYoY2xhc3NOYW1lPT1udW1iZXJDbGFzcyl7cmV0dXJuIHZhbHVlPi0xLzAmJnZhbHVlPDEvMD9cIlwiK3ZhbHVlOlwibnVsbFwifWVsc2UgaWYoY2xhc3NOYW1lPT1zdHJpbmdDbGFzcyl7cmV0dXJuIHF1b3RlKFwiXCIrdmFsdWUpfWlmKHR5cGVvZiB2YWx1ZT09XCJvYmplY3RcIil7Zm9yKGxlbmd0aD1zdGFjay5sZW5ndGg7bGVuZ3RoLS07KXtpZihzdGFja1tsZW5ndGhdPT09dmFsdWUpe3Rocm93IFR5cGVFcnJvcigpfX1zdGFjay5wdXNoKHZhbHVlKTtyZXN1bHRzPVtdO3ByZWZpeD1pbmRlbnRhdGlvbjtpbmRlbnRhdGlvbis9d2hpdGVzcGFjZTtpZihjbGFzc05hbWU9PWFycmF5Q2xhc3Mpe2ZvcihpbmRleD0wLGxlbmd0aD12YWx1ZS5sZW5ndGg7aW5kZXg8bGVuZ3RoO2luZGV4Kyspe2VsZW1lbnQ9c2VyaWFsaXplKGluZGV4LHZhbHVlLGNhbGxiYWNrLHByb3BlcnRpZXMsd2hpdGVzcGFjZSxpbmRlbnRhdGlvbixzdGFjayk7cmVzdWx0cy5wdXNoKGVsZW1lbnQ9PT11bmRlZj9cIm51bGxcIjplbGVtZW50KX1yZXN1bHQ9cmVzdWx0cy5sZW5ndGg/d2hpdGVzcGFjZT9cIltcXG5cIitpbmRlbnRhdGlvbityZXN1bHRzLmpvaW4oXCIsXFxuXCIraW5kZW50YXRpb24pK1wiXFxuXCIrcHJlZml4K1wiXVwiOlwiW1wiK3Jlc3VsdHMuam9pbihcIixcIikrXCJdXCI6XCJbXVwifWVsc2V7Zm9yRWFjaChwcm9wZXJ0aWVzfHx2YWx1ZSxmdW5jdGlvbihwcm9wZXJ0eSl7dmFyIGVsZW1lbnQ9c2VyaWFsaXplKHByb3BlcnR5LHZhbHVlLGNhbGxiYWNrLHByb3BlcnRpZXMsd2hpdGVzcGFjZSxpbmRlbnRhdGlvbixzdGFjayk7aWYoZWxlbWVudCE9PXVuZGVmKXtyZXN1bHRzLnB1c2gocXVvdGUocHJvcGVydHkpK1wiOlwiKyh3aGl0ZXNwYWNlP1wiIFwiOlwiXCIpK2VsZW1lbnQpfX0pO3Jlc3VsdD1yZXN1bHRzLmxlbmd0aD93aGl0ZXNwYWNlP1wie1xcblwiK2luZGVudGF0aW9uK3Jlc3VsdHMuam9pbihcIixcXG5cIitpbmRlbnRhdGlvbikrXCJcXG5cIitwcmVmaXgrXCJ9XCI6XCJ7XCIrcmVzdWx0cy5qb2luKFwiLFwiKStcIn1cIjpcInt9XCJ9c3RhY2sucG9wKCk7cmV0dXJuIHJlc3VsdH19O2V4cG9ydHMuc3RyaW5naWZ5PWZ1bmN0aW9uKHNvdXJjZSxmaWx0ZXIsd2lkdGgpe3ZhciB3aGl0ZXNwYWNlLGNhbGxiYWNrLHByb3BlcnRpZXMsY2xhc3NOYW1lO2lmKG9iamVjdFR5cGVzW3R5cGVvZiBmaWx0ZXJdJiZmaWx0ZXIpe2lmKChjbGFzc05hbWU9Z2V0Q2xhc3MuY2FsbChmaWx0ZXIpKT09ZnVuY3Rpb25DbGFzcyl7Y2FsbGJhY2s9ZmlsdGVyfWVsc2UgaWYoY2xhc3NOYW1lPT1hcnJheUNsYXNzKXtwcm9wZXJ0aWVzPXt9O2Zvcih2YXIgaW5kZXg9MCxsZW5ndGg9ZmlsdGVyLmxlbmd0aCx2YWx1ZTtpbmRleDxsZW5ndGg7dmFsdWU9ZmlsdGVyW2luZGV4KytdLChjbGFzc05hbWU9Z2V0Q2xhc3MuY2FsbCh2YWx1ZSksY2xhc3NOYW1lPT1zdHJpbmdDbGFzc3x8Y2xhc3NOYW1lPT1udW1iZXJDbGFzcykmJihwcm9wZXJ0aWVzW3ZhbHVlXT0xKSk7fX1pZih3aWR0aCl7aWYoKGNsYXNzTmFtZT1nZXRDbGFzcy5jYWxsKHdpZHRoKSk9PW51bWJlckNsYXNzKXtpZigod2lkdGgtPXdpZHRoJTEpPjApe2Zvcih3aGl0ZXNwYWNlPVwiXCIsd2lkdGg+MTAmJih3aWR0aD0xMCk7d2hpdGVzcGFjZS5sZW5ndGg8d2lkdGg7d2hpdGVzcGFjZSs9XCIgXCIpO319ZWxzZSBpZihjbGFzc05hbWU9PXN0cmluZ0NsYXNzKXt3aGl0ZXNwYWNlPXdpZHRoLmxlbmd0aDw9MTA/d2lkdGg6d2lkdGguc2xpY2UoMCwxMCl9fXJldHVybiBzZXJpYWxpemUoXCJcIiwodmFsdWU9e30sdmFsdWVbXCJcIl09c291cmNlLHZhbHVlKSxjYWxsYmFjayxwcm9wZXJ0aWVzLHdoaXRlc3BhY2UsXCJcIixbXSl9fWlmKCFoYXMoXCJqc29uLXBhcnNlXCIpKXt2YXIgZnJvbUNoYXJDb2RlPVN0cmluZy5mcm9tQ2hhckNvZGU7dmFyIFVuZXNjYXBlcz17OTI6XCJcXFxcXCIsMzQ6J1wiJyw0NzpcIi9cIiw5ODpcIlxcYlwiLDExNjpcIlx0XCIsMTEwOlwiXFxuXCIsMTAyOlwiXFxmXCIsMTE0OlwiXFxyXCJ9O3ZhciBJbmRleCxTb3VyY2U7dmFyIGFib3J0PWZ1bmN0aW9uKCl7SW5kZXg9U291cmNlPW51bGw7dGhyb3cgU3ludGF4RXJyb3IoKX07dmFyIGxleD1mdW5jdGlvbigpe3ZhciBzb3VyY2U9U291cmNlLGxlbmd0aD1zb3VyY2UubGVuZ3RoLHZhbHVlLGJlZ2luLHBvc2l0aW9uLGlzU2lnbmVkLGNoYXJDb2RlO3doaWxlKEluZGV4PGxlbmd0aCl7Y2hhckNvZGU9c291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO3N3aXRjaChjaGFyQ29kZSl7Y2FzZSA5OmNhc2UgMTA6Y2FzZSAxMzpjYXNlIDMyOkluZGV4Kys7YnJlYWs7Y2FzZSAxMjM6Y2FzZSAxMjU6Y2FzZSA5MTpjYXNlIDkzOmNhc2UgNTg6Y2FzZSA0NDp2YWx1ZT1jaGFySW5kZXhCdWdneT9zb3VyY2UuY2hhckF0KEluZGV4KTpzb3VyY2VbSW5kZXhdO0luZGV4Kys7cmV0dXJuIHZhbHVlO2Nhc2UgMzQ6Zm9yKHZhbHVlPVwiQFwiLEluZGV4Kys7SW5kZXg8bGVuZ3RoOyl7Y2hhckNvZGU9c291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO2lmKGNoYXJDb2RlPDMyKXthYm9ydCgpfWVsc2UgaWYoY2hhckNvZGU9PTkyKXtjaGFyQ29kZT1zb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtzd2l0Y2goY2hhckNvZGUpe2Nhc2UgOTI6Y2FzZSAzNDpjYXNlIDQ3OmNhc2UgOTg6Y2FzZSAxMTY6Y2FzZSAxMTA6Y2FzZSAxMDI6Y2FzZSAxMTQ6dmFsdWUrPVVuZXNjYXBlc1tjaGFyQ29kZV07SW5kZXgrKzticmVhaztjYXNlIDExNzpiZWdpbj0rK0luZGV4O2Zvcihwb3NpdGlvbj1JbmRleCs0O0luZGV4PHBvc2l0aW9uO0luZGV4Kyspe2NoYXJDb2RlPXNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtpZighKGNoYXJDb2RlPj00OCYmY2hhckNvZGU8PTU3fHxjaGFyQ29kZT49OTcmJmNoYXJDb2RlPD0xMDJ8fGNoYXJDb2RlPj02NSYmY2hhckNvZGU8PTcwKSl7YWJvcnQoKX19dmFsdWUrPWZyb21DaGFyQ29kZShcIjB4XCIrc291cmNlLnNsaWNlKGJlZ2luLEluZGV4KSk7YnJlYWs7ZGVmYXVsdDphYm9ydCgpfX1lbHNle2lmKGNoYXJDb2RlPT0zNCl7YnJlYWt9Y2hhckNvZGU9c291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO2JlZ2luPUluZGV4O3doaWxlKGNoYXJDb2RlPj0zMiYmY2hhckNvZGUhPTkyJiZjaGFyQ29kZSE9MzQpe2NoYXJDb2RlPXNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpfXZhbHVlKz1zb3VyY2Uuc2xpY2UoYmVnaW4sSW5kZXgpfX1pZihzb3VyY2UuY2hhckNvZGVBdChJbmRleCk9PTM0KXtJbmRleCsrO3JldHVybiB2YWx1ZX1hYm9ydCgpO2RlZmF1bHQ6YmVnaW49SW5kZXg7aWYoY2hhckNvZGU9PTQ1KXtpc1NpZ25lZD10cnVlO2NoYXJDb2RlPXNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpfWlmKGNoYXJDb2RlPj00OCYmY2hhckNvZGU8PTU3KXtpZihjaGFyQ29kZT09NDgmJihjaGFyQ29kZT1zb3VyY2UuY2hhckNvZGVBdChJbmRleCsxKSxjaGFyQ29kZT49NDgmJmNoYXJDb2RlPD01Nykpe2Fib3J0KCl9aXNTaWduZWQ9ZmFsc2U7Zm9yKDtJbmRleDxsZW5ndGgmJihjaGFyQ29kZT1zb3VyY2UuY2hhckNvZGVBdChJbmRleCksY2hhckNvZGU+PTQ4JiZjaGFyQ29kZTw9NTcpO0luZGV4KyspO2lmKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KT09NDYpe3Bvc2l0aW9uPSsrSW5kZXg7Zm9yKDtwb3NpdGlvbjxsZW5ndGgmJihjaGFyQ29kZT1zb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbiksY2hhckNvZGU+PTQ4JiZjaGFyQ29kZTw9NTcpO3Bvc2l0aW9uKyspO2lmKHBvc2l0aW9uPT1JbmRleCl7YWJvcnQoKX1JbmRleD1wb3NpdGlvbn1jaGFyQ29kZT1zb3VyY2UuY2hhckNvZGVBdChJbmRleCk7aWYoY2hhckNvZGU9PTEwMXx8Y2hhckNvZGU9PTY5KXtjaGFyQ29kZT1zb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtpZihjaGFyQ29kZT09NDN8fGNoYXJDb2RlPT00NSl7SW5kZXgrK31mb3IocG9zaXRpb249SW5kZXg7cG9zaXRpb248bGVuZ3RoJiYoY2hhckNvZGU9c291cmNlLmNoYXJDb2RlQXQocG9zaXRpb24pLGNoYXJDb2RlPj00OCYmY2hhckNvZGU8PTU3KTtwb3NpdGlvbisrKTtpZihwb3NpdGlvbj09SW5kZXgpe2Fib3J0KCl9SW5kZXg9cG9zaXRpb259cmV0dXJuK3NvdXJjZS5zbGljZShiZWdpbixJbmRleCl9aWYoaXNTaWduZWQpe2Fib3J0KCl9aWYoc291cmNlLnNsaWNlKEluZGV4LEluZGV4KzQpPT1cInRydWVcIil7SW5kZXgrPTQ7cmV0dXJuIHRydWV9ZWxzZSBpZihzb3VyY2Uuc2xpY2UoSW5kZXgsSW5kZXgrNSk9PVwiZmFsc2VcIil7SW5kZXgrPTU7cmV0dXJuIGZhbHNlfWVsc2UgaWYoc291cmNlLnNsaWNlKEluZGV4LEluZGV4KzQpPT1cIm51bGxcIil7SW5kZXgrPTQ7cmV0dXJuIG51bGx9YWJvcnQoKX19cmV0dXJuXCIkXCJ9O3ZhciBnZXQ9ZnVuY3Rpb24odmFsdWUpe3ZhciByZXN1bHRzLGhhc01lbWJlcnM7aWYodmFsdWU9PVwiJFwiKXthYm9ydCgpfWlmKHR5cGVvZiB2YWx1ZT09XCJzdHJpbmdcIil7aWYoKGNoYXJJbmRleEJ1Z2d5P3ZhbHVlLmNoYXJBdCgwKTp2YWx1ZVswXSk9PVwiQFwiKXtyZXR1cm4gdmFsdWUuc2xpY2UoMSl9aWYodmFsdWU9PVwiW1wiKXtyZXN1bHRzPVtdO2Zvcig7O2hhc01lbWJlcnN8fChoYXNNZW1iZXJzPXRydWUpKXt2YWx1ZT1sZXgoKTtpZih2YWx1ZT09XCJdXCIpe2JyZWFrfWlmKGhhc01lbWJlcnMpe2lmKHZhbHVlPT1cIixcIil7dmFsdWU9bGV4KCk7aWYodmFsdWU9PVwiXVwiKXthYm9ydCgpfX1lbHNle2Fib3J0KCl9fWlmKHZhbHVlPT1cIixcIil7YWJvcnQoKX1yZXN1bHRzLnB1c2goZ2V0KHZhbHVlKSl9cmV0dXJuIHJlc3VsdHN9ZWxzZSBpZih2YWx1ZT09XCJ7XCIpe3Jlc3VsdHM9e307Zm9yKDs7aGFzTWVtYmVyc3x8KGhhc01lbWJlcnM9dHJ1ZSkpe3ZhbHVlPWxleCgpO2lmKHZhbHVlPT1cIn1cIil7YnJlYWt9aWYoaGFzTWVtYmVycyl7aWYodmFsdWU9PVwiLFwiKXt2YWx1ZT1sZXgoKTtpZih2YWx1ZT09XCJ9XCIpe2Fib3J0KCl9fWVsc2V7YWJvcnQoKX19aWYodmFsdWU9PVwiLFwifHx0eXBlb2YgdmFsdWUhPVwic3RyaW5nXCJ8fChjaGFySW5kZXhCdWdneT92YWx1ZS5jaGFyQXQoMCk6dmFsdWVbMF0pIT1cIkBcInx8bGV4KCkhPVwiOlwiKXthYm9ydCgpfXJlc3VsdHNbdmFsdWUuc2xpY2UoMSldPWdldChsZXgoKSlcbn1yZXR1cm4gcmVzdWx0c31hYm9ydCgpfXJldHVybiB2YWx1ZX07dmFyIHVwZGF0ZT1mdW5jdGlvbihzb3VyY2UscHJvcGVydHksY2FsbGJhY2spe3ZhciBlbGVtZW50PXdhbGsoc291cmNlLHByb3BlcnR5LGNhbGxiYWNrKTtpZihlbGVtZW50PT09dW5kZWYpe2RlbGV0ZSBzb3VyY2VbcHJvcGVydHldfWVsc2V7c291cmNlW3Byb3BlcnR5XT1lbGVtZW50fX07dmFyIHdhbGs9ZnVuY3Rpb24oc291cmNlLHByb3BlcnR5LGNhbGxiYWNrKXt2YXIgdmFsdWU9c291cmNlW3Byb3BlcnR5XSxsZW5ndGg7aWYodHlwZW9mIHZhbHVlPT1cIm9iamVjdFwiJiZ2YWx1ZSl7aWYoZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk9PWFycmF5Q2xhc3Mpe2ZvcihsZW5ndGg9dmFsdWUubGVuZ3RoO2xlbmd0aC0tOyl7dXBkYXRlKHZhbHVlLGxlbmd0aCxjYWxsYmFjayl9fWVsc2V7Zm9yRWFjaCh2YWx1ZSxmdW5jdGlvbihwcm9wZXJ0eSl7dXBkYXRlKHZhbHVlLHByb3BlcnR5LGNhbGxiYWNrKX0pfX1yZXR1cm4gY2FsbGJhY2suY2FsbChzb3VyY2UscHJvcGVydHksdmFsdWUpfTtleHBvcnRzLnBhcnNlPWZ1bmN0aW9uKHNvdXJjZSxjYWxsYmFjayl7dmFyIHJlc3VsdCx2YWx1ZTtJbmRleD0wO1NvdXJjZT1cIlwiK3NvdXJjZTtyZXN1bHQ9Z2V0KGxleCgpKTtpZihsZXgoKSE9XCIkXCIpe2Fib3J0KCl9SW5kZXg9U291cmNlPW51bGw7cmV0dXJuIGNhbGxiYWNrJiZnZXRDbGFzcy5jYWxsKGNhbGxiYWNrKT09ZnVuY3Rpb25DbGFzcz93YWxrKCh2YWx1ZT17fSx2YWx1ZVtcIlwiXT1yZXN1bHQsdmFsdWUpLFwiXCIsY2FsbGJhY2spOnJlc3VsdH19fWV4cG9ydHNbXCJydW5JbkNvbnRleHRcIl09cnVuSW5Db250ZXh0O3JldHVybiBleHBvcnRzfWlmKGZyZWVFeHBvcnRzJiYhaXNMb2FkZXIpe3J1bkluQ29udGV4dChyb290LGZyZWVFeHBvcnRzKX1lbHNle3ZhciBuYXRpdmVKU09OPXJvb3QuSlNPTixwcmV2aW91c0pTT049cm9vdFtcIkpTT04zXCJdLGlzUmVzdG9yZWQ9ZmFsc2U7dmFyIEpTT04zPXJ1bkluQ29udGV4dChyb290LHJvb3RbXCJKU09OM1wiXT17bm9Db25mbGljdDpmdW5jdGlvbigpe2lmKCFpc1Jlc3RvcmVkKXtpc1Jlc3RvcmVkPXRydWU7cm9vdC5KU09OPW5hdGl2ZUpTT047cm9vdFtcIkpTT04zXCJdPXByZXZpb3VzSlNPTjtuYXRpdmVKU09OPXByZXZpb3VzSlNPTj1udWxsfXJldHVybiBKU09OM319KTtyb290LkpTT049e3BhcnNlOkpTT04zLnBhcnNlLHN0cmluZ2lmeTpKU09OMy5zdHJpbmdpZnl9fWlmKGlzTG9hZGVyKXtkZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gSlNPTjN9KX19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIj9zZWxmOnR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIj9nbG9iYWw6e30pfSx7fV0sNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXRvQXJyYXk7ZnVuY3Rpb24gdG9BcnJheShsaXN0LGluZGV4KXt2YXIgYXJyYXk9W107aW5kZXg9aW5kZXh8fDA7Zm9yKHZhciBpPWluZGV4fHwwO2k8bGlzdC5sZW5ndGg7aSsrKXthcnJheVtpLWluZGV4XT1saXN0W2ldfXJldHVybiBhcnJheX19LHt9XX0se30sWzMxXSkoMzEpfSk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGNsaWVudFNvY2tldDtcbnZhciBzZXJ2aWNlVG9QbHVnaW5NYXA7XG52YXIgcGVuZGluZ1RlbGVtZXRyeUV2ZW50cyA9IFtdO1xuXG5mdW5jdGlvbiBpbml0KHNvY2tldCkge1xuICAgIGNsaWVudFNvY2tldCA9IHNvY2tldDtcbiAgICB0cnlTZW5kUGVuZGluZ0V2ZW50cygpO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlclBsdWdpblNlcnZpY2VzKHBsdWdpblNlcnZpY2VzKSB7XG4gICAgc2VydmljZVRvUGx1Z2luTWFwID0gcGx1Z2luU2VydmljZXM7XG4gICAgdHJ5U2VuZFBlbmRpbmdFdmVudHMoKTtcbn1cblxuZnVuY3Rpb24gdHJ5U2VuZFBlbmRpbmdFdmVudHMoKSB7XG4gICAgaWYgKCFjbGllbnRTb2NrZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1bnNlbnQgPSBbXTtcblxuICAgIHBlbmRpbmdUZWxlbWV0cnlFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnREYXRhKSB7XG4gICAgICAgIGlmIChtdXN0TWFwU2VydmljZVRvUGx1Z2luKGV2ZW50RGF0YSkgJiYgIXNlcnZpY2VUb1BsdWdpbk1hcCkge1xuICAgICAgICAgICAgdW5zZW50LnB1c2goZXZlbnREYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbmRDbGllbnRUZWxlbWV0cnkoZXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHBlbmRpbmdUZWxlbWV0cnlFdmVudHMgPSB1bnNlbnQ7XG59XG5cbmZ1bmN0aW9uIG11c3RNYXBTZXJ2aWNlVG9QbHVnaW4oZXZlbnREYXRhKSB7XG4gICAgcmV0dXJuICEhZXZlbnREYXRhLnByb3BzLnNlcnZpY2UgJiYgIWV2ZW50RGF0YS5wbHVnaW47XG59XG5cbmZ1bmN0aW9uIHNlbmRDbGllbnRUZWxlbWV0cnkoZXZlbnQsIHByb3BzLCBwaWlQcm9wcykge1xuICAgIHZhciBldmVudERhdGEgPSB7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICBwaWlQcm9wczogcGlpUHJvcHNcbiAgICB9O1xuXG4gICAgaWYgKCFjbGllbnRTb2NrZXQpIHtcbiAgICAgICAgcGVuZGluZ1RlbGVtZXRyeUV2ZW50cy5wdXNoKGV2ZW50RGF0YSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobXVzdE1hcFNlcnZpY2VUb1BsdWdpbihldmVudERhdGEpKSB7XG4gICAgICAgIGlmICghc2VydmljZVRvUGx1Z2luTWFwKSB7XG4gICAgICAgICAgICBwZW5kaW5nVGVsZW1ldHJ5RXZlbnRzLnB1c2goZXZlbnREYXRhKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50RGF0YS5wcm9wcy5wbHVnaW4gPSBzZXJ2aWNlVG9QbHVnaW5NYXBbZXZlbnREYXRhLnByb3BzLnNlcnZpY2VdIHx8ICdfdW5rbm93bic7XG4gICAgfVxuXG4gICAgY2xpZW50U29ja2V0LmVtaXQoJ3RlbGVtZXRyeScsIGV2ZW50RGF0YSk7XG59XG5cbmZ1bmN0aW9uIHNlbmRVSVRlbGVtZXRyeSh1aUNvbnRyb2xEYXRhKSB7XG4gICAgc2VuZENsaWVudFRlbGVtZXRyeSgncGx1Z2luLXVpLWludGVyYWN0aW9uJywgdWlDb250cm9sRGF0YSk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmluaXQgPSBpbml0O1xubW9kdWxlLmV4cG9ydHMucmVnaXN0ZXJQbHVnaW5TZXJ2aWNlcyA9IHJlZ2lzdGVyUGx1Z2luU2VydmljZXM7XG5tb2R1bGUuZXhwb3J0cy5zZW5kQ2xpZW50VGVsZW1ldHJ5ID0gc2VuZENsaWVudFRlbGVtZXRyeTtcbm1vZHVsZS5leHBvcnRzLnNlbmRVSVRlbGVtZXRyeSA9IHNlbmRVSVRlbGVtZXRyeTtcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gQmFzZWQgaW4gcGFydCBvbiBjb2RlIGZyb20gQXBhY2hlIFJpcHBsZSwgaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9pbmN1YmF0b3ItcmlwcGxlXG5cbnZhciBzZWxmLFxuICAgIGV4Y2VwdGlvbiA9IHJlcXVpcmUoJ2V4Y2VwdGlvbicpO1xuXG5zZWxmID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudFR5cGU6IGZ1bmN0aW9uIChhcmcsIGFyZ1R5cGUsIGN1c3RvbUV4Y2VwdGlvblR5cGUsIGN1c3RvbUV4Y2VwdGlvbk1lc3NhZ2UsIGN1c3RvbUV4Y2VwdGlvbk9iamVjdCkge1xuICAgICAgICB2YXIgaW52YWxpZEFyZyA9IGZhbHNlLFxuICAgICAgICAgICAgbXNnO1xuXG4gICAgICAgIHN3aXRjaCAoYXJnVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICAgICAgICAgIGlmICghKGFyZyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQXJnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQXJnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyAhPT0gTWF0aC5mbG9vcihhcmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQXJnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZEFyZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyAhPT0gYXJnVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQXJnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW52YWxpZEFyZykge1xuICAgICAgICAgICAgbXNnID0gY3VzdG9tRXhjZXB0aW9uTWVzc2FnZSArICgnXFxuXFxuSW52YWxpZCBBcmd1bWVudCB0eXBlLiBhcmd1bWVudDogJyArIGFyZyArICcgPT0+IHdhcyBleHBlY3RlZCB0byBiZSBvZiB0eXBlOiAnICsgYXJnVHlwZSk7XG4gICAgICAgICAgICBleGNlcHRpb24ucmFpc2UoKGN1c3RvbUV4Y2VwdGlvblR5cGUgfHwgZXhjZXB0aW9uLnR5cGVzLkFyZ3VtZW50VHlwZSksIG1zZywgY3VzdG9tRXhjZXB0aW9uT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBmb3JFYWNoOiBmdW5jdGlvbiAob2JqLCBhY3Rpb24sIHNjb3BlKSB7XG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5mb3JFYWNoKGFjdGlvbiwgc2NvcGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5tYXAob2JqLCBhY3Rpb24sIHNjb3BlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYXA6IGZ1bmN0aW9uIChvYmosIGZ1bmMsIHNjb3BlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcmV0dXJuVmFsID0gbnVsbCxcbiAgICAgICAgICAgIHJlc3VsdCAgICA9IFtdO1xuXG4gICAgICAgIC8vTW96SGFjayBmb3IgTmFtZWROb2RlTWFwXG4gICAgICAgIC8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cbiAgICAgICAgaWYgKHdpbmRvdy5Nb3pOYW1lZEF0dHJNYXApIHtcbiAgICAgICAgICAgIE5hbWVkTm9kZU1hcCA9IHdpbmRvdy5Nb3pOYW1lZEF0dHJNYXA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZ2xvYmFsLWFzc2lnblxuICAgICAgICB9XG4gICAgICAgIC8qIGpzaGludCBpZ25vcmU6ZW5kICovXG5cbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqLm1hcChmdW5jLCBzY29wZSk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgTmFtZWROb2RlTWFwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gZnVuYy5hcHBseShzY29wZSwgW29ialtpXSwgaV0pO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJldHVyblZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBmdW5jLmFwcGx5KHNjb3BlLCBbb2JqW2ldLCBpXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJldHVyblZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYmluZEF1dG9TYXZlRXZlbnQ6IGZ1bmN0aW9uIChzZWxlY3Rvciwgc2F2ZUNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvbGRTZXRUaW1lb3V0SWQ7XG4gICAgICAgIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5cbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQVVUTyBTQVZFOiBSRUlOU1RBVEUgT05DRSBXRSBIQVZFICcgKyBzZWxlY3RvciArICcgRUxFTUVOVCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IDkpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQob2xkU2V0VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICBvbGRTZXRUaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtaXhpbjogZnVuY3Rpb24gKG1peGluLCB0bykge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIG1peGluKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWl4aW4sIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdG9bcHJvcF0gPSBtaXhpbltwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb3B5OiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbmV3T2JqID0gQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fTtcblxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICB0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICAgIG9iaiA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgb2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgIGlmIChvYmpbaV0gJiYgdHlwZW9mIG9ialtpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9ialtpXSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld09ialtpXSA9IG9ialtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld09ialtpXSA9IHNlbGYuY29weShvYmpbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmpbaV0gPSBvYmpbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9LFxuXG4gICAgbmF2SGVscGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBEaXJlY3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgTjogJ04nLFxuICAgICAgICAgICAgICAgIE5FOiAnTkUnLFxuICAgICAgICAgICAgICAgIEU6ICdFJyxcbiAgICAgICAgICAgICAgICBTRTogJ1NFJyxcbiAgICAgICAgICAgICAgICBTOiAnUycsXG4gICAgICAgICAgICAgICAgU1c6ICdTVycsXG4gICAgICAgICAgICAgICAgVzogJ1cnLFxuICAgICAgICAgICAgICAgIE5XOiAnTlcnXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUgZGlyZWN0aW9uIGFjY29yZGluZyB0byB0aGUgaGVhZGluZyB2YWx1ZS5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWFkaW5nIEEgbnVtYmVyIGZyb20gMCB0byAzNTkuOTkuXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGRpcmVjdGlvbiBJdCBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6IE4sIE5FLCBFLCBTRSwgUywgU1csIFcgb3IgTlcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldERpcmVjdGlvbjogZnVuY3Rpb24gKGhlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGluZyA+IDMzNy41IHx8IChoZWFkaW5nID49IDAgJiYgaGVhZGluZyA8PSAyMi41KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5EaXJlY3Rpb25zLk47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRpbmcgPiAyMi41ICYmIGhlYWRpbmcgPD0gNjcuNSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5EaXJlY3Rpb25zLk5FO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChoZWFkaW5nID4gNjcuNSAmJiBoZWFkaW5nIDw9IDExMi41KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkRpcmVjdGlvbnMuRTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZGluZyA+IDExMi41ICYmIGhlYWRpbmcgPD0gMTU3LjUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGlyZWN0aW9ucy5TRTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZGluZyA+IDE1Ny41ICYmIGhlYWRpbmcgPD0gMjAyLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGlyZWN0aW9ucy5TO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChoZWFkaW5nID4gMjAyLjUgJiYgaGVhZGluZyA8PSAyNDcuNSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5EaXJlY3Rpb25zLlNXO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChoZWFkaW5nID4gMjQ3LjUgJiYgaGVhZGluZyA8PSAyOTIuNSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5EaXJlY3Rpb25zLlc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaGVhZGluZyA+IDI5Mi41ICYmIGhlYWRpbmcgPD0gMzM3LjVcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5EaXJlY3Rpb25zLk5XO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0SGVhZGluZzogZnVuY3Rpb24gKGxhdDEsIGxvbjEsIGxhdDIsIGxvbjIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZExvbiAgPSB0aGlzLnJhZChsb24yIC0gbG9uMSksXG4gICAgICAgICAgICAgICAgICAgIGxsYXQxID0gdGhpcy5yYWQobGF0MSksXG4gICAgICAgICAgICAgICAgICAgIGxsYXQyID0gdGhpcy5yYWQobGF0MiksXG4gICAgICAgICAgICAgICAgICAgIHkgICAgID0gTWF0aC5zaW4oZExvbikgKiBNYXRoLmNvcyhsbGF0MiksXG4gICAgICAgICAgICAgICAgICAgIHggICAgID0gTWF0aC5jb3MobGxhdDEpICogTWF0aC5zaW4obGxhdDIpIC0gTWF0aC5zaW4obGxhdDEpICogTWF0aC5jb3MobGxhdDIpICogTWF0aC5jb3MoZExvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRlZyhNYXRoLmF0YW4yKHksIHgpKSArIDM2MCkgJSAzNjA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24gKGxhdDEsIGxvbjEsIGxhdDIsIGxvbjIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZExhdCA9IHRoaXMucmFkKGxhdDIgLSBsYXQxKSxcbiAgICAgICAgICAgICAgICAgICAgZExvbiA9IHRoaXMucmFkKGxvbjIgLSBsb24xKSxcbiAgICAgICAgICAgICAgICAgICAgYSAgICA9IE1hdGguc2luKGRMYXQgLyAyKSAqIE1hdGguc2luKGRMYXQgLyAyKSArIE1hdGguY29zKHRoaXMucmFkKGxhdDEpKSAqIE1hdGguY29zKHRoaXMucmFkKGxhdDIpKSAqIE1hdGguc2luKGRMb24gLyAyKSAqIE1hdGguc2luKGRMb24gLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgYyAgICA9IDIgKiBNYXRoLmFzaW4oTWF0aC5zcXJ0KGEpKSxcbiAgICAgICAgICAgICAgICAgICAgZCAgICA9IDYzNzgxMDAgKiBjO1xuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2ltdWxhdGVUcmF2ZWw6IGZ1bmN0aW9uIChsYXQsIGxvbiwgaGRnLCBkaXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhdDEgICAgICAgICAgICA9IHRoaXMucmFkKGxhdCksXG4gICAgICAgICAgICAgICAgICAgIGxvbjEgICAgICAgICAgICA9IHRoaXMucmFkKGxvbiksXG4gICAgICAgICAgICAgICAgICAgIGJybmcgICAgICAgICAgICA9IHRoaXMucmFkKGhkZyksXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXJEaXN0YW5jZSA9IGRpc3QgLyA2Mzc4MTAwLFxuICAgICAgICAgICAgICAgICAgICBsYXQyICAgICAgICAgICAgPSBNYXRoLmFzaW4oTWF0aC5zaW4obGF0MSkgKiBNYXRoLmNvcyhhbmd1bGFyRGlzdGFuY2UpICsgTWF0aC5jb3MobGF0MSkgKiBNYXRoLnNpbihhbmd1bGFyRGlzdGFuY2UpICogTWF0aC5jb3MoYnJuZykpLFxuICAgICAgICAgICAgICAgICAgICBsb24yICAgICAgICAgICAgPSBsb24xICsgTWF0aC5hdGFuMihNYXRoLnNpbihicm5nKSAqIE1hdGguc2luKGFuZ3VsYXJEaXN0YW5jZSkgKiBNYXRoLmNvcyhsYXQxKSwgTWF0aC5jb3MoYW5ndWxhckRpc3RhbmNlKSAtIE1hdGguc2luKGxhdDEpICogTWF0aC5zaW4obGF0MikpO1xuICAgICAgICAgICAgICAgIGxvbjIgPSAobG9uMiArIDMgKiBNYXRoLlBJKSAlICgyICogTWF0aC5QSSkgLSBNYXRoLlBJOyAvLyBOb3JtYWxpemUgdG8gLTE4MC4uKzE4MFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHRoaXMuZGVnKGxhdDIpLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHRoaXMuZGVnKGxvbjIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRlZzogZnVuY3Rpb24gKG51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmFkOiBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNyZWF0ZVVVSUQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVVVSURQYXJ0KDQpICsgJy0nICtcbiAgICAgICAgICAgIGNyZWF0ZVVVSURQYXJ0KDIpICsgJy0nICtcbiAgICAgICAgICAgIGNyZWF0ZVVVSURQYXJ0KDIpICsgJy0nICtcbiAgICAgICAgICAgIGNyZWF0ZVVVSURQYXJ0KDIpICsgJy0nICtcbiAgICAgICAgICAgIGNyZWF0ZVVVSURQYXJ0KDYpO1xuICAgIH0sXG5cbiAgICB0eXBlTmFtZTogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkuc2xpY2UoOCwgLTEpO1xuICAgIH0sXG5cbiAgICBwYXJzZVVybDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICAgICAgICBhLmhyZWYgPSB1cmw7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhyZWY6IGEuaHJlZixcbiAgICAgICAgICAgIGhvc3Q6IGEuaG9zdCxcbiAgICAgICAgICAgIG9yaWdpbjogYS5vcmlnaW4sXG4gICAgICAgICAgICBwb3J0OiBhLnBvcnQsXG4gICAgICAgICAgICBwcm90b2NvbDogYS5wcm90b2NvbCxcbiAgICAgICAgICAgIHNlYXJjaDogYS5zZWFyY2hcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgaXNTYW1lT3JpZ2luUmVxdWVzdDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB1cmwgPSB0aGlzLnBhcnNlVXJsKHVybCk7XG5cbiAgICAgICAgaWYgKHVybC5wb3J0ICE9PSBsb2NhdGlvbi5wb3J0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2FtZU9yaWdpbiA9IHVybC5ocmVmLm1hdGNoKGxvY2F0aW9uLm9yaWdpbi5yZXBsYWNlKC93d3dcXC4vLCAnJykpIHx8XG4gICAgICAgICAgICAhdXJsLmhyZWYubWF0Y2goL15odHRwcz86XFwvXFwvfF5maWxlOlxcL1xcLy8pO1xuXG4gICAgICAgIHJldHVybiAhIXNhbWVPcmlnaW47XG4gICAgfSxcblxuICAgIGlzTnVtYmVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuICh0eXBlID09PSAnbnVtYmVyJyB8fCB0eXBlID09PSAnc3RyaW5nJykgJiYgIWlzTmFOKHZhbHVlIC0gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVVVSURQYXJ0KGxlbmd0aCkge1xuICAgIHZhciB1dWlkcGFydCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHV1aWRjaGFyID0gcGFyc2VJbnQoKE1hdGgucmFuZG9tKCkgKiAyNTYpLCAxMCkudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAodXVpZGNoYXIubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHV1aWRjaGFyID0gJzAnICsgdXVpZGNoYXI7XG4gICAgICAgIH1cbiAgICAgICAgdXVpZHBhcnQgKz0gdXVpZGNoYXI7XG4gICAgfVxuICAgIHJldHVybiB1dWlkcGFydDtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuLy8gQHZlcnNpb24gMC43LjIwXG4hZnVuY3Rpb24oKXt3aW5kb3cuV2ViQ29tcG9uZW50cz13aW5kb3cuV2ViQ29tcG9uZW50c3x8e2ZsYWdzOnt9fTt2YXIgZT1cIndlYmNvbXBvbmVudHMuanNcIix0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmMqPVwiJytlKydcIl0nKSxuPXt9O2lmKCFuLm5vT3B0cyl7aWYobG9jYXRpb24uc2VhcmNoLnNsaWNlKDEpLnNwbGl0KFwiJlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0LHI9ZS5zcGxpdChcIj1cIik7clswXSYmKHQ9clswXS5tYXRjaCgvd2MtKC4rKS8pKSYmKG5bdFsxXV09clsxXXx8ITApfSksdClmb3IodmFyIHIsbz0wO3I9dC5hdHRyaWJ1dGVzW29dO28rKylcInNyY1wiIT09ci5uYW1lJiYobltyLm5hbWVdPXIudmFsdWV8fCEwKTtpZihuLmxvZyYmbi5sb2cuc3BsaXQpe3ZhciBpPW4ubG9nLnNwbGl0KFwiLFwiKTtuLmxvZz17fSxpLmZvckVhY2goZnVuY3Rpb24oZSl7bi5sb2dbZV09ITB9KX1lbHNlIG4ubG9nPXt9fW4uc2hhZG93PW4uc2hhZG93fHxuLnNoYWRvd2RvbXx8bi5wb2x5ZmlsbCxcIm5hdGl2ZVwiPT09bi5zaGFkb3c/bi5zaGFkb3c9ITE6bi5zaGFkb3c9bi5zaGFkb3d8fCFIVE1MRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU2hhZG93Um9vdCxuLnJlZ2lzdGVyJiYod2luZG93LkN1c3RvbUVsZW1lbnRzPXdpbmRvdy5DdXN0b21FbGVtZW50c3x8e2ZsYWdzOnt9fSx3aW5kb3cuQ3VzdG9tRWxlbWVudHMuZmxhZ3MucmVnaXN0ZXI9bi5yZWdpc3RlciksV2ViQ29tcG9uZW50cy5mbGFncz1ufSgpLFdlYkNvbXBvbmVudHMuZmxhZ3Muc2hhZG93JiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFdlYWtNYXAmJiFmdW5jdGlvbigpe3ZhciBlPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSx0PURhdGUubm93KCklMWU5LG49ZnVuY3Rpb24oKXt0aGlzLm5hbWU9XCJfX3N0XCIrKDFlOSpNYXRoLnJhbmRvbSgpPj4+MCkrKHQrKyArXCJfX1wiKX07bi5wcm90b3R5cGU9e3NldDpmdW5jdGlvbih0LG4pe3ZhciByPXRbdGhpcy5uYW1lXTtyZXR1cm4gciYmclswXT09PXQ/clsxXT1uOmUodCx0aGlzLm5hbWUse3ZhbHVlOlt0LG5dLHdyaXRhYmxlOiEwfSksdGhpc30sZ2V0OmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybih0PWVbdGhpcy5uYW1lXSkmJnRbMF09PT1lP3RbMV06dm9pZCAwfSxcImRlbGV0ZVwiOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5uYW1lXTtyZXR1cm4gdCYmdFswXT09PWU/KHRbMF09dFsxXT12b2lkIDAsITApOiExfSxoYXM6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLm5hbWVdO3JldHVybiB0P3RbMF09PT1lOiExfX0sd2luZG93LldlYWtNYXA9bn0oKSx3aW5kb3cuU2hhZG93RE9NUG9seWZpbGw9e30sZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCgpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBjaHJvbWUmJmNocm9tZS5hcHAmJmNocm9tZS5hcHAucnVudGltZSlyZXR1cm4hMTtpZihuYXZpZ2F0b3IuZ2V0RGV2aWNlU3RvcmFnZSlyZXR1cm4hMTt0cnl7dmFyIGU9bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRydWU7XCIpO3JldHVybiBlKCl9Y2F0Y2godCl7cmV0dXJuITF9fWZ1bmN0aW9uIG4oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiQXNzZXJ0aW9uIGZhaWxlZFwiKX1mdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBuPVcodCkscj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgbz1uW3JdO0EoZSxvLEYodCxvKSl9cmV0dXJuIGV9ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgbj1XKHQpLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89bltyXTtzd2l0Y2gobyl7Y2FzZVwiYXJndW1lbnRzXCI6Y2FzZVwiY2FsbGVyXCI6Y2FzZVwibGVuZ3RoXCI6Y2FzZVwibmFtZVwiOmNhc2VcInByb3RvdHlwZVwiOmNhc2VcInRvU3RyaW5nXCI6Y29udGludWV9QShlLG8sRih0LG8pKX1yZXR1cm4gZX1mdW5jdGlvbiBpKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYodFtuXWluIGUpcmV0dXJuIHRbbl19ZnVuY3Rpb24gYShlLHQsbil7VS52YWx1ZT1uLEEoZSx0LFUpfWZ1bmN0aW9uIHMoZSx0KXt2YXIgbj1lLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO2lmKHEpdHJ5e1cobil9Y2F0Y2gocil7bj1uLl9fcHJvdG9fX312YXIgbz1SLmdldChuKTtpZihvKXJldHVybiBvO3ZhciBpPXMobiksYT1FKGkpO3JldHVybiBnKG4sYSx0KSxhfWZ1bmN0aW9uIGMoZSx0KXt3KGUsdCwhMCl9ZnVuY3Rpb24gbChlLHQpe3codCxlLCExKX1mdW5jdGlvbiB1KGUpe3JldHVybi9eb25bYS16XSskLy50ZXN0KGUpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuL15bYS16QS1aXyRdW2EtekEtWl8kMC05XSokLy50ZXN0KGUpfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIGsmJmQoZSk/bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXMuX19pbXBsNGNmMWU3ODJoZ19fLlwiK2UpOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19pbXBsNGNmMWU3ODJoZ19fW2VdfX1mdW5jdGlvbiBoKGUpe3JldHVybiBrJiZkKGUpP25ldyBGdW5jdGlvbihcInZcIixcInRoaXMuX19pbXBsNGNmMWU3ODJoZ19fLlwiK2UrXCIgPSB2XCIpOmZ1bmN0aW9uKHQpe3RoaXMuX19pbXBsNGNmMWU3ODJoZ19fW2VdPXR9fWZ1bmN0aW9uIGYoZSl7cmV0dXJuIGsmJmQoZSk/bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXMuX19pbXBsNGNmMWU3ODJoZ19fLlwiK2UrXCIuYXBwbHkodGhpcy5fX2ltcGw0Y2YxZTc4MmhnX18sIGFyZ3VtZW50cylcIik6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2ltcGw0Y2YxZTc4MmhnX19bZV0uYXBwbHkodGhpcy5fX2ltcGw0Y2YxZTc4MmhnX18sYXJndW1lbnRzKX19ZnVuY3Rpb24gbShlLHQpe3RyeXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpfWNhdGNoKG4pe3JldHVybiBCfX1mdW5jdGlvbiB3KHQsbixyLG8pe2Zvcih2YXIgaT1XKHQpLGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIHM9aVthXTtpZihcInBvbHltZXJCbGFja0xpc3RfXCIhPT1zJiYhKHMgaW4gbnx8dC5wb2x5bWVyQmxhY2tMaXN0XyYmdC5wb2x5bWVyQmxhY2tMaXN0X1tzXSkpe3EmJnQuX19sb29rdXBHZXR0ZXJfXyhzKTt2YXIgYyxsLGQ9bSh0LHMpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGQudmFsdWUpe3ZhciB3PXUocyk7Yz13P2UuZ2V0RXZlbnRIYW5kbGVyR2V0dGVyKHMpOnAocyksKGQud3JpdGFibGV8fGQuc2V0fHxWKSYmKGw9dz9lLmdldEV2ZW50SGFuZGxlclNldHRlcihzKTpoKHMpKTt2YXIgdj1WfHxkLmNvbmZpZ3VyYWJsZTtBKG4scyx7Z2V0OmMsc2V0OmwsY29uZmlndXJhYmxlOnYsZW51bWVyYWJsZTpkLmVudW1lcmFibGV9KX1lbHNlIHImJihuW3NdPWYocykpfX19ZnVuY3Rpb24gdihlLHQsbil7aWYobnVsbCE9ZSl7dmFyIHI9ZS5wcm90b3R5cGU7ZyhyLHQsbiksbyh0LGUpfX1mdW5jdGlvbiBnKGUsdCxyKXt2YXIgbz10LnByb3RvdHlwZTtuKHZvaWQgMD09PVIuZ2V0KGUpKSxSLnNldChlLHQpLEkuc2V0KG8sZSksYyhlLG8pLHImJmwobyxyKSxhKG8sXCJjb25zdHJ1Y3RvclwiLHQpLHQucHJvdG90eXBlPW99ZnVuY3Rpb24gYihlLHQpe3JldHVybiBSLmdldCh0LnByb3RvdHlwZSk9PT1lfWZ1bmN0aW9uIHkoZSl7dmFyIHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpLG49cyh0KSxyPUUobik7cmV0dXJuIGcodCxyLGUpLHJ9ZnVuY3Rpb24gRShlKXtmdW5jdGlvbiB0KHQpe2UuY2FsbCh0aGlzLHQpfXZhciBuPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpO3JldHVybiBuLmNvbnN0cnVjdG9yPXQsdC5wcm90b3R5cGU9bix0fWZ1bmN0aW9uIF8oZSl7cmV0dXJuIGUmJmUuX19pbXBsNGNmMWU3ODJoZ19ffWZ1bmN0aW9uIFMoZSl7cmV0dXJuIV8oZSl9ZnVuY3Rpb24gVChlKXtpZihudWxsPT09ZSlyZXR1cm4gbnVsbDtuKFMoZSkpO3ZhciB0PWUuX193cmFwcGVyOGUzZGQ5M2E2MF9fO3JldHVybiBudWxsIT10P3Q6ZS5fX3dyYXBwZXI4ZTNkZDkzYTYwX189bmV3KHMoZSxlKSkoZSl9ZnVuY3Rpb24gTShlKXtyZXR1cm4gbnVsbD09PWU/bnVsbDoobihfKGUpKSxlLl9faW1wbDRjZjFlNzgyaGdfXyl9ZnVuY3Rpb24gTyhlKXtyZXR1cm4gZS5fX2ltcGw0Y2YxZTc4MmhnX199ZnVuY3Rpb24gTChlLHQpe3QuX19pbXBsNGNmMWU3ODJoZ19fPWUsZS5fX3dyYXBwZXI4ZTNkZDkzYTYwX189dH1mdW5jdGlvbiBOKGUpe3JldHVybiBlJiZfKGUpP00oZSk6ZX1mdW5jdGlvbiBDKGUpe3JldHVybiBlJiYhXyhlKT9UKGUpOmV9ZnVuY3Rpb24gaihlLHQpe251bGwhPT10JiYobihTKGUpKSxuKHZvaWQgMD09PXR8fF8odCkpLGUuX193cmFwcGVyOGUzZGQ5M2E2MF9fPXQpfWZ1bmN0aW9uIEQoZSx0LG4pe0cuZ2V0PW4sQShlLnByb3RvdHlwZSx0LEcpfWZ1bmN0aW9uIEgoZSx0KXtEKGUsdCxmdW5jdGlvbigpe3JldHVybiBUKHRoaXMuX19pbXBsNGNmMWU3ODJoZ19fW3RdKX0pfWZ1bmN0aW9uIHgoZSx0KXtlLmZvckVhY2goZnVuY3Rpb24oZSl7dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UucHJvdG90eXBlW3RdPWZ1bmN0aW9uKCl7dmFyIGU9Qyh0aGlzKTtyZXR1cm4gZVt0XS5hcHBseShlLGFyZ3VtZW50cyl9fSl9KX12YXIgUj1uZXcgV2Vha01hcCxJPW5ldyBXZWFrTWFwLFA9T2JqZWN0LmNyZWF0ZShudWxsKSxrPXQoKSxBPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxXPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLEY9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixVPXt2YWx1ZTp2b2lkIDAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITB9O1cod2luZG93KTt2YXIgcT0vRmlyZWZveC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxCPXtnZXQ6ZnVuY3Rpb24oKXt9LHNldDpmdW5jdGlvbihlKXt9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfSxWPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSxcIm5vZGVUeXBlXCIpO3JldHVybiBlJiYhZS5nZXQmJiFlLnNldH0oKSxHPXtnZXQ6dm9pZCAwLGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfTtlLmFkZEZvcndhcmRpbmdQcm9wZXJ0aWVzPWMsZS5hc3NlcnQ9bixlLmNvbnN0cnVjdG9yVGFibGU9UixlLmRlZmluZUdldHRlcj1ELGUuZGVmaW5lV3JhcEdldHRlcj1ILGUuZm9yd2FyZE1ldGhvZHNUb1dyYXBwZXI9eCxlLmlzSWRlbnRpZmllck5hbWU9ZCxlLmlzV3JhcHBlcj1fLGUuaXNXcmFwcGVyRm9yPWIsZS5taXhpbj1yLGUubmF0aXZlUHJvdG90eXBlVGFibGU9SSxlLm9uZU9mPWksZS5yZWdpc3Rlck9iamVjdD15LGUucmVnaXN0ZXJXcmFwcGVyPXYsZS5yZXdyYXA9aixlLnNldFdyYXBwZXI9TCxlLnVuc2FmZVVud3JhcD1PLGUudW53cmFwPU0sZS51bndyYXBJZk5lZWRlZD1OLGUud3JhcD1ULGUud3JhcElmTmVlZGVkPUMsZS53cmFwcGVycz1QfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSx0LG4pe3JldHVybntpbmRleDplLHJlbW92ZWQ6dCxhZGRlZENvdW50Om59fWZ1bmN0aW9uIG4oKXt9dmFyIHI9MCxvPTEsaT0yLGE9MztuLnByb3RvdHlwZT17Y2FsY0VkaXREaXN0YW5jZXM6ZnVuY3Rpb24oZSx0LG4scixvLGkpe2Zvcih2YXIgYT1pLW8rMSxzPW4tdCsxLGM9bmV3IEFycmF5KGEpLGw9MDthPmw7bCsrKWNbbF09bmV3IEFycmF5KHMpLGNbbF1bMF09bDtmb3IodmFyIHU9MDtzPnU7dSsrKWNbMF1bdV09dTtmb3IodmFyIGw9MTthPmw7bCsrKWZvcih2YXIgdT0xO3M+dTt1KyspaWYodGhpcy5lcXVhbHMoZVt0K3UtMV0scltvK2wtMV0pKWNbbF1bdV09Y1tsLTFdW3UtMV07ZWxzZXt2YXIgZD1jW2wtMV1bdV0rMSxwPWNbbF1bdS0xXSsxO2NbbF1bdV09cD5kP2Q6cH1yZXR1cm4gY30sc3BsaWNlT3BlcmF0aW9uc0Zyb21FZGl0RGlzdGFuY2VzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmxlbmd0aC0xLG49ZVswXS5sZW5ndGgtMSxzPWVbdF1bbl0sYz1bXTt0PjB8fG4+MDspaWYoMCE9dClpZigwIT1uKXt2YXIgbCx1PWVbdC0xXVtuLTFdLGQ9ZVt0LTFdW25dLHA9ZVt0XVtuLTFdO2w9cD5kP3U+ZD9kOnU6dT5wP3A6dSxsPT11Pyh1PT1zP2MucHVzaChyKTooYy5wdXNoKG8pLHM9dSksdC0tLG4tLSk6bD09ZD8oYy5wdXNoKGEpLHQtLSxzPWQpOihjLnB1c2goaSksbi0tLHM9cCl9ZWxzZSBjLnB1c2goYSksdC0tO2Vsc2UgYy5wdXNoKGkpLG4tLTtyZXR1cm4gYy5yZXZlcnNlKCksY30sY2FsY1NwbGljZXM6ZnVuY3Rpb24oZSxuLHMsYyxsLHUpe3ZhciBkPTAscD0wLGg9TWF0aC5taW4ocy1uLHUtbCk7aWYoMD09biYmMD09bCYmKGQ9dGhpcy5zaGFyZWRQcmVmaXgoZSxjLGgpKSxzPT1lLmxlbmd0aCYmdT09Yy5sZW5ndGgmJihwPXRoaXMuc2hhcmVkU3VmZml4KGUsYyxoLWQpKSxuKz1kLGwrPWQscy09cCx1LT1wLHMtbj09MCYmdS1sPT0wKXJldHVybltdO2lmKG49PXMpe2Zvcih2YXIgZj10KG4sW10sMCk7dT5sOylmLnJlbW92ZWQucHVzaChjW2wrK10pO3JldHVybltmXX1pZihsPT11KXJldHVyblt0KG4sW10scy1uKV07Zm9yKHZhciBtPXRoaXMuc3BsaWNlT3BlcmF0aW9uc0Zyb21FZGl0RGlzdGFuY2VzKHRoaXMuY2FsY0VkaXREaXN0YW5jZXMoZSxuLHMsYyxsLHUpKSxmPXZvaWQgMCx3PVtdLHY9bixnPWwsYj0wO2I8bS5sZW5ndGg7YisrKXN3aXRjaChtW2JdKXtjYXNlIHI6ZiYmKHcucHVzaChmKSxmPXZvaWQgMCksdisrLGcrKzticmVhaztjYXNlIG86Znx8KGY9dCh2LFtdLDApKSxmLmFkZGVkQ291bnQrKyx2KyssZi5yZW1vdmVkLnB1c2goY1tnXSksZysrO2JyZWFrO2Nhc2UgaTpmfHwoZj10KHYsW10sMCkpLGYuYWRkZWRDb3VudCsrLHYrKzticmVhaztjYXNlIGE6Znx8KGY9dCh2LFtdLDApKSxmLnJlbW92ZWQucHVzaChjW2ddKSxnKyt9cmV0dXJuIGYmJncucHVzaChmKSx3fSxzaGFyZWRQcmVmaXg6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj0wO24+cjtyKyspaWYoIXRoaXMuZXF1YWxzKGVbcl0sdFtyXSkpcmV0dXJuIHI7cmV0dXJuIG59LHNoYXJlZFN1ZmZpeDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPWUubGVuZ3RoLG89dC5sZW5ndGgsaT0wO24+aSYmdGhpcy5lcXVhbHMoZVstLXJdLHRbLS1vXSk7KWkrKztyZXR1cm4gaX0sY2FsY3VsYXRlU3BsaWNlczpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmNhbGNTcGxpY2VzKGUsMCxlLmxlbmd0aCx0LDAsdC5sZW5ndGgpfSxlcXVhbHM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXR9fSxlLkFycmF5U3BsaWNlPW59KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCgpe2E9ITE7dmFyIGU9aS5zbGljZSgwKTtpPVtdO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKSgwLGVbdF0pKCl9ZnVuY3Rpb24gbihlKXtpLnB1c2goZSksYXx8KGE9ITAscih0LDApKX12YXIgcixvPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyLGk9W10sYT0hMTtpZihvKXt2YXIgcz0xLGM9bmV3IG8odCksbD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKTtjLm9ic2VydmUobCx7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXtzPShzKzEpJTIsbC5kYXRhPXN9fWVsc2Ugcj13aW5kb3cuc2V0VGltZW91dDtlLnNldEVuZE9mTWljcm90YXNrPW59KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtlLnNjaGVkdWxlZF98fChlLnNjaGVkdWxlZF89ITAsZi5wdXNoKGUpLG18fCh1KG4pLG09ITApKX1mdW5jdGlvbiBuKCl7Zm9yKG09ITE7Zi5sZW5ndGg7KXt2YXIgZT1mO2Y9W10sZS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUudWlkXy10LnVpZF99KTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XTtuLnNjaGVkdWxlZF89ITE7dmFyIHI9bi50YWtlUmVjb3JkcygpO2kobiksci5sZW5ndGgmJm4uY2FsbGJhY2tfKHIsbil9fX1mdW5jdGlvbiByKGUsdCl7dGhpcy50eXBlPWUsdGhpcy50YXJnZXQ9dCx0aGlzLmFkZGVkTm9kZXM9bmV3IHAuTm9kZUxpc3QsdGhpcy5yZW1vdmVkTm9kZXM9bmV3IHAuTm9kZUxpc3QsdGhpcy5wcmV2aW91c1NpYmxpbmc9bnVsbCx0aGlzLm5leHRTaWJsaW5nPW51bGwsdGhpcy5hdHRyaWJ1dGVOYW1lPW51bGwsdGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9bnVsbCx0aGlzLm9sZFZhbHVlPW51bGx9ZnVuY3Rpb24gbyhlLHQpe2Zvcig7ZTtlPWUucGFyZW50Tm9kZSl7dmFyIG49aC5nZXQoZSk7aWYobilmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89bltyXTtvLm9wdGlvbnMuc3VidHJlZSYmby5hZGRUcmFuc2llbnRPYnNlcnZlcih0KX19fWZ1bmN0aW9uIGkoZSl7Zm9yKHZhciB0PTA7dDxlLm5vZGVzXy5sZW5ndGg7dCsrKXt2YXIgbj1lLm5vZGVzX1t0XSxyPWguZ2V0KG4pO2lmKCFyKXJldHVybjtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIGk9cltvXTtpLm9ic2VydmVyPT09ZSYmaS5yZW1vdmVUcmFuc2llbnRPYnNlcnZlcnMoKX19fWZ1bmN0aW9uIGEoZSxuLG8pe2Zvcih2YXIgaT1PYmplY3QuY3JlYXRlKG51bGwpLGE9T2JqZWN0LmNyZWF0ZShudWxsKSxzPWU7cztzPXMucGFyZW50Tm9kZSl7dmFyIGM9aC5nZXQocyk7aWYoYylmb3IodmFyIGw9MDtsPGMubGVuZ3RoO2wrKyl7dmFyIHU9Y1tsXSxkPXUub3B0aW9ucztpZigocz09PWV8fGQuc3VidHJlZSkmJihcImF0dHJpYnV0ZXNcIiE9PW58fGQuYXR0cmlidXRlcykmJihcImF0dHJpYnV0ZXNcIiE9PW58fCFkLmF0dHJpYnV0ZUZpbHRlcnx8bnVsbD09PW8ubmFtZXNwYWNlJiYtMSE9PWQuYXR0cmlidXRlRmlsdGVyLmluZGV4T2Yoby5uYW1lKSkmJihcImNoYXJhY3RlckRhdGFcIiE9PW58fGQuY2hhcmFjdGVyRGF0YSkmJihcImNoaWxkTGlzdFwiIT09bnx8ZC5jaGlsZExpc3QpKXt2YXIgcD11Lm9ic2VydmVyO2lbcC51aWRfXT1wLChcImF0dHJpYnV0ZXNcIj09PW4mJmQuYXR0cmlidXRlT2xkVmFsdWV8fFwiY2hhcmFjdGVyRGF0YVwiPT09biYmZC5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUpJiYoYVtwLnVpZF9dPW8ub2xkVmFsdWUpfX19Zm9yKHZhciBmIGluIGkpe3ZhciBwPWlbZl0sbT1uZXcgcihuLGUpO1wibmFtZVwiaW4gbyYmXCJuYW1lc3BhY2VcImluIG8mJihtLmF0dHJpYnV0ZU5hbWU9by5uYW1lLG0uYXR0cmlidXRlTmFtZXNwYWNlPW8ubmFtZXNwYWNlKSxvLmFkZGVkTm9kZXMmJihtLmFkZGVkTm9kZXM9by5hZGRlZE5vZGVzKSxvLnJlbW92ZWROb2RlcyYmKG0ucmVtb3ZlZE5vZGVzPW8ucmVtb3ZlZE5vZGVzKSxvLnByZXZpb3VzU2libGluZyYmKG0ucHJldmlvdXNTaWJsaW5nPW8ucHJldmlvdXNTaWJsaW5nKSxvLm5leHRTaWJsaW5nJiYobS5uZXh0U2libGluZz1vLm5leHRTaWJsaW5nKSx2b2lkIDAhPT1hW2ZdJiYobS5vbGRWYWx1ZT1hW2ZdKSx0KHApLHAucmVjb3Jkc18ucHVzaChtKX19ZnVuY3Rpb24gcyhlKXtpZih0aGlzLmNoaWxkTGlzdD0hIWUuY2hpbGRMaXN0LHRoaXMuc3VidHJlZT0hIWUuc3VidHJlZSxcImF0dHJpYnV0ZXNcImluIGV8fCEoXCJhdHRyaWJ1dGVPbGRWYWx1ZVwiaW4gZXx8XCJhdHRyaWJ1dGVGaWx0ZXJcImluIGUpP3RoaXMuYXR0cmlidXRlcz0hIWUuYXR0cmlidXRlczp0aGlzLmF0dHJpYnV0ZXM9ITAsXCJjaGFyYWN0ZXJEYXRhT2xkVmFsdWVcImluIGUmJiEoXCJjaGFyYWN0ZXJEYXRhXCJpbiBlKT90aGlzLmNoYXJhY3RlckRhdGE9ITA6dGhpcy5jaGFyYWN0ZXJEYXRhPSEhZS5jaGFyYWN0ZXJEYXRhLCF0aGlzLmF0dHJpYnV0ZXMmJihlLmF0dHJpYnV0ZU9sZFZhbHVlfHxcImF0dHJpYnV0ZUZpbHRlclwiaW4gZSl8fCF0aGlzLmNoYXJhY3RlckRhdGEmJmUuY2hhcmFjdGVyRGF0YU9sZFZhbHVlKXRocm93IG5ldyBUeXBlRXJyb3I7aWYodGhpcy5jaGFyYWN0ZXJEYXRhPSEhZS5jaGFyYWN0ZXJEYXRhLHRoaXMuYXR0cmlidXRlT2xkVmFsdWU9ISFlLmF0dHJpYnV0ZU9sZFZhbHVlLHRoaXMuY2hhcmFjdGVyRGF0YU9sZFZhbHVlPSEhZS5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUsXCJhdHRyaWJ1dGVGaWx0ZXJcImluIGUpe2lmKG51bGw9PWUuYXR0cmlidXRlRmlsdGVyfHxcIm9iamVjdFwiIT10eXBlb2YgZS5hdHRyaWJ1dGVGaWx0ZXIpdGhyb3cgbmV3IFR5cGVFcnJvcjt0aGlzLmF0dHJpYnV0ZUZpbHRlcj13LmNhbGwoZS5hdHRyaWJ1dGVGaWx0ZXIpfWVsc2UgdGhpcy5hdHRyaWJ1dGVGaWx0ZXI9bnVsbH1mdW5jdGlvbiBjKGUpe3RoaXMuY2FsbGJhY2tfPWUsdGhpcy5ub2Rlc189W10sdGhpcy5yZWNvcmRzXz1bXSx0aGlzLnVpZF89Kyt2LHRoaXMuc2NoZWR1bGVkXz0hMX1mdW5jdGlvbiBsKGUsdCxuKXt0aGlzLm9ic2VydmVyPWUsdGhpcy50YXJnZXQ9dCx0aGlzLm9wdGlvbnM9bix0aGlzLnRyYW5zaWVudE9ic2VydmVkTm9kZXM9W119dmFyIHU9ZS5zZXRFbmRPZk1pY3JvdGFzayxkPWUud3JhcElmTmVlZGVkLHA9ZS53cmFwcGVycyxoPW5ldyBXZWFrTWFwLGY9W10sbT0hMSx3PUFycmF5LnByb3RvdHlwZS5zbGljZSx2PTA7Yy5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmMsb2JzZXJ2ZTpmdW5jdGlvbihlLHQpe2U9ZChlKTt2YXIgbixyPW5ldyBzKHQpLG89aC5nZXQoZSk7b3x8aC5zZXQoZSxvPVtdKTtmb3IodmFyIGk9MDtpPG8ubGVuZ3RoO2krKylvW2ldLm9ic2VydmVyPT09dGhpcyYmKG49b1tpXSxuLnJlbW92ZVRyYW5zaWVudE9ic2VydmVycygpLG4ub3B0aW9ucz1yKTtufHwobj1uZXcgbCh0aGlzLGUsciksby5wdXNoKG4pLHRoaXMubm9kZXNfLnB1c2goZSkpfSxkaXNjb25uZWN0OmZ1bmN0aW9uKCl7dGhpcy5ub2Rlc18uZm9yRWFjaChmdW5jdGlvbihlKXtmb3IodmFyIHQ9aC5nZXQoZSksbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO2lmKHIub2JzZXJ2ZXI9PT10aGlzKXt0LnNwbGljZShuLDEpO2JyZWFrfX19LHRoaXMpLHRoaXMucmVjb3Jkc189W119LHRha2VSZWNvcmRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWNvcmRzXztyZXR1cm4gdGhpcy5yZWNvcmRzXz1bXSxlfX0sbC5wcm90b3R5cGU9e2FkZFRyYW5zaWVudE9ic2VydmVyOmZ1bmN0aW9uKGUpe2lmKGUhPT10aGlzLnRhcmdldCl7dCh0aGlzLm9ic2VydmVyKSx0aGlzLnRyYW5zaWVudE9ic2VydmVkTm9kZXMucHVzaChlKTt2YXIgbj1oLmdldChlKTtufHxoLnNldChlLG49W10pLG4ucHVzaCh0aGlzKX19LHJlbW92ZVRyYW5zaWVudE9ic2VydmVyczpmdW5jdGlvbigpe3ZhciBlPXRoaXMudHJhbnNpZW50T2JzZXJ2ZWROb2Rlczt0aGlzLnRyYW5zaWVudE9ic2VydmVkTm9kZXM9W107Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0KyspZm9yKHZhciBuPWVbdF0scj1oLmdldChuKSxvPTA7bzxyLmxlbmd0aDtvKyspaWYocltvXT09PXRoaXMpe3Iuc3BsaWNlKG8sMSk7YnJlYWt9fX0sZS5lbnF1ZXVlTXV0YXRpb249YSxlLnJlZ2lzdGVyVHJhbnNpZW50T2JzZXJ2ZXJzPW8sZS53cmFwcGVycy5NdXRhdGlvbk9ic2VydmVyPWMsZS53cmFwcGVycy5NdXRhdGlvblJlY29yZD1yfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSx0KXt0aGlzLnJvb3Q9ZSx0aGlzLnBhcmVudD10fWZ1bmN0aW9uIG4oZSx0KXtpZihlLnRyZWVTY29wZV8hPT10KXtlLnRyZWVTY29wZV89dDtmb3IodmFyIHI9ZS5zaGFkb3dSb290O3I7cj1yLm9sZGVyU2hhZG93Um9vdClyLnRyZWVTY29wZV8ucGFyZW50PXQ7Zm9yKHZhciBvPWUuZmlyc3RDaGlsZDtvO289by5uZXh0U2libGluZyluKG8sdCl9fWZ1bmN0aW9uIHIobil7aWYobiBpbnN0YW5jZW9mIGUud3JhcHBlcnMuV2luZG93LG4udHJlZVNjb3BlXylyZXR1cm4gbi50cmVlU2NvcGVfO3ZhciBvLGk9bi5wYXJlbnROb2RlO3JldHVybiBvPWk/cihpKTpuZXcgdChuLG51bGwpLG4udHJlZVNjb3BlXz1vfXQucHJvdG90eXBlPXtnZXQgcmVuZGVyZXIoKXtyZXR1cm4gdGhpcy5yb290IGluc3RhbmNlb2YgZS53cmFwcGVycy5TaGFkb3dSb290P2UuZ2V0UmVuZGVyZXJGb3JIb3N0KHRoaXMucm9vdC5ob3N0KTpudWxsfSxjb250YWluczpmdW5jdGlvbihlKXtmb3IoO2U7ZT1lLnBhcmVudClpZihlPT09dGhpcylyZXR1cm4hMDtyZXR1cm4hMX19LGUuVHJlZVNjb3BlPXQsZS5nZXRUcmVlU2NvcGU9cixlLnNldFRyZWVTY29wZT1ufSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBHLlNoYWRvd1Jvb3R9ZnVuY3Rpb24gbihlKXtyZXR1cm4gQShlKS5yb290fWZ1bmN0aW9uIHIoZSxyKXt2YXIgcz1bXSxjPWU7Zm9yKHMucHVzaChjKTtjOyl7dmFyIGw9YShjKTtpZihsJiZsLmxlbmd0aD4wKXtmb3IodmFyIHU9MDt1PGwubGVuZ3RoO3UrKyl7dmFyIHA9bFt1XTtpZihpKHApKXt2YXIgaD1uKHApLGY9aC5vbGRlclNoYWRvd1Jvb3Q7ZiYmcy5wdXNoKGYpfXMucHVzaChwKX1jPWxbbC5sZW5ndGgtMV19ZWxzZSBpZih0KGMpKXtpZihkKGUsYykmJm8ocikpYnJlYWs7Yz1jLmhvc3Qscy5wdXNoKGMpfWVsc2UgYz1jLnBhcmVudE5vZGUsYyYmcy5wdXNoKGMpfXJldHVybiBzfWZ1bmN0aW9uIG8oZSl7aWYoIWUpcmV0dXJuITE7c3dpdGNoKGUudHlwZSl7Y2FzZVwiYWJvcnRcIjpjYXNlXCJlcnJvclwiOmNhc2VcInNlbGVjdFwiOmNhc2VcImNoYW5nZVwiOmNhc2VcImxvYWRcIjpjYXNlXCJyZXNldFwiOmNhc2VcInJlc2l6ZVwiOmNhc2VcInNjcm9sbFwiOmNhc2VcInNlbGVjdHN0YXJ0XCI6cmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gaShlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEhUTUxTaGFkb3dFbGVtZW50fWZ1bmN0aW9uIGEodCl7cmV0dXJuIGUuZ2V0RGVzdGluYXRpb25JbnNlcnRpb25Qb2ludHModCl9ZnVuY3Rpb24gcyhlLHQpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gdDt0IGluc3RhbmNlb2YgRy5XaW5kb3cmJih0PXQuZG9jdW1lbnQpO2Zvcih2YXIgbj1BKHQpLHI9ZVswXSxvPUEociksaT1sKG4sbyksYT0wO2E8ZS5sZW5ndGg7YSsrKXt2YXIgcz1lW2FdO2lmKEEocyk9PT1pKXJldHVybiBzfXJldHVybiBlW2UubGVuZ3RoLTFdfWZ1bmN0aW9uIGMoZSl7Zm9yKHZhciB0PVtdO2U7ZT1lLnBhcmVudCl0LnB1c2goZSk7cmV0dXJuIHR9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgbj1jKGUpLHI9Yyh0KSxvPW51bGw7bi5sZW5ndGg+MCYmci5sZW5ndGg+MDspe3ZhciBpPW4ucG9wKCksYT1yLnBvcCgpO2lmKGkhPT1hKWJyZWFrO289aX1yZXR1cm4gb31mdW5jdGlvbiB1KGUsdCxuKXt0IGluc3RhbmNlb2YgRy5XaW5kb3cmJih0PXQuZG9jdW1lbnQpO3ZhciBvLGk9QSh0KSxhPUEobikscz1yKG4sZSksbz1sKGksYSk7b3x8KG89YS5yb290KTtmb3IodmFyIGM9bztjO2M9Yy5wYXJlbnQpZm9yKHZhciB1PTA7dTxzLmxlbmd0aDt1Kyspe3ZhciBkPXNbdV07aWYoQShkKT09PWMpcmV0dXJuIGR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChlLHQpe3JldHVybiBBKGUpPT09QSh0KX1mdW5jdGlvbiBwKGUpe2lmKCFLLmdldChlKSYmKEsuc2V0KGUsITApLGYoVihlKSxWKGUudGFyZ2V0KSksUCkpe3ZhciB0PVA7dGhyb3cgUD1udWxsLHR9fWZ1bmN0aW9uIGgoZSl7c3dpdGNoKGUudHlwZSl7Y2FzZVwibG9hZFwiOmNhc2VcImJlZm9yZXVubG9hZFwiOmNhc2VcInVubG9hZFwiOnJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIGYodCxuKXtpZigkLmdldCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkU3RhdGVFcnJvclwiKTskLnNldCh0LCEwKSxlLnJlbmRlckFsbFBlbmRpbmcoKTt2YXIgbyxpLGE7aWYoaCh0KSYmIXQuYnViYmxlcyl7dmFyIHM9bjtzIGluc3RhbmNlb2YgRy5Eb2N1bWVudCYmKGE9cy5kZWZhdWx0VmlldykmJihpPXMsbz1bXSl9aWYoIW8paWYobiBpbnN0YW5jZW9mIEcuV2luZG93KWE9bixvPVtdO2Vsc2UgaWYobz1yKG4sdCksIWgodCkpe3ZhciBzPW9bby5sZW5ndGgtMV07cyBpbnN0YW5jZW9mIEcuRG9jdW1lbnQmJihhPXMuZGVmYXVsdFZpZXcpfXJldHVybiBuZS5zZXQodCxvKSxtKHQsbyxhLGkpJiZ3KHQsbyxhLGkpJiZ2KHQsbyxhLGkpLEouc2V0KHQscmUpLFlbXCJkZWxldGVcIl0odCxudWxsKSwkW1wiZGVsZXRlXCJdKHQpLHQuZGVmYXVsdFByZXZlbnRlZH1mdW5jdGlvbiBtKGUsdCxuLHIpe3ZhciBvPW9lO2lmKG4mJiFnKG4sZSxvLHQscikpcmV0dXJuITE7Zm9yKHZhciBpPXQubGVuZ3RoLTE7aT4wO2ktLSlpZighZyh0W2ldLGUsbyx0LHIpKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHcoZSx0LG4scil7dmFyIG89aWUsaT10WzBdfHxuO3JldHVybiBnKGksZSxvLHQscil9ZnVuY3Rpb24gdihlLHQsbixyKXtmb3IodmFyIG89YWUsaT0xO2k8dC5sZW5ndGg7aSsrKWlmKCFnKHRbaV0sZSxvLHQscikpcmV0dXJuO24mJnQubGVuZ3RoPjAmJmcobixlLG8sdCxyKX1mdW5jdGlvbiBnKGUsdCxuLHIsbyl7dmFyIGk9ei5nZXQoZSk7aWYoIWkpcmV0dXJuITA7dmFyIGE9b3x8cyhyLGUpO2lmKGE9PT1lKXtpZihuPT09b2UpcmV0dXJuITA7bj09PWFlJiYobj1pZSl9ZWxzZSBpZihuPT09YWUmJiF0LmJ1YmJsZXMpcmV0dXJuITA7aWYoXCJyZWxhdGVkVGFyZ2V0XCJpbiB0KXt2YXIgYz1CKHQpLGw9Yy5yZWxhdGVkVGFyZ2V0O2lmKGwpe2lmKGwgaW5zdGFuY2VvZiBPYmplY3QmJmwuYWRkRXZlbnRMaXN0ZW5lcil7dmFyIGQ9VihsKSxwPXUodCxlLGQpO2lmKHA9PT1hKXJldHVybiEwfWVsc2UgcD1udWxsO1ouc2V0KHQscCl9fUouc2V0KHQsbik7dmFyIGg9dC50eXBlLGY9ITE7WC5zZXQodCxhKSxZLnNldCh0LGUpLGkuZGVwdGgrKztmb3IodmFyIG09MCx3PWkubGVuZ3RoO3c+bTttKyspe3ZhciB2PWlbbV07aWYodi5yZW1vdmVkKWY9ITA7ZWxzZSBpZighKHYudHlwZSE9PWh8fCF2LmNhcHR1cmUmJm49PT1vZXx8di5jYXB0dXJlJiZuPT09YWUpKXRyeXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB2LmhhbmRsZXI/di5oYW5kbGVyLmNhbGwoZSx0KTp2LmhhbmRsZXIuaGFuZGxlRXZlbnQodCksZWUuZ2V0KHQpKXJldHVybiExfWNhdGNoKGcpe1B8fChQPWcpfX1pZihpLmRlcHRoLS0sZiYmMD09PWkuZGVwdGgpe3ZhciBiPWkuc2xpY2UoKTtpLmxlbmd0aD0wO2Zvcih2YXIgbT0wO208Yi5sZW5ndGg7bSsrKWJbbV0ucmVtb3ZlZHx8aS5wdXNoKGJbbV0pfXJldHVybiFRLmdldCh0KX1mdW5jdGlvbiBiKGUsdCxuKXt0aGlzLnR5cGU9ZSx0aGlzLmhhbmRsZXI9dCx0aGlzLmNhcHR1cmU9Qm9vbGVhbihuKX1mdW5jdGlvbiB5KGUsdCl7aWYoIShlIGluc3RhbmNlb2Ygc2UpKXJldHVybiBWKFQoc2UsXCJFdmVudFwiLGUsdCkpO3ZhciBuPWU7cmV0dXJuIGJlfHxcImJlZm9yZXVubG9hZFwiIT09bi50eXBlfHx0aGlzIGluc3RhbmNlb2YgTT92b2lkIFUobix0aGlzKTpuZXcgTShuKX1mdW5jdGlvbiBFKGUpe3JldHVybiBlJiZlLnJlbGF0ZWRUYXJnZXQ/T2JqZWN0LmNyZWF0ZShlLHtyZWxhdGVkVGFyZ2V0Ont2YWx1ZTpCKGUucmVsYXRlZFRhcmdldCl9fSk6ZX1mdW5jdGlvbiBfKGUsdCxuKXt2YXIgcj13aW5kb3dbZV0sbz1mdW5jdGlvbih0LG4pe3JldHVybiB0IGluc3RhbmNlb2Ygcj92b2lkIFUodCx0aGlzKTpWKFQocixlLHQsbikpfTtpZihvLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSxuJiZXKG8ucHJvdG90eXBlLG4pLHIpdHJ5e0YocixvLG5ldyByKFwidGVtcFwiKSl9Y2F0Y2goaSl7RihyLG8sZG9jdW1lbnQuY3JlYXRlRXZlbnQoZSkpfXJldHVybiBvfWZ1bmN0aW9uIFMoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXthcmd1bWVudHNbdF09Qihhcmd1bWVudHNbdF0pO3ZhciBuPUIodGhpcyk7bltlXS5hcHBseShuLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIFQoZSx0LG4scil7aWYodmUpcmV0dXJuIG5ldyBlKG4sRShyKSk7dmFyIG89Qihkb2N1bWVudC5jcmVhdGVFdmVudCh0KSksaT13ZVt0XSxhPVtuXTtyZXR1cm4gT2JqZWN0LmtleXMoaSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1udWxsIT1yJiZlIGluIHI/cltlXTppW2VdO1wicmVsYXRlZFRhcmdldFwiPT09ZSYmKHQ9Qih0KSksYS5wdXNoKHQpfSksb1tcImluaXRcIit0XS5hcHBseShvLGEpLG99ZnVuY3Rpb24gTShlKXt5LmNhbGwodGhpcyxlKX1mdW5jdGlvbiBPKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ITA6ZSYmZS5oYW5kbGVFdmVudH1mdW5jdGlvbiBMKGUpe3N3aXRjaChlKXtjYXNlXCJET01BdHRyTW9kaWZpZWRcIjpjYXNlXCJET01BdHRyaWJ1dGVOYW1lQ2hhbmdlZFwiOmNhc2VcIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZFwiOmNhc2VcIkRPTUVsZW1lbnROYW1lQ2hhbmdlZFwiOmNhc2VcIkRPTU5vZGVJbnNlcnRlZFwiOmNhc2VcIkRPTU5vZGVJbnNlcnRlZEludG9Eb2N1bWVudFwiOmNhc2VcIkRPTU5vZGVSZW1vdmVkXCI6Y2FzZVwiRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnRcIjpjYXNlXCJET01TdWJ0cmVlTW9kaWZpZWRcIjpyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBOKGUpe1UoZSx0aGlzKX1mdW5jdGlvbiBDKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRy5TaGFkb3dSb290JiYoZT1lLmhvc3QpLEIoZSl9ZnVuY3Rpb24gaihlLHQpe3ZhciBuPXouZ2V0KGUpO2lmKG4pZm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspaWYoIW5bcl0ucmVtb3ZlZCYmbltyXS50eXBlPT09dClyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBEKGUsdCl7Zm9yKHZhciBuPUIoZSk7bjtuPW4ucGFyZW50Tm9kZSlpZihqKFYobiksdCkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gSChlKXtrKGUsRWUpfWZ1bmN0aW9uIHgodCxuLG8saSl7ZS5yZW5kZXJBbGxQZW5kaW5nKCk7dmFyIGE9VihfZS5jYWxsKHEobiksbyxpKSk7aWYoIWEpcmV0dXJuIG51bGw7dmFyIGM9cihhLG51bGwpLGw9Yy5sYXN0SW5kZXhPZih0KTtyZXR1cm4tMT09bD9udWxsOihjPWMuc2xpY2UoMCxsKSxzKGMsdCkpfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9dGUuZ2V0KHRoaXMpO3JldHVybiB0JiZ0W2VdJiZ0W2VdLnZhbHVlfHxudWxsfX1mdW5jdGlvbiBJKGUpe3ZhciB0PWUuc2xpY2UoMik7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciByPXRlLmdldCh0aGlzKTtyfHwocj1PYmplY3QuY3JlYXRlKG51bGwpLHRlLnNldCh0aGlzLHIpKTt2YXIgbz1yW2VdO2lmKG8mJnRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG8ud3JhcHBlZCwhMSksXCJmdW5jdGlvblwiPT10eXBlb2Ygbil7dmFyIGk9ZnVuY3Rpb24odCl7dmFyIHI9bi5jYWxsKHRoaXMsdCk7cj09PSExP3QucHJldmVudERlZmF1bHQoKTpcIm9uYmVmb3JldW5sb2FkXCI9PT1lJiZcInN0cmluZ1wiPT10eXBlb2YgciYmKHQucmV0dXJuVmFsdWU9cil9O3RoaXMuYWRkRXZlbnRMaXN0ZW5lcih0LGksITEpLHJbZV09e3ZhbHVlOm4sd3JhcHBlZDppfX19fXZhciBQLGs9ZS5mb3J3YXJkTWV0aG9kc1RvV3JhcHBlcixBPWUuZ2V0VHJlZVNjb3BlLFc9ZS5taXhpbixGPWUucmVnaXN0ZXJXcmFwcGVyLFU9ZS5zZXRXcmFwcGVyLHE9ZS51bnNhZmVVbndyYXAsQj1lLnVud3JhcCxWPWUud3JhcCxHPWUud3JhcHBlcnMsej0obmV3IFdlYWtNYXAsbmV3IFdlYWtNYXApLEs9bmV3IFdlYWtNYXAsJD1uZXcgV2Vha01hcCxYPW5ldyBXZWFrTWFwLFk9bmV3IFdlYWtNYXAsWj1uZXcgV2Vha01hcCxKPW5ldyBXZWFrTWFwLFE9bmV3IFdlYWtNYXAsZWU9bmV3IFdlYWtNYXAsdGU9bmV3IFdlYWtNYXAsbmU9bmV3IFdlYWtNYXAscmU9MCxvZT0xLGllPTIsYWU9MztiLnByb3RvdHlwZT17ZXF1YWxzOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmhhbmRsZXI9PT1lLmhhbmRsZXImJnRoaXMudHlwZT09PWUudHlwZSYmdGhpcy5jYXB0dXJlPT09ZS5jYXB0dXJlfSxnZXQgcmVtb3ZlZCgpe3JldHVybiBudWxsPT09dGhpcy5oYW5kbGVyfSxyZW1vdmU6ZnVuY3Rpb24oKXt0aGlzLmhhbmRsZXI9bnVsbH19O3ZhciBzZT13aW5kb3cuRXZlbnQ7c2UucHJvdG90eXBlLnBvbHltZXJCbGFja0xpc3RfPXtyZXR1cm5WYWx1ZTohMCxrZXlMb2NhdGlvbjohMH0seS5wcm90b3R5cGU9e2dldCB0YXJnZXQoKXtyZXR1cm4gWC5nZXQodGhpcyl9LGdldCBjdXJyZW50VGFyZ2V0KCl7cmV0dXJuIFkuZ2V0KHRoaXMpfSxnZXQgZXZlbnRQaGFzZSgpe3JldHVybiBKLmdldCh0aGlzKX0sZ2V0IHBhdGgoKXt2YXIgZT1uZS5nZXQodGhpcyk7cmV0dXJuIGU/ZS5zbGljZSgpOltdfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXtRLnNldCh0aGlzLCEwKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7US5zZXQodGhpcywhMCksZWUuc2V0KHRoaXMsITApfX07dmFyIGNlPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtyZXR1cm4gZS5pbml0RXZlbnQoXCJ0ZXN0XCIsITAsITApLGUucHJldmVudERlZmF1bHQoKSxlLmRlZmF1bHRQcmV2ZW50ZWR9KCk7Y2V8fCh5LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe3RoaXMuY2FuY2VsYWJsZSYmKHEodGhpcykucHJldmVudERlZmF1bHQoKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImRlZmF1bHRQcmV2ZW50ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9LGNvbmZpZ3VyYWJsZTohMH0pKX0pLEYoc2UseSxkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpKTt2YXIgbGU9XyhcIlVJRXZlbnRcIix5KSx1ZT1fKFwiQ3VzdG9tRXZlbnRcIix5KSxkZT17Z2V0IHJlbGF0ZWRUYXJnZXQoKXt2YXIgZT1aLmdldCh0aGlzKTtyZXR1cm4gdm9pZCAwIT09ZT9lOlYoQih0aGlzKS5yZWxhdGVkVGFyZ2V0KX19LHBlPVcoe2luaXRNb3VzZUV2ZW50OlMoXCJpbml0TW91c2VFdmVudFwiLDE0KX0sZGUpLGhlPVcoe2luaXRGb2N1c0V2ZW50OlMoXCJpbml0Rm9jdXNFdmVudFwiLDUpfSxkZSksZmU9XyhcIk1vdXNlRXZlbnRcIixsZSxwZSksbWU9XyhcIkZvY3VzRXZlbnRcIixsZSxoZSksd2U9T2JqZWN0LmNyZWF0ZShudWxsKSx2ZT1mdW5jdGlvbigpe3RyeXtuZXcgd2luZG93LkZvY3VzRXZlbnQoXCJmb2N1c1wiKX1jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4hMH0oKTtpZighdmUpe3ZhciBnZT1mdW5jdGlvbihlLHQsbil7aWYobil7dmFyIHI9d2Vbbl07dD1XKFcoe30sciksdCl9d2VbZV09dH07Z2UoXCJFdmVudFwiLHtidWJibGVzOiExLGNhbmNlbGFibGU6ITF9KSxnZShcIkN1c3RvbUV2ZW50XCIse2RldGFpbDpudWxsfSxcIkV2ZW50XCIpLGdlKFwiVUlFdmVudFwiLHt2aWV3Om51bGwsZGV0YWlsOjB9LFwiRXZlbnRcIiksZ2UoXCJNb3VzZUV2ZW50XCIse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxjdHJsS2V5OiExLGFsdEtleTohMSxzaGlmdEtleTohMSxtZXRhS2V5OiExLGJ1dHRvbjowLHJlbGF0ZWRUYXJnZXQ6bnVsbH0sXCJVSUV2ZW50XCIpLGdlKFwiRm9jdXNFdmVudFwiLHtyZWxhdGVkVGFyZ2V0Om51bGx9LFwiVUlFdmVudFwiKX12YXIgYmU9d2luZG93LkJlZm9yZVVubG9hZEV2ZW50O00ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeS5wcm90b3R5cGUpLFcoTS5wcm90b3R5cGUse2dldCByZXR1cm5WYWx1ZSgpe3JldHVybiBxKHRoaXMpLnJldHVyblZhbHVlfSxzZXQgcmV0dXJuVmFsdWUoZSl7cSh0aGlzKS5yZXR1cm5WYWx1ZT1lfX0pLGJlJiZGKGJlLE0pO3ZhciB5ZT13aW5kb3cuRXZlbnRUYXJnZXQsRWU9W1wiYWRkRXZlbnRMaXN0ZW5lclwiLFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLFwiZGlzcGF0Y2hFdmVudFwiXTtbTm9kZSxXaW5kb3ddLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wcm90b3R5cGU7RWUuZm9yRWFjaChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlK1wiX1wiLHt2YWx1ZTp0W2VdfSl9KX0pLE4ucHJvdG90eXBlPXthZGRFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGUsdCxuKXtpZihPKHQpJiYhTChlKSl7dmFyIHI9bmV3IGIoZSx0LG4pLG89ei5nZXQodGhpcyk7aWYobyl7Zm9yKHZhciBpPTA7aTxvLmxlbmd0aDtpKyspaWYoci5lcXVhbHMob1tpXSkpcmV0dXJufWVsc2Ugbz1bXSxvLmRlcHRoPTAsei5zZXQodGhpcyxvKTtvLnB1c2gocik7dmFyIGE9Qyh0aGlzKTthLmFkZEV2ZW50TGlzdGVuZXJfKGUscCwhMCl9fSxyZW1vdmVFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGUsdCxuKXtuPUJvb2xlYW4obik7dmFyIHI9ei5nZXQodGhpcyk7aWYocil7Zm9yKHZhciBvPTAsaT0hMSxhPTA7YTxyLmxlbmd0aDthKyspclthXS50eXBlPT09ZSYmclthXS5jYXB0dXJlPT09biYmKG8rKyxyW2FdLmhhbmRsZXI9PT10JiYoaT0hMCxyW2FdLnJlbW92ZSgpKSk7aWYoaSYmMT09PW8pe3ZhciBzPUModGhpcyk7cy5yZW1vdmVFdmVudExpc3RlbmVyXyhlLHAsITApfX19LGRpc3BhdGNoRXZlbnQ6ZnVuY3Rpb24odCl7dmFyIG49Qih0KSxyPW4udHlwZTtLLnNldChuLCExKSxlLnJlbmRlckFsbFBlbmRpbmcoKTt2YXIgbztEKHRoaXMscil8fChvPWZ1bmN0aW9uKCl7fSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIocixvLCEwKSk7dHJ5e3JldHVybiBCKHRoaXMpLmRpc3BhdGNoRXZlbnRfKG4pfWZpbmFsbHl7byYmdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHIsbywhMCl9fX0seWUmJkYoeWUsTik7dmFyIF9lPWRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQ7ZS5lbGVtZW50RnJvbVBvaW50PXgsZS5nZXRFdmVudEhhbmRsZXJHZXR0ZXI9UixlLmdldEV2ZW50SGFuZGxlclNldHRlcj1JLGUud3JhcEV2ZW50VGFyZ2V0TWV0aG9kcz1ILGUud3JhcHBlcnMuQmVmb3JlVW5sb2FkRXZlbnQ9TSxlLndyYXBwZXJzLkN1c3RvbUV2ZW50PXVlLGUud3JhcHBlcnMuRXZlbnQ9eSxlLndyYXBwZXJzLkV2ZW50VGFyZ2V0PU4sZS53cmFwcGVycy5Gb2N1c0V2ZW50PW1lLGUud3JhcHBlcnMuTW91c2VFdmVudD1mZSxlLndyYXBwZXJzLlVJRXZlbnQ9bGV9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsbSl9ZnVuY3Rpb24gbihlKXtsKGUsdGhpcyl9ZnVuY3Rpb24gcigpe3RoaXMubGVuZ3RoPTAsdCh0aGlzLFwibGVuZ3RoXCIpfWZ1bmN0aW9uIG8oZSl7Zm9yKHZhciB0PW5ldyByLG89MDtvPGUubGVuZ3RoO28rKyl0W29dPW5ldyBuKGVbb10pO3JldHVybiB0Lmxlbmd0aD1vLHR9ZnVuY3Rpb24gaShlKXthLmNhbGwodGhpcyxlKX12YXIgYT1lLndyYXBwZXJzLlVJRXZlbnQscz1lLm1peGluLGM9ZS5yZWdpc3RlcldyYXBwZXIsbD1lLnNldFdyYXBwZXIsdT1lLnVuc2FmZVVud3JhcCxkPWUud3JhcCxwPXdpbmRvdy5Ub3VjaEV2ZW50O2lmKHApe3ZhciBoO3RyeXtoPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiVG91Y2hFdmVudFwiKX1jYXRjaChmKXtyZXR1cm59dmFyIG09e2VudW1lcmFibGU6ITF9O24ucHJvdG90eXBlPXtnZXQgdGFyZ2V0KCl7cmV0dXJuIGQodSh0aGlzKS50YXJnZXQpfX07dmFyIHc9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldDpudWxsfTtbXCJjbGllbnRYXCIsXCJjbGllbnRZXCIsXCJzY3JlZW5YXCIsXCJzY3JlZW5ZXCIsXCJwYWdlWFwiLFwicGFnZVlcIixcImlkZW50aWZpZXJcIixcIndlYmtpdFJhZGl1c1hcIixcIndlYmtpdFJhZGl1c1lcIixcIndlYmtpdFJvdGF0aW9uQW5nbGVcIixcIndlYmtpdEZvcmNlXCJdLmZvckVhY2goZnVuY3Rpb24oZSl7dy5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdSh0aGlzKVtlXX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLGUsdyl9KSxyLnByb3RvdHlwZT17aXRlbTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXX19LGkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYS5wcm90b3R5cGUpLHMoaS5wcm90b3R5cGUse2dldCB0b3VjaGVzKCl7cmV0dXJuIG8odSh0aGlzKS50b3VjaGVzKX0sZ2V0IHRhcmdldFRvdWNoZXMoKXtyZXR1cm4gbyh1KHRoaXMpLnRhcmdldFRvdWNoZXMpfSxnZXQgY2hhbmdlZFRvdWNoZXMoKXtyZXR1cm4gbyh1KHRoaXMpLmNoYW5nZWRUb3VjaGVzKX0saW5pdFRvdWNoRXZlbnQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIil9fSksYyhwLGksaCksZS53cmFwcGVycy5Ub3VjaD1uLGUud3JhcHBlcnMuVG91Y2hFdmVudD1pLGUud3JhcHBlcnMuVG91Y2hMaXN0PXJ9fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHMpfWZ1bmN0aW9uIG4oKXt0aGlzLmxlbmd0aD0wLHQodGhpcyxcImxlbmd0aFwiKX1mdW5jdGlvbiByKGUpe2lmKG51bGw9PWUpcmV0dXJuIGU7Zm9yKHZhciB0PW5ldyBuLHI9MCxvPWUubGVuZ3RoO28+cjtyKyspdFtyXT1hKGVbcl0pO3JldHVybiB0Lmxlbmd0aD1vLHR9ZnVuY3Rpb24gbyhlLHQpe2UucHJvdG90eXBlW3RdPWZ1bmN0aW9uKCl7cmV0dXJuIHIoaSh0aGlzKVt0XS5hcHBseShpKHRoaXMpLGFyZ3VtZW50cykpfX12YXIgaT1lLnVuc2FmZVVud3JhcCxhPWUud3JhcCxzPXtlbnVtZXJhYmxlOiExfTtuLnByb3RvdHlwZT17aXRlbTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXX19LHQobi5wcm90b3R5cGUsXCJpdGVtXCIpLGUud3JhcHBlcnMuTm9kZUxpc3Q9bixlLmFkZFdyYXBOb2RlTGlzdE1ldGhvZD1vLGUud3JhcE5vZGVMaXN0PXJ9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS53cmFwSFRNTENvbGxlY3Rpb249ZS53cmFwTm9kZUxpc3QsZS53cmFwcGVycy5IVE1MQ29sbGVjdGlvbj1lLndyYXBwZXJzLk5vZGVMaXN0fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7TyhlIGluc3RhbmNlb2YgXyl9ZnVuY3Rpb24gbihlKXt2YXIgdD1uZXcgVDtyZXR1cm4gdFswXT1lLHQubGVuZ3RoPTEsdH1mdW5jdGlvbiByKGUsdCxuKXtOKHQsXCJjaGlsZExpc3RcIix7cmVtb3ZlZE5vZGVzOm4scHJldmlvdXNTaWJsaW5nOmUucHJldmlvdXNTaWJsaW5nLG5leHRTaWJsaW5nOmUubmV4dFNpYmxpbmd9KX1mdW5jdGlvbiBvKGUsdCl7TihlLFwiY2hpbGRMaXN0XCIse3JlbW92ZWROb2Rlczp0fSl9ZnVuY3Rpb24gaShlLHQscixvKXtpZihlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGk9cyhlKTtVPSEwO2Zvcih2YXIgYT1pLmxlbmd0aC0xO2E+PTA7YS0tKWUucmVtb3ZlQ2hpbGQoaVthXSksaVthXS5wYXJlbnROb2RlXz10O1U9ITE7Zm9yKHZhciBhPTA7YTxpLmxlbmd0aDthKyspaVthXS5wcmV2aW91c1NpYmxpbmdfPWlbYS0xXXx8cixpW2FdLm5leHRTaWJsaW5nXz1pW2ErMV18fG87cmV0dXJuIHImJihyLm5leHRTaWJsaW5nXz1pWzBdKSxvJiYoby5wcmV2aW91c1NpYmxpbmdfPWlbaS5sZW5ndGgtMV0pLGl9dmFyIGk9bihlKSxjPWUucGFyZW50Tm9kZTtyZXR1cm4gYyYmYy5yZW1vdmVDaGlsZChlKSxlLnBhcmVudE5vZGVfPXQsZS5wcmV2aW91c1NpYmxpbmdfPXIsZS5uZXh0U2libGluZ189byxyJiYoci5uZXh0U2libGluZ189ZSksbyYmKG8ucHJldmlvdXNTaWJsaW5nXz1lKSxpfWZ1bmN0aW9uIGEoZSl7aWYoZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpcmV0dXJuIHMoZSk7dmFyIHQ9bihlKSxvPWUucGFyZW50Tm9kZTtyZXR1cm4gbyYmcihlLG8sdCksdH1mdW5jdGlvbiBzKGUpe2Zvcih2YXIgdD1uZXcgVCxuPTAscj1lLmZpcnN0Q2hpbGQ7cjtyPXIubmV4dFNpYmxpbmcpdFtuKytdPXI7cmV0dXJuIHQubGVuZ3RoPW4sbyhlLHQpLHR9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZX1mdW5jdGlvbiBsKGUsdCl7UihlLHQpLGUubm9kZUlzSW5zZXJ0ZWRfKCl9ZnVuY3Rpb24gdShlLHQpe2Zvcih2YXIgbj1DKHQpLHI9MDtyPGUubGVuZ3RoO3IrKylsKGVbcl0sbil9ZnVuY3Rpb24gZChlKXtSKGUsbmV3IE0oZSxudWxsKSl9ZnVuY3Rpb24gcChlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKylkKGVbdF0pfWZ1bmN0aW9uIGgoZSx0KXt2YXIgbj1lLm5vZGVUeXBlPT09Xy5ET0NVTUVOVF9OT0RFP2U6ZS5vd25lckRvY3VtZW50O24hPT10Lm93bmVyRG9jdW1lbnQmJm4uYWRvcHROb2RlKHQpfWZ1bmN0aW9uIGYodCxuKXtpZihuLmxlbmd0aCl7dmFyIHI9dC5vd25lckRvY3VtZW50O2lmKHIhPT1uWzBdLm93bmVyRG9jdW1lbnQpZm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspZS5hZG9wdE5vZGVOb1JlbW92ZShuW29dLHIpfX1mdW5jdGlvbiBtKGUsdCl7ZihlLHQpO3ZhciBuPXQubGVuZ3RoO2lmKDE9PT1uKXJldHVybiBQKHRbMF0pO2Zvcih2YXIgcj1QKGUub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpLG89MDtuPm87bysrKXIuYXBwZW5kQ2hpbGQoUCh0W29dKSk7cmV0dXJuIHJ9ZnVuY3Rpb24gdyhlKXtpZih2b2lkIDAhPT1lLmZpcnN0Q2hpbGRfKWZvcih2YXIgdD1lLmZpcnN0Q2hpbGRfO3Q7KXt2YXIgbj10O3Q9dC5uZXh0U2libGluZ18sbi5wYXJlbnROb2RlXz1uLnByZXZpb3VzU2libGluZ189bi5uZXh0U2libGluZ189dm9pZCAwfWUuZmlyc3RDaGlsZF89ZS5sYXN0Q2hpbGRfPXZvaWQgMH1mdW5jdGlvbiB2KGUpe2lmKGUuaW52YWxpZGF0ZVNoYWRvd1JlbmRlcmVyKCkpe2Zvcih2YXIgdD1lLmZpcnN0Q2hpbGQ7dDspe08odC5wYXJlbnROb2RlPT09ZSk7dmFyIG49dC5uZXh0U2libGluZyxyPVAodCksbz1yLnBhcmVudE5vZGU7byYmWC5jYWxsKG8sciksdC5wcmV2aW91c1NpYmxpbmdfPXQubmV4dFNpYmxpbmdfPXQucGFyZW50Tm9kZV89bnVsbCx0PW59ZS5maXJzdENoaWxkXz1lLmxhc3RDaGlsZF89bnVsbH1lbHNlIGZvcih2YXIgbixpPVAoZSksYT1pLmZpcnN0Q2hpbGQ7YTspbj1hLm5leHRTaWJsaW5nLFguY2FsbChpLGEpLGE9bn1mdW5jdGlvbiBnKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5pbnZhbGlkYXRlU2hhZG93UmVuZGVyZXIoKX1mdW5jdGlvbiBiKGUpe2Zvcih2YXIgdCxuPTA7bjxlLmxlbmd0aDtuKyspdD1lW25dLHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KX1mdW5jdGlvbiB5KGUsdCxuKXt2YXIgcjtpZihyPUEobj9xLmNhbGwobixJKGUpLCExKTpCLmNhbGwoSShlKSwhMSkpLHQpe2Zvcih2YXIgbz1lLmZpcnN0Q2hpbGQ7bztvPW8ubmV4dFNpYmxpbmcpci5hcHBlbmRDaGlsZCh5KG8sITAsbikpO2lmKGUgaW5zdGFuY2VvZiBGLkhUTUxUZW1wbGF0ZUVsZW1lbnQpZm9yKHZhciBpPXIuY29udGVudCxvPWUuY29udGVudC5maXJzdENoaWxkO287bz1vLm5leHRTaWJsaW5nKWkuYXBwZW5kQ2hpbGQoeShvLCEwLG4pKX1yZXR1cm4gcn1mdW5jdGlvbiBFKGUsdCl7aWYoIXR8fEMoZSkhPT1DKHQpKXJldHVybiExO2Zvcih2YXIgbj10O247bj1uLnBhcmVudE5vZGUpaWYobj09PWUpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gXyhlKXtPKGUgaW5zdGFuY2VvZiBWKSxTLmNhbGwodGhpcyxlKSx0aGlzLnBhcmVudE5vZGVfPXZvaWQgMCx0aGlzLmZpcnN0Q2hpbGRfPXZvaWQgMCx0aGlzLmxhc3RDaGlsZF89dm9pZCAwLHRoaXMubmV4dFNpYmxpbmdfPXZvaWQgMCx0aGlzLnByZXZpb3VzU2libGluZ189dm9pZCAwLHRoaXMudHJlZVNjb3BlXz12b2lkIDB9dmFyIFM9ZS53cmFwcGVycy5FdmVudFRhcmdldCxUPWUud3JhcHBlcnMuTm9kZUxpc3QsTT1lLlRyZWVTY29wZSxPPWUuYXNzZXJ0LEw9ZS5kZWZpbmVXcmFwR2V0dGVyLE49ZS5lbnF1ZXVlTXV0YXRpb24sQz1lLmdldFRyZWVTY29wZSxqPWUuaXNXcmFwcGVyLEQ9ZS5taXhpbixIPWUucmVnaXN0ZXJUcmFuc2llbnRPYnNlcnZlcnMseD1lLnJlZ2lzdGVyV3JhcHBlcixSPWUuc2V0VHJlZVNjb3BlLEk9ZS51bnNhZmVVbndyYXAsUD1lLnVud3JhcCxrPWUudW53cmFwSWZOZWVkZWQsQT1lLndyYXAsVz1lLndyYXBJZk5lZWRlZCxGPWUud3JhcHBlcnMsVT0hMSxxPWRvY3VtZW50LmltcG9ydE5vZGUsQj13aW5kb3cuTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlLFY9d2luZG93Lk5vZGUsRz13aW5kb3cuRG9jdW1lbnRGcmFnbWVudCx6PShWLnByb3RvdHlwZS5hcHBlbmRDaGlsZCxWLnByb3RvdHlwZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiksSz1WLnByb3RvdHlwZS5pc0VxdWFsTm9kZSwkPVYucHJvdG90eXBlLmluc2VydEJlZm9yZSxYPVYucHJvdG90eXBlLnJlbW92ZUNoaWxkLFk9Vi5wcm90b3R5cGUucmVwbGFjZUNoaWxkLFo9L1RyaWRlbnR8RWRnZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxKPVo/ZnVuY3Rpb24oZSx0KXt0cnl7WC5jYWxsKGUsdCl9Y2F0Y2gobil7aWYoIShlIGluc3RhbmNlb2YgRykpdGhyb3cgbn19OmZ1bmN0aW9uKGUsdCl7WC5jYWxsKGUsdCl9O18ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUy5wcm90b3R5cGUpLEQoXy5wcm90b3R5cGUse2FwcGVuZENoaWxkOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmluc2VydEJlZm9yZShlLG51bGwpfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oZSxuKXt0KGUpO3ZhciByO24/aihuKT9yPVAobik6KHI9bixuPUEocikpOihuPW51bGwscj1udWxsKSxuJiZPKG4ucGFyZW50Tm9kZT09PXRoaXMpO3ZhciBvLHM9bj9uLnByZXZpb3VzU2libGluZzp0aGlzLmxhc3RDaGlsZCxjPSF0aGlzLmludmFsaWRhdGVTaGFkb3dSZW5kZXJlcigpJiYhZyhlKTtpZihvPWM/YShlKTppKGUsdGhpcyxzLG4pLGMpaCh0aGlzLGUpLHcodGhpcyksJC5jYWxsKEkodGhpcyksUChlKSxyKTtlbHNle3N8fCh0aGlzLmZpcnN0Q2hpbGRfPW9bMF0pLG58fCh0aGlzLmxhc3RDaGlsZF89b1tvLmxlbmd0aC0xXSx2b2lkIDA9PT10aGlzLmZpcnN0Q2hpbGRfJiYodGhpcy5maXJzdENoaWxkXz10aGlzLmZpcnN0Q2hpbGQpKTt2YXIgbD1yP3IucGFyZW50Tm9kZTpJKHRoaXMpO2w/JC5jYWxsKGwsbSh0aGlzLG8pLHIpOmYodGhpcyxvKX1yZXR1cm4gTih0aGlzLFwiY2hpbGRMaXN0XCIse2FkZGVkTm9kZXM6byxuZXh0U2libGluZzpuLHByZXZpb3VzU2libGluZzpzfSksdShvLHRoaXMpLGV9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGUpe2lmKHQoZSksZS5wYXJlbnROb2RlIT09dGhpcyl7Zm9yKHZhciByPSExLG89KHRoaXMuY2hpbGROb2Rlcyx0aGlzLmZpcnN0Q2hpbGQpO287bz1vLm5leHRTaWJsaW5nKWlmKG89PT1lKXtyPSEwO2JyZWFrfWlmKCFyKXRocm93IG5ldyBFcnJvcihcIk5vdEZvdW5kRXJyb3JcIil9dmFyIGk9UChlKSxhPWUubmV4dFNpYmxpbmcscz1lLnByZXZpb3VzU2libGluZztpZih0aGlzLmludmFsaWRhdGVTaGFkb3dSZW5kZXJlcigpKXt2YXIgYz10aGlzLmZpcnN0Q2hpbGQsbD10aGlzLmxhc3RDaGlsZCx1PWkucGFyZW50Tm9kZTt1JiZKKHUsaSksYz09PWUmJih0aGlzLmZpcnN0Q2hpbGRfPWEpLGw9PT1lJiYodGhpcy5sYXN0Q2hpbGRfPXMpLHMmJihzLm5leHRTaWJsaW5nXz1hKSxhJiYoYS5wcmV2aW91c1NpYmxpbmdfPXMpLGUucHJldmlvdXNTaWJsaW5nXz1lLm5leHRTaWJsaW5nXz1lLnBhcmVudE5vZGVfPXZvaWQgMH1lbHNlIHcodGhpcyksSihJKHRoaXMpLGkpO3JldHVybiBVfHxOKHRoaXMsXCJjaGlsZExpc3RcIix7cmVtb3ZlZE5vZGVzOm4oZSksbmV4dFNpYmxpbmc6YSxwcmV2aW91c1NpYmxpbmc6c30pLEgodGhpcyxlKSxlfSxyZXBsYWNlQ2hpbGQ6ZnVuY3Rpb24oZSxyKXt0KGUpO3ZhciBvO2lmKGoocik/bz1QKHIpOihvPXIscj1BKG8pKSxyLnBhcmVudE5vZGUhPT10aGlzKXRocm93IG5ldyBFcnJvcihcIk5vdEZvdW5kRXJyb3JcIik7dmFyIHMsYz1yLm5leHRTaWJsaW5nLGw9ci5wcmV2aW91c1NpYmxpbmcscD0hdGhpcy5pbnZhbGlkYXRlU2hhZG93UmVuZGVyZXIoKSYmIWcoZSk7cmV0dXJuIHA/cz1hKGUpOihjPT09ZSYmKGM9ZS5uZXh0U2libGluZykscz1pKGUsdGhpcyxsLGMpKSxwPyhoKHRoaXMsZSksdyh0aGlzKSxZLmNhbGwoSSh0aGlzKSxQKGUpLG8pKToodGhpcy5maXJzdENoaWxkPT09ciYmKHRoaXMuZmlyc3RDaGlsZF89c1swXSksdGhpcy5sYXN0Q2hpbGQ9PT1yJiYodGhpcy5sYXN0Q2hpbGRfPXNbcy5sZW5ndGgtMV0pLHIucHJldmlvdXNTaWJsaW5nXz1yLm5leHRTaWJsaW5nXz1yLnBhcmVudE5vZGVfPXZvaWQgMCxvLnBhcmVudE5vZGUmJlkuY2FsbChvLnBhcmVudE5vZGUsbSh0aGlzLHMpLG8pKSxOKHRoaXMsXCJjaGlsZExpc3RcIix7YWRkZWROb2RlczpzLHJlbW92ZWROb2RlczpuKHIpLG5leHRTaWJsaW5nOmMscHJldmlvdXNTaWJsaW5nOmx9KSxkKHIpLHUocyx0aGlzKSxyfSxub2RlSXNJbnNlcnRlZF86ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWUubm9kZUlzSW5zZXJ0ZWRfKCl9LGhhc0NoaWxkTm9kZXM6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuZmlyc3RDaGlsZH0sZ2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5wYXJlbnROb2RlXz90aGlzLnBhcmVudE5vZGVfOkEoSSh0aGlzKS5wYXJlbnROb2RlKX0sZ2V0IGZpcnN0Q2hpbGQoKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5maXJzdENoaWxkXz90aGlzLmZpcnN0Q2hpbGRfOkEoSSh0aGlzKS5maXJzdENoaWxkKX0sZ2V0IGxhc3RDaGlsZCgpe3JldHVybiB2b2lkIDAhPT10aGlzLmxhc3RDaGlsZF8/dGhpcy5sYXN0Q2hpbGRfOkEoSSh0aGlzKS5sYXN0Q2hpbGQpfSxnZXQgbmV4dFNpYmxpbmcoKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5uZXh0U2libGluZ18/dGhpcy5uZXh0U2libGluZ186QShJKHRoaXMpLm5leHRTaWJsaW5nKX0sZ2V0IHByZXZpb3VzU2libGluZygpe3JldHVybiB2b2lkIDAhPT10aGlzLnByZXZpb3VzU2libGluZ18/dGhpcy5wcmV2aW91c1NpYmxpbmdfOkEoSSh0aGlzKS5wcmV2aW91c1NpYmxpbmcpfSxnZXQgcGFyZW50RWxlbWVudCgpe2Zvcih2YXIgZT10aGlzLnBhcmVudE5vZGU7ZSYmZS5ub2RlVHlwZSE9PV8uRUxFTUVOVF9OT0RFOyllPWUucGFyZW50Tm9kZTtyZXR1cm4gZX0sZ2V0IHRleHRDb250ZW50KCl7Zm9yKHZhciBlPVwiXCIsdD10aGlzLmZpcnN0Q2hpbGQ7dDt0PXQubmV4dFNpYmxpbmcpdC5ub2RlVHlwZSE9Xy5DT01NRU5UX05PREUmJihlKz10LnRleHRDb250ZW50KTtyZXR1cm4gZX0sc2V0IHRleHRDb250ZW50KGUpe251bGw9PWUmJihlPVwiXCIpO3ZhciB0PWModGhpcy5jaGlsZE5vZGVzKTtpZih0aGlzLmludmFsaWRhdGVTaGFkb3dSZW5kZXJlcigpKXtpZih2KHRoaXMpLFwiXCIhPT1lKXt2YXIgbj1JKHRoaXMpLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSk7dGhpcy5hcHBlbmRDaGlsZChuKX19ZWxzZSB3KHRoaXMpLEkodGhpcykudGV4dENvbnRlbnQ9ZTt2YXIgcj1jKHRoaXMuY2hpbGROb2Rlcyk7Tih0aGlzLFwiY2hpbGRMaXN0XCIse2FkZGVkTm9kZXM6cixyZW1vdmVkTm9kZXM6dH0pLHAodCksdShyLHRoaXMpfSxnZXQgY2hpbGROb2Rlcygpe2Zvcih2YXIgZT1uZXcgVCx0PTAsbj10aGlzLmZpcnN0Q2hpbGQ7bjtuPW4ubmV4dFNpYmxpbmcpZVt0KytdPW47cmV0dXJuIGUubGVuZ3RoPXQsZX0sY2xvbmVOb2RlOmZ1bmN0aW9uKGUpe3JldHVybiB5KHRoaXMsZSl9LGNvbnRhaW5zOmZ1bmN0aW9uKGUpe3JldHVybiBFKHRoaXMsVyhlKSl9LGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiB6LmNhbGwoSSh0aGlzKSxrKGUpKX0saXNFcXVhbE5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIEsuY2FsbChJKHRoaXMpLGsoZSkpfSxub3JtYWxpemU6ZnVuY3Rpb24oKXtmb3IodmFyIGUsdCxuPWModGhpcy5jaGlsZE5vZGVzKSxyPVtdLG89XCJcIixpPTA7aTxuLmxlbmd0aDtpKyspdD1uW2ldLHQubm9kZVR5cGU9PT1fLlRFWFRfTk9ERT9lfHx0LmRhdGEubGVuZ3RoP2U/KG8rPXQuZGF0YSxyLnB1c2godCkpOmU9dDp0aGlzLnJlbW92ZUNoaWxkKHQpOihlJiZyLmxlbmd0aCYmKGUuZGF0YSs9byxiKHIpKSxyPVtdLG89XCJcIixlPW51bGwsdC5jaGlsZE5vZGVzLmxlbmd0aCYmdC5ub3JtYWxpemUoKSk7ZSYmci5sZW5ndGgmJihlLmRhdGErPW8sYihyKSl9fSksTChfLFwib3duZXJEb2N1bWVudFwiKSx4KFYsXyxkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpLGRlbGV0ZSBfLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLGRlbGV0ZSBfLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLF8ucHJvdG90eXBlPUQoT2JqZWN0LmNyZWF0ZShTLnByb3RvdHlwZSksXy5wcm90b3R5cGUpLGUuY2xvbmVOb2RlPXksZS5ub2RlV2FzQWRkZWQ9bCxlLm5vZGVXYXNSZW1vdmVkPWQsZS5ub2Rlc1dlcmVBZGRlZD11LGUubm9kZXNXZXJlUmVtb3ZlZD1wLGUub3JpZ2luYWxJbnNlcnRCZWZvcmU9JCxlLm9yaWdpbmFsUmVtb3ZlQ2hpbGQ9WCxlLnNuYXBzaG90Tm9kZUxpc3Q9YyxlLndyYXBwZXJzLk5vZGU9X30od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQsbixyLG8pe2Zvcih2YXIgaT1udWxsLGE9bnVsbCxzPTAsYz10Lmxlbmd0aDtjPnM7cysrKWk9Yih0W3NdKSwhbyYmKGE9dihpKS5yb290KSYmYSBpbnN0YW5jZW9mIGUud3JhcHBlcnMuU2hhZG93Um9vdHx8KHJbbisrXT1pKTtyZXR1cm4gbn1mdW5jdGlvbiBuKGUpe3JldHVybiBTdHJpbmcoZSkucmVwbGFjZSgvXFwvZGVlcFxcL3w6OnNoYWRvd3w+Pj4vZyxcIiBcIil9ZnVuY3Rpb24gcihlKXtyZXR1cm4gU3RyaW5nKGUpLnJlcGxhY2UoLzpob3N0XFwoKFteXFxzXSspXFwpL2csXCIkMVwiKS5yZXBsYWNlKC8oW15cXHNdKTpob3N0L2csXCIkMVwiKS5yZXBsYWNlKFwiOmhvc3RcIixcIipcIikucmVwbGFjZSgvXFxefFxcL3NoYWRvd1xcL3xcXC9zaGFkb3ctZGVlcFxcL3w6OnNoYWRvd3xcXC9kZWVwXFwvfDo6Y29udGVudHw+Pj4vZyxcIiBcIil9ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgbixyPWUuZmlyc3RFbGVtZW50Q2hpbGQ7cjspe2lmKHIubWF0Y2hlcyh0KSlyZXR1cm4gcjtpZihuPW8ocix0KSlyZXR1cm4gbjtyPXIubmV4dEVsZW1lbnRTaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGkoZSx0KXtyZXR1cm4gZS5tYXRjaGVzKHQpfWZ1bmN0aW9uIGEoZSx0LG4pe3ZhciByPWUubG9jYWxOYW1lO3JldHVybiByPT09dHx8cj09PW4mJmUubmFtZXNwYWNlVVJJPT09an1mdW5jdGlvbiBzKCl7cmV0dXJuITB9ZnVuY3Rpb24gYyhlLHQsbil7cmV0dXJuIGUubG9jYWxOYW1lPT09bn1mdW5jdGlvbiBsKGUsdCl7cmV0dXJuIGUubmFtZXNwYWNlVVJJPT09dH1mdW5jdGlvbiB1KGUsdCxuKXtyZXR1cm4gZS5uYW1lc3BhY2VVUkk9PT10JiZlLmxvY2FsTmFtZT09PW59ZnVuY3Rpb24gZChlLHQsbixyLG8saSl7Zm9yKHZhciBhPWUuZmlyc3RFbGVtZW50Q2hpbGQ7YTspcihhLG8saSkmJihuW3QrK109YSksdD1kKGEsdCxuLHIsbyxpKSxhPWEubmV4dEVsZW1lbnRTaWJsaW5nO3JldHVybiB0fWZ1bmN0aW9uIHAobixyLG8saSxhKXt2YXIgcyxjPWcodGhpcyksbD12KHRoaXMpLnJvb3Q7aWYobCBpbnN0YW5jZW9mIGUud3JhcHBlcnMuU2hhZG93Um9vdClyZXR1cm4gZCh0aGlzLHIsbyxuLGksbnVsbCk7aWYoYyBpbnN0YW5jZW9mIE4pcz1TLmNhbGwoYyxpKTtlbHNle2lmKCEoYyBpbnN0YW5jZW9mIEMpKXJldHVybiBkKHRoaXMscixvLG4saSxudWxsKTtzPV8uY2FsbChjLGkpfXJldHVybiB0KHMscixvLGEpfWZ1bmN0aW9uIGgobixyLG8saSxhKXt2YXIgcyxjPWcodGhpcyksbD12KHRoaXMpLnJvb3Q7aWYobCBpbnN0YW5jZW9mIGUud3JhcHBlcnMuU2hhZG93Um9vdClyZXR1cm4gZCh0aGlzLHIsbyxuLGksYSk7aWYoYyBpbnN0YW5jZW9mIE4pcz1NLmNhbGwoYyxpLGEpO2Vsc2V7aWYoIShjIGluc3RhbmNlb2YgQykpcmV0dXJuIGQodGhpcyxyLG8sbixpLGEpO3M9VC5jYWxsKGMsaSxhKX1yZXR1cm4gdChzLHIsbywhMSl9ZnVuY3Rpb24gZihuLHIsbyxpLGEpe3ZhciBzLGM9Zyh0aGlzKSxsPXYodGhpcykucm9vdDtpZihsIGluc3RhbmNlb2YgZS53cmFwcGVycy5TaGFkb3dSb290KXJldHVybiBkKHRoaXMscixvLG4saSxhKTtpZihjIGluc3RhbmNlb2YgTilzPUwuY2FsbChjLGksYSk7ZWxzZXtpZighKGMgaW5zdGFuY2VvZiBDKSlyZXR1cm4gZCh0aGlzLHIsbyxuLGksYSk7cz1PLmNhbGwoYyxpLGEpfXJldHVybiB0KHMscixvLCExKX12YXIgbT1lLndyYXBwZXJzLkhUTUxDb2xsZWN0aW9uLHc9ZS53cmFwcGVycy5Ob2RlTGlzdCx2PWUuZ2V0VHJlZVNjb3BlLGc9ZS51bnNhZmVVbndyYXAsYj1lLndyYXAseT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yLEU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IsXz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsLFM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwsVD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSxNPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSxPPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lTlMsTD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyxOPXdpbmRvdy5FbGVtZW50LEM9d2luZG93LkhUTUxEb2N1bWVudHx8d2luZG93LkRvY3VtZW50LGo9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsRD17XG5xdWVyeVNlbGVjdG9yOmZ1bmN0aW9uKHQpe3ZhciByPW4odCksaT1yIT09dDt0PXI7dmFyIGEscz1nKHRoaXMpLGM9dih0aGlzKS5yb290O2lmKGMgaW5zdGFuY2VvZiBlLndyYXBwZXJzLlNoYWRvd1Jvb3QpcmV0dXJuIG8odGhpcyx0KTtpZihzIGluc3RhbmNlb2YgTilhPWIoRS5jYWxsKHMsdCkpO2Vsc2V7aWYoIShzIGluc3RhbmNlb2YgQykpcmV0dXJuIG8odGhpcyx0KTthPWIoeS5jYWxsKHMsdCkpfXJldHVybiBhJiYhaSYmKGM9dihhKS5yb290KSYmYyBpbnN0YW5jZW9mIGUud3JhcHBlcnMuU2hhZG93Um9vdD9vKHRoaXMsdCk6YX0scXVlcnlTZWxlY3RvckFsbDpmdW5jdGlvbihlKXt2YXIgdD1uKGUpLHI9dCE9PWU7ZT10O3ZhciBvPW5ldyB3O3JldHVybiBvLmxlbmd0aD1wLmNhbGwodGhpcyxpLDAsbyxlLHIpLG99fSxIPXttYXRjaGVzOmZ1bmN0aW9uKHQpe3JldHVybiB0PXIodCksZS5vcmlnaW5hbE1hdGNoZXMuY2FsbChnKHRoaXMpLHQpfX0seD17Z2V0RWxlbWVudHNCeVRhZ05hbWU6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG0sbj1cIipcIj09PWU/czphO3JldHVybiB0Lmxlbmd0aD1oLmNhbGwodGhpcyxuLDAsdCxlLGUudG9Mb3dlckNhc2UoKSksdH0sZ2V0RWxlbWVudHNCeUNsYXNzTmFtZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiK2UpfSxnZXRFbGVtZW50c0J5VGFnTmFtZU5TOmZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IG0scj1udWxsO3JldHVybiByPVwiKlwiPT09ZT9cIipcIj09PXQ/czpjOlwiKlwiPT09dD9sOnUsbi5sZW5ndGg9Zi5jYWxsKHRoaXMsciwwLG4sZXx8bnVsbCx0KSxufX07ZS5HZXRFbGVtZW50c0J5SW50ZXJmYWNlPXgsZS5TZWxlY3RvcnNJbnRlcmZhY2U9RCxlLk1hdGNoZXNJbnRlcmZhY2U9SH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe2Zvcig7ZSYmZS5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFOyllPWUubmV4dFNpYmxpbmc7cmV0dXJuIGV9ZnVuY3Rpb24gbihlKXtmb3IoO2UmJmUubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERTspZT1lLnByZXZpb3VzU2libGluZztyZXR1cm4gZX12YXIgcj1lLndyYXBwZXJzLk5vZGVMaXN0LG89e2dldCBmaXJzdEVsZW1lbnRDaGlsZCgpe3JldHVybiB0KHRoaXMuZmlyc3RDaGlsZCl9LGdldCBsYXN0RWxlbWVudENoaWxkKCl7cmV0dXJuIG4odGhpcy5sYXN0Q2hpbGQpfSxnZXQgY2hpbGRFbGVtZW50Q291bnQoKXtmb3IodmFyIGU9MCx0PXRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7dDt0PXQubmV4dEVsZW1lbnRTaWJsaW5nKWUrKztyZXR1cm4gZX0sZ2V0IGNoaWxkcmVuKCl7Zm9yKHZhciBlPW5ldyByLHQ9MCxuPXRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7bjtuPW4ubmV4dEVsZW1lbnRTaWJsaW5nKWVbdCsrXT1uO3JldHVybiBlLmxlbmd0aD10LGV9LHJlbW92ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMucGFyZW50Tm9kZTtlJiZlLnJlbW92ZUNoaWxkKHRoaXMpfX0saT17Z2V0IG5leHRFbGVtZW50U2libGluZygpe3JldHVybiB0KHRoaXMubmV4dFNpYmxpbmcpfSxnZXQgcHJldmlvdXNFbGVtZW50U2libGluZygpe3JldHVybiBuKHRoaXMucHJldmlvdXNTaWJsaW5nKX19LGE9e2dldEVsZW1lbnRCeUlkOmZ1bmN0aW9uKGUpe3JldHVybi9bIFxcdFxcblxcclxcZl0vLnRlc3QoZSk/bnVsbDp0aGlzLnF1ZXJ5U2VsZWN0b3IoJ1tpZD1cIicrZSsnXCJdJyl9fTtlLkNoaWxkTm9kZUludGVyZmFjZT1pLGUuTm9uRWxlbWVudFBhcmVudE5vZGVJbnRlcmZhY2U9YSxlLlBhcmVudE5vZGVJbnRlcmZhY2U9b30od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3IuY2FsbCh0aGlzLGUpfXZhciBuPWUuQ2hpbGROb2RlSW50ZXJmYWNlLHI9ZS53cmFwcGVycy5Ob2RlLG89ZS5lbnF1ZXVlTXV0YXRpb24saT1lLm1peGluLGE9ZS5yZWdpc3RlcldyYXBwZXIscz1lLnVuc2FmZVVud3JhcCxjPXdpbmRvdy5DaGFyYWN0ZXJEYXRhO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoci5wcm90b3R5cGUpLGkodC5wcm90b3R5cGUse2dldCBub2RlVmFsdWUoKXtyZXR1cm4gdGhpcy5kYXRhfSxzZXQgbm9kZVZhbHVlKGUpe3RoaXMuZGF0YT1lfSxnZXQgdGV4dENvbnRlbnQoKXtyZXR1cm4gdGhpcy5kYXRhfSxzZXQgdGV4dENvbnRlbnQoZSl7dGhpcy5kYXRhPWV9LGdldCBkYXRhKCl7cmV0dXJuIHModGhpcykuZGF0YX0sc2V0IGRhdGEoZSl7dmFyIHQ9cyh0aGlzKS5kYXRhO28odGhpcyxcImNoYXJhY3RlckRhdGFcIix7b2xkVmFsdWU6dH0pLHModGhpcykuZGF0YT1lfX0pLGkodC5wcm90b3R5cGUsbiksYShjLHQsZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikpLGUud3JhcHBlcnMuQ2hhcmFjdGVyRGF0YT10fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7cmV0dXJuIGU+Pj4wfWZ1bmN0aW9uIG4oZSl7ci5jYWxsKHRoaXMsZSl9dmFyIHI9ZS53cmFwcGVycy5DaGFyYWN0ZXJEYXRhLG89KGUuZW5xdWV1ZU11dGF0aW9uLGUubWl4aW4pLGk9ZS5yZWdpc3RlcldyYXBwZXIsYT13aW5kb3cuVGV4dDtuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHIucHJvdG90eXBlKSxvKG4ucHJvdG90eXBlLHtzcGxpdFRleHQ6ZnVuY3Rpb24oZSl7ZT10KGUpO3ZhciBuPXRoaXMuZGF0YTtpZihlPm4ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkluZGV4U2l6ZUVycm9yXCIpO3ZhciByPW4uc2xpY2UoMCxlKSxvPW4uc2xpY2UoZSk7dGhpcy5kYXRhPXI7dmFyIGk9dGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pO3JldHVybiB0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaSx0aGlzLm5leHRTaWJsaW5nKSxpfX0pLGkoYSxuLGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKSxlLndyYXBwZXJzLlRleHQ9bn0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3JldHVybiBpKGUpLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfWZ1bmN0aW9uIG4oZSx0KXthKGUsXCJhdHRyaWJ1dGVzXCIse25hbWU6XCJjbGFzc1wiLG5hbWVzcGFjZTpudWxsLG9sZFZhbHVlOnR9KX1mdW5jdGlvbiByKHQpe2UuaW52YWxpZGF0ZVJlbmRlcmVyQmFzZWRPbkF0dHJpYnV0ZSh0LFwiY2xhc3NcIil9ZnVuY3Rpb24gbyhlLG8saSl7dmFyIGE9ZS5vd25lckVsZW1lbnRfO2lmKG51bGw9PWEpcmV0dXJuIG8uYXBwbHkoZSxpKTt2YXIgcz10KGEpLGM9by5hcHBseShlLGkpO3JldHVybiB0KGEpIT09cyYmKG4oYSxzKSxyKGEpKSxjfWlmKCF3aW5kb3cuRE9NVG9rZW5MaXN0KXJldHVybiB2b2lkIGNvbnNvbGUud2FybihcIk1pc3NpbmcgRE9NVG9rZW5MaXN0IHByb3RvdHlwZSwgcGxlYXNlIGluY2x1ZGUgYSBjb21wYXRpYmxlIGNsYXNzTGlzdCBwb2x5ZmlsbCBzdWNoIGFzIGh0dHA6Ly9nb28uZ2wvdVRjZXBILlwiKTt2YXIgaT1lLnVuc2FmZVVud3JhcCxhPWUuZW5xdWV1ZU11dGF0aW9uLHM9RE9NVG9rZW5MaXN0LnByb3RvdHlwZS5hZGQ7RE9NVG9rZW5MaXN0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oKXtvKHRoaXMscyxhcmd1bWVudHMpfTt2YXIgYz1ET01Ub2tlbkxpc3QucHJvdG90eXBlLnJlbW92ZTtET01Ub2tlbkxpc3QucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe28odGhpcyxjLGFyZ3VtZW50cyl9O3ZhciBsPURPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlO0RPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcyxsLGFyZ3VtZW50cyl9fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQodCxuKXt2YXIgcj10LnBhcmVudE5vZGU7aWYociYmci5zaGFkb3dSb290KXt2YXIgbz1lLmdldFJlbmRlcmVyRm9ySG9zdChyKTtvLmRlcGVuZHNPbkF0dHJpYnV0ZShuKSYmby5pbnZhbGlkYXRlKCl9fWZ1bmN0aW9uIG4oZSx0LG4pe3UoZSxcImF0dHJpYnV0ZXNcIix7bmFtZTp0LG5hbWVzcGFjZTpudWxsLG9sZFZhbHVlOm59KX1mdW5jdGlvbiByKGUpe2EuY2FsbCh0aGlzLGUpfXZhciBvPWUuQ2hpbGROb2RlSW50ZXJmYWNlLGk9ZS5HZXRFbGVtZW50c0J5SW50ZXJmYWNlLGE9ZS53cmFwcGVycy5Ob2RlLHM9ZS5QYXJlbnROb2RlSW50ZXJmYWNlLGM9ZS5TZWxlY3RvcnNJbnRlcmZhY2UsbD1lLk1hdGNoZXNJbnRlcmZhY2UsdT0oZS5hZGRXcmFwTm9kZUxpc3RNZXRob2QsZS5lbnF1ZXVlTXV0YXRpb24pLGQ9ZS5taXhpbixwPShlLm9uZU9mLGUucmVnaXN0ZXJXcmFwcGVyKSxoPWUudW5zYWZlVW53cmFwLGY9ZS53cmFwcGVycyxtPXdpbmRvdy5FbGVtZW50LHc9W1wibWF0Y2hlc1wiLFwibW96TWF0Y2hlc1NlbGVjdG9yXCIsXCJtc01hdGNoZXNTZWxlY3RvclwiLFwid2Via2l0TWF0Y2hlc1NlbGVjdG9yXCJdLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gbS5wcm90b3R5cGVbZV19KSx2PXdbMF0sZz1tLnByb3RvdHlwZVt2XSxiPW5ldyBXZWFrTWFwO3IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYS5wcm90b3R5cGUpLGQoci5wcm90b3R5cGUse2NyZWF0ZVNoYWRvd1Jvb3Q6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZi5TaGFkb3dSb290KHRoaXMpO2godGhpcykucG9seW1lclNoYWRvd1Jvb3RfPXQ7dmFyIG49ZS5nZXRSZW5kZXJlckZvckhvc3QodGhpcyk7cmV0dXJuIG4uaW52YWxpZGF0ZSgpLHR9LGdldCBzaGFkb3dSb290KCl7cmV0dXJuIGgodGhpcykucG9seW1lclNoYWRvd1Jvb3RffHxudWxsfSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oZSxyKXt2YXIgbz1oKHRoaXMpLmdldEF0dHJpYnV0ZShlKTtoKHRoaXMpLnNldEF0dHJpYnV0ZShlLHIpLG4odGhpcyxlLG8pLHQodGhpcyxlKX0scmVtb3ZlQXR0cmlidXRlOmZ1bmN0aW9uKGUpe3ZhciByPWgodGhpcykuZ2V0QXR0cmlidXRlKGUpO2godGhpcykucmVtb3ZlQXR0cmlidXRlKGUpLG4odGhpcyxlLHIpLHQodGhpcyxlKX0sZ2V0IGNsYXNzTGlzdCgpe3ZhciBlPWIuZ2V0KHRoaXMpO2lmKCFlKXtpZihlPWgodGhpcykuY2xhc3NMaXN0LCFlKXJldHVybjtlLm93bmVyRWxlbWVudF89dGhpcyxiLnNldCh0aGlzLGUpfXJldHVybiBlfSxnZXQgY2xhc3NOYW1lKCl7cmV0dXJuIGgodGhpcykuY2xhc3NOYW1lfSxzZXQgY2xhc3NOYW1lKGUpe3RoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixlKX0sZ2V0IGlkKCl7cmV0dXJuIGgodGhpcykuaWR9LHNldCBpZChlKXt0aGlzLnNldEF0dHJpYnV0ZShcImlkXCIsZSl9fSksdy5mb3JFYWNoKGZ1bmN0aW9uKGUpe1wibWF0Y2hlc1wiIT09ZSYmKHIucHJvdG90eXBlW2VdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm1hdGNoZXMoZSl9KX0pLG0ucHJvdG90eXBlLndlYmtpdENyZWF0ZVNoYWRvd1Jvb3QmJihyLnByb3RvdHlwZS53ZWJraXRDcmVhdGVTaGFkb3dSb290PXIucHJvdG90eXBlLmNyZWF0ZVNoYWRvd1Jvb3QpLGQoci5wcm90b3R5cGUsbyksZChyLnByb3RvdHlwZSxpKSxkKHIucHJvdG90eXBlLHMpLGQoci5wcm90b3R5cGUsYyksZChyLnByb3RvdHlwZSxsKSxwKG0scixkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnVsbCxcInhcIikpLGUuaW52YWxpZGF0ZVJlbmRlcmVyQmFzZWRPbkF0dHJpYnV0ZT10LGUubWF0Y2hlc05hbWVzPXcsZS5vcmlnaW5hbE1hdGNoZXM9ZyxlLndyYXBwZXJzLkVsZW1lbnQ9cn0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3N3aXRjaChlKXtjYXNlXCImXCI6cmV0dXJuXCImYW1wO1wiO2Nhc2VcIjxcIjpyZXR1cm5cIiZsdDtcIjtjYXNlXCI+XCI6cmV0dXJuXCImZ3Q7XCI7Y2FzZSdcIic6cmV0dXJuXCImcXVvdDtcIjtjYXNlXCLCoFwiOnJldHVyblwiJm5ic3A7XCJ9fWZ1bmN0aW9uIG4oZSl7cmV0dXJuIGUucmVwbGFjZShMLHQpfWZ1bmN0aW9uIHIoZSl7cmV0dXJuIGUucmVwbGFjZShOLHQpfWZ1bmN0aW9uIG8oZSl7Zm9yKHZhciB0PXt9LG49MDtuPGUubGVuZ3RoO24rKyl0W2Vbbl1dPSEwO3JldHVybiB0fWZ1bmN0aW9uIGkoZSl7aWYoZS5uYW1lc3BhY2VVUkkhPT1EKXJldHVybiEwO3ZhciB0PWUub3duZXJEb2N1bWVudC5kb2N0eXBlO3JldHVybiB0JiZ0LnB1YmxpY0lkJiZ0LnN5c3RlbUlkfWZ1bmN0aW9uIGEoZSx0KXtzd2l0Y2goZS5ub2RlVHlwZSl7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpmb3IodmFyIG8sYT1lLnRhZ05hbWUudG9Mb3dlckNhc2UoKSxjPVwiPFwiK2EsbD1lLmF0dHJpYnV0ZXMsdT0wO289bFt1XTt1KyspYys9XCIgXCIrby5uYW1lKyc9XCInK24oby52YWx1ZSkrJ1wiJztyZXR1cm4gQ1thXT8oaShlKSYmKGMrPVwiL1wiKSxjK1wiPlwiKTpjK1wiPlwiK3MoZSkrXCI8L1wiK2ErXCI+XCI7Y2FzZSBOb2RlLlRFWFRfTk9ERTp2YXIgZD1lLmRhdGE7cmV0dXJuIHQmJmpbdC5sb2NhbE5hbWVdP2Q6cihkKTtjYXNlIE5vZGUuQ09NTUVOVF9OT0RFOnJldHVyblwiPCEtLVwiK2UuZGF0YStcIi0tPlwiO2RlZmF1bHQ6dGhyb3cgY29uc29sZS5lcnJvcihlKSxuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIil9fWZ1bmN0aW9uIHMoZSl7ZSBpbnN0YW5jZW9mIE8uSFRNTFRlbXBsYXRlRWxlbWVudCYmKGU9ZS5jb250ZW50KTtmb3IodmFyIHQ9XCJcIixuPWUuZmlyc3RDaGlsZDtuO249bi5uZXh0U2libGluZyl0Kz1hKG4sZSk7cmV0dXJuIHR9ZnVuY3Rpb24gYyhlLHQsbil7dmFyIHI9bnx8XCJkaXZcIjtlLnRleHRDb250ZW50PVwiXCI7dmFyIG89VChlLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChyKSk7by5pbm5lckhUTUw9dDtmb3IodmFyIGk7aT1vLmZpcnN0Q2hpbGQ7KWUuYXBwZW5kQ2hpbGQoTShpKSl9ZnVuY3Rpb24gbChlKXttLmNhbGwodGhpcyxlKX1mdW5jdGlvbiB1KGUsdCl7dmFyIG49VChlLmNsb25lTm9kZSghMSkpO24uaW5uZXJIVE1MPXQ7Zm9yKHZhciByLG89VChkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO3I9bi5maXJzdENoaWxkOylvLmFwcGVuZENoaWxkKHIpO3JldHVybiBNKG8pfWZ1bmN0aW9uIGQodCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUucmVuZGVyQWxsUGVuZGluZygpLFModGhpcylbdF19fWZ1bmN0aW9uIHAoZSl7dyhsLGUsZChlKSl9ZnVuY3Rpb24gaCh0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkobC5wcm90b3R5cGUsdCx7Z2V0OmQodCksc2V0OmZ1bmN0aW9uKG4pe2UucmVuZGVyQWxsUGVuZGluZygpLFModGhpcylbdF09bn0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBmKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShsLnByb3RvdHlwZSx0LHt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBlLnJlbmRlckFsbFBlbmRpbmcoKSxTKHRoaXMpW3RdLmFwcGx5KFModGhpcyksYXJndW1lbnRzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9KX12YXIgbT1lLndyYXBwZXJzLkVsZW1lbnQsdz1lLmRlZmluZUdldHRlcix2PWUuZW5xdWV1ZU11dGF0aW9uLGc9ZS5taXhpbixiPWUubm9kZXNXZXJlQWRkZWQseT1lLm5vZGVzV2VyZVJlbW92ZWQsRT1lLnJlZ2lzdGVyV3JhcHBlcixfPWUuc25hcHNob3ROb2RlTGlzdCxTPWUudW5zYWZlVW53cmFwLFQ9ZS51bndyYXAsTT1lLndyYXAsTz1lLndyYXBwZXJzLEw9L1smXFx1MDBBMFwiXS9nLE49L1smXFx1MDBBMDw+XS9nLEM9byhbXCJhcmVhXCIsXCJiYXNlXCIsXCJiclwiLFwiY29sXCIsXCJjb21tYW5kXCIsXCJlbWJlZFwiLFwiaHJcIixcImltZ1wiLFwiaW5wdXRcIixcImtleWdlblwiLFwibGlua1wiLFwibWV0YVwiLFwicGFyYW1cIixcInNvdXJjZVwiLFwidHJhY2tcIixcIndiclwiXSksaj1vKFtcInN0eWxlXCIsXCJzY3JpcHRcIixcInhtcFwiLFwiaWZyYW1lXCIsXCJub2VtYmVkXCIsXCJub2ZyYW1lc1wiLFwicGxhaW50ZXh0XCIsXCJub3NjcmlwdFwiXSksRD1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixIPS9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHg9d2luZG93LkhUTUxFbGVtZW50LFI9d2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQ7bC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShtLnByb3RvdHlwZSksZyhsLnByb3RvdHlwZSx7Z2V0IGlubmVySFRNTCgpe3JldHVybiBzKHRoaXMpfSxzZXQgaW5uZXJIVE1MKGUpe2lmKEgmJmpbdGhpcy5sb2NhbE5hbWVdKXJldHVybiB2b2lkKHRoaXMudGV4dENvbnRlbnQ9ZSk7dmFyIHQ9Xyh0aGlzLmNoaWxkTm9kZXMpO3RoaXMuaW52YWxpZGF0ZVNoYWRvd1JlbmRlcmVyKCk/dGhpcyBpbnN0YW5jZW9mIE8uSFRNTFRlbXBsYXRlRWxlbWVudD9jKHRoaXMuY29udGVudCxlKTpjKHRoaXMsZSx0aGlzLnRhZ05hbWUpOiFSJiZ0aGlzIGluc3RhbmNlb2YgTy5IVE1MVGVtcGxhdGVFbGVtZW50P2ModGhpcy5jb250ZW50LGUpOlModGhpcykuaW5uZXJIVE1MPWU7dmFyIG49Xyh0aGlzLmNoaWxkTm9kZXMpO3YodGhpcyxcImNoaWxkTGlzdFwiLHthZGRlZE5vZGVzOm4scmVtb3ZlZE5vZGVzOnR9KSx5KHQpLGIobix0aGlzKX0sZ2V0IG91dGVySFRNTCgpe3JldHVybiBhKHRoaXMsdGhpcy5wYXJlbnROb2RlKX0sc2V0IG91dGVySFRNTChlKXt2YXIgdD10aGlzLnBhcmVudE5vZGU7aWYodCl7dC5pbnZhbGlkYXRlU2hhZG93UmVuZGVyZXIoKTt2YXIgbj11KHQsZSk7dC5yZXBsYWNlQ2hpbGQobix0aGlzKX19LGluc2VydEFkamFjZW50SFRNTDpmdW5jdGlvbihlLHQpe3ZhciBuLHI7c3dpdGNoKFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJiZWZvcmViZWdpblwiOm49dGhpcy5wYXJlbnROb2RlLHI9dGhpczticmVhaztjYXNlXCJhZnRlcmVuZFwiOm49dGhpcy5wYXJlbnROb2RlLHI9dGhpcy5uZXh0U2libGluZzticmVhaztjYXNlXCJhZnRlcmJlZ2luXCI6bj10aGlzLHI9dGhpcy5maXJzdENoaWxkO2JyZWFrO2Nhc2VcImJlZm9yZWVuZFwiOm49dGhpcyxyPW51bGw7YnJlYWs7ZGVmYXVsdDpyZXR1cm59dmFyIG89dShuLHQpO24uaW5zZXJ0QmVmb3JlKG8scil9LGdldCBoaWRkZW4oKXtyZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoXCJoaWRkZW5cIil9LHNldCBoaWRkZW4oZSl7ZT90aGlzLnNldEF0dHJpYnV0ZShcImhpZGRlblwiLFwiXCIpOnRoaXMucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpfX0pLFtcImNsaWVudEhlaWdodFwiLFwiY2xpZW50TGVmdFwiLFwiY2xpZW50VG9wXCIsXCJjbGllbnRXaWR0aFwiLFwib2Zmc2V0SGVpZ2h0XCIsXCJvZmZzZXRMZWZ0XCIsXCJvZmZzZXRUb3BcIixcIm9mZnNldFdpZHRoXCIsXCJzY3JvbGxIZWlnaHRcIixcInNjcm9sbFdpZHRoXCJdLmZvckVhY2gocCksW1wic2Nyb2xsTGVmdFwiLFwic2Nyb2xsVG9wXCJdLmZvckVhY2goaCksW1wiZm9jdXNcIixcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiLFwiZ2V0Q2xpZW50UmVjdHNcIixcInNjcm9sbEludG9WaWV3XCJdLmZvckVhY2goZiksRSh4LGwsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJcIikpLGUud3JhcHBlcnMuSFRNTEVsZW1lbnQ9bCxlLmdldElubmVySFRNTD1zLGUuc2V0SW5uZXJIVE1MPWN9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtuLmNhbGwodGhpcyxlKX12YXIgbj1lLndyYXBwZXJzLkhUTUxFbGVtZW50LHI9ZS5taXhpbixvPWUucmVnaXN0ZXJXcmFwcGVyLGk9ZS51bnNhZmVVbndyYXAsYT1lLndyYXAscz13aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQ7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscih0LnByb3RvdHlwZSx7Z2V0Q29udGV4dDpmdW5jdGlvbigpe3ZhciBlPWkodGhpcykuZ2V0Q29udGV4dC5hcHBseShpKHRoaXMpLGFyZ3VtZW50cyk7cmV0dXJuIGUmJmEoZSl9fSksbyhzLHQsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSksZS53cmFwcGVycy5IVE1MQ2FudmFzRWxlbWVudD10fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7bi5jYWxsKHRoaXMsZSl9dmFyIG49ZS53cmFwcGVycy5IVE1MRWxlbWVudCxyPWUubWl4aW4sbz1lLnJlZ2lzdGVyV3JhcHBlcixpPXdpbmRvdy5IVE1MQ29udGVudEVsZW1lbnQ7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscih0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6dCxnZXQgc2VsZWN0KCl7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwic2VsZWN0XCIpfSxzZXQgc2VsZWN0KGUpe3RoaXMuc2V0QXR0cmlidXRlKFwic2VsZWN0XCIsZSl9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbihlLHQpe24ucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsZSx0KSxcInNlbGVjdFwiPT09U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCkmJnRoaXMuaW52YWxpZGF0ZVNoYWRvd1JlbmRlcmVyKCEwKX19KSxpJiZvKGksdCksZS53cmFwcGVycy5IVE1MQ29udGVudEVsZW1lbnQ9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe24uY2FsbCh0aGlzLGUpfXZhciBuPWUud3JhcHBlcnMuSFRNTEVsZW1lbnQscj1lLm1peGluLG89ZS5yZWdpc3RlcldyYXBwZXIsaT1lLndyYXBIVE1MQ29sbGVjdGlvbixhPWUudW53cmFwLHM9d2luZG93LkhUTUxGb3JtRWxlbWVudDt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSxyKHQucHJvdG90eXBlLHtnZXQgZWxlbWVudHMoKXtyZXR1cm4gaShhKHRoaXMpLmVsZW1lbnRzKX19KSxvKHMsdCxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSksZS53cmFwcGVycy5IVE1MRm9ybUVsZW1lbnQ9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3IuY2FsbCh0aGlzLGUpfWZ1bmN0aW9uIG4oZSx0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO3ZhciBvPWkoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSk7ci5jYWxsKHRoaXMsbyksYShvLHRoaXMpLHZvaWQgMCE9PWUmJihvLndpZHRoPWUpLHZvaWQgMCE9PXQmJihvLmhlaWdodD10KX12YXIgcj1lLndyYXBwZXJzLkhUTUxFbGVtZW50LG89ZS5yZWdpc3RlcldyYXBwZXIsaT1lLnVud3JhcCxhPWUucmV3cmFwLHM9d2luZG93LkhUTUxJbWFnZUVsZW1lbnQ7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShyLnByb3RvdHlwZSksbyhzLHQsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSksbi5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS53cmFwcGVycy5IVE1MSW1hZ2VFbGVtZW50PXQsZS53cmFwcGVycy5JbWFnZT1ufSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7bi5jYWxsKHRoaXMsZSl9dmFyIG49ZS53cmFwcGVycy5IVE1MRWxlbWVudCxyPShlLm1peGluLGUud3JhcHBlcnMuTm9kZUxpc3QsZS5yZWdpc3RlcldyYXBwZXIpLG89d2luZG93LkhUTUxTaGFkb3dFbGVtZW50O3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQsbyYmcihvLHQpLGUud3JhcHBlcnMuSFRNTFNoYWRvd0VsZW1lbnQ9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe2lmKCFlLmRlZmF1bHRWaWV3KXJldHVybiBlO3ZhciB0PWQuZ2V0KGUpO2lmKCF0KXtmb3IodD1lLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKTt0Lmxhc3RDaGlsZDspdC5yZW1vdmVDaGlsZCh0Lmxhc3RDaGlsZCk7ZC5zZXQoZSx0KX1yZXR1cm4gdH1mdW5jdGlvbiBuKGUpe2Zvcih2YXIgbixyPXQoZS5vd25lckRvY3VtZW50KSxvPWMoci5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO249ZS5maXJzdENoaWxkOylvLmFwcGVuZENoaWxkKG4pO3JldHVybiBvfWZ1bmN0aW9uIHIoZSl7aWYoby5jYWxsKHRoaXMsZSksIXApe3ZhciB0PW4oZSk7dS5zZXQodGhpcyxsKHQpKX19dmFyIG89ZS53cmFwcGVycy5IVE1MRWxlbWVudCxpPWUubWl4aW4sYT1lLnJlZ2lzdGVyV3JhcHBlcixzPWUudW5zYWZlVW53cmFwLGM9ZS51bndyYXAsbD1lLndyYXAsdT1uZXcgV2Vha01hcCxkPW5ldyBXZWFrTWFwLHA9d2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQ7ci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShvLnByb3RvdHlwZSksaShyLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6cixnZXQgY29udGVudCgpe3JldHVybiBwP2wocyh0aGlzKS5jb250ZW50KTp1LmdldCh0aGlzKX19KSxwJiZhKHAsciksZS53cmFwcGVycy5IVE1MVGVtcGxhdGVFbGVtZW50PXJ9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtuLmNhbGwodGhpcyxlKX12YXIgbj1lLndyYXBwZXJzLkhUTUxFbGVtZW50LHI9ZS5yZWdpc3RlcldyYXBwZXIsbz13aW5kb3cuSFRNTE1lZGlhRWxlbWVudDtvJiYodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscihvLHQsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpKSxlLndyYXBwZXJzLkhUTUxNZWRpYUVsZW1lbnQ9dCl9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtyLmNhbGwodGhpcyxlKX1mdW5jdGlvbiBuKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7dmFyIHQ9aShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIikpO3IuY2FsbCh0aGlzLHQpLGEodCx0aGlzKSx0LnNldEF0dHJpYnV0ZShcInByZWxvYWRcIixcImF1dG9cIiksdm9pZCAwIT09ZSYmdC5zZXRBdHRyaWJ1dGUoXCJzcmNcIixlKX12YXIgcj1lLndyYXBwZXJzLkhUTUxNZWRpYUVsZW1lbnQsbz1lLnJlZ2lzdGVyV3JhcHBlcixpPWUudW53cmFwLGE9ZS5yZXdyYXAscz13aW5kb3cuSFRNTEF1ZGlvRWxlbWVudDtzJiYodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShyLnByb3RvdHlwZSksbyhzLHQsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpKSxuLnByb3RvdHlwZT10LnByb3RvdHlwZSxlLndyYXBwZXJzLkhUTUxBdWRpb0VsZW1lbnQ9dCxlLndyYXBwZXJzLkF1ZGlvPW4pfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxzKy9nLFwiIFwiKS50cmltKCl9ZnVuY3Rpb24gbihlKXtvLmNhbGwodGhpcyxlKX1mdW5jdGlvbiByKGUsdCxuLGkpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7dmFyIGE9Yyhkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTtvLmNhbGwodGhpcyxhKSxzKGEsdGhpcyksdm9pZCAwIT09ZSYmKGEudGV4dD1lKSx2b2lkIDAhPT10JiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsdCksbj09PSEwJiZhLnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsXCJcIiksYS5zZWxlY3RlZD1pPT09ITB9dmFyIG89ZS53cmFwcGVycy5IVE1MRWxlbWVudCxpPWUubWl4aW4sYT1lLnJlZ2lzdGVyV3JhcHBlcixzPWUucmV3cmFwLGM9ZS51bndyYXAsbD1lLndyYXAsdT13aW5kb3cuSFRNTE9wdGlvbkVsZW1lbnQ7bi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShvLnByb3RvdHlwZSksaShuLnByb3RvdHlwZSx7Z2V0IHRleHQoKXtyZXR1cm4gdCh0aGlzLnRleHRDb250ZW50KX0sc2V0IHRleHQoZSl7dGhpcy50ZXh0Q29udGVudD10KFN0cmluZyhlKSl9LGdldCBmb3JtKCl7cmV0dXJuIGwoYyh0aGlzKS5mb3JtKX19KSxhKHUsbixkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKSxyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxlLndyYXBwZXJzLkhUTUxPcHRpb25FbGVtZW50PW4sZS53cmFwcGVycy5PcHRpb249cn0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe24uY2FsbCh0aGlzLGUpfXZhciBuPWUud3JhcHBlcnMuSFRNTEVsZW1lbnQscj1lLm1peGluLG89ZS5yZWdpc3RlcldyYXBwZXIsaT1lLnVud3JhcCxhPWUud3JhcCxzPXdpbmRvdy5IVE1MU2VsZWN0RWxlbWVudDt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSxyKHQucHJvdG90eXBlLHthZGQ6ZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgdCYmKHQ9aSh0KSksaSh0aGlzKS5hZGQoaShlKSx0KX0scmVtb3ZlOmZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP3ZvaWQgbi5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcyk6KFwib2JqZWN0XCI9PXR5cGVvZiBlJiYoZT1pKGUpKSx2b2lkIGkodGhpcykucmVtb3ZlKGUpKX0sZ2V0IGZvcm0oKXtyZXR1cm4gYShpKHRoaXMpLmZvcm0pfX0pLG8ocyx0LGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIikpLGUud3JhcHBlcnMuSFRNTFNlbGVjdEVsZW1lbnQ9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe24uY2FsbCh0aGlzLGUpfXZhciBuPWUud3JhcHBlcnMuSFRNTEVsZW1lbnQscj1lLm1peGluLG89ZS5yZWdpc3RlcldyYXBwZXIsaT1lLnVud3JhcCxhPWUud3JhcCxzPWUud3JhcEhUTUxDb2xsZWN0aW9uLGM9d2luZG93LkhUTUxUYWJsZUVsZW1lbnQ7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscih0LnByb3RvdHlwZSx7Z2V0IGNhcHRpb24oKXtyZXR1cm4gYShpKHRoaXMpLmNhcHRpb24pfSxjcmVhdGVDYXB0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGEoaSh0aGlzKS5jcmVhdGVDYXB0aW9uKCkpfSxnZXQgdEhlYWQoKXtyZXR1cm4gYShpKHRoaXMpLnRIZWFkKX0sY3JlYXRlVEhlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gYShpKHRoaXMpLmNyZWF0ZVRIZWFkKCkpfSxjcmVhdGVURm9vdDpmdW5jdGlvbigpe3JldHVybiBhKGkodGhpcykuY3JlYXRlVEZvb3QoKSl9LGdldCB0Rm9vdCgpe3JldHVybiBhKGkodGhpcykudEZvb3QpfSxnZXQgdEJvZGllcygpe3JldHVybiBzKGkodGhpcykudEJvZGllcyl9LGNyZWF0ZVRCb2R5OmZ1bmN0aW9uKCl7cmV0dXJuIGEoaSh0aGlzKS5jcmVhdGVUQm9keSgpKX0sZ2V0IHJvd3MoKXtyZXR1cm4gcyhpKHRoaXMpLnJvd3MpfSxpbnNlcnRSb3c6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoaSh0aGlzKS5pbnNlcnRSb3coZSkpfX0pLG8oYyx0LGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSksZS53cmFwcGVycy5IVE1MVGFibGVFbGVtZW50PXR9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtuLmNhbGwodGhpcyxlKX12YXIgbj1lLndyYXBwZXJzLkhUTUxFbGVtZW50LHI9ZS5taXhpbixvPWUucmVnaXN0ZXJXcmFwcGVyLGk9ZS53cmFwSFRNTENvbGxlY3Rpb24sYT1lLnVud3JhcCxzPWUud3JhcCxjPXdpbmRvdy5IVE1MVGFibGVTZWN0aW9uRWxlbWVudDt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSxyKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp0LGdldCByb3dzKCl7cmV0dXJuIGkoYSh0aGlzKS5yb3dzKX0saW5zZXJ0Um93OmZ1bmN0aW9uKGUpe3JldHVybiBzKGEodGhpcykuaW5zZXJ0Um93KGUpKX19KSxvKGMsdCxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhlYWRcIikpLGUud3JhcHBlcnMuSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQ9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe24uY2FsbCh0aGlzLGUpfXZhciBuPWUud3JhcHBlcnMuSFRNTEVsZW1lbnQscj1lLm1peGluLG89ZS5yZWdpc3RlcldyYXBwZXIsaT1lLndyYXBIVE1MQ29sbGVjdGlvbixhPWUudW53cmFwLHM9ZS53cmFwLGM9d2luZG93LkhUTUxUYWJsZVJvd0VsZW1lbnQ7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscih0LnByb3RvdHlwZSx7Z2V0IGNlbGxzKCl7cmV0dXJuIGkoYSh0aGlzKS5jZWxscyl9LGluc2VydENlbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIHMoYSh0aGlzKS5pbnNlcnRDZWxsKGUpKX19KSxvKGMsdCxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIikpLGUud3JhcHBlcnMuSFRNTFRhYmxlUm93RWxlbWVudD10fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7c3dpdGNoKGUubG9jYWxOYW1lKXtjYXNlXCJjb250ZW50XCI6cmV0dXJuIG5ldyBuKGUpO2Nhc2VcInNoYWRvd1wiOnJldHVybiBuZXcgbyhlKTtjYXNlXCJ0ZW1wbGF0ZVwiOnJldHVybiBuZXcgaShlKX1yLmNhbGwodGhpcyxlKX12YXIgbj1lLndyYXBwZXJzLkhUTUxDb250ZW50RWxlbWVudCxyPWUud3JhcHBlcnMuSFRNTEVsZW1lbnQsbz1lLndyYXBwZXJzLkhUTUxTaGFkb3dFbGVtZW50LGk9ZS53cmFwcGVycy5IVE1MVGVtcGxhdGVFbGVtZW50LGE9KGUubWl4aW4sZS5yZWdpc3RlcldyYXBwZXIpLHM9d2luZG93LkhUTUxVbmtub3duRWxlbWVudDt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHIucHJvdG90eXBlKSxhKHMsdCksZS53cmFwcGVycy5IVE1MVW5rbm93bkVsZW1lbnQ9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe24uY2FsbCh0aGlzLGUpfXZhciBuPWUud3JhcHBlcnMuRWxlbWVudCxyPWUud3JhcHBlcnMuSFRNTEVsZW1lbnQsbz1lLnJlZ2lzdGVyV3JhcHBlcixpPShlLmRlZmluZVdyYXBHZXR0ZXIsZS51bnNhZmVVbndyYXApLGE9ZS53cmFwLHM9ZS5taXhpbixjPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixsPXdpbmRvdy5TVkdFbGVtZW50LHU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGMsXCJ0aXRsZVwiKTtpZighKFwiY2xhc3NMaXN0XCJpbiB1KSl7dmFyIGQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLnByb3RvdHlwZSxcImNsYXNzTGlzdFwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJjbGFzc0xpc3RcIixkKSxkZWxldGUgbi5wcm90b3R5cGUuY2xhc3NMaXN0fXQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpLHModC5wcm90b3R5cGUse2dldCBvd25lclNWR0VsZW1lbnQoKXtyZXR1cm4gYShpKHRoaXMpLm93bmVyU1ZHRWxlbWVudCl9fSksbyhsLHQsZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGMsXCJ0aXRsZVwiKSksZS53cmFwcGVycy5TVkdFbGVtZW50PXR9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtwLmNhbGwodGhpcyxlKX12YXIgbj1lLm1peGluLHI9ZS5yZWdpc3RlcldyYXBwZXIsbz1lLnVud3JhcCxpPWUud3JhcCxhPXdpbmRvdy5TVkdVc2VFbGVtZW50LHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGM9aShkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMocyxcImdcIikpLGw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHMsXCJ1c2VcIiksdT1jLmNvbnN0cnVjdG9yLGQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHUucHJvdG90eXBlKSxwPWQuY29uc3RydWN0b3I7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShkKSxcImluc3RhbmNlUm9vdFwiaW4gbCYmbih0LnByb3RvdHlwZSx7Z2V0IGluc3RhbmNlUm9vdCgpe3JldHVybiBpKG8odGhpcykuaW5zdGFuY2VSb290KX0sZ2V0IGFuaW1hdGVkSW5zdGFuY2VSb290KCl7cmV0dXJuIGkobyh0aGlzKS5hbmltYXRlZEluc3RhbmNlUm9vdCl9fSkscihhLHQsbCksZS53cmFwcGVycy5TVkdVc2VFbGVtZW50PXR9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtuLmNhbGwodGhpcyxlKX12YXIgbj1lLndyYXBwZXJzLkV2ZW50VGFyZ2V0LHI9ZS5taXhpbixvPWUucmVnaXN0ZXJXcmFwcGVyLGk9ZS51bnNhZmVVbndyYXAsYT1lLndyYXAscz13aW5kb3cuU1ZHRWxlbWVudEluc3RhbmNlO3MmJih0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSxyKHQucHJvdG90eXBlLHtnZXQgY29ycmVzcG9uZGluZ0VsZW1lbnQoKXtyZXR1cm4gYShpKHRoaXMpLmNvcnJlc3BvbmRpbmdFbGVtZW50KX0sZ2V0IGNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KCl7cmV0dXJuIGEoaSh0aGlzKS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCl9LGdldCBwYXJlbnROb2RlKCl7cmV0dXJuIGEoaSh0aGlzKS5wYXJlbnROb2RlKX0sZ2V0IGNoaWxkTm9kZXMoKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIil9LGdldCBmaXJzdENoaWxkKCl7cmV0dXJuIGEoaSh0aGlzKS5maXJzdENoaWxkKX0sZ2V0IGxhc3RDaGlsZCgpe3JldHVybiBhKGkodGhpcykubGFzdENoaWxkKX0sZ2V0IHByZXZpb3VzU2libGluZygpe3JldHVybiBhKGkodGhpcykucHJldmlvdXNTaWJsaW5nKX0sZ2V0IG5leHRTaWJsaW5nKCl7cmV0dXJuIGEoaSh0aGlzKS5uZXh0U2libGluZyl9fSksbyhzLHQpLGUud3JhcHBlcnMuU1ZHRWxlbWVudEluc3RhbmNlPXQpfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7byhlLHRoaXMpfXZhciBuPWUubWl4aW4scj1lLnJlZ2lzdGVyV3JhcHBlcixvPWUuc2V0V3JhcHBlcixpPWUudW5zYWZlVW53cmFwLGE9ZS51bndyYXAscz1lLnVud3JhcElmTmVlZGVkLGM9ZS53cmFwLGw9d2luZG93LkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtuKHQucHJvdG90eXBlLHtnZXQgY2FudmFzKCl7cmV0dXJuIGMoaSh0aGlzKS5jYW52YXMpfSxkcmF3SW1hZ2U6ZnVuY3Rpb24oKXthcmd1bWVudHNbMF09cyhhcmd1bWVudHNbMF0pLGkodGhpcykuZHJhd0ltYWdlLmFwcGx5KGkodGhpcyksYXJndW1lbnRzKX0sY3JlYXRlUGF0dGVybjpmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YShhcmd1bWVudHNbMF0pLGkodGhpcykuY3JlYXRlUGF0dGVybi5hcHBseShpKHRoaXMpLGFyZ3VtZW50cyl9fSkscihsLHQsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIikpLGUud3JhcHBlcnMuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPXR9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtpKGUsdGhpcyl9dmFyIG49ZS5hZGRGb3J3YXJkaW5nUHJvcGVydGllcyxyPWUubWl4aW4sbz1lLnJlZ2lzdGVyV3JhcHBlcixpPWUuc2V0V3JhcHBlcixhPWUudW5zYWZlVW53cmFwLHM9ZS51bndyYXBJZk5lZWRlZCxjPWUud3JhcCxsPXdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQ7aWYobCl7cih0LnByb3RvdHlwZSx7Z2V0IGNhbnZhcygpe3JldHVybiBjKGEodGhpcykuY2FudmFzKX0sdGV4SW1hZ2UyRDpmdW5jdGlvbigpe2FyZ3VtZW50c1s1XT1zKGFyZ3VtZW50c1s1XSksYSh0aGlzKS50ZXhJbWFnZTJELmFwcGx5KGEodGhpcyksYXJndW1lbnRzKX0sdGV4U3ViSW1hZ2UyRDpmdW5jdGlvbigpe2FyZ3VtZW50c1s2XT1zKGFyZ3VtZW50c1s2XSksYSh0aGlzKS50ZXhTdWJJbWFnZTJELmFwcGx5KGEodGhpcyksYXJndW1lbnRzKX19KTt2YXIgdT1PYmplY3QuZ2V0UHJvdG90eXBlT2YobC5wcm90b3R5cGUpO3UhPT1PYmplY3QucHJvdG90eXBlJiZuKHUsdC5wcm90b3R5cGUpO3ZhciBkPS9XZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk/e2RyYXdpbmdCdWZmZXJIZWlnaHQ6bnVsbCxkcmF3aW5nQnVmZmVyV2lkdGg6bnVsbH06e307byhsLHQsZCksZS53cmFwcGVycy5XZWJHTFJlbmRlcmluZ0NvbnRleHQ9dH19KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtuLmNhbGwodGhpcyxlKX12YXIgbj1lLndyYXBwZXJzLk5vZGUscj1lLkdldEVsZW1lbnRzQnlJbnRlcmZhY2Usbz1lLk5vbkVsZW1lbnRQYXJlbnROb2RlSW50ZXJmYWNlLGk9ZS5QYXJlbnROb2RlSW50ZXJmYWNlLGE9ZS5TZWxlY3RvcnNJbnRlcmZhY2Uscz1lLm1peGluLGM9ZS5yZWdpc3Rlck9iamVjdCxsPWUucmVnaXN0ZXJXcmFwcGVyLHU9d2luZG93LkRvY3VtZW50RnJhZ21lbnQ7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscyh0LnByb3RvdHlwZSxpKSxzKHQucHJvdG90eXBlLGEpLHModC5wcm90b3R5cGUscikscyh0LnByb3RvdHlwZSxvKSxsKHUsdCxkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpLGUud3JhcHBlcnMuRG9jdW1lbnRGcmFnbWVudD10O3ZhciBkPWMoZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSk7ZS53cmFwcGVycy5Db21tZW50PWR9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXt2YXIgdD1kKHUoZSkub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO24uY2FsbCh0aGlzLHQpLGModCx0aGlzKTt2YXIgbz1lLnNoYWRvd1Jvb3Q7Zi5zZXQodGhpcyxvKSx0aGlzLnRyZWVTY29wZV89bmV3IHIodGhpcyxhKG98fGUpKSxoLnNldCh0aGlzLGUpfXZhciBuPWUud3JhcHBlcnMuRG9jdW1lbnRGcmFnbWVudCxyPWUuVHJlZVNjb3BlLG89ZS5lbGVtZW50RnJvbVBvaW50LGk9ZS5nZXRJbm5lckhUTUwsYT1lLmdldFRyZWVTY29wZSxzPWUubWl4aW4sYz1lLnJld3JhcCxsPWUuc2V0SW5uZXJIVE1MLHU9ZS51bnNhZmVVbndyYXAsZD1lLnVud3JhcCxwPWUud3JhcCxoPW5ldyBXZWFrTWFwLGY9bmV3IFdlYWtNYXA7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkscyh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6dCxnZXQgaW5uZXJIVE1MKCl7cmV0dXJuIGkodGhpcyl9LHNldCBpbm5lckhUTUwoZSl7bCh0aGlzLGUpLHRoaXMuaW52YWxpZGF0ZVNoYWRvd1JlbmRlcmVyKCl9LGdldCBvbGRlclNoYWRvd1Jvb3QoKXtyZXR1cm4gZi5nZXQodGhpcyl8fG51bGx9LGdldCBob3N0KCl7cmV0dXJuIGguZ2V0KHRoaXMpfHxudWxsfSxpbnZhbGlkYXRlU2hhZG93UmVuZGVyZXI6ZnVuY3Rpb24oKXtyZXR1cm4gaC5nZXQodGhpcykuaW52YWxpZGF0ZVNoYWRvd1JlbmRlcmVyKCl9LGVsZW1lbnRGcm9tUG9pbnQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyh0aGlzLHRoaXMub3duZXJEb2N1bWVudCxlLHQpfSxnZXRTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCl9LGdldCBhY3RpdmVFbGVtZW50KCl7dmFyIGU9ZCh0aGlzKS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7aWYoIWV8fCFlLm5vZGVUeXBlKXJldHVybiBudWxsO3ZhciB0PXAoZSk7aWYodD09PXRoaXMuaG9zdClyZXR1cm4gbnVsbDtmb3IoOyF0aGlzLmNvbnRhaW5zKHQpJiYhdGhpcy5ob3N0LmNvbnRhaW5zKHQpOyl7Zm9yKDt0LnBhcmVudE5vZGU7KXQ9dC5wYXJlbnROb2RlO2lmKCF0Lmhvc3QpcmV0dXJuIG51bGw7dD10Lmhvc3R9cmV0dXJuIHR9fSksZS53cmFwcGVycy5TaGFkb3dSb290PXR9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXt2YXIgdD1kKGUpLnJvb3Q7cmV0dXJuIHQgaW5zdGFuY2VvZiBoP3QuaG9zdDpudWxsfWZ1bmN0aW9uIG4odCxuKXtpZih0LnNoYWRvd1Jvb3Qpe249TWF0aC5taW4odC5jaGlsZE5vZGVzLmxlbmd0aC0xLG4pO3ZhciByPXQuY2hpbGROb2Rlc1tuXTtpZihyKXt2YXIgbz1lLmdldERlc3RpbmF0aW9uSW5zZXJ0aW9uUG9pbnRzKHIpO2lmKG8ubGVuZ3RoPjApe3ZhciBpPW9bMF0ucGFyZW50Tm9kZTtpLm5vZGVUeXBlPT1Ob2RlLkVMRU1FTlRfTk9ERSYmKHQ9aSl9fX1yZXR1cm4gdH1mdW5jdGlvbiByKGUpe3JldHVybiBlPXUoZSksdChlKXx8ZX1mdW5jdGlvbiBvKGUpe2EoZSx0aGlzKX12YXIgaT1lLnJlZ2lzdGVyV3JhcHBlcixhPWUuc2V0V3JhcHBlcixzPWUudW5zYWZlVW53cmFwLGM9ZS51bndyYXAsbD1lLnVud3JhcElmTmVlZGVkLHU9ZS53cmFwLGQ9ZS5nZXRUcmVlU2NvcGUscD13aW5kb3cuUmFuZ2UsaD1lLndyYXBwZXJzLlNoYWRvd1Jvb3Q7by5wcm90b3R5cGU9e2dldCBzdGFydENvbnRhaW5lcigpe3JldHVybiByKHModGhpcykuc3RhcnRDb250YWluZXIpfSxnZXQgZW5kQ29udGFpbmVyKCl7cmV0dXJuIHIocyh0aGlzKS5lbmRDb250YWluZXIpfSxnZXQgY29tbW9uQW5jZXN0b3JDb250YWluZXIoKXtyZXR1cm4gcihzKHRoaXMpLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKX0sc2V0U3RhcnQ6ZnVuY3Rpb24oZSx0KXtlPW4oZSx0KSxzKHRoaXMpLnNldFN0YXJ0KGwoZSksdCl9LHNldEVuZDpmdW5jdGlvbihlLHQpe2U9bihlLHQpLHModGhpcykuc2V0RW5kKGwoZSksdCl9LHNldFN0YXJ0QmVmb3JlOmZ1bmN0aW9uKGUpe3ModGhpcykuc2V0U3RhcnRCZWZvcmUobChlKSl9LHNldFN0YXJ0QWZ0ZXI6ZnVuY3Rpb24oZSl7cyh0aGlzKS5zZXRTdGFydEFmdGVyKGwoZSkpfSxzZXRFbmRCZWZvcmU6ZnVuY3Rpb24oZSl7cyh0aGlzKS5zZXRFbmRCZWZvcmUobChlKSl9LHNldEVuZEFmdGVyOmZ1bmN0aW9uKGUpe3ModGhpcykuc2V0RW5kQWZ0ZXIobChlKSl9LHNlbGVjdE5vZGU6ZnVuY3Rpb24oZSl7cyh0aGlzKS5zZWxlY3ROb2RlKGwoZSkpfSxzZWxlY3ROb2RlQ29udGVudHM6ZnVuY3Rpb24oZSl7cyh0aGlzKS5zZWxlY3ROb2RlQ29udGVudHMobChlKSl9LGNvbXBhcmVCb3VuZGFyeVBvaW50czpmdW5jdGlvbihlLHQpe3JldHVybiBzKHRoaXMpLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhlLGModCkpfSxleHRyYWN0Q29udGVudHM6ZnVuY3Rpb24oKXtyZXR1cm4gdShzKHRoaXMpLmV4dHJhY3RDb250ZW50cygpKX0sY2xvbmVDb250ZW50czpmdW5jdGlvbigpe3JldHVybiB1KHModGhpcykuY2xvbmVDb250ZW50cygpKX0saW5zZXJ0Tm9kZTpmdW5jdGlvbihlKXtzKHRoaXMpLmluc2VydE5vZGUobChlKSl9LHN1cnJvdW5kQ29udGVudHM6ZnVuY3Rpb24oZSl7cyh0aGlzKS5zdXJyb3VuZENvbnRlbnRzKGwoZSkpfSxjbG9uZVJhbmdlOmZ1bmN0aW9uKCl7cmV0dXJuIHUocyh0aGlzKS5jbG9uZVJhbmdlKCkpfSxpc1BvaW50SW5SYW5nZTpmdW5jdGlvbihlLHQpe3JldHVybiBzKHRoaXMpLmlzUG9pbnRJblJhbmdlKGwoZSksdCl9LGNvbXBhcmVQb2ludDpmdW5jdGlvbihlLHQpe3JldHVybiBzKHRoaXMpLmNvbXBhcmVQb2ludChsKGUpLHQpfSxpbnRlcnNlY3RzTm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gcyh0aGlzKS5pbnRlcnNlY3RzTm9kZShsKGUpKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gcyh0aGlzKS50b1N0cmluZygpfX0scC5wcm90b3R5cGUuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50JiYoby5wcm90b3R5cGUuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50PWZ1bmN0aW9uKGUpe3JldHVybiB1KHModGhpcykuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGUpKX0pLGkod2luZG93LlJhbmdlLG8sZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSksZS53cmFwcGVycy5SYW5nZT1vfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7ZS5wcmV2aW91c1NpYmxpbmdfPWUucHJldmlvdXNTaWJsaW5nLGUubmV4dFNpYmxpbmdfPWUubmV4dFNpYmxpbmcsZS5wYXJlbnROb2RlXz1lLnBhcmVudE5vZGV9ZnVuY3Rpb24gbihuLG8saSl7dmFyIGE9eChuKSxzPXgobyksYz1pP3goaSk6bnVsbDtpZihyKG8pLHQobyksaSluLmZpcnN0Q2hpbGQ9PT1pJiYobi5maXJzdENoaWxkXz1pKSxpLnByZXZpb3VzU2libGluZ189aS5wcmV2aW91c1NpYmxpbmc7ZWxzZXtuLmxhc3RDaGlsZF89bi5sYXN0Q2hpbGQsbi5sYXN0Q2hpbGQ9PT1uLmZpcnN0Q2hpbGQmJihuLmZpcnN0Q2hpbGRfPW4uZmlyc3RDaGlsZCk7dmFyIGw9UihhLmxhc3RDaGlsZCk7bCYmKGwubmV4dFNpYmxpbmdfPWwubmV4dFNpYmxpbmcpfWUub3JpZ2luYWxJbnNlcnRCZWZvcmUuY2FsbChhLHMsYyl9ZnVuY3Rpb24gcihuKXt2YXIgcj14KG4pLG89ci5wYXJlbnROb2RlO2lmKG8pe3ZhciBpPVIobyk7dChuKSxuLnByZXZpb3VzU2libGluZyYmKG4ucHJldmlvdXNTaWJsaW5nLm5leHRTaWJsaW5nXz1uKSxuLm5leHRTaWJsaW5nJiYobi5uZXh0U2libGluZy5wcmV2aW91c1NpYmxpbmdfPW4pLGkubGFzdENoaWxkPT09biYmKGkubGFzdENoaWxkXz1uKSxpLmZpcnN0Q2hpbGQ9PT1uJiYoaS5maXJzdENoaWxkXz1uKSxlLm9yaWdpbmFsUmVtb3ZlQ2hpbGQuY2FsbChvLHIpfX1mdW5jdGlvbiBvKGUpe1Auc2V0KGUsW10pfWZ1bmN0aW9uIGkoZSl7dmFyIHQ9UC5nZXQoZSk7cmV0dXJuIHR8fFAuc2V0KGUsdD1bXSksdH1mdW5jdGlvbiBhKGUpe2Zvcih2YXIgdD1bXSxuPTAscj1lLmZpcnN0Q2hpbGQ7cjtyPXIubmV4dFNpYmxpbmcpdFtuKytdPXI7cmV0dXJuIHR9ZnVuY3Rpb24gcygpe2Zvcih2YXIgZT0wO2U8Ri5sZW5ndGg7ZSsrKXt2YXIgdD1GW2VdLG49dC5wYXJlbnRSZW5kZXJlcjtuJiZuLmRpcnR5fHx0LnJlbmRlcigpfUY9W119ZnVuY3Rpb24gYygpe1Q9bnVsbCxzKCl9ZnVuY3Rpb24gbChlKXt2YXIgdD1BLmdldChlKTtyZXR1cm4gdHx8KHQ9bmV3IGgoZSksQS5zZXQoZSx0KSksdH1mdW5jdGlvbiB1KGUpe3ZhciB0PWooZSkucm9vdDtyZXR1cm4gdCBpbnN0YW5jZW9mIEM/dDpudWxsfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIGwoZS5ob3N0KX1mdW5jdGlvbiBwKGUpe3RoaXMuc2tpcD0hMSx0aGlzLm5vZGU9ZSx0aGlzLmNoaWxkTm9kZXM9W119ZnVuY3Rpb24gaChlKXt0aGlzLmhvc3Q9ZSx0aGlzLmRpcnR5PSExLHRoaXMuaW52YWxpZGF0ZUF0dHJpYnV0ZXMoKSx0aGlzLmFzc29jaWF0ZU5vZGUoZSl9ZnVuY3Rpb24gZihlKXtmb3IodmFyIHQ9W10sbj1lLmZpcnN0Q2hpbGQ7bjtuPW4ubmV4dFNpYmxpbmcpRShuKT90LnB1c2guYXBwbHkodCxpKG4pKTp0LnB1c2gobik7cmV0dXJuIHR9ZnVuY3Rpb24gbShlKXtpZihlIGluc3RhbmNlb2YgTClyZXR1cm4gZTtpZihlIGluc3RhbmNlb2YgTylyZXR1cm4gbnVsbDtmb3IodmFyIHQ9ZS5maXJzdENoaWxkO3Q7dD10Lm5leHRTaWJsaW5nKXt2YXIgbj1tKHQpO2lmKG4pcmV0dXJuIG59cmV0dXJuIG51bGx9ZnVuY3Rpb24gdyhlLHQpe2kodCkucHVzaChlKTt2YXIgbj1rLmdldChlKTtuP24ucHVzaCh0KTprLnNldChlLFt0XSl9ZnVuY3Rpb24gdihlKXtyZXR1cm4gay5nZXQoZSl9ZnVuY3Rpb24gZyhlKXtrLnNldChlLHZvaWQgMCl9ZnVuY3Rpb24gYihlLHQpe3ZhciBuPXQuZ2V0QXR0cmlidXRlKFwic2VsZWN0XCIpO2lmKCFuKXJldHVybiEwO2lmKG49bi50cmltKCksIW4pcmV0dXJuITA7aWYoIShlIGluc3RhbmNlb2YgTSkpcmV0dXJuITE7aWYoIXEudGVzdChuKSlyZXR1cm4hMTt0cnl7cmV0dXJuIGUubWF0Y2hlcyhuKX1jYXRjaChyKXtyZXR1cm4hMX19ZnVuY3Rpb24geShlLHQpe3ZhciBuPXYodCk7cmV0dXJuIG4mJm5bbi5sZW5ndGgtMV09PT1lfWZ1bmN0aW9uIEUoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBPfHxlIGluc3RhbmNlb2YgTH1mdW5jdGlvbiBfKGUpe3JldHVybiBlLnNoYWRvd1Jvb3R9ZnVuY3Rpb24gUyhlKXtmb3IodmFyIHQ9W10sbj1lLnNoYWRvd1Jvb3Q7bjtuPW4ub2xkZXJTaGFkb3dSb290KXQucHVzaChuKTtyZXR1cm4gdH12YXIgVCxNPWUud3JhcHBlcnMuRWxlbWVudCxPPWUud3JhcHBlcnMuSFRNTENvbnRlbnRFbGVtZW50LEw9ZS53cmFwcGVycy5IVE1MU2hhZG93RWxlbWVudCxOPWUud3JhcHBlcnMuTm9kZSxDPWUud3JhcHBlcnMuU2hhZG93Um9vdCxqPShlLmFzc2VydCxlLmdldFRyZWVTY29wZSksRD0oZS5taXhpbixlLm9uZU9mKSxIPWUudW5zYWZlVW53cmFwLHg9ZS51bndyYXAsUj1lLndyYXAsST1lLkFycmF5U3BsaWNlLFA9bmV3IFdlYWtNYXAsaz1uZXcgV2Vha01hcCxBPW5ldyBXZWFrTWFwLFc9RCh3aW5kb3csW1wicmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIsXCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIixcIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZVwiLFwic2V0VGltZW91dFwiXSksRj1bXSxVPW5ldyBJO1UuZXF1YWxzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHgoZS5ub2RlKT09PXR9LHAucHJvdG90eXBlPXthcHBlbmQ6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHAoZSk7cmV0dXJuIHRoaXMuY2hpbGROb2Rlcy5wdXNoKHQpLHR9LHN5bmM6ZnVuY3Rpb24oZSl7aWYoIXRoaXMuc2tpcCl7Zm9yKHZhciB0PXRoaXMubm9kZSxvPXRoaXMuY2hpbGROb2RlcyxpPWEoeCh0KSkscz1lfHxuZXcgV2Vha01hcCxjPVUuY2FsY3VsYXRlU3BsaWNlcyhvLGkpLGw9MCx1PTAsZD0wLHA9MDtwPGMubGVuZ3RoO3ArKyl7Zm9yKHZhciBoPWNbcF07ZDxoLmluZGV4O2QrKyl1Kyssb1tsKytdLnN5bmMocyk7Zm9yKHZhciBmPWgucmVtb3ZlZC5sZW5ndGgsbT0wO2Y+bTttKyspe3ZhciB3PVIoaVt1KytdKTtzLmdldCh3KXx8cih3KX1mb3IodmFyIHY9aC5hZGRlZENvdW50LGc9aVt1XSYmUihpW3VdKSxtPTA7dj5tO20rKyl7dmFyIGI9b1tsKytdLHk9Yi5ub2RlO24odCx5LGcpLHMuc2V0KHksITApLGIuc3luYyhzKX1kKz12fWZvcih2YXIgcD1kO3A8by5sZW5ndGg7cCsrKW9bcF0uc3luYyhzKX19fSxoLnByb3RvdHlwZT17cmVuZGVyOmZ1bmN0aW9uKGUpe2lmKHRoaXMuZGlydHkpe3RoaXMuaW52YWxpZGF0ZUF0dHJpYnV0ZXMoKTt2YXIgdD10aGlzLmhvc3Q7dGhpcy5kaXN0cmlidXRpb24odCk7dmFyIG49ZXx8bmV3IHAodCk7dGhpcy5idWlsZFJlbmRlclRyZWUobix0KTt2YXIgcj0hZTtyJiZuLnN5bmMoKSx0aGlzLmRpcnR5PSExfX0sZ2V0IHBhcmVudFJlbmRlcmVyKCl7cmV0dXJuIGoodGhpcy5ob3N0KS5yZW5kZXJlcn0saW52YWxpZGF0ZTpmdW5jdGlvbigpe2lmKCF0aGlzLmRpcnR5KXt0aGlzLmRpcnR5PSEwO3ZhciBlPXRoaXMucGFyZW50UmVuZGVyZXI7aWYoZSYmZS5pbnZhbGlkYXRlKCksRi5wdXNoKHRoaXMpLFQpcmV0dXJuO1Q9d2luZG93W1ddKGMsMCl9fSxkaXN0cmlidXRpb246ZnVuY3Rpb24oZSl7dGhpcy5yZXNldEFsbFN1YnRyZWVzKGUpLHRoaXMuZGlzdHJpYnV0aW9uUmVzb2x1dGlvbihlKX0scmVzZXRBbGw6ZnVuY3Rpb24oZSl7RShlKT9vKGUpOmcoZSksdGhpcy5yZXNldEFsbFN1YnRyZWVzKGUpfSxyZXNldEFsbFN1YnRyZWVzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmZpcnN0Q2hpbGQ7dDt0PXQubmV4dFNpYmxpbmcpdGhpcy5yZXNldEFsbCh0KTtlLnNoYWRvd1Jvb3QmJnRoaXMucmVzZXRBbGwoZS5zaGFkb3dSb290KSxlLm9sZGVyU2hhZG93Um9vdCYmdGhpcy5yZXNldEFsbChlLm9sZGVyU2hhZG93Um9vdCl9LGRpc3RyaWJ1dGlvblJlc29sdXRpb246ZnVuY3Rpb24oZSl7aWYoXyhlKSl7Zm9yKHZhciB0PWUsbj1mKHQpLHI9Uyh0KSxvPTA7bzxyLmxlbmd0aDtvKyspdGhpcy5wb29sRGlzdHJpYnV0aW9uKHJbb10sbik7Zm9yKHZhciBvPXIubGVuZ3RoLTE7bz49MDtvLS0pe3ZhciBpPXJbb10sYT1tKGkpO2lmKGEpe3ZhciBzPWkub2xkZXJTaGFkb3dSb290O3MmJihuPWYocykpO2Zvcih2YXIgYz0wO2M8bi5sZW5ndGg7YysrKXcobltjXSxhKX10aGlzLmRpc3RyaWJ1dGlvblJlc29sdXRpb24oaSl9fWZvcih2YXIgbD1lLmZpcnN0Q2hpbGQ7bDtsPWwubmV4dFNpYmxpbmcpdGhpcy5kaXN0cmlidXRpb25SZXNvbHV0aW9uKGwpfSxwb29sRGlzdHJpYnV0aW9uOmZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgTCkpaWYoZSBpbnN0YW5jZW9mIE8pe3ZhciBuPWU7dGhpcy51cGRhdGVEZXBlbmRlbnRBdHRyaWJ1dGVzKG4uZ2V0QXR0cmlidXRlKFwic2VsZWN0XCIpKTtmb3IodmFyIHI9ITEsbz0wO288dC5sZW5ndGg7bysrKXt2YXIgZT10W29dO2UmJmIoZSxuKSYmKHcoZSxuKSx0W29dPXZvaWQgMCxyPSEwKX1pZighcilmb3IodmFyIGk9bi5maXJzdENoaWxkO2k7aT1pLm5leHRTaWJsaW5nKXcoaSxuKX1lbHNlIGZvcih2YXIgaT1lLmZpcnN0Q2hpbGQ7aTtpPWkubmV4dFNpYmxpbmcpdGhpcy5wb29sRGlzdHJpYnV0aW9uKGksdCl9LGJ1aWxkUmVuZGVyVHJlZTpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10aGlzLmNvbXBvc2UodCkscj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgbz1uW3JdLGk9ZS5hcHBlbmQobyk7dGhpcy5idWlsZFJlbmRlclRyZWUoaSxvKX1pZihfKHQpKXt2YXIgYT1sKHQpO2EuZGlydHk9ITF9fSxjb21wb3NlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPWUuc2hhZG93Um9vdHx8ZSxyPW4uZmlyc3RDaGlsZDtyO3I9ci5uZXh0U2libGluZylpZihFKHIpKXt0aGlzLmFzc29jaWF0ZU5vZGUobik7Zm9yKHZhciBvPWkociksYT0wO2E8by5sZW5ndGg7YSsrKXt2YXIgcz1vW2FdO3kocixzKSYmdC5wdXNoKHMpfX1lbHNlIHQucHVzaChyKTtyZXR1cm4gdH0saW52YWxpZGF0ZUF0dHJpYnV0ZXM6ZnVuY3Rpb24oKXt0aGlzLmF0dHJpYnV0ZXM9T2JqZWN0LmNyZWF0ZShudWxsKX0sdXBkYXRlRGVwZW5kZW50QXR0cmlidXRlczpmdW5jdGlvbihlKXtpZihlKXt2YXIgdD10aGlzLmF0dHJpYnV0ZXM7L1xcLlxcdysvLnRlc3QoZSkmJih0W1wiY2xhc3NcIl09ITApLC8jXFx3Ky8udGVzdChlKSYmKHQuaWQ9ITApLGUucmVwbGFjZSgvXFxbXFxzKihbXlxccz1cXHx+XFxdXSspL2csZnVuY3Rpb24oZSxuKXt0W25dPSEwfSl9fSxkZXBlbmRzT25BdHRyaWJ1dGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYXR0cmlidXRlc1tlXX0sYXNzb2NpYXRlTm9kZTpmdW5jdGlvbihlKXtIKGUpLnBvbHltZXJTaGFkb3dSZW5kZXJlcl89dGhpc319O3ZhciBxPS9eKDpub3RcXCgpP1sqLiNbYS16QS1aX3xdLztOLnByb3RvdHlwZS5pbnZhbGlkYXRlU2hhZG93UmVuZGVyZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9SCh0aGlzKS5wb2x5bWVyU2hhZG93UmVuZGVyZXJfO3JldHVybiB0Pyh0LmludmFsaWRhdGUoKSwhMCk6ITF9LE8ucHJvdG90eXBlLmdldERpc3RyaWJ1dGVkTm9kZXM9TC5wcm90b3R5cGUuZ2V0RGlzdHJpYnV0ZWROb2Rlcz1mdW5jdGlvbigpe3JldHVybiBzKCksaSh0aGlzKX0sTS5wcm90b3R5cGUuZ2V0RGVzdGluYXRpb25JbnNlcnRpb25Qb2ludHM9ZnVuY3Rpb24oKXtyZXR1cm4gcygpLHYodGhpcyl8fFtdfSxPLnByb3RvdHlwZS5ub2RlSXNJbnNlcnRlZF89TC5wcm90b3R5cGUubm9kZUlzSW5zZXJ0ZWRfPWZ1bmN0aW9uKCl7dGhpcy5pbnZhbGlkYXRlU2hhZG93UmVuZGVyZXIoKTt2YXIgZSx0PXUodGhpcyk7dCYmKGU9ZCh0KSksSCh0aGlzKS5wb2x5bWVyU2hhZG93UmVuZGVyZXJfPWUsZSYmZS5pbnZhbGlkYXRlKCl9LGUuZ2V0UmVuZGVyZXJGb3JIb3N0PWwsZS5nZXRTaGFkb3dUcmVlcz1TLGUucmVuZGVyQWxsUGVuZGluZz1zLGUuZ2V0RGVzdGluYXRpb25JbnNlcnRpb25Qb2ludHM9dixlLnZpc3VhbD17aW5zZXJ0QmVmb3JlOm4scmVtb3ZlOnJ9fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQodCl7aWYod2luZG93W3RdKXtyKCFlLndyYXBwZXJzW3RdKTt2YXIgYz1mdW5jdGlvbihlKXtuLmNhbGwodGhpcyxlKX07Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSksbyhjLnByb3RvdHlwZSx7Z2V0IGZvcm0oKXtyZXR1cm4gcyhhKHRoaXMpLmZvcm0pfX0pLGkod2luZG93W3RdLGMsZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0LnNsaWNlKDQsLTcpKSksZS53cmFwcGVyc1t0XT1jfX12YXIgbj1lLndyYXBwZXJzLkhUTUxFbGVtZW50LHI9ZS5hc3NlcnQsbz1lLm1peGluLGk9ZS5yZWdpc3RlcldyYXBwZXIsYT1lLnVud3JhcCxzPWUud3JhcCxjPVtcIkhUTUxCdXR0b25FbGVtZW50XCIsXCJIVE1MRmllbGRTZXRFbGVtZW50XCIsXCJIVE1MSW5wdXRFbGVtZW50XCIsXCJIVE1MS2V5Z2VuRWxlbWVudFwiLFwiSFRNTExhYmVsRWxlbWVudFwiLFwiSFRNTExlZ2VuZEVsZW1lbnRcIixcIkhUTUxPYmplY3RFbGVtZW50XCIsXCJIVE1MT3V0cHV0RWxlbWVudFwiLFwiSFRNTFRleHRBcmVhRWxlbWVudFwiXTtjLmZvckVhY2godCl9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtyKGUsdGhpcyl9dmFyIG49ZS5yZWdpc3RlcldyYXBwZXIscj1lLnNldFdyYXBwZXIsbz1lLnVuc2FmZVVud3JhcCxpPWUudW53cmFwLGE9ZS51bndyYXBJZk5lZWRlZCxzPWUud3JhcCxjPXdpbmRvdy5TZWxlY3Rpb247dC5wcm90b3R5cGU9e2dldCBhbmNob3JOb2RlKCl7cmV0dXJuIHMobyh0aGlzKS5hbmNob3JOb2RlKX0sZ2V0IGZvY3VzTm9kZSgpe3JldHVybiBzKG8odGhpcykuZm9jdXNOb2RlKX0sYWRkUmFuZ2U6ZnVuY3Rpb24oZSl7byh0aGlzKS5hZGRSYW5nZShhKGUpKX0sY29sbGFwc2U6ZnVuY3Rpb24oZSx0KXtvKHRoaXMpLmNvbGxhcHNlKGEoZSksdCl9LGNvbnRhaW5zTm9kZTpmdW5jdGlvbihlLHQpe3JldHVybiBvKHRoaXMpLmNvbnRhaW5zTm9kZShhKGUpLHQpfSxnZXRSYW5nZUF0OmZ1bmN0aW9uKGUpe3JldHVybiBzKG8odGhpcykuZ2V0UmFuZ2VBdChlKSl9LHJlbW92ZVJhbmdlOmZ1bmN0aW9uKGUpe28odGhpcykucmVtb3ZlUmFuZ2UoaShlKSl9LHNlbGVjdEFsbENoaWxkcmVuOmZ1bmN0aW9uKGUpe28odGhpcykuc2VsZWN0QWxsQ2hpbGRyZW4oZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q/byhlLmhvc3QpOmEoZSkpfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiBvKHRoaXMpLnRvU3RyaW5nKCl9fSxjLnByb3RvdHlwZS5leHRlbmQmJih0LnByb3RvdHlwZS5leHRlbmQ9ZnVuY3Rpb24oZSx0KXtvKHRoaXMpLmV4dGVuZChhKGUpLHQpfSksbih3aW5kb3cuU2VsZWN0aW9uLHQsd2luZG93LmdldFNlbGVjdGlvbigpKSxlLndyYXBwZXJzLlNlbGVjdGlvbj10fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7cihlLHRoaXMpfXZhciBuPWUucmVnaXN0ZXJXcmFwcGVyLHI9ZS5zZXRXcmFwcGVyLG89ZS51bnNhZmVVbndyYXAsaT1lLnVud3JhcElmTmVlZGVkLGE9ZS53cmFwLHM9d2luZG93LlRyZWVXYWxrZXI7dC5wcm90b3R5cGU9e2dldCByb290KCl7cmV0dXJuIGEobyh0aGlzKS5yb290KX0sZ2V0IGN1cnJlbnROb2RlKCl7cmV0dXJuIGEobyh0aGlzKS5jdXJyZW50Tm9kZSl9LHNldCBjdXJyZW50Tm9kZShlKXtvKHRoaXMpLmN1cnJlbnROb2RlPWkoZSl9LGdldCBmaWx0ZXIoKXtyZXR1cm4gbyh0aGlzKS5maWx0ZXJ9LHBhcmVudE5vZGU6ZnVuY3Rpb24oKXtyZXR1cm4gYShvKHRoaXMpLnBhcmVudE5vZGUoKSl9LGZpcnN0Q2hpbGQ6ZnVuY3Rpb24oKXtyZXR1cm4gYShvKHRoaXMpLmZpcnN0Q2hpbGQoKSl9LGxhc3RDaGlsZDpmdW5jdGlvbigpe3JldHVybiBhKG8odGhpcykubGFzdENoaWxkKCkpfSxwcmV2aW91c1NpYmxpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gYShvKHRoaXMpLnByZXZpb3VzU2libGluZygpKX0scHJldmlvdXNOb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIGEobyh0aGlzKS5wcmV2aW91c05vZGUoKSl9LG5leHROb2RlOmZ1bmN0aW9uKCl7cmV0dXJuIGEobyh0aGlzKS5uZXh0Tm9kZSgpKX19LG4ocyx0KSxlLndyYXBwZXJzLlRyZWVXYWxrZXI9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3UuY2FsbCh0aGlzLGUpLHRoaXMudHJlZVNjb3BlXz1uZXcgdyh0aGlzLG51bGwpfWZ1bmN0aW9uIG4oZSl7dmFyIG49ZG9jdW1lbnRbZV07dC5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXtyZXR1cm4gaihuLmFwcGx5KE4odGhpcyksYXJndW1lbnRzKSl9fWZ1bmN0aW9uIHIoZSx0KXt4LmNhbGwoTih0KSxDKGUpKSxvKGUsdCl9ZnVuY3Rpb24gbyhlLHQpe2Uuc2hhZG93Um9vdCYmdC5hZG9wdE5vZGUoZS5zaGFkb3dSb290KSxlIGluc3RhbmNlb2YgbSYmaShlLHQpO2Zvcih2YXIgbj1lLmZpcnN0Q2hpbGQ7bjtuPW4ubmV4dFNpYmxpbmcpbyhuLHQpfWZ1bmN0aW9uIGkoZSx0KXt2YXIgbj1lLm9sZGVyU2hhZG93Um9vdDtuJiZ0LmFkb3B0Tm9kZShuKX1mdW5jdGlvbiBhKGUpe0woZSx0aGlzKX1mdW5jdGlvbiBzKGUsdCl7XG52YXIgbj1kb2N1bWVudC5pbXBsZW1lbnRhdGlvblt0XTtlLnByb3RvdHlwZVt0XT1mdW5jdGlvbigpe3JldHVybiBqKG4uYXBwbHkoTih0aGlzKSxhcmd1bWVudHMpKX19ZnVuY3Rpb24gYyhlLHQpe3ZhciBuPWRvY3VtZW50LmltcGxlbWVudGF0aW9uW3RdO2UucHJvdG90eXBlW3RdPWZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkoTih0aGlzKSxhcmd1bWVudHMpfX12YXIgbD1lLkdldEVsZW1lbnRzQnlJbnRlcmZhY2UsdT1lLndyYXBwZXJzLk5vZGUsZD1lLlBhcmVudE5vZGVJbnRlcmZhY2UscD1lLk5vbkVsZW1lbnRQYXJlbnROb2RlSW50ZXJmYWNlLGg9ZS53cmFwcGVycy5TZWxlY3Rpb24sZj1lLlNlbGVjdG9yc0ludGVyZmFjZSxtPWUud3JhcHBlcnMuU2hhZG93Um9vdCx3PWUuVHJlZVNjb3BlLHY9ZS5jbG9uZU5vZGUsZz1lLmRlZmluZUdldHRlcixiPWUuZGVmaW5lV3JhcEdldHRlcix5PWUuZWxlbWVudEZyb21Qb2ludCxFPWUuZm9yd2FyZE1ldGhvZHNUb1dyYXBwZXIsXz1lLm1hdGNoZXNOYW1lcyxTPWUubWl4aW4sVD1lLnJlZ2lzdGVyV3JhcHBlcixNPWUucmVuZGVyQWxsUGVuZGluZyxPPWUucmV3cmFwLEw9ZS5zZXRXcmFwcGVyLE49ZS51bnNhZmVVbndyYXAsQz1lLnVud3JhcCxqPWUud3JhcCxEPWUud3JhcEV2ZW50VGFyZ2V0TWV0aG9kcyxIPShlLndyYXBOb2RlTGlzdCxuZXcgV2Vha01hcCk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh1LnByb3RvdHlwZSksYih0LFwiZG9jdW1lbnRFbGVtZW50XCIpLGIodCxcImJvZHlcIiksYih0LFwiaGVhZFwiKSxnKHQsXCJhY3RpdmVFbGVtZW50XCIsZnVuY3Rpb24oKXt2YXIgZT1DKHRoaXMpLmFjdGl2ZUVsZW1lbnQ7aWYoIWV8fCFlLm5vZGVUeXBlKXJldHVybiBudWxsO2Zvcih2YXIgdD1qKGUpOyF0aGlzLmNvbnRhaW5zKHQpOyl7Zm9yKDt0LnBhcmVudE5vZGU7KXQ9dC5wYXJlbnROb2RlO2lmKCF0Lmhvc3QpcmV0dXJuIG51bGw7dD10Lmhvc3R9cmV0dXJuIHR9KSxbXCJjcmVhdGVDb21tZW50XCIsXCJjcmVhdGVEb2N1bWVudEZyYWdtZW50XCIsXCJjcmVhdGVFbGVtZW50XCIsXCJjcmVhdGVFbGVtZW50TlNcIixcImNyZWF0ZUV2ZW50XCIsXCJjcmVhdGVFdmVudE5TXCIsXCJjcmVhdGVSYW5nZVwiLFwiY3JlYXRlVGV4dE5vZGVcIl0uZm9yRWFjaChuKTt2YXIgeD1kb2N1bWVudC5hZG9wdE5vZGUsUj1kb2N1bWVudC5nZXRTZWxlY3Rpb247Uyh0LnByb3RvdHlwZSx7YWRvcHROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxyKGUsdGhpcyksZX0sZWxlbWVudEZyb21Qb2ludDpmdW5jdGlvbihlLHQpe3JldHVybiB5KHRoaXMsdGhpcyxlLHQpfSxpbXBvcnROb2RlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHYoZSx0LE4odGhpcykpfSxnZXRTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gTSgpLG5ldyBoKFIuY2FsbChDKHRoaXMpKSl9LGdldEVsZW1lbnRzQnlOYW1lOmZ1bmN0aW9uKGUpe3JldHVybiBmLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbCh0aGlzLFwiW25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoU3RyaW5nKGUpKStcIl1cIil9fSk7dmFyIEk9ZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcixQPWUud3JhcHBlcnMuVHJlZVdhbGtlcjtpZih0LnByb3RvdHlwZS5jcmVhdGVUcmVlV2Fsa2VyPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPW51bGw7cmV0dXJuIG4mJihuLmFjY2VwdE5vZGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4uYWNjZXB0Tm9kZT9vPXthY2NlcHROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBuLmFjY2VwdE5vZGUoaihlKSl9fTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobz1mdW5jdGlvbihlKXtyZXR1cm4gbihqKGUpKX0pKSxuZXcgUChJLmNhbGwoQyh0aGlzKSxDKGUpLHQsbyxyKSl9LGRvY3VtZW50LnJlZ2lzdGVyRWxlbWVudCl7dmFyIGs9ZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50O3QucHJvdG90eXBlLnJlZ2lzdGVyRWxlbWVudD1mdW5jdGlvbih0LG4pe2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGU/dm9pZCBMKGUsdGhpcyk6aT9kb2N1bWVudC5jcmVhdGVFbGVtZW50KGksdCk6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KX12YXIgbyxpO2lmKHZvaWQgMCE9PW4mJihvPW4ucHJvdG90eXBlLGk9bltcImV4dGVuZHNcIl0pLG98fChvPU9iamVjdC5jcmVhdGUoSFRNTEVsZW1lbnQucHJvdG90eXBlKSksZS5uYXRpdmVQcm90b3R5cGVUYWJsZS5nZXQobykpdGhyb3cgbmV3IEVycm9yKFwiTm90U3VwcG9ydGVkRXJyb3JcIik7Zm9yKHZhciBhLHM9T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pLGM9W107cyYmIShhPWUubmF0aXZlUHJvdG90eXBlVGFibGUuZ2V0KHMpKTspYy5wdXNoKHMpLHM9T2JqZWN0LmdldFByb3RvdHlwZU9mKHMpO2lmKCFhKXRocm93IG5ldyBFcnJvcihcIk5vdFN1cHBvcnRlZEVycm9yXCIpO2Zvcih2YXIgbD1PYmplY3QuY3JlYXRlKGEpLHU9Yy5sZW5ndGgtMTt1Pj0wO3UtLSlsPU9iamVjdC5jcmVhdGUobCk7W1wiY3JlYXRlZENhbGxiYWNrXCIsXCJhdHRhY2hlZENhbGxiYWNrXCIsXCJkZXRhY2hlZENhbGxiYWNrXCIsXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1vW2VdO3QmJihsW2VdPWZ1bmN0aW9uKCl7aih0aGlzKWluc3RhbmNlb2Ygcnx8Tyh0aGlzKSx0LmFwcGx5KGoodGhpcyksYXJndW1lbnRzKX0pfSk7dmFyIGQ9e3Byb3RvdHlwZTpsfTtpJiYoZFtcImV4dGVuZHNcIl09aSksci5wcm90b3R5cGU9byxyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1yLGUuY29uc3RydWN0b3JUYWJsZS5zZXQobCxyKSxlLm5hdGl2ZVByb3RvdHlwZVRhYmxlLnNldChvLGwpO2suY2FsbChDKHRoaXMpLHQsZCk7cmV0dXJuIHJ9LEUoW3dpbmRvdy5IVE1MRG9jdW1lbnR8fHdpbmRvdy5Eb2N1bWVudF0sW1wicmVnaXN0ZXJFbGVtZW50XCJdKX1FKFt3aW5kb3cuSFRNTEJvZHlFbGVtZW50LHdpbmRvdy5IVE1MRG9jdW1lbnR8fHdpbmRvdy5Eb2N1bWVudCx3aW5kb3cuSFRNTEhlYWRFbGVtZW50LHdpbmRvdy5IVE1MSHRtbEVsZW1lbnRdLFtcImFwcGVuZENoaWxkXCIsXCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvblwiLFwiY29udGFpbnNcIixcImdldEVsZW1lbnRzQnlDbGFzc05hbWVcIixcImdldEVsZW1lbnRzQnlUYWdOYW1lXCIsXCJnZXRFbGVtZW50c0J5VGFnTmFtZU5TXCIsXCJpbnNlcnRCZWZvcmVcIixcInF1ZXJ5U2VsZWN0b3JcIixcInF1ZXJ5U2VsZWN0b3JBbGxcIixcInJlbW92ZUNoaWxkXCIsXCJyZXBsYWNlQ2hpbGRcIl0pLEUoW3dpbmRvdy5IVE1MQm9keUVsZW1lbnQsd2luZG93LkhUTUxIZWFkRWxlbWVudCx3aW5kb3cuSFRNTEh0bWxFbGVtZW50XSxfKSxFKFt3aW5kb3cuSFRNTERvY3VtZW50fHx3aW5kb3cuRG9jdW1lbnRdLFtcImFkb3B0Tm9kZVwiLFwiaW1wb3J0Tm9kZVwiLFwiY29udGFpbnNcIixcImNyZWF0ZUNvbW1lbnRcIixcImNyZWF0ZURvY3VtZW50RnJhZ21lbnRcIixcImNyZWF0ZUVsZW1lbnRcIixcImNyZWF0ZUVsZW1lbnROU1wiLFwiY3JlYXRlRXZlbnRcIixcImNyZWF0ZUV2ZW50TlNcIixcImNyZWF0ZVJhbmdlXCIsXCJjcmVhdGVUZXh0Tm9kZVwiLFwiY3JlYXRlVHJlZVdhbGtlclwiLFwiZWxlbWVudEZyb21Qb2ludFwiLFwiZ2V0RWxlbWVudEJ5SWRcIixcImdldEVsZW1lbnRzQnlOYW1lXCIsXCJnZXRTZWxlY3Rpb25cIl0pLFModC5wcm90b3R5cGUsbCksUyh0LnByb3RvdHlwZSxkKSxTKHQucHJvdG90eXBlLGYpLFModC5wcm90b3R5cGUscCksUyh0LnByb3RvdHlwZSx7Z2V0IGltcGxlbWVudGF0aW9uKCl7dmFyIGU9SC5nZXQodGhpcyk7cmV0dXJuIGU/ZTooZT1uZXcgYShDKHRoaXMpLmltcGxlbWVudGF0aW9uKSxILnNldCh0aGlzLGUpLGUpfSxnZXQgZGVmYXVsdFZpZXcoKXtyZXR1cm4gaihDKHRoaXMpLmRlZmF1bHRWaWV3KX19KSxUKHdpbmRvdy5Eb2N1bWVudCx0LGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSksd2luZG93LkhUTUxEb2N1bWVudCYmVCh3aW5kb3cuSFRNTERvY3VtZW50LHQpLEQoW3dpbmRvdy5IVE1MQm9keUVsZW1lbnQsd2luZG93LkhUTUxEb2N1bWVudHx8d2luZG93LkRvY3VtZW50LHdpbmRvdy5IVE1MSGVhZEVsZW1lbnRdKTt2YXIgQT1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudDthLnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudD1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMl09Qyhhcmd1bWVudHNbMl0pLGooQS5hcHBseShOKHRoaXMpLGFyZ3VtZW50cykpfSxzKGEsXCJjcmVhdGVEb2N1bWVudFR5cGVcIikscyhhLFwiY3JlYXRlSFRNTERvY3VtZW50XCIpLGMoYSxcImhhc0ZlYXR1cmVcIiksVCh3aW5kb3cuRE9NSW1wbGVtZW50YXRpb24sYSksRShbd2luZG93LkRPTUltcGxlbWVudGF0aW9uXSxbXCJjcmVhdGVEb2N1bWVudFwiLFwiY3JlYXRlRG9jdW1lbnRUeXBlXCIsXCJjcmVhdGVIVE1MRG9jdW1lbnRcIixcImhhc0ZlYXR1cmVcIl0pLGUuYWRvcHROb2RlTm9SZW1vdmU9cixlLndyYXBwZXJzLkRPTUltcGxlbWVudGF0aW9uPWEsZS53cmFwcGVycy5Eb2N1bWVudD10fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7bi5jYWxsKHRoaXMsZSl9dmFyIG49ZS53cmFwcGVycy5FdmVudFRhcmdldCxyPWUud3JhcHBlcnMuU2VsZWN0aW9uLG89ZS5taXhpbixpPWUucmVnaXN0ZXJXcmFwcGVyLGE9ZS5yZW5kZXJBbGxQZW5kaW5nLHM9ZS51bndyYXAsYz1lLnVud3JhcElmTmVlZGVkLGw9ZS53cmFwLHU9d2luZG93LldpbmRvdyxkPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlLHA9d2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlLGg9d2luZG93LmdldFNlbGVjdGlvbjt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSx1LnByb3RvdHlwZS5nZXRDb21wdXRlZFN0eWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGwodGhpc3x8d2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGMoZSksdCl9LHAmJih1LnByb3RvdHlwZS5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZT1mdW5jdGlvbihlLHQpe3JldHVybiBsKHRoaXN8fHdpbmRvdykuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoYyhlKSx0KX0pLHUucHJvdG90eXBlLmdldFNlbGVjdGlvbj1mdW5jdGlvbigpe3JldHVybiBsKHRoaXN8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCl9LGRlbGV0ZSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSxkZWxldGUgd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlLGRlbGV0ZSB3aW5kb3cuZ2V0U2VsZWN0aW9uLFtcImFkZEV2ZW50TGlzdGVuZXJcIixcInJlbW92ZUV2ZW50TGlzdGVuZXJcIixcImRpc3BhdGNoRXZlbnRcIl0uZm9yRWFjaChmdW5jdGlvbihlKXt1LnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3ZhciB0PWwodGhpc3x8d2luZG93KTtyZXR1cm4gdFtlXS5hcHBseSh0LGFyZ3VtZW50cyl9LGRlbGV0ZSB3aW5kb3dbZV19KSxvKHQucHJvdG90eXBlLHtnZXRDb21wdXRlZFN0eWxlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGEoKSxkLmNhbGwocyh0aGlzKSxjKGUpLHQpfSxnZXRTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gYSgpLG5ldyByKGguY2FsbChzKHRoaXMpKSl9LGdldCBkb2N1bWVudCgpe3JldHVybiBsKHModGhpcykuZG9jdW1lbnQpfX0pLHAmJih0LnByb3RvdHlwZS5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZT1mdW5jdGlvbihlLHQpe3JldHVybiBhKCkscC5jYWxsKHModGhpcyksYyhlKSx0KX0pLGkodSx0LHdpbmRvdyksZS53cmFwcGVycy5XaW5kb3c9dH0od2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjt2YXIgdD1lLnVud3JhcCxuPXdpbmRvdy5EYXRhVHJhbnNmZXJ8fHdpbmRvdy5DbGlwYm9hcmQscj1uLnByb3RvdHlwZS5zZXREcmFnSW1hZ2U7ciYmKG4ucHJvdG90eXBlLnNldERyYWdJbWFnZT1mdW5jdGlvbihlLG4sbyl7ci5jYWxsKHRoaXMsdChlKSxuLG8pfSl9KHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXt2YXIgdDt0PWUgaW5zdGFuY2VvZiBpP2U6bmV3IGkoZSYmbyhlKSkscih0LHRoaXMpfXZhciBuPWUucmVnaXN0ZXJXcmFwcGVyLHI9ZS5zZXRXcmFwcGVyLG89ZS51bndyYXAsaT13aW5kb3cuRm9ybURhdGE7aSYmKG4oaSx0LG5ldyBpKSxlLndyYXBwZXJzLkZvcm1EYXRhPXQpfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO3ZhciB0PWUudW53cmFwSWZOZWVkZWQsbj1YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZDtYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihlKXtyZXR1cm4gbi5jYWxsKHRoaXMsdChlKSl9fSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7dmFyIHQ9bltlXSxyPXdpbmRvd1t0XTtpZihyKXt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpLGk9by5jb25zdHJ1Y3Rvcjt3aW5kb3dbdF09aX19dmFyIG49KGUuaXNXcmFwcGVyRm9yLHthOlwiSFRNTEFuY2hvckVsZW1lbnRcIixhcmVhOlwiSFRNTEFyZWFFbGVtZW50XCIsYXVkaW86XCJIVE1MQXVkaW9FbGVtZW50XCIsYmFzZTpcIkhUTUxCYXNlRWxlbWVudFwiLGJvZHk6XCJIVE1MQm9keUVsZW1lbnRcIixicjpcIkhUTUxCUkVsZW1lbnRcIixidXR0b246XCJIVE1MQnV0dG9uRWxlbWVudFwiLGNhbnZhczpcIkhUTUxDYW52YXNFbGVtZW50XCIsY2FwdGlvbjpcIkhUTUxUYWJsZUNhcHRpb25FbGVtZW50XCIsY29sOlwiSFRNTFRhYmxlQ29sRWxlbWVudFwiLGNvbnRlbnQ6XCJIVE1MQ29udGVudEVsZW1lbnRcIixkYXRhOlwiSFRNTERhdGFFbGVtZW50XCIsZGF0YWxpc3Q6XCJIVE1MRGF0YUxpc3RFbGVtZW50XCIsZGVsOlwiSFRNTE1vZEVsZW1lbnRcIixkaXI6XCJIVE1MRGlyZWN0b3J5RWxlbWVudFwiLGRpdjpcIkhUTUxEaXZFbGVtZW50XCIsZGw6XCJIVE1MRExpc3RFbGVtZW50XCIsZW1iZWQ6XCJIVE1MRW1iZWRFbGVtZW50XCIsZmllbGRzZXQ6XCJIVE1MRmllbGRTZXRFbGVtZW50XCIsZm9udDpcIkhUTUxGb250RWxlbWVudFwiLGZvcm06XCJIVE1MRm9ybUVsZW1lbnRcIixmcmFtZTpcIkhUTUxGcmFtZUVsZW1lbnRcIixmcmFtZXNldDpcIkhUTUxGcmFtZVNldEVsZW1lbnRcIixoMTpcIkhUTUxIZWFkaW5nRWxlbWVudFwiLGhlYWQ6XCJIVE1MSGVhZEVsZW1lbnRcIixocjpcIkhUTUxIUkVsZW1lbnRcIixodG1sOlwiSFRNTEh0bWxFbGVtZW50XCIsaWZyYW1lOlwiSFRNTElGcmFtZUVsZW1lbnRcIixpbWc6XCJIVE1MSW1hZ2VFbGVtZW50XCIsaW5wdXQ6XCJIVE1MSW5wdXRFbGVtZW50XCIsa2V5Z2VuOlwiSFRNTEtleWdlbkVsZW1lbnRcIixsYWJlbDpcIkhUTUxMYWJlbEVsZW1lbnRcIixsZWdlbmQ6XCJIVE1MTGVnZW5kRWxlbWVudFwiLGxpOlwiSFRNTExJRWxlbWVudFwiLGxpbms6XCJIVE1MTGlua0VsZW1lbnRcIixtYXA6XCJIVE1MTWFwRWxlbWVudFwiLG1hcnF1ZWU6XCJIVE1MTWFycXVlZUVsZW1lbnRcIixtZW51OlwiSFRNTE1lbnVFbGVtZW50XCIsbWVudWl0ZW06XCJIVE1MTWVudUl0ZW1FbGVtZW50XCIsbWV0YTpcIkhUTUxNZXRhRWxlbWVudFwiLG1ldGVyOlwiSFRNTE1ldGVyRWxlbWVudFwiLG9iamVjdDpcIkhUTUxPYmplY3RFbGVtZW50XCIsb2w6XCJIVE1MT0xpc3RFbGVtZW50XCIsb3B0Z3JvdXA6XCJIVE1MT3B0R3JvdXBFbGVtZW50XCIsb3B0aW9uOlwiSFRNTE9wdGlvbkVsZW1lbnRcIixvdXRwdXQ6XCJIVE1MT3V0cHV0RWxlbWVudFwiLHA6XCJIVE1MUGFyYWdyYXBoRWxlbWVudFwiLHBhcmFtOlwiSFRNTFBhcmFtRWxlbWVudFwiLHByZTpcIkhUTUxQcmVFbGVtZW50XCIscHJvZ3Jlc3M6XCJIVE1MUHJvZ3Jlc3NFbGVtZW50XCIscTpcIkhUTUxRdW90ZUVsZW1lbnRcIixzY3JpcHQ6XCJIVE1MU2NyaXB0RWxlbWVudFwiLHNlbGVjdDpcIkhUTUxTZWxlY3RFbGVtZW50XCIsc2hhZG93OlwiSFRNTFNoYWRvd0VsZW1lbnRcIixzb3VyY2U6XCJIVE1MU291cmNlRWxlbWVudFwiLHNwYW46XCJIVE1MU3BhbkVsZW1lbnRcIixzdHlsZTpcIkhUTUxTdHlsZUVsZW1lbnRcIix0YWJsZTpcIkhUTUxUYWJsZUVsZW1lbnRcIix0Ym9keTpcIkhUTUxUYWJsZVNlY3Rpb25FbGVtZW50XCIsdGVtcGxhdGU6XCJIVE1MVGVtcGxhdGVFbGVtZW50XCIsdGV4dGFyZWE6XCJIVE1MVGV4dEFyZWFFbGVtZW50XCIsdGhlYWQ6XCJIVE1MVGFibGVTZWN0aW9uRWxlbWVudFwiLHRpbWU6XCJIVE1MVGltZUVsZW1lbnRcIix0aXRsZTpcIkhUTUxUaXRsZUVsZW1lbnRcIix0cjpcIkhUTUxUYWJsZVJvd0VsZW1lbnRcIix0cmFjazpcIkhUTUxUcmFja0VsZW1lbnRcIix1bDpcIkhUTUxVTGlzdEVsZW1lbnRcIix2aWRlbzpcIkhUTUxWaWRlb0VsZW1lbnRcIn0pO09iamVjdC5rZXlzKG4pLmZvckVhY2godCksT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZS53cmFwcGVycykuZm9yRWFjaChmdW5jdGlvbih0KXt3aW5kb3dbdF09ZS53cmFwcGVyc1t0XX0pfSh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwpLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSx0KXt2YXIgbj1cIlwiO3JldHVybiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGUsZnVuY3Rpb24oZSl7bis9ZS50ZXh0Q29udGVudCtcIlxcblxcblwifSksdHx8KG49bi5yZXBsYWNlKGQsXCJcIikpLG59ZnVuY3Rpb24gbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIHQudGV4dENvbnRlbnQ9ZSx0fWZ1bmN0aW9uIHIoZSl7dmFyIHQ9bihlKTtkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHQpO3ZhciByPVtdO2lmKHQuc2hlZXQpdHJ5e3I9dC5zaGVldC5jc3NSdWxlc31jYXRjaChvKXt9ZWxzZSBjb25zb2xlLndhcm4oXCJzaGVldCBub3QgZm91bmRcIix0KTtyZXR1cm4gdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLHJ9ZnVuY3Rpb24gbygpe0MuaW5pdGlhbGl6ZWQ9ITAsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChDKTt2YXIgZT1DLmNvbnRlbnREb2N1bWVudCx0PWUuY3JlYXRlRWxlbWVudChcImJhc2VcIik7dC5ocmVmPWRvY3VtZW50LmJhc2VVUkksZS5oZWFkLmFwcGVuZENoaWxkKHQpfWZ1bmN0aW9uIGkoZSl7Qy5pbml0aWFsaXplZHx8bygpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoQyksZShDLmNvbnRlbnREb2N1bWVudCksZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChDKX1mdW5jdGlvbiBhKGUsdCl7aWYodCl7dmFyIG87aWYoZS5tYXRjaChcIkBpbXBvcnRcIikmJkQpe3ZhciBhPW4oZSk7aShmdW5jdGlvbihlKXtlLmhlYWQuYXBwZW5kQ2hpbGQoYS5pbXBsKSxvPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEuc2hlZXQuY3NzUnVsZXMsMCksdChvKX0pfWVsc2Ugbz1yKGUpLHQobyl9fWZ1bmN0aW9uIHMoZSl7ZSYmbCgpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUpKX1mdW5jdGlvbiBjKGUsdCl7dmFyIHI9bihlKTtyLnNldEF0dHJpYnV0ZSh0LFwiXCIpLHIuc2V0QXR0cmlidXRlKHgsXCJcIiksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyKX1mdW5jdGlvbiBsKCl7cmV0dXJuIGp8fChqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxqLnNldEF0dHJpYnV0ZSh4LFwiXCIpLGpbeF09ITApLGp9dmFyIHU9e3N0cmljdFN0eWxpbmc6ITEscmVnaXN0cnk6e30sc2hpbVN0eWxpbmc6ZnVuY3Rpb24oZSxuLHIpe3ZhciBvPXRoaXMucHJlcGFyZVJvb3QoZSxuLHIpLGk9dGhpcy5pc1R5cGVFeHRlbnNpb24ociksYT10aGlzLm1ha2VTY29wZVNlbGVjdG9yKG4saSkscz10KG8sITApO3M9dGhpcy5zY29wZUNzc1RleHQocyxhKSxlJiYoZS5zaGltbWVkU3R5bGU9cyksdGhpcy5hZGRDc3NUb0RvY3VtZW50KHMsbil9LHNoaW1TdHlsZTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnNoaW1Dc3NUZXh0KGUudGV4dENvbnRlbnQsdCl9LHNoaW1Dc3NUZXh0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9dGhpcy5pbnNlcnREaXJlY3RpdmVzKGUpLHRoaXMuc2NvcGVDc3NUZXh0KGUsdCl9LG1ha2VTY29wZVNlbGVjdG9yOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU/dD9cIltpcz1cIitlK1wiXVwiOmU6XCJcIn0saXNUeXBlRXh0ZW5zaW9uOmZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLmluZGV4T2YoXCItXCIpPDB9LHByZXBhcmVSb290OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLnJlZ2lzdGVyUm9vdChlLHQsbik7cmV0dXJuIHRoaXMucmVwbGFjZVRleHRJblN0eWxlcyhyLnJvb3RTdHlsZXMsdGhpcy5pbnNlcnREaXJlY3RpdmVzKSx0aGlzLnJlbW92ZVN0eWxlcyhlLHIucm9vdFN0eWxlcyksdGhpcy5zdHJpY3RTdHlsaW5nJiZ0aGlzLmFwcGx5U2NvcGVUb0NvbnRlbnQoZSx0KSxyLnNjb3BlU3R5bGVzfSxyZW1vdmVTdHlsZXM6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scj0wLG89dC5sZW5ndGg7bz5yJiYobj10W3JdKTtyKyspbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pfSxyZWdpc3RlclJvb3Q6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMucmVnaXN0cnlbdF09e3Jvb3Q6ZSxuYW1lOnQsZXh0ZW5kc05hbWU6bn0sbz10aGlzLmZpbmRTdHlsZXMoZSk7ci5yb290U3R5bGVzPW8sci5zY29wZVN0eWxlcz1yLnJvb3RTdHlsZXM7dmFyIGk9dGhpcy5yZWdpc3RyeVtyLmV4dGVuZHNOYW1lXTtyZXR1cm4gaSYmKHIuc2NvcGVTdHlsZXM9aS5zY29wZVN0eWxlcy5jb25jYXQoci5zY29wZVN0eWxlcykpLHJ9LGZpbmRTdHlsZXM6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuW107dmFyIHQ9ZS5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVcIik7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0LGZ1bmN0aW9uKGUpe3JldHVybiFlLmhhc0F0dHJpYnV0ZShSKX0pfSxhcHBseVNjb3BlVG9Db250ZW50OmZ1bmN0aW9uKGUsdCl7ZSYmKEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZS5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKSxmdW5jdGlvbihlKXtlLnNldEF0dHJpYnV0ZSh0LFwiXCIpfSksQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZW1wbGF0ZVwiKSxmdW5jdGlvbihlKXt0aGlzLmFwcGx5U2NvcGVUb0NvbnRlbnQoZS5jb250ZW50LHQpfSx0aGlzKSl9LGluc2VydERpcmVjdGl2ZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9dGhpcy5pbnNlcnRQb2x5ZmlsbERpcmVjdGl2ZXNJbkNzc1RleHQoZSksdGhpcy5pbnNlcnRQb2x5ZmlsbFJ1bGVzSW5Dc3NUZXh0KGUpfSxpbnNlcnRQb2x5ZmlsbERpcmVjdGl2ZXNJbkNzc1RleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZS5yZXBsYWNlKHAsZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5zbGljZSgwLC0yKStcIntcIn0pLGUucmVwbGFjZShoLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQrXCIge1wifSl9LGluc2VydFBvbHlmaWxsUnVsZXNJbkNzc1RleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZS5yZXBsYWNlKGYsZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5zbGljZSgwLC0xKX0pLGUucmVwbGFjZShtLGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWUucmVwbGFjZSh0LFwiXCIpLnJlcGxhY2UobixcIlwiKTtyZXR1cm4gcitvfSl9LHNjb3BlQ3NzVGV4dDpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZXh0cmFjdFVuc2NvcGVkUnVsZXNGcm9tQ3NzVGV4dChlKTtpZihlPXRoaXMuaW5zZXJ0UG9seWZpbGxIb3N0SW5Dc3NUZXh0KGUpLGU9dGhpcy5jb252ZXJ0Q29sb25Ib3N0KGUpLGU9dGhpcy5jb252ZXJ0Q29sb25Ib3N0Q29udGV4dChlKSxlPXRoaXMuY29udmVydFNoYWRvd0RPTVNlbGVjdG9ycyhlKSx0KXt2YXIgZSxyPXRoaXM7YShlLGZ1bmN0aW9uKG4pe2U9ci5zY29wZVJ1bGVzKG4sdCl9KX1yZXR1cm4gZT1lK1wiXFxuXCIrbixlLnRyaW0oKX0sZXh0cmFjdFVuc2NvcGVkUnVsZXNGcm9tQ3NzVGV4dDpmdW5jdGlvbihlKXtmb3IodmFyIHQsbj1cIlwiO3Q9dy5leGVjKGUpOyluKz10WzFdLnNsaWNlKDAsLTEpK1wiXFxuXFxuXCI7Zm9yKDt0PXYuZXhlYyhlKTspbis9dFswXS5yZXBsYWNlKHRbMl0sXCJcIikucmVwbGFjZSh0WzFdLHRbM10pK1wiXFxuXFxuXCI7cmV0dXJuIG59LGNvbnZlcnRDb2xvbkhvc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY29udmVydENvbG9uUnVsZShlLEUsdGhpcy5jb2xvbkhvc3RQYXJ0UmVwbGFjZXIpfSxjb252ZXJ0Q29sb25Ib3N0Q29udGV4dDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5jb252ZXJ0Q29sb25SdWxlKGUsXyx0aGlzLmNvbG9uSG9zdENvbnRleHRQYXJ0UmVwbGFjZXIpfSxjb252ZXJ0Q29sb25SdWxlOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZS5yZXBsYWNlKHQsZnVuY3Rpb24oZSx0LHIsbyl7aWYodD1PLHIpe2Zvcih2YXIgaSxhPXIuc3BsaXQoXCIsXCIpLHM9W10sYz0wLGw9YS5sZW5ndGg7bD5jJiYoaT1hW2NdKTtjKyspaT1pLnRyaW0oKSxzLnB1c2gobih0LGksbykpO3JldHVybiBzLmpvaW4oXCIsXCIpfXJldHVybiB0K299KX0sY29sb25Ib3N0Q29udGV4dFBhcnRSZXBsYWNlcjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHQubWF0Y2goZyk/dGhpcy5jb2xvbkhvc3RQYXJ0UmVwbGFjZXIoZSx0LG4pOmUrdCtuK1wiLCBcIit0K1wiIFwiK2Urbn0sY29sb25Ib3N0UGFydFJlcGxhY2VyOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZSt0LnJlcGxhY2UoZyxcIlwiKStufSxjb252ZXJ0U2hhZG93RE9NU2VsZWN0b3JzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8Ti5sZW5ndGg7dCsrKWU9ZS5yZXBsYWNlKE5bdF0sXCIgXCIpO3JldHVybiBlfSxzY29wZVJ1bGVzOmZ1bmN0aW9uKGUsdCl7dmFyIG49XCJcIjtyZXR1cm4gZSYmQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlLGZ1bmN0aW9uKGUpe2lmKGUuc2VsZWN0b3JUZXh0JiZlLnN0eWxlJiZ2b2lkIDAhPT1lLnN0eWxlLmNzc1RleHQpbis9dGhpcy5zY29wZVNlbGVjdG9yKGUuc2VsZWN0b3JUZXh0LHQsdGhpcy5zdHJpY3RTdHlsaW5nKStcIiB7XFxuXHRcIixuKz10aGlzLnByb3BlcnRpZXNGcm9tUnVsZShlKStcIlxcbn1cXG5cXG5cIjtlbHNlIGlmKGUudHlwZT09PUNTU1J1bGUuTUVESUFfUlVMRSluKz1cIkBtZWRpYSBcIitlLm1lZGlhLm1lZGlhVGV4dCtcIiB7XFxuXCIsbis9dGhpcy5zY29wZVJ1bGVzKGUuY3NzUnVsZXMsdCksbis9XCJcXG59XFxuXFxuXCI7ZWxzZSB0cnl7ZS5jc3NUZXh0JiYobis9ZS5jc3NUZXh0K1wiXFxuXFxuXCIpfWNhdGNoKHIpe2UudHlwZT09PUNTU1J1bGUuS0VZRlJBTUVTX1JVTEUmJmUuY3NzUnVsZXMmJihuKz10aGlzLmllU2FmZUNzc1RleHRGcm9tS2V5RnJhbWVSdWxlKGUpKX19LHRoaXMpLG59LGllU2FmZUNzc1RleHRGcm9tS2V5RnJhbWVSdWxlOmZ1bmN0aW9uKGUpe3ZhciB0PVwiQGtleWZyYW1lcyBcIitlLm5hbWUrXCIge1wiO3JldHVybiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGUuY3NzUnVsZXMsZnVuY3Rpb24oZSl7dCs9XCIgXCIrZS5rZXlUZXh0K1wiIHtcIitlLnN0eWxlLmNzc1RleHQrXCJ9XCJ9KSx0Kz1cIiB9XCJ9LHNjb3BlU2VsZWN0b3I6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVtdLG89ZS5zcGxpdChcIixcIik7cmV0dXJuIG8uZm9yRWFjaChmdW5jdGlvbihlKXtlPWUudHJpbSgpLHRoaXMuc2VsZWN0b3JOZWVkc1Njb3BpbmcoZSx0KSYmKGU9biYmIWUubWF0Y2goTyk/dGhpcy5hcHBseVN0cmljdFNlbGVjdG9yU2NvcGUoZSx0KTp0aGlzLmFwcGx5U2VsZWN0b3JTY29wZShlLHQpKSxyLnB1c2goZSl9LHRoaXMpLHIuam9pbihcIiwgXCIpfSxzZWxlY3Rvck5lZWRzU2NvcGluZzpmdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuITA7dmFyIG49dGhpcy5tYWtlU2NvcGVNYXRjaGVyKHQpO3JldHVybiFlLm1hdGNoKG4pfSxtYWtlU2NvcGVNYXRjaGVyOmZ1bmN0aW9uKGUpe3JldHVybiBlPWUucmVwbGFjZSgvXFxbL2csXCJcXFxcW1wiKS5yZXBsYWNlKC9cXF0vZyxcIlxcXFxdXCIpLG5ldyBSZWdFeHAoXCJeKFwiK2UrXCIpXCIrUyxcIm1cIil9LGFwcGx5U2VsZWN0b3JTY29wZTpmdW5jdGlvbihlLHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP3RoaXMuYXBwbHlTZWxlY3RvclNjb3BlTGlzdChlLHQpOnRoaXMuYXBwbHlTaW1wbGVTZWxlY3RvclNjb3BlKGUsdCl9LGFwcGx5U2VsZWN0b3JTY29wZUxpc3Q6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scj1bXSxvPTA7bj10W29dO28rKylyLnB1c2godGhpcy5hcHBseVNpbXBsZVNlbGVjdG9yU2NvcGUoZSxuKSk7cmV0dXJuIHIuam9pbihcIiwgXCIpfSxhcHBseVNpbXBsZVNlbGVjdG9yU2NvcGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5tYXRjaChMKT8oZT1lLnJlcGxhY2UoTyx0KSxlLnJlcGxhY2UoTCx0K1wiIFwiKSk6dCtcIiBcIitlfSxhcHBseVN0cmljdFNlbGVjdG9yU2NvcGU6ZnVuY3Rpb24oZSx0KXt0PXQucmVwbGFjZSgvXFxbaXM9KFteXFxdXSopXFxdL2csXCIkMVwiKTt2YXIgbj1bXCIgXCIsXCI+XCIsXCIrXCIsXCJ+XCJdLHI9ZSxvPVwiW1wiK3QrXCJdXCI7cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1yLnNwbGl0KGUpO3I9dC5tYXAoZnVuY3Rpb24oZSl7dmFyIHQ9ZS50cmltKCkucmVwbGFjZShMLFwiXCIpO3JldHVybiB0JiZuLmluZGV4T2YodCk8MCYmdC5pbmRleE9mKG8pPDAmJihlPXQucmVwbGFjZSgvKFteOl0qKSg6KikoLiopLyxcIiQxXCIrbytcIiQyJDNcIikpLGV9KS5qb2luKGUpfSkscn0saW5zZXJ0UG9seWZpbGxIb3N0SW5Dc3NUZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoTSxiKS5yZXBsYWNlKFQsZyl9LHByb3BlcnRpZXNGcm9tUnVsZTpmdW5jdGlvbihlKXt2YXIgdD1lLnN0eWxlLmNzc1RleHQ7ZS5zdHlsZS5jb250ZW50JiYhZS5zdHlsZS5jb250ZW50Lm1hdGNoKC9bJ1wiXSt8YXR0ci8pJiYodD10LnJlcGxhY2UoL2NvbnRlbnQ6W147XSo7L2csXCJjb250ZW50OiAnXCIrZS5zdHlsZS5jb250ZW50K1wiJztcIikpO3ZhciBuPWUuc3R5bGU7Zm9yKHZhciByIGluIG4pXCJpbml0aWFsXCI9PT1uW3JdJiYodCs9citcIjogaW5pdGlhbDsgXCIpO3JldHVybiB0fSxyZXBsYWNlVGV4dEluU3R5bGVzOmZ1bmN0aW9uKGUsdCl7ZSYmdCYmKGUgaW5zdGFuY2VvZiBBcnJheXx8KGU9W2VdKSxBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGUsZnVuY3Rpb24oZSl7ZS50ZXh0Q29udGVudD10LmNhbGwodGhpcyxlLnRleHRDb250ZW50KX0sdGhpcykpfSxhZGRDc3NUb0RvY3VtZW50OmZ1bmN0aW9uKGUsdCl7ZS5tYXRjaChcIkBpbXBvcnRcIik/YyhlLHQpOnMoZSl9fSxkPS9cXC9cXCpbXipdKlxcKisoW15cXC8qXVteKl0qXFwqKykqXFwvL2dpbSxwPS9cXC9cXCpcXHMqQHBvbHlmaWxsIChbXipdKlxcKisoW15cXC8qXVteKl0qXFwqKykqXFwvKShbXntdKj8pey9naW0saD0vcG9seWZpbGwtbmV4dC1zZWxlY3RvcltefV0qY29udGVudFxcOltcXHNdKj9bJ1wiXSguKj8pWydcIl1bO1xcc10qfShbXntdKj8pey9naW0sZj0vXFwvXFwqXFxzQHBvbHlmaWxsLXJ1bGUoW14qXSpcXCorKFteXFwvKl1bXipdKlxcKispKilcXC8vZ2ltLG09Lyhwb2x5ZmlsbC1ydWxlKVtefV0qKGNvbnRlbnRcXDpbXFxzXSpbJ1wiXSguKj8pWydcIl0pWztcXHNdKltefV0qfS9naW0sdz0vXFwvXFwqXFxzQHBvbHlmaWxsLXVuc2NvcGVkLXJ1bGUoW14qXSpcXCorKFteXFwvKl1bXipdKlxcKispKilcXC8vZ2ltLHY9Lyhwb2x5ZmlsbC11bnNjb3BlZC1ydWxlKVtefV0qKGNvbnRlbnRcXDpbXFxzXSpbJ1wiXSguKj8pWydcIl0pWztcXHNdKltefV0qfS9naW0sZz1cIi1zaGFkb3djc3Nob3N0XCIsYj1cIi1zaGFkb3djc3Njb250ZXh0XCIseT1cIikoPzpcXFxcKCgoPzpcXFxcKFteKShdKlxcXFwpfFteKShdKikrPylcXFxcKSk/KFteLHtdKilcIixFPW5ldyBSZWdFeHAoXCIoXCIrZyt5LFwiZ2ltXCIpLF89bmV3IFJlZ0V4cChcIihcIitiK3ksXCJnaW1cIiksUz1cIihbPlxcXFxzfitbLix7Ol1bXFxcXHNcXFxcU10qKT8kXCIsVD0vXFw6aG9zdC9naW0sTT0vXFw6aG9zdC1jb250ZXh0L2dpbSxPPWcrXCItbm8tY29tYmluYXRvclwiLEw9bmV3IFJlZ0V4cChnLFwiZ2ltXCIpLE49KG5ldyBSZWdFeHAoYixcImdpbVwiKSxbLz4+Pi9nLC86OnNoYWRvdy9nLC86OmNvbnRlbnQvZywvXFwvZGVlcFxcLy9nLC9cXC9zaGFkb3dcXC8vZywvXFwvc2hhZG93LWRlZXBcXC8vZywvXFxeXFxeL2csL1xcXi9nXSksQz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO0Muc3R5bGUuZGlzcGxheT1cIm5vbmVcIjt2YXIgaixEPW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goXCJDaHJvbWVcIiksSD1cInNoaW0tc2hhZG93ZG9tXCIseD1cInNoaW0tc2hhZG93ZG9tLWNzc1wiLFI9XCJuby1zaGltXCI7aWYod2luZG93LlNoYWRvd0RPTVBvbHlmaWxsKXtzKFwic3R5bGUgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cXG5cIik7dmFyIEk9U2hhZG93RE9NUG9seWZpbGwud3JhcChkb2N1bWVudCksUD1JLnF1ZXJ5U2VsZWN0b3IoXCJoZWFkXCIpO1AuaW5zZXJ0QmVmb3JlKGwoKSxQLmNoaWxkTm9kZXNbMF0pLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXtlLnVybFJlc29sdmVyO2lmKHdpbmRvdy5IVE1MSW1wb3J0cyYmIUhUTUxJbXBvcnRzLnVzZU5hdGl2ZSl7dmFyIHQ9XCJsaW5rW3JlbD1zdHlsZXNoZWV0XVtcIitIK1wiXVwiLG49XCJzdHlsZVtcIitIK1wiXVwiO0hUTUxJbXBvcnRzLmltcG9ydGVyLmRvY3VtZW50UHJlbG9hZFNlbGVjdG9ycys9XCIsXCIrdCxIVE1MSW1wb3J0cy5pbXBvcnRlci5pbXBvcnRzUHJlbG9hZFNlbGVjdG9ycys9XCIsXCIrdCxIVE1MSW1wb3J0cy5wYXJzZXIuZG9jdW1lbnRTZWxlY3RvcnM9W0hUTUxJbXBvcnRzLnBhcnNlci5kb2N1bWVudFNlbGVjdG9ycyx0LG5dLmpvaW4oXCIsXCIpO3ZhciByPUhUTUxJbXBvcnRzLnBhcnNlci5wYXJzZUdlbmVyaWM7SFRNTEltcG9ydHMucGFyc2VyLnBhcnNlR2VuZXJpYz1mdW5jdGlvbihlKXtpZighZVt4XSl7dmFyIHQ9ZS5fX2ltcG9ydEVsZW1lbnR8fGU7aWYoIXQuaGFzQXR0cmlidXRlKEgpKXJldHVybiB2b2lkIHIuY2FsbCh0aGlzLGUpO2UuX19yZXNvdXJjZSYmKHQ9ZS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSx0LnRleHRDb250ZW50PWUuX19yZXNvdXJjZSksSFRNTEltcG9ydHMucGF0aC5yZXNvbHZlVXJsc0luU3R5bGUodCxlLmhyZWYpLHQudGV4dENvbnRlbnQ9dS5zaGltU3R5bGUodCksdC5yZW1vdmVBdHRyaWJ1dGUoSCxcIlwiKSx0LnNldEF0dHJpYnV0ZSh4LFwiXCIpLHRbeF09ITAsdC5wYXJlbnROb2RlIT09UCYmKGUucGFyZW50Tm9kZT09PVA/UC5yZXBsYWNlQ2hpbGQodCxlKTp0aGlzLmFkZEVsZW1lbnRUb0RvY3VtZW50KHQpKSx0Ll9faW1wb3J0UGFyc2VkPSEwLHRoaXMubWFya1BhcnNpbmdDb21wbGV0ZShlKSx0aGlzLnBhcnNlTmV4dCgpfX07dmFyIG89SFRNTEltcG9ydHMucGFyc2VyLmhhc1Jlc291cmNlO0hUTUxJbXBvcnRzLnBhcnNlci5oYXNSZXNvdXJjZT1mdW5jdGlvbihlKXtyZXR1cm5cImxpbmtcIj09PWUubG9jYWxOYW1lJiZcInN0eWxlc2hlZXRcIj09PWUucmVsJiZlLmhhc0F0dHJpYnV0ZShIKT9lLl9fcmVzb3VyY2U6by5jYWxsKHRoaXMsZSl9fX0pfWUuU2hhZG93Q1NTPXV9KHdpbmRvdy5XZWJDb21wb25lbnRzKSksZnVuY3Rpb24oZSl7d2luZG93LlNoYWRvd0RPTVBvbHlmaWxsPyh3aW5kb3cud3JhcD1TaGFkb3dET01Qb2x5ZmlsbC53cmFwSWZOZWVkZWQsd2luZG93LnVud3JhcD1TaGFkb3dET01Qb2x5ZmlsbC51bndyYXBJZk5lZWRlZCk6d2luZG93LndyYXA9d2luZG93LnVud3JhcD1mdW5jdGlvbihlKXtyZXR1cm4gZX19KHdpbmRvdy5XZWJDb21wb25lbnRzKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3JldHVybiB2b2lkIDAhPT1wW2VdfWZ1bmN0aW9uIG4oKXtzLmNhbGwodGhpcyksdGhpcy5faXNJbnZhbGlkPSEwfWZ1bmN0aW9uIHIoZSl7cmV0dXJuXCJcIj09ZSYmbi5jYWxsKHRoaXMpLGUudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBvKGUpe3ZhciB0PWUuY2hhckNvZGVBdCgwKTtyZXR1cm4gdD4zMiYmMTI3PnQmJi0xPT1bMzQsMzUsNjAsNjIsNjMsOTZdLmluZGV4T2YodCk/ZTplbmNvZGVVUklDb21wb25lbnQoZSl9ZnVuY3Rpb24gaShlKXt2YXIgdD1lLmNoYXJDb2RlQXQoMCk7cmV0dXJuIHQ+MzImJjEyNz50JiYtMT09WzM0LDM1LDYwLDYyLDk2XS5pbmRleE9mKHQpP2U6ZW5jb2RlVVJJQ29tcG9uZW50KGUpfWZ1bmN0aW9uIGEoZSxhLHMpe2Z1bmN0aW9uIGMoZSl7Yi5wdXNoKGUpfXZhciBsPWF8fFwic2NoZW1lIHN0YXJ0XCIsdT0wLGQ9XCJcIix2PSExLGc9ITEsYj1bXTtlOmZvcig7KGVbdS0xXSE9Znx8MD09dSkmJiF0aGlzLl9pc0ludmFsaWQ7KXt2YXIgeT1lW3VdO3N3aXRjaChsKXtjYXNlXCJzY2hlbWUgc3RhcnRcIjppZigheXx8IW0udGVzdCh5KSl7aWYoYSl7YyhcIkludmFsaWQgc2NoZW1lLlwiKTticmVhayBlfWQ9XCJcIixsPVwibm8gc2NoZW1lXCI7Y29udGludWV9ZCs9eS50b0xvd2VyQ2FzZSgpLGw9XCJzY2hlbWVcIjticmVhaztjYXNlXCJzY2hlbWVcIjppZih5JiZ3LnRlc3QoeSkpZCs9eS50b0xvd2VyQ2FzZSgpO2Vsc2V7aWYoXCI6XCIhPXkpe2lmKGEpe2lmKGY9PXkpYnJlYWsgZTtjKFwiQ29kZSBwb2ludCBub3QgYWxsb3dlZCBpbiBzY2hlbWU6IFwiK3kpO2JyZWFrIGV9ZD1cIlwiLHU9MCxsPVwibm8gc2NoZW1lXCI7Y29udGludWV9aWYodGhpcy5fc2NoZW1lPWQsZD1cIlwiLGEpYnJlYWsgZTt0KHRoaXMuX3NjaGVtZSkmJih0aGlzLl9pc1JlbGF0aXZlPSEwKSxsPVwiZmlsZVwiPT10aGlzLl9zY2hlbWU/XCJyZWxhdGl2ZVwiOnRoaXMuX2lzUmVsYXRpdmUmJnMmJnMuX3NjaGVtZT09dGhpcy5fc2NoZW1lP1wicmVsYXRpdmUgb3IgYXV0aG9yaXR5XCI6dGhpcy5faXNSZWxhdGl2ZT9cImF1dGhvcml0eSBmaXJzdCBzbGFzaFwiOlwic2NoZW1lIGRhdGFcIn1icmVhaztjYXNlXCJzY2hlbWUgZGF0YVwiOlwiP1wiPT15Pyh0aGlzLl9xdWVyeT1cIj9cIixsPVwicXVlcnlcIik6XCIjXCI9PXk/KHRoaXMuX2ZyYWdtZW50PVwiI1wiLGw9XCJmcmFnbWVudFwiKTpmIT15JiZcIlx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXkmJih0aGlzLl9zY2hlbWVEYXRhKz1vKHkpKTticmVhaztjYXNlXCJubyBzY2hlbWVcIjppZihzJiZ0KHMuX3NjaGVtZSkpe2w9XCJyZWxhdGl2ZVwiO2NvbnRpbnVlfWMoXCJNaXNzaW5nIHNjaGVtZS5cIiksbi5jYWxsKHRoaXMpO2JyZWFrO2Nhc2VcInJlbGF0aXZlIG9yIGF1dGhvcml0eVwiOmlmKFwiL1wiIT15fHxcIi9cIiE9ZVt1KzFdKXtjKFwiRXhwZWN0ZWQgLywgZ290OiBcIit5KSxsPVwicmVsYXRpdmVcIjtjb250aW51ZX1sPVwiYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7YnJlYWs7Y2FzZVwicmVsYXRpdmVcIjppZih0aGlzLl9pc1JlbGF0aXZlPSEwLFwiZmlsZVwiIT10aGlzLl9zY2hlbWUmJih0aGlzLl9zY2hlbWU9cy5fc2NoZW1lKSxmPT15KXt0aGlzLl9ob3N0PXMuX2hvc3QsdGhpcy5fcG9ydD1zLl9wb3J0LHRoaXMuX3BhdGg9cy5fcGF0aC5zbGljZSgpLHRoaXMuX3F1ZXJ5PXMuX3F1ZXJ5LHRoaXMuX3VzZXJuYW1lPXMuX3VzZXJuYW1lLHRoaXMuX3Bhc3N3b3JkPXMuX3Bhc3N3b3JkO2JyZWFrIGV9aWYoXCIvXCI9PXl8fFwiXFxcXFwiPT15KVwiXFxcXFwiPT15JiZjKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGw9XCJyZWxhdGl2ZSBzbGFzaFwiO2Vsc2UgaWYoXCI/XCI9PXkpdGhpcy5faG9zdD1zLl9ob3N0LHRoaXMuX3BvcnQ9cy5fcG9ydCx0aGlzLl9wYXRoPXMuX3BhdGguc2xpY2UoKSx0aGlzLl9xdWVyeT1cIj9cIix0aGlzLl91c2VybmFtZT1zLl91c2VybmFtZSx0aGlzLl9wYXNzd29yZD1zLl9wYXNzd29yZCxsPVwicXVlcnlcIjtlbHNle2lmKFwiI1wiIT15KXt2YXIgRT1lW3UrMV0sXz1lW3UrMl07KFwiZmlsZVwiIT10aGlzLl9zY2hlbWV8fCFtLnRlc3QoeSl8fFwiOlwiIT1FJiZcInxcIiE9RXx8ZiE9XyYmXCIvXCIhPV8mJlwiXFxcXFwiIT1fJiZcIj9cIiE9XyYmXCIjXCIhPV8pJiYodGhpcy5faG9zdD1zLl9ob3N0LHRoaXMuX3BvcnQ9cy5fcG9ydCx0aGlzLl91c2VybmFtZT1zLl91c2VybmFtZSx0aGlzLl9wYXNzd29yZD1zLl9wYXNzd29yZCx0aGlzLl9wYXRoPXMuX3BhdGguc2xpY2UoKSx0aGlzLl9wYXRoLnBvcCgpKSxsPVwicmVsYXRpdmUgcGF0aFwiO2NvbnRpbnVlfXRoaXMuX2hvc3Q9cy5faG9zdCx0aGlzLl9wb3J0PXMuX3BvcnQsdGhpcy5fcGF0aD1zLl9wYXRoLnNsaWNlKCksdGhpcy5fcXVlcnk9cy5fcXVlcnksdGhpcy5fZnJhZ21lbnQ9XCIjXCIsdGhpcy5fdXNlcm5hbWU9cy5fdXNlcm5hbWUsdGhpcy5fcGFzc3dvcmQ9cy5fcGFzc3dvcmQsbD1cImZyYWdtZW50XCJ9YnJlYWs7Y2FzZVwicmVsYXRpdmUgc2xhc2hcIjppZihcIi9cIiE9eSYmXCJcXFxcXCIhPXkpe1wiZmlsZVwiIT10aGlzLl9zY2hlbWUmJih0aGlzLl9ob3N0PXMuX2hvc3QsdGhpcy5fcG9ydD1zLl9wb3J0LHRoaXMuX3VzZXJuYW1lPXMuX3VzZXJuYW1lLHRoaXMuX3Bhc3N3b3JkPXMuX3Bhc3N3b3JkKSxsPVwicmVsYXRpdmUgcGF0aFwiO2NvbnRpbnVlfVwiXFxcXFwiPT15JiZjKFwiXFxcXCBpcyBhbiBpbnZhbGlkIGNvZGUgcG9pbnQuXCIpLGw9XCJmaWxlXCI9PXRoaXMuX3NjaGVtZT9cImZpbGUgaG9zdFwiOlwiYXV0aG9yaXR5IGlnbm9yZSBzbGFzaGVzXCI7YnJlYWs7Y2FzZVwiYXV0aG9yaXR5IGZpcnN0IHNsYXNoXCI6aWYoXCIvXCIhPXkpe2MoXCJFeHBlY3RlZCAnLycsIGdvdDogXCIreSksbD1cImF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO2NvbnRpbnVlfWw9XCJhdXRob3JpdHkgc2Vjb25kIHNsYXNoXCI7YnJlYWs7Y2FzZVwiYXV0aG9yaXR5IHNlY29uZCBzbGFzaFwiOmlmKGw9XCJhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIixcIi9cIiE9eSl7YyhcIkV4cGVjdGVkICcvJywgZ290OiBcIit5KTtjb250aW51ZX1icmVhaztjYXNlXCJhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIjppZihcIi9cIiE9eSYmXCJcXFxcXCIhPXkpe2w9XCJhdXRob3JpdHlcIjtjb250aW51ZX1jKFwiRXhwZWN0ZWQgYXV0aG9yaXR5LCBnb3Q6IFwiK3kpO2JyZWFrO2Nhc2VcImF1dGhvcml0eVwiOmlmKFwiQFwiPT15KXt2JiYoYyhcIkAgYWxyZWFkeSBzZWVuLlwiKSxkKz1cIiU0MFwiKSx2PSEwO2Zvcih2YXIgUz0wO1M8ZC5sZW5ndGg7UysrKXt2YXIgVD1kW1NdO2lmKFwiXHRcIiE9VCYmXCJcXG5cIiE9VCYmXCJcXHJcIiE9VClpZihcIjpcIiE9VHx8bnVsbCE9PXRoaXMuX3Bhc3N3b3JkKXt2YXIgTT1vKFQpO251bGwhPT10aGlzLl9wYXNzd29yZD90aGlzLl9wYXNzd29yZCs9TTp0aGlzLl91c2VybmFtZSs9TX1lbHNlIHRoaXMuX3Bhc3N3b3JkPVwiXCI7ZWxzZSBjKFwiSW52YWxpZCB3aGl0ZXNwYWNlIGluIGF1dGhvcml0eS5cIil9ZD1cIlwifWVsc2V7aWYoZj09eXx8XCIvXCI9PXl8fFwiXFxcXFwiPT15fHxcIj9cIj09eXx8XCIjXCI9PXkpe3UtPWQubGVuZ3RoLGQ9XCJcIixsPVwiaG9zdFwiO2NvbnRpbnVlfWQrPXl9YnJlYWs7Y2FzZVwiZmlsZSBob3N0XCI6aWYoZj09eXx8XCIvXCI9PXl8fFwiXFxcXFwiPT15fHxcIj9cIj09eXx8XCIjXCI9PXkpezIhPWQubGVuZ3RofHwhbS50ZXN0KGRbMF0pfHxcIjpcIiE9ZFsxXSYmXCJ8XCIhPWRbMV0/MD09ZC5sZW5ndGg/bD1cInJlbGF0aXZlIHBhdGggc3RhcnRcIjoodGhpcy5faG9zdD1yLmNhbGwodGhpcyxkKSxkPVwiXCIsbD1cInJlbGF0aXZlIHBhdGggc3RhcnRcIik6bD1cInJlbGF0aXZlIHBhdGhcIjtjb250aW51ZX1cIlx0XCI9PXl8fFwiXFxuXCI9PXl8fFwiXFxyXCI9PXk/YyhcIkludmFsaWQgd2hpdGVzcGFjZSBpbiBmaWxlIGhvc3QuXCIpOmQrPXk7YnJlYWs7Y2FzZVwiaG9zdFwiOmNhc2VcImhvc3RuYW1lXCI6aWYoXCI6XCIhPXl8fGcpe2lmKGY9PXl8fFwiL1wiPT15fHxcIlxcXFxcIj09eXx8XCI/XCI9PXl8fFwiI1wiPT15KXtpZih0aGlzLl9ob3N0PXIuY2FsbCh0aGlzLGQpLGQ9XCJcIixsPVwicmVsYXRpdmUgcGF0aCBzdGFydFwiLGEpYnJlYWsgZTtjb250aW51ZX1cIlx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXk/KFwiW1wiPT15P2c9ITA6XCJdXCI9PXkmJihnPSExKSxkKz15KTpjKFwiSW52YWxpZCBjb2RlIHBvaW50IGluIGhvc3QvaG9zdG5hbWU6IFwiK3kpfWVsc2UgaWYodGhpcy5faG9zdD1yLmNhbGwodGhpcyxkKSxkPVwiXCIsbD1cInBvcnRcIixcImhvc3RuYW1lXCI9PWEpYnJlYWsgZTticmVhaztjYXNlXCJwb3J0XCI6aWYoL1swLTldLy50ZXN0KHkpKWQrPXk7ZWxzZXtpZihmPT15fHxcIi9cIj09eXx8XCJcXFxcXCI9PXl8fFwiP1wiPT15fHxcIiNcIj09eXx8YSl7aWYoXCJcIiE9ZCl7dmFyIE89cGFyc2VJbnQoZCwxMCk7TyE9cFt0aGlzLl9zY2hlbWVdJiYodGhpcy5fcG9ydD1PK1wiXCIpLGQ9XCJcIn1pZihhKWJyZWFrIGU7bD1cInJlbGF0aXZlIHBhdGggc3RhcnRcIjtjb250aW51ZX1cIlx0XCI9PXl8fFwiXFxuXCI9PXl8fFwiXFxyXCI9PXk/YyhcIkludmFsaWQgY29kZSBwb2ludCBpbiBwb3J0OiBcIit5KTpuLmNhbGwodGhpcyl9YnJlYWs7Y2FzZVwicmVsYXRpdmUgcGF0aCBzdGFydFwiOmlmKFwiXFxcXFwiPT15JiZjKFwiJ1xcXFwnIG5vdCBhbGxvd2VkIGluIHBhdGguXCIpLGw9XCJyZWxhdGl2ZSBwYXRoXCIsXCIvXCIhPXkmJlwiXFxcXFwiIT15KWNvbnRpbnVlO2JyZWFrO2Nhc2VcInJlbGF0aXZlIHBhdGhcIjppZihmIT15JiZcIi9cIiE9eSYmXCJcXFxcXCIhPXkmJihhfHxcIj9cIiE9eSYmXCIjXCIhPXkpKVwiXHRcIiE9eSYmXCJcXG5cIiE9eSYmXCJcXHJcIiE9eSYmKGQrPW8oeSkpO2Vsc2V7XCJcXFxcXCI9PXkmJmMoXCJcXFxcIG5vdCBhbGxvd2VkIGluIHJlbGF0aXZlIHBhdGguXCIpO3ZhciBMOyhMPWhbZC50b0xvd2VyQ2FzZSgpXSkmJihkPUwpLFwiLi5cIj09ZD8odGhpcy5fcGF0aC5wb3AoKSxcIi9cIiE9eSYmXCJcXFxcXCIhPXkmJnRoaXMuX3BhdGgucHVzaChcIlwiKSk6XCIuXCI9PWQmJlwiL1wiIT15JiZcIlxcXFxcIiE9eT90aGlzLl9wYXRoLnB1c2goXCJcIik6XCIuXCIhPWQmJihcImZpbGVcIj09dGhpcy5fc2NoZW1lJiYwPT10aGlzLl9wYXRoLmxlbmd0aCYmMj09ZC5sZW5ndGgmJm0udGVzdChkWzBdKSYmXCJ8XCI9PWRbMV0mJihkPWRbMF0rXCI6XCIpLHRoaXMuX3BhdGgucHVzaChkKSksZD1cIlwiLFwiP1wiPT15Pyh0aGlzLl9xdWVyeT1cIj9cIixsPVwicXVlcnlcIik6XCIjXCI9PXkmJih0aGlzLl9mcmFnbWVudD1cIiNcIixsPVwiZnJhZ21lbnRcIil9YnJlYWs7Y2FzZVwicXVlcnlcIjphfHxcIiNcIiE9eT9mIT15JiZcIlx0XCIhPXkmJlwiXFxuXCIhPXkmJlwiXFxyXCIhPXkmJih0aGlzLl9xdWVyeSs9aSh5KSk6KHRoaXMuX2ZyYWdtZW50PVwiI1wiLGw9XCJmcmFnbWVudFwiKTticmVhaztjYXNlXCJmcmFnbWVudFwiOmYhPXkmJlwiXHRcIiE9eSYmXCJcXG5cIiE9eSYmXCJcXHJcIiE9eSYmKHRoaXMuX2ZyYWdtZW50Kz15KX11Kyt9fWZ1bmN0aW9uIHMoKXt0aGlzLl9zY2hlbWU9XCJcIix0aGlzLl9zY2hlbWVEYXRhPVwiXCIsdGhpcy5fdXNlcm5hbWU9XCJcIix0aGlzLl9wYXNzd29yZD1udWxsLHRoaXMuX2hvc3Q9XCJcIix0aGlzLl9wb3J0PVwiXCIsdGhpcy5fcGF0aD1bXSx0aGlzLl9xdWVyeT1cIlwiLHRoaXMuX2ZyYWdtZW50PVwiXCIsdGhpcy5faXNJbnZhbGlkPSExLHRoaXMuX2lzUmVsYXRpdmU9ITF9ZnVuY3Rpb24gYyhlLHQpe3ZvaWQgMD09PXR8fHQgaW5zdGFuY2VvZiBjfHwodD1uZXcgYyhTdHJpbmcodCkpKSx0aGlzLl91cmw9ZSxzLmNhbGwodGhpcyk7dmFyIG49ZS5yZXBsYWNlKC9eWyBcXHRcXHJcXG5cXGZdK3xbIFxcdFxcclxcblxcZl0rJC9nLFwiXCIpO2EuY2FsbCh0aGlzLG4sbnVsbCx0KX12YXIgbD0hMTtpZighZS5mb3JjZUpVUkwpdHJ5e3ZhciB1PW5ldyBVUkwoXCJiXCIsXCJodHRwOi8vYVwiKTt1LnBhdGhuYW1lPVwiYyUyMGRcIixsPVwiaHR0cDovL2EvYyUyMGRcIj09PXUuaHJlZn1jYXRjaChkKXt9aWYoIWwpe3ZhciBwPU9iamVjdC5jcmVhdGUobnVsbCk7cC5mdHA9MjEscC5maWxlPTAscC5nb3BoZXI9NzAscC5odHRwPTgwLHAuaHR0cHM9NDQzLHAud3M9ODAscC53c3M9NDQzO3ZhciBoPU9iamVjdC5jcmVhdGUobnVsbCk7aFtcIiUyZVwiXT1cIi5cIixoW1wiLiUyZVwiXT1cIi4uXCIsaFtcIiUyZS5cIl09XCIuLlwiLGhbXCIlMmUlMmVcIl09XCIuLlwiO3ZhciBmPXZvaWQgMCxtPS9bYS16QS1aXS8sdz0vW2EtekEtWjAtOVxcK1xcLVxcLl0vO2MucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhyZWZ9LGdldCBocmVmKCl7aWYodGhpcy5faXNJbnZhbGlkKXJldHVybiB0aGlzLl91cmw7dmFyIGU9XCJcIjtyZXR1cm4oXCJcIiE9dGhpcy5fdXNlcm5hbWV8fG51bGwhPXRoaXMuX3Bhc3N3b3JkKSYmKGU9dGhpcy5fdXNlcm5hbWUrKG51bGwhPXRoaXMuX3Bhc3N3b3JkP1wiOlwiK3RoaXMuX3Bhc3N3b3JkOlwiXCIpK1wiQFwiKSx0aGlzLnByb3RvY29sKyh0aGlzLl9pc1JlbGF0aXZlP1wiLy9cIitlK3RoaXMuaG9zdDpcIlwiKSt0aGlzLnBhdGhuYW1lK3RoaXMuX3F1ZXJ5K3RoaXMuX2ZyYWdtZW50fSxzZXQgaHJlZihlKXtzLmNhbGwodGhpcyksYS5jYWxsKHRoaXMsZSl9LGdldCBwcm90b2NvbCgpe3JldHVybiB0aGlzLl9zY2hlbWUrXCI6XCJ9LHNldCBwcm90b2NvbChlKXt0aGlzLl9pc0ludmFsaWR8fGEuY2FsbCh0aGlzLGUrXCI6XCIsXCJzY2hlbWUgc3RhcnRcIil9LGdldCBob3N0KCl7cmV0dXJuIHRoaXMuX2lzSW52YWxpZD9cIlwiOnRoaXMuX3BvcnQ/dGhpcy5faG9zdCtcIjpcIit0aGlzLl9wb3J0OnRoaXMuX2hvc3R9LHNldCBob3N0KGUpeyF0aGlzLl9pc0ludmFsaWQmJnRoaXMuX2lzUmVsYXRpdmUmJmEuY2FsbCh0aGlzLGUsXCJob3N0XCIpfSxnZXQgaG9zdG5hbWUoKXtyZXR1cm4gdGhpcy5faG9zdH0sc2V0IGhvc3RuYW1lKGUpeyF0aGlzLl9pc0ludmFsaWQmJnRoaXMuX2lzUmVsYXRpdmUmJmEuY2FsbCh0aGlzLGUsXCJob3N0bmFtZVwiKX0sZ2V0IHBvcnQoKXtyZXR1cm4gdGhpcy5fcG9ydH0sc2V0IHBvcnQoZSl7IXRoaXMuX2lzSW52YWxpZCYmdGhpcy5faXNSZWxhdGl2ZSYmYS5jYWxsKHRoaXMsZSxcInBvcnRcIil9LGdldCBwYXRobmFtZSgpe3JldHVybiB0aGlzLl9pc0ludmFsaWQ/XCJcIjp0aGlzLl9pc1JlbGF0aXZlP1wiL1wiK3RoaXMuX3BhdGguam9pbihcIi9cIik6dGhpcy5fc2NoZW1lRGF0YX0sc2V0IHBhdGhuYW1lKGUpeyF0aGlzLl9pc0ludmFsaWQmJnRoaXMuX2lzUmVsYXRpdmUmJih0aGlzLl9wYXRoPVtdLGEuY2FsbCh0aGlzLGUsXCJyZWxhdGl2ZSBwYXRoIHN0YXJ0XCIpKX0sZ2V0IHNlYXJjaCgpe3JldHVybiB0aGlzLl9pc0ludmFsaWR8fCF0aGlzLl9xdWVyeXx8XCI/XCI9PXRoaXMuX3F1ZXJ5P1wiXCI6dGhpcy5fcXVlcnl9LHNldCBzZWFyY2goZSl7IXRoaXMuX2lzSW52YWxpZCYmdGhpcy5faXNSZWxhdGl2ZSYmKHRoaXMuX3F1ZXJ5PVwiP1wiLFwiP1wiPT1lWzBdJiYoZT1lLnNsaWNlKDEpKSxhLmNhbGwodGhpcyxlLFwicXVlcnlcIikpfSxnZXQgaGFzaCgpe3JldHVybiB0aGlzLl9pc0ludmFsaWR8fCF0aGlzLl9mcmFnbWVudHx8XCIjXCI9PXRoaXMuX2ZyYWdtZW50P1wiXCI6dGhpcy5fZnJhZ21lbnR9LHNldCBoYXNoKGUpe3RoaXMuX2lzSW52YWxpZHx8KHRoaXMuX2ZyYWdtZW50PVwiI1wiLFwiI1wiPT1lWzBdJiYoZT1lLnNsaWNlKDEpKSxhLmNhbGwodGhpcyxlLFwiZnJhZ21lbnRcIikpfSxnZXQgb3JpZ2luKCl7dmFyIGU7aWYodGhpcy5faXNJbnZhbGlkfHwhdGhpcy5fc2NoZW1lKXJldHVyblwiXCI7c3dpdGNoKHRoaXMuX3NjaGVtZSl7Y2FzZVwiZGF0YVwiOmNhc2VcImZpbGVcIjpjYXNlXCJqYXZhc2NyaXB0XCI6Y2FzZVwibWFpbHRvXCI6cmV0dXJuXCJudWxsXCJ9cmV0dXJuIGU9dGhpcy5ob3N0LGU/dGhpcy5fc2NoZW1lK1wiOi8vXCIrZTpcIlwifX07dmFyIHY9ZS5VUkw7diYmKGMuY3JlYXRlT2JqZWN0VVJMPWZ1bmN0aW9uKGUpe3JldHVybiB2LmNyZWF0ZU9iamVjdFVSTC5hcHBseSh2LGFyZ3VtZW50cyl9LGMucmV2b2tlT2JqZWN0VVJMPWZ1bmN0aW9uKGUpe3YucmV2b2tlT2JqZWN0VVJMKGUpfSksZS5VUkw9Y319KHNlbGYpLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7eS5wdXNoKGUpLGJ8fChiPSEwLG0ocikpfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCYmd2luZG93LlNoYWRvd0RPTVBvbHlmaWxsLndyYXBJZk5lZWRlZChlKXx8ZX1mdW5jdGlvbiByKCl7Yj0hMTt2YXIgZT15O3k9W10sZS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUudWlkXy10LnVpZF99KTt2YXIgdD0hMTtlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49ZS50YWtlUmVjb3JkcygpO28oZSksbi5sZW5ndGgmJihlLmNhbGxiYWNrXyhuLGUpLHQ9ITApfSksdCYmcigpfWZ1bmN0aW9uIG8oZSl7ZS5ub2Rlc18uZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgbj13LmdldCh0KTtuJiZuLmZvckVhY2goZnVuY3Rpb24odCl7dC5vYnNlcnZlcj09PWUmJnQucmVtb3ZlVHJhbnNpZW50T2JzZXJ2ZXJzKCl9KX0pfWZ1bmN0aW9uIGkoZSx0KXtmb3IodmFyIG49ZTtuO249bi5wYXJlbnROb2RlKXt2YXIgcj13LmdldChuKTtpZihyKWZvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXt2YXIgaT1yW29dLGE9aS5vcHRpb25zO2lmKG49PT1lfHxhLnN1YnRyZWUpe3ZhciBzPXQoYSk7cyYmaS5lbnF1ZXVlKHMpfX19fWZ1bmN0aW9uIGEoZSl7dGhpcy5jYWxsYmFja189ZSx0aGlzLm5vZGVzXz1bXSx0aGlzLnJlY29yZHNfPVtdLHRoaXMudWlkXz0rK0V9ZnVuY3Rpb24gcyhlLHQpe3RoaXMudHlwZT1lLHRoaXMudGFyZ2V0PXQsdGhpcy5hZGRlZE5vZGVzPVtdLHRoaXMucmVtb3ZlZE5vZGVzPVtdLHRoaXMucHJldmlvdXNTaWJsaW5nPW51bGwsdGhpcy5uZXh0U2libGluZz1udWxsLHRoaXMuYXR0cmlidXRlTmFtZT1udWxsLHRoaXMuYXR0cmlidXRlTmFtZXNwYWNlPW51bGwsdGhpcy5vbGRWYWx1ZT1udWxsfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9bmV3IHMoZS50eXBlLGUudGFyZ2V0KTtyZXR1cm4gdC5hZGRlZE5vZGVzPWUuYWRkZWROb2Rlcy5zbGljZSgpLHQucmVtb3ZlZE5vZGVzPWUucmVtb3ZlZE5vZGVzLnNsaWNlKCksdC5wcmV2aW91c1NpYmxpbmc9ZS5wcmV2aW91c1NpYmxpbmcsdC5uZXh0U2libGluZz1lLm5leHRTaWJsaW5nLHQuYXR0cmlidXRlTmFtZT1lLmF0dHJpYnV0ZU5hbWUsdC5hdHRyaWJ1dGVOYW1lc3BhY2U9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsdC5vbGRWYWx1ZT1lLm9sZFZhbHVlLHR9ZnVuY3Rpb24gbChlLHQpe3JldHVybiBfPW5ldyBzKGUsdCl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gUz9TOihTPWMoXyksUy5vbGRWYWx1ZT1lLFMpfWZ1bmN0aW9uIGQoKXtfPVM9dm9pZCAwfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIGU9PT1TfHxlPT09X31mdW5jdGlvbiBoKGUsdCl7cmV0dXJuIGU9PT10P2U6UyYmcChlKT9TOm51bGx9ZnVuY3Rpb24gZihlLHQsbil7dGhpcy5vYnNlcnZlcj1lLHRoaXMudGFyZ2V0PXQsdGhpcy5vcHRpb25zPW4sdGhpcy50cmFuc2llbnRPYnNlcnZlZE5vZGVzPVtdfWlmKCFlLkpzTXV0YXRpb25PYnNlcnZlcil7dmFyIG0sdz1uZXcgV2Vha01hcDtpZigvVHJpZGVudHxFZGdlLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKW09c2V0VGltZW91dDtlbHNlIGlmKHdpbmRvdy5zZXRJbW1lZGlhdGUpbT13aW5kb3cuc2V0SW1tZWRpYXRlO2Vsc2V7dmFyIHY9W10sZz1TdHJpbmcoTWF0aC5yYW5kb20oKSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oZSl7aWYoZS5kYXRhPT09Zyl7dmFyIHQ9djt2PVtdLHQuZm9yRWFjaChmdW5jdGlvbihlKXtlKCl9KX19KSxtPWZ1bmN0aW9uKGUpe3YucHVzaChlKSx3aW5kb3cucG9zdE1lc3NhZ2UoZyxcIipcIil9fXZhciBiPSExLHk9W10sRT0wO2EucHJvdG90eXBlPXtvYnNlcnZlOmZ1bmN0aW9uKGUsdCl7aWYoZT1uKGUpLCF0LmNoaWxkTGlzdCYmIXQuYXR0cmlidXRlcyYmIXQuY2hhcmFjdGVyRGF0YXx8dC5hdHRyaWJ1dGVPbGRWYWx1ZSYmIXQuYXR0cmlidXRlc3x8dC5hdHRyaWJ1dGVGaWx0ZXImJnQuYXR0cmlidXRlRmlsdGVyLmxlbmd0aCYmIXQuYXR0cmlidXRlc3x8dC5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUmJiF0LmNoYXJhY3RlckRhdGEpdGhyb3cgbmV3IFN5bnRheEVycm9yO3ZhciByPXcuZ2V0KGUpO3J8fHcuc2V0KGUscj1bXSk7Zm9yKHZhciBvLGk9MDtpPHIubGVuZ3RoO2krKylpZihyW2ldLm9ic2VydmVyPT09dGhpcyl7bz1yW2ldLG8ucmVtb3ZlTGlzdGVuZXJzKCksby5vcHRpb25zPXQ7YnJlYWt9b3x8KG89bmV3IGYodGhpcyxlLHQpLHIucHVzaChvKSx0aGlzLm5vZGVzXy5wdXNoKGUpKSxvLmFkZExpc3RlbmVycygpfSxkaXNjb25uZWN0OmZ1bmN0aW9uKCl7dGhpcy5ub2Rlc18uZm9yRWFjaChmdW5jdGlvbihlKXtmb3IodmFyIHQ9dy5nZXQoZSksbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO2lmKHIub2JzZXJ2ZXI9PT10aGlzKXtyLnJlbW92ZUxpc3RlbmVycygpLHQuc3BsaWNlKG4sMSk7YnJlYWt9fX0sdGhpcyksdGhpcy5yZWNvcmRzXz1bXX0sdGFrZVJlY29yZHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlY29yZHNfO3JldHVybiB0aGlzLnJlY29yZHNfPVtdLGV9fTt2YXIgXyxTO2YucHJvdG90eXBlPXtlbnF1ZXVlOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMub2JzZXJ2ZXIucmVjb3Jkc18scj1uLmxlbmd0aDtpZihuLmxlbmd0aD4wKXt2YXIgbz1uW3ItMV0saT1oKG8sZSk7aWYoaSlyZXR1cm4gdm9pZChuW3ItMV09aSl9ZWxzZSB0KHRoaXMub2JzZXJ2ZXIpO25bcl09ZX0sYWRkTGlzdGVuZXJzOmZ1bmN0aW9uKCl7dGhpcy5hZGRMaXN0ZW5lcnNfKHRoaXMudGFyZ2V0KX0sYWRkTGlzdGVuZXJzXzpmdW5jdGlvbihlKXt2YXIgdD10aGlzLm9wdGlvbnM7dC5hdHRyaWJ1dGVzJiZlLmFkZEV2ZW50TGlzdGVuZXIoXCJET01BdHRyTW9kaWZpZWRcIix0aGlzLCEwKSx0LmNoYXJhY3RlckRhdGEmJmUuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZFwiLHRoaXMsITApLHQuY2hpbGRMaXN0JiZlLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Ob2RlSW5zZXJ0ZWRcIix0aGlzLCEwKSwodC5jaGlsZExpc3R8fHQuc3VidHJlZSkmJmUuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTU5vZGVSZW1vdmVkXCIsdGhpcywhMCl9LHJlbW92ZUxpc3RlbmVyczpmdW5jdGlvbigpe3RoaXMucmVtb3ZlTGlzdGVuZXJzXyh0aGlzLnRhcmdldCl9LHJlbW92ZUxpc3RlbmVyc186ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5vcHRpb25zO3QuYXR0cmlidXRlcyYmZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQXR0ck1vZGlmaWVkXCIsdGhpcywhMCksdC5jaGFyYWN0ZXJEYXRhJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWRcIix0aGlzLCEwKSx0LmNoaWxkTGlzdCYmZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NTm9kZUluc2VydGVkXCIsdGhpcywhMCksKHQuY2hpbGRMaXN0fHx0LnN1YnRyZWUpJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Ob2RlUmVtb3ZlZFwiLHRoaXMsITApfSxhZGRUcmFuc2llbnRPYnNlcnZlcjpmdW5jdGlvbihlKXtpZihlIT09dGhpcy50YXJnZXQpe3RoaXMuYWRkTGlzdGVuZXJzXyhlKSx0aGlzLnRyYW5zaWVudE9ic2VydmVkTm9kZXMucHVzaChlKTt2YXIgdD13LmdldChlKTt0fHx3LnNldChlLHQ9W10pLHQucHVzaCh0aGlzKX19LHJlbW92ZVRyYW5zaWVudE9ic2VydmVyczpmdW5jdGlvbigpe3ZhciBlPXRoaXMudHJhbnNpZW50T2JzZXJ2ZWROb2Rlczt0aGlzLnRyYW5zaWVudE9ic2VydmVkTm9kZXM9W10sZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RoaXMucmVtb3ZlTGlzdGVuZXJzXyhlKTtmb3IodmFyIHQ9dy5nZXQoZSksbj0wO248dC5sZW5ndGg7bisrKWlmKHRbbl09PT10aGlzKXt0LnNwbGljZShuLDEpO2JyZWFrfX0sdGhpcyl9LGhhbmRsZUV2ZW50OmZ1bmN0aW9uKGUpe3N3aXRjaChlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUudHlwZSl7Y2FzZVwiRE9NQXR0ck1vZGlmaWVkXCI6dmFyIHQ9ZS5hdHRyTmFtZSxuPWUucmVsYXRlZE5vZGUubmFtZXNwYWNlVVJJLHI9ZS50YXJnZXQsbz1uZXcgbChcImF0dHJpYnV0ZXNcIixyKTtvLmF0dHJpYnV0ZU5hbWU9dCxvLmF0dHJpYnV0ZU5hbWVzcGFjZT1uO3ZhciBhPWUuYXR0ckNoYW5nZT09PU11dGF0aW9uRXZlbnQuQURESVRJT04/bnVsbDplLnByZXZWYWx1ZTtpKHIsZnVuY3Rpb24oZSl7cmV0dXJuIWUuYXR0cmlidXRlc3x8ZS5hdHRyaWJ1dGVGaWx0ZXImJmUuYXR0cmlidXRlRmlsdGVyLmxlbmd0aCYmLTE9PT1lLmF0dHJpYnV0ZUZpbHRlci5pbmRleE9mKHQpJiYtMT09PWUuYXR0cmlidXRlRmlsdGVyLmluZGV4T2Yobik/dm9pZCAwOmUuYXR0cmlidXRlT2xkVmFsdWU/dShhKTpvfSk7YnJlYWs7Y2FzZVwiRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkXCI6dmFyIHI9ZS50YXJnZXQsbz1sKFwiY2hhcmFjdGVyRGF0YVwiLHIpLGE9ZS5wcmV2VmFsdWU7aShyLGZ1bmN0aW9uKGUpe3JldHVybiBlLmNoYXJhY3RlckRhdGE/ZS5jaGFyYWN0ZXJEYXRhT2xkVmFsdWU/dShhKTpvOnZvaWQgMH0pO2JyZWFrO2Nhc2VcIkRPTU5vZGVSZW1vdmVkXCI6dGhpcy5hZGRUcmFuc2llbnRPYnNlcnZlcihlLnRhcmdldCk7Y2FzZVwiRE9NTm9kZUluc2VydGVkXCI6dmFyIHMsYyxwPWUudGFyZ2V0O1wiRE9NTm9kZUluc2VydGVkXCI9PT1lLnR5cGU/KHM9W3BdLGM9W10pOihzPVtdLGM9W3BdKTt2YXIgaD1wLnByZXZpb3VzU2libGluZyxmPXAubmV4dFNpYmxpbmcsbz1sKFwiY2hpbGRMaXN0XCIsZS50YXJnZXQucGFyZW50Tm9kZSk7by5hZGRlZE5vZGVzPXMsby5yZW1vdmVkTm9kZXM9YyxvLnByZXZpb3VzU2libGluZz1oLG8ubmV4dFNpYmxpbmc9ZixpKGUucmVsYXRlZE5vZGUsZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hpbGRMaXN0P286dm9pZCAwfSl9ZCgpfX0sZS5Kc011dGF0aW9uT2JzZXJ2ZXI9YSxlLk11dGF0aW9uT2JzZXJ2ZXJ8fChlLk11dGF0aW9uT2JzZXJ2ZXI9YSxhLl9pc1BvbHlmaWxsZWQ9ITApfX0oc2VsZiksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7aWYoIXdpbmRvdy5wZXJmb3JtYW5jZSl7dmFyIHQ9RGF0ZS5ub3coKTt3aW5kb3cucGVyZm9ybWFuY2U9e25vdzpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXR9fX13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT1mdW5jdGlvbigpe3ZhciBlPXdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7cmV0dXJuIGU/ZnVuY3Rpb24odCl7cmV0dXJuIGUoZnVuY3Rpb24oKXt0KHBlcmZvcm1hbmNlLm5vdygpKX0pfTpmdW5jdGlvbihlKXtyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZSwxZTMvNjApfX0oKSksd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lfHwod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbihlKXtjbGVhclRpbWVvdXQoZSl9fSgpKTt2YXIgbj1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7cmV0dXJuIGUuaW5pdEV2ZW50KFwiZm9vXCIsITAsITApLGUucHJldmVudERlZmF1bHQoKSxlLmRlZmF1bHRQcmV2ZW50ZWR9KCk7aWYoIW4pe3ZhciByPUV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdDtFdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXt0aGlzLmNhbmNlbGFibGUmJihyLmNhbGwodGhpcyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0UHJldmVudGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiEwfSxjb25maWd1cmFibGU6ITB9KSl9fXZhciBvPS9UcmlkZW50Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO2lmKCghd2luZG93LkN1c3RvbUV2ZW50fHxvJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQpJiYod2luZG93LkN1c3RvbUV2ZW50PWZ1bmN0aW9uKGUsdCl7dD10fHx7fTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO3JldHVybiBuLmluaXRDdXN0b21FdmVudChlLEJvb2xlYW4odC5idWJibGVzKSxCb29sZWFuKHQuY2FuY2VsYWJsZSksdC5kZXRhaWwpLG59LHdpbmRvdy5DdXN0b21FdmVudC5wcm90b3R5cGU9d2luZG93LkV2ZW50LnByb3RvdHlwZSksIXdpbmRvdy5FdmVudHx8byYmXCJmdW5jdGlvblwiIT10eXBlb2Ygd2luZG93LkV2ZW50KXt2YXIgaT13aW5kb3cuRXZlbnQ7d2luZG93LkV2ZW50PWZ1bmN0aW9uKGUsdCl7dD10fHx7fTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO3JldHVybiBuLmluaXRFdmVudChlLEJvb2xlYW4odC5idWJibGVzKSxCb29sZWFuKHQuY2FuY2VsYWJsZSkpLG59LHdpbmRvdy5FdmVudC5wcm90b3R5cGU9aS5wcm90b3R5cGV9fSh3aW5kb3cuV2ViQ29tcG9uZW50cyksd2luZG93LkhUTUxJbXBvcnRzPXdpbmRvdy5IVE1MSW1wb3J0c3x8e2ZsYWdzOnt9fSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCl7dD10fHxmLHIoZnVuY3Rpb24oKXtpKGUsdCl9LHQpfWZ1bmN0aW9uIG4oZSl7cmV0dXJuXCJjb21wbGV0ZVwiPT09ZS5yZWFkeVN0YXRlfHxlLnJlYWR5U3RhdGU9PT12fWZ1bmN0aW9uIHIoZSx0KXtpZihuKHQpKWUmJmUoKTtlbHNle3ZhciBvPWZ1bmN0aW9uKCl7KFwiY29tcGxldGVcIj09PXQucmVhZHlTdGF0ZXx8dC5yZWFkeVN0YXRlPT09dikmJih0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZyxvKSxyKGUsdCkpfTt0LmFkZEV2ZW50TGlzdGVuZXIoZyxvKX19ZnVuY3Rpb24gbyhlKXtlLnRhcmdldC5fX2xvYWRlZD0hMH1mdW5jdGlvbiBpKGUsdCl7ZnVuY3Rpb24gbigpe2M9PWwmJmUmJmUoe2FsbEltcG9ydHM6cyxsb2FkZWRJbXBvcnRzOnUsZXJyb3JJbXBvcnRzOmR9KX1mdW5jdGlvbiByKGUpe28oZSksdS5wdXNoKHRoaXMpLFxuYysrLG4oKX1mdW5jdGlvbiBpKGUpe2QucHVzaCh0aGlzKSxjKyssbigpfXZhciBzPXQucXVlcnlTZWxlY3RvckFsbChcImxpbmtbcmVsPWltcG9ydF1cIiksYz0wLGw9cy5sZW5ndGgsdT1bXSxkPVtdO2lmKGwpZm9yKHZhciBwLGg9MDtsPmgmJihwPXNbaF0pO2grKylhKHApPyh1LnB1c2godGhpcyksYysrLG4oKSk6KHAuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixyKSxwLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGkpKTtlbHNlIG4oKX1mdW5jdGlvbiBhKGUpe3JldHVybiBkP2UuX19sb2FkZWR8fGVbXCJpbXBvcnRcIl0mJlwibG9hZGluZ1wiIT09ZVtcImltcG9ydFwiXS5yZWFkeVN0YXRlOmUuX19pbXBvcnRQYXJzZWR9ZnVuY3Rpb24gcyhlKXtmb3IodmFyIHQsbj0wLHI9ZS5sZW5ndGg7cj5uJiYodD1lW25dKTtuKyspYyh0KSYmbCh0KX1mdW5jdGlvbiBjKGUpe3JldHVyblwibGlua1wiPT09ZS5sb2NhbE5hbWUmJlwiaW1wb3J0XCI9PT1lLnJlbH1mdW5jdGlvbiBsKGUpe3ZhciB0PWVbXCJpbXBvcnRcIl07dD9vKHt0YXJnZXQ6ZX0pOihlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsbyksZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixvKSl9dmFyIHU9XCJpbXBvcnRcIixkPUJvb2xlYW4odSBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSkscD1Cb29sZWFuKHdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbCksaD1mdW5jdGlvbihlKXtyZXR1cm4gcD93aW5kb3cuU2hhZG93RE9NUG9seWZpbGwud3JhcElmTmVlZGVkKGUpOmV9LGY9aChkb2N1bWVudCksbT17Z2V0OmZ1bmN0aW9uKCl7dmFyIGU9d2luZG93LkhUTUxJbXBvcnRzLmN1cnJlbnRTY3JpcHR8fGRvY3VtZW50LmN1cnJlbnRTY3JpcHR8fChcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlP2RvY3VtZW50LnNjcmlwdHNbZG9jdW1lbnQuc2NyaXB0cy5sZW5ndGgtMV06bnVsbCk7cmV0dXJuIGgoZSl9LGNvbmZpZ3VyYWJsZTohMH07T2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LFwiX2N1cnJlbnRTY3JpcHRcIixtKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZixcIl9jdXJyZW50U2NyaXB0XCIsbSk7dmFyIHc9L1RyaWRlbnQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdj13P1wiY29tcGxldGVcIjpcImludGVyYWN0aXZlXCIsZz1cInJlYWR5c3RhdGVjaGFuZ2VcIjtkJiYobmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MCxyPWUubGVuZ3RoO3I+biYmKHQ9ZVtuXSk7bisrKXQuYWRkZWROb2RlcyYmcyh0LmFkZGVkTm9kZXMpfSkub2JzZXJ2ZShkb2N1bWVudC5oZWFkLHtjaGlsZExpc3Q6ITB9KSxmdW5jdGlvbigpe2lmKFwibG9hZGluZ1wiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZSlmb3IodmFyIGUsdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1tyZWw9aW1wb3J0XVwiKSxuPTAscj10Lmxlbmd0aDtyPm4mJihlPXRbbl0pO24rKylsKGUpfSgpKSx0KGZ1bmN0aW9uKGUpe3dpbmRvdy5IVE1MSW1wb3J0cy5yZWFkeT0hMCx3aW5kb3cuSFRNTEltcG9ydHMucmVhZHlUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpO3ZhciB0PWYuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTt0LmluaXRDdXN0b21FdmVudChcIkhUTUxJbXBvcnRzTG9hZGVkXCIsITAsITAsZSksZi5kaXNwYXRjaEV2ZW50KHQpfSksZS5JTVBPUlRfTElOS19UWVBFPXUsZS51c2VOYXRpdmU9ZCxlLnJvb3REb2N1bWVudD1mLGUud2hlblJlYWR5PXQsZS5pc0lFPXd9KHdpbmRvdy5IVE1MSW1wb3J0cyksZnVuY3Rpb24oZSl7dmFyIHQ9W10sbj1mdW5jdGlvbihlKXt0LnB1c2goZSl9LHI9ZnVuY3Rpb24oKXt0LmZvckVhY2goZnVuY3Rpb24odCl7dChlKX0pfTtlLmFkZE1vZHVsZT1uLGUuaW5pdGlhbGl6ZU1vZHVsZXM9cn0od2luZG93LkhUTUxJbXBvcnRzKSx3aW5kb3cuSFRNTEltcG9ydHMuYWRkTW9kdWxlKGZ1bmN0aW9uKGUpe3ZhciB0PS8odXJsXFwoKShbXildKikoXFwpKS9nLG49LyhAaW1wb3J0W1xcc10rKD8hdXJsXFwoKSkoW147XSopKDspL2cscj17cmVzb2x2ZVVybHNJblN0eWxlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5vd25lckRvY3VtZW50LHI9bi5jcmVhdGVFbGVtZW50KFwiYVwiKTtyZXR1cm4gZS50ZXh0Q29udGVudD10aGlzLnJlc29sdmVVcmxzSW5Dc3NUZXh0KGUudGV4dENvbnRlbnQsdCxyKSxlfSxyZXNvbHZlVXJsc0luQ3NzVGV4dDpmdW5jdGlvbihlLHIsbyl7dmFyIGk9dGhpcy5yZXBsYWNlVXJscyhlLG8scix0KTtyZXR1cm4gaT10aGlzLnJlcGxhY2VVcmxzKGksbyxyLG4pfSxyZXBsYWNlVXJsczpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gZS5yZXBsYWNlKHIsZnVuY3Rpb24oZSxyLG8saSl7dmFyIGE9by5yZXBsYWNlKC9bXCInXS9nLFwiXCIpO3JldHVybiBuJiYoYT1uZXcgVVJMKGEsbikuaHJlZiksdC5ocmVmPWEsYT10LmhyZWYscitcIidcIithK1wiJ1wiK2l9KX19O2UucGF0aD1yfSksd2luZG93LkhUTUxJbXBvcnRzLmFkZE1vZHVsZShmdW5jdGlvbihlKXt2YXIgdD17YXN5bmM6ITAsb2s6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3RhdHVzPj0yMDAmJmUuc3RhdHVzPDMwMHx8MzA0PT09ZS5zdGF0dXN8fDA9PT1lLnN0YXR1c30sbG9hZDpmdW5jdGlvbihuLHIsbyl7dmFyIGk9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybihlLmZsYWdzLmRlYnVnfHxlLmZsYWdzLmJ1c3QpJiYobis9XCI/XCIrTWF0aC5yYW5kb20oKSksaS5vcGVuKFwiR0VUXCIsbix0LmFzeW5jKSxpLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsZnVuY3Rpb24oZSl7aWYoND09PWkucmVhZHlTdGF0ZSl7dmFyIG49bnVsbDt0cnl7dmFyIGE9aS5nZXRSZXNwb25zZUhlYWRlcihcIkxvY2F0aW9uXCIpO2EmJihuPVwiL1wiPT09YS5zdWJzdHIoMCwxKT9sb2NhdGlvbi5vcmlnaW4rYTphKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKGUubWVzc2FnZSl9ci5jYWxsKG8sIXQub2soaSkmJmksaS5yZXNwb25zZXx8aS5yZXNwb25zZVRleHQsbil9fSksaS5zZW5kKCksaX0sbG9hZERvY3VtZW50OmZ1bmN0aW9uKGUsdCxuKXt0aGlzLmxvYWQoZSx0LG4pLnJlc3BvbnNlVHlwZT1cImRvY3VtZW50XCJ9fTtlLnhocj10fSksd2luZG93LkhUTUxJbXBvcnRzLmFkZE1vZHVsZShmdW5jdGlvbihlKXt2YXIgdD1lLnhocixuPWUuZmxhZ3Mscj1mdW5jdGlvbihlLHQpe3RoaXMuY2FjaGU9e30sdGhpcy5vbmxvYWQ9ZSx0aGlzLm9uY29tcGxldGU9dCx0aGlzLmluZmxpZ2h0PTAsdGhpcy5wZW5kaW5nPXt9fTtyLnByb3RvdHlwZT17YWRkTm9kZXM6ZnVuY3Rpb24oZSl7dGhpcy5pbmZsaWdodCs9ZS5sZW5ndGg7Zm9yKHZhciB0LG49MCxyPWUubGVuZ3RoO3I+biYmKHQ9ZVtuXSk7bisrKXRoaXMucmVxdWlyZSh0KTt0aGlzLmNoZWNrRG9uZSgpfSxhZGROb2RlOmZ1bmN0aW9uKGUpe3RoaXMuaW5mbGlnaHQrKyx0aGlzLnJlcXVpcmUoZSksdGhpcy5jaGVja0RvbmUoKX0scmVxdWlyZTpmdW5jdGlvbihlKXt2YXIgdD1lLnNyY3x8ZS5ocmVmO2UuX19ub2RlVXJsPXQsdGhpcy5kZWR1cGUodCxlKXx8dGhpcy5mZXRjaCh0LGUpfSxkZWR1cGU6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLnBlbmRpbmdbZV0pcmV0dXJuIHRoaXMucGVuZGluZ1tlXS5wdXNoKHQpLCEwO3JldHVybiB0aGlzLmNhY2hlW2VdPyh0aGlzLm9ubG9hZChlLHQsdGhpcy5jYWNoZVtlXSksdGhpcy50YWlsKCksITApOih0aGlzLnBlbmRpbmdbZV09W3RdLCExKX0sZmV0Y2g6ZnVuY3Rpb24oZSxyKXtpZihuLmxvYWQmJmNvbnNvbGUubG9nKFwiZmV0Y2hcIixlLHIpLGUpaWYoZS5tYXRjaCgvXmRhdGE6Lykpe3ZhciBvPWUuc3BsaXQoXCIsXCIpLGk9b1swXSxhPW9bMV07YT1pLmluZGV4T2YoXCI7YmFzZTY0XCIpPi0xP2F0b2IoYSk6ZGVjb2RlVVJJQ29tcG9uZW50KGEpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aGlzLnJlY2VpdmUoZSxyLG51bGwsYSl9LmJpbmQodGhpcyksMCl9ZWxzZXt2YXIgcz1mdW5jdGlvbih0LG4sbyl7dGhpcy5yZWNlaXZlKGUscix0LG4sbyl9LmJpbmQodGhpcyk7dC5sb2FkKGUscyl9ZWxzZSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhpcy5yZWNlaXZlKGUscix7ZXJyb3I6XCJocmVmIG11c3QgYmUgc3BlY2lmaWVkXCJ9LG51bGwpfS5iaW5kKHRoaXMpLDApfSxyZWNlaXZlOmZ1bmN0aW9uKGUsdCxuLHIsbyl7dGhpcy5jYWNoZVtlXT1yO2Zvcih2YXIgaSxhPXRoaXMucGVuZGluZ1tlXSxzPTAsYz1hLmxlbmd0aDtjPnMmJihpPWFbc10pO3MrKyl0aGlzLm9ubG9hZChlLGkscixuLG8pLHRoaXMudGFpbCgpO3RoaXMucGVuZGluZ1tlXT1udWxsfSx0YWlsOmZ1bmN0aW9uKCl7LS10aGlzLmluZmxpZ2h0LHRoaXMuY2hlY2tEb25lKCl9LGNoZWNrRG9uZTpmdW5jdGlvbigpe3RoaXMuaW5mbGlnaHR8fHRoaXMub25jb21wbGV0ZSgpfX0sZS5Mb2FkZXI9cn0pLHdpbmRvdy5IVE1MSW1wb3J0cy5hZGRNb2R1bGUoZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSl7dGhpcy5hZGRDYWxsYmFjaz1lLHRoaXMubW89bmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5oYW5kbGVyLmJpbmQodGhpcykpfTt0LnByb3RvdHlwZT17aGFuZGxlcjpmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0wLHI9ZS5sZW5ndGg7cj5uJiYodD1lW25dKTtuKyspXCJjaGlsZExpc3RcIj09PXQudHlwZSYmdC5hZGRlZE5vZGVzLmxlbmd0aCYmdGhpcy5hZGRlZE5vZGVzKHQuYWRkZWROb2Rlcyl9LGFkZGVkTm9kZXM6ZnVuY3Rpb24oZSl7dGhpcy5hZGRDYWxsYmFjayYmdGhpcy5hZGRDYWxsYmFjayhlKTtmb3IodmFyIHQsbj0wLHI9ZS5sZW5ndGg7cj5uJiYodD1lW25dKTtuKyspdC5jaGlsZHJlbiYmdC5jaGlsZHJlbi5sZW5ndGgmJnRoaXMuYWRkZWROb2Rlcyh0LmNoaWxkcmVuKX0sb2JzZXJ2ZTpmdW5jdGlvbihlKXt0aGlzLm1vLm9ic2VydmUoZSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX19LGUuT2JzZXJ2ZXI9dH0pLHdpbmRvdy5IVE1MSW1wb3J0cy5hZGRNb2R1bGUoZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXtyZXR1cm5cImxpbmtcIj09PWUubG9jYWxOYW1lJiZlLnJlbD09PXV9ZnVuY3Rpb24gbihlKXt2YXIgdD1yKGUpO3JldHVyblwiZGF0YTp0ZXh0L2phdmFzY3JpcHQ7Y2hhcnNldD11dGYtOCxcIitlbmNvZGVVUklDb21wb25lbnQodCl9ZnVuY3Rpb24gcihlKXtyZXR1cm4gZS50ZXh0Q29udGVudCtvKGUpfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9ZS5vd25lckRvY3VtZW50O3QuX19pbXBvcnRlZFNjcmlwdHM9dC5fX2ltcG9ydGVkU2NyaXB0c3x8MDt2YXIgbj1lLm93bmVyRG9jdW1lbnQuYmFzZVVSSSxyPXQuX19pbXBvcnRlZFNjcmlwdHM/XCItXCIrdC5fX2ltcG9ydGVkU2NyaXB0czpcIlwiO3JldHVybiB0Ll9faW1wb3J0ZWRTY3JpcHRzKyssXCJcXG4vLyMgc291cmNlVVJMPVwiK24rcitcIi5qc1xcblwifWZ1bmN0aW9uIGkoZSl7dmFyIHQ9ZS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdC50ZXh0Q29udGVudD1lLnRleHRDb250ZW50LGEucmVzb2x2ZVVybHNJblN0eWxlKHQpLHR9dmFyIGE9ZS5wYXRoLHM9ZS5yb290RG9jdW1lbnQsYz1lLmZsYWdzLGw9ZS5pc0lFLHU9ZS5JTVBPUlRfTElOS19UWVBFLGQ9XCJsaW5rW3JlbD1cIit1K1wiXVwiLHA9e2RvY3VtZW50U2VsZWN0b3JzOmQsaW1wb3J0c1NlbGVjdG9yczpbZCxcImxpbmtbcmVsPXN0eWxlc2hlZXRdOm5vdChbdHlwZV0pXCIsXCJzdHlsZTpub3QoW3R5cGVdKVwiLFwic2NyaXB0Om5vdChbdHlwZV0pXCIsJ3NjcmlwdFt0eXBlPVwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiXScsJ3NjcmlwdFt0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCJdJ10uam9pbihcIixcIiksbWFwOntsaW5rOlwicGFyc2VMaW5rXCIsc2NyaXB0OlwicGFyc2VTY3JpcHRcIixzdHlsZTpcInBhcnNlU3R5bGVcIn0sZHluYW1pY0VsZW1lbnRzOltdLHBhcnNlTmV4dDpmdW5jdGlvbigpe3ZhciBlPXRoaXMubmV4dFRvUGFyc2UoKTtlJiZ0aGlzLnBhcnNlKGUpfSxwYXJzZTpmdW5jdGlvbihlKXtpZih0aGlzLmlzUGFyc2VkKGUpKXJldHVybiB2b2lkKGMucGFyc2UmJmNvbnNvbGUubG9nKFwiWyVzXSBpcyBhbHJlYWR5IHBhcnNlZFwiLGUubG9jYWxOYW1lKSk7dmFyIHQ9dGhpc1t0aGlzLm1hcFtlLmxvY2FsTmFtZV1dO3QmJih0aGlzLm1hcmtQYXJzaW5nKGUpLHQuY2FsbCh0aGlzLGUpKX0scGFyc2VEeW5hbWljOmZ1bmN0aW9uKGUsdCl7dGhpcy5keW5hbWljRWxlbWVudHMucHVzaChlKSx0fHx0aGlzLnBhcnNlTmV4dCgpfSxtYXJrUGFyc2luZzpmdW5jdGlvbihlKXtjLnBhcnNlJiZjb25zb2xlLmxvZyhcInBhcnNpbmdcIixlKSx0aGlzLnBhcnNpbmdFbGVtZW50PWV9LG1hcmtQYXJzaW5nQ29tcGxldGU6ZnVuY3Rpb24oZSl7ZS5fX2ltcG9ydFBhcnNlZD0hMCx0aGlzLm1hcmtEeW5hbWljUGFyc2luZ0NvbXBsZXRlKGUpLGUuX19pbXBvcnRFbGVtZW50JiYoZS5fX2ltcG9ydEVsZW1lbnQuX19pbXBvcnRQYXJzZWQ9ITAsdGhpcy5tYXJrRHluYW1pY1BhcnNpbmdDb21wbGV0ZShlLl9faW1wb3J0RWxlbWVudCkpLHRoaXMucGFyc2luZ0VsZW1lbnQ9bnVsbCxjLnBhcnNlJiZjb25zb2xlLmxvZyhcImNvbXBsZXRlZFwiLGUpfSxtYXJrRHluYW1pY1BhcnNpbmdDb21wbGV0ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmR5bmFtaWNFbGVtZW50cy5pbmRleE9mKGUpO3Q+PTAmJnRoaXMuZHluYW1pY0VsZW1lbnRzLnNwbGljZSh0LDEpfSxwYXJzZUltcG9ydDpmdW5jdGlvbihlKXtpZihlW1wiaW1wb3J0XCJdPWUuX19kb2Msd2luZG93LkhUTUxJbXBvcnRzLl9faW1wb3J0c1BhcnNpbmdIb29rJiZ3aW5kb3cuSFRNTEltcG9ydHMuX19pbXBvcnRzUGFyc2luZ0hvb2soZSksZVtcImltcG9ydFwiXSYmKGVbXCJpbXBvcnRcIl0uX19pbXBvcnRQYXJzZWQ9ITApLHRoaXMubWFya1BhcnNpbmdDb21wbGV0ZShlKSxlLl9fcmVzb3VyY2UmJiFlLl9fZXJyb3I/ZS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImxvYWRcIix7YnViYmxlczohMX0pKTplLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZXJyb3JcIix7YnViYmxlczohMX0pKSxlLl9fcGVuZGluZylmb3IodmFyIHQ7ZS5fX3BlbmRpbmcubGVuZ3RoOyl0PWUuX19wZW5kaW5nLnNoaWZ0KCksdCYmdCh7dGFyZ2V0OmV9KTt0aGlzLnBhcnNlTmV4dCgpfSxwYXJzZUxpbms6ZnVuY3Rpb24oZSl7dChlKT90aGlzLnBhcnNlSW1wb3J0KGUpOihlLmhyZWY9ZS5ocmVmLHRoaXMucGFyc2VHZW5lcmljKGUpKX0scGFyc2VTdHlsZTpmdW5jdGlvbihlKXt2YXIgdD1lO2U9aShlKSx0Ll9fYXBwbGllZEVsZW1lbnQ9ZSxlLl9faW1wb3J0RWxlbWVudD10LHRoaXMucGFyc2VHZW5lcmljKGUpfSxwYXJzZUdlbmVyaWM6ZnVuY3Rpb24oZSl7dGhpcy50cmFja0VsZW1lbnQoZSksdGhpcy5hZGRFbGVtZW50VG9Eb2N1bWVudChlKX0scm9vdEltcG9ydEZvckVsZW1lbnQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWU7dC5vd25lckRvY3VtZW50Ll9faW1wb3J0TGluazspdD10Lm93bmVyRG9jdW1lbnQuX19pbXBvcnRMaW5rO3JldHVybiB0fSxhZGRFbGVtZW50VG9Eb2N1bWVudDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnJvb3RJbXBvcnRGb3JFbGVtZW50KGUuX19pbXBvcnRFbGVtZW50fHxlKTt0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdCl9LHRyYWNrRWxlbWVudDpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj1mdW5jdGlvbihvKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsciksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIixyKSx0JiZ0KG8pLG4ubWFya1BhcnNpbmdDb21wbGV0ZShlKSxuLnBhcnNlTmV4dCgpfTtpZihlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsciksZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixyKSxsJiZcInN0eWxlXCI9PT1lLmxvY2FsTmFtZSl7dmFyIG89ITE7aWYoLTE9PWUudGV4dENvbnRlbnQuaW5kZXhPZihcIkBpbXBvcnRcIikpbz0hMDtlbHNlIGlmKGUuc2hlZXQpe289ITA7Zm9yKHZhciBpLGE9ZS5zaGVldC5jc3NSdWxlcyxzPWE/YS5sZW5ndGg6MCxjPTA7cz5jJiYoaT1hW2NdKTtjKyspaS50eXBlPT09Q1NTUnVsZS5JTVBPUlRfUlVMRSYmKG89byYmQm9vbGVhbihpLnN0eWxlU2hlZXQpKX1vJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImxvYWRcIix7YnViYmxlczohMX0pKX0pfX0scGFyc2VTY3JpcHQ6ZnVuY3Rpb24odCl7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtyLl9faW1wb3J0RWxlbWVudD10LHIuc3JjPXQuc3JjP3Quc3JjOm4odCksZS5jdXJyZW50U2NyaXB0PXQsdGhpcy50cmFja0VsZW1lbnQocixmdW5jdGlvbih0KXtyLnBhcmVudE5vZGUmJnIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSxlLmN1cnJlbnRTY3JpcHQ9bnVsbH0pLHRoaXMuYWRkRWxlbWVudFRvRG9jdW1lbnQocil9LG5leHRUb1BhcnNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heVBhcnNlPVtdLCF0aGlzLnBhcnNpbmdFbGVtZW50JiYodGhpcy5uZXh0VG9QYXJzZUluRG9jKHMpfHx0aGlzLm5leHRUb1BhcnNlRHluYW1pYygpKX0sbmV4dFRvUGFyc2VJbkRvYzpmdW5jdGlvbihlLG4pe2lmKGUmJnRoaXMuX21heVBhcnNlLmluZGV4T2YoZSk8MCl7dGhpcy5fbWF5UGFyc2UucHVzaChlKTtmb3IodmFyIHIsbz1lLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5wYXJzZVNlbGVjdG9yc0Zvck5vZGUoZSkpLGk9MCxhPW8ubGVuZ3RoO2E+aSYmKHI9b1tpXSk7aSsrKWlmKCF0aGlzLmlzUGFyc2VkKHIpKXJldHVybiB0aGlzLmhhc1Jlc291cmNlKHIpP3Qocik/dGhpcy5uZXh0VG9QYXJzZUluRG9jKHIuX19kb2Mscik6cjp2b2lkIDB9cmV0dXJuIG59LG5leHRUb1BhcnNlRHluYW1pYzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmR5bmFtaWNFbGVtZW50c1swXX0scGFyc2VTZWxlY3RvcnNGb3JOb2RlOmZ1bmN0aW9uKGUpe3ZhciB0PWUub3duZXJEb2N1bWVudHx8ZTtyZXR1cm4gdD09PXM/dGhpcy5kb2N1bWVudFNlbGVjdG9yczp0aGlzLmltcG9ydHNTZWxlY3RvcnN9LGlzUGFyc2VkOmZ1bmN0aW9uKGUpe3JldHVybiBlLl9faW1wb3J0UGFyc2VkfSxuZWVkc0R5bmFtaWNQYXJzaW5nOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmR5bmFtaWNFbGVtZW50cy5pbmRleE9mKGUpPj0wfSxoYXNSZXNvdXJjZTpmdW5jdGlvbihlKXtyZXR1cm4gdChlKSYmdm9pZCAwPT09ZS5fX2RvYz8hMTohMH19O2UucGFyc2VyPXAsZS5JTVBPUlRfU0VMRUNUT1I9ZH0pLHdpbmRvdy5IVE1MSW1wb3J0cy5hZGRNb2R1bGUoZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXtyZXR1cm4gbihlLGEpfWZ1bmN0aW9uIG4oZSx0KXtyZXR1cm5cImxpbmtcIj09PWUubG9jYWxOYW1lJiZlLmdldEF0dHJpYnV0ZShcInJlbFwiKT09PXR9ZnVuY3Rpb24gcihlKXtyZXR1cm4hIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxcImJhc2VVUklcIil9ZnVuY3Rpb24gbyhlLHQpe3ZhciBuPWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChhKTtuLl9VUkw9dDt2YXIgbz1uLmNyZWF0ZUVsZW1lbnQoXCJiYXNlXCIpO28uc2V0QXR0cmlidXRlKFwiaHJlZlwiLHQpLG4uYmFzZVVSSXx8cihuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJiYXNlVVJJXCIse3ZhbHVlOnR9KTt2YXIgaT1uLmNyZWF0ZUVsZW1lbnQoXCJtZXRhXCIpO3JldHVybiBpLnNldEF0dHJpYnV0ZShcImNoYXJzZXRcIixcInV0Zi04XCIpLG4uaGVhZC5hcHBlbmRDaGlsZChpKSxuLmhlYWQuYXBwZW5kQ2hpbGQobyksbi5ib2R5LmlubmVySFRNTD1lLHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50JiZIVE1MVGVtcGxhdGVFbGVtZW50LmJvb3RzdHJhcCYmSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAobiksbn12YXIgaT1lLmZsYWdzLGE9ZS5JTVBPUlRfTElOS19UWVBFLHM9ZS5JTVBPUlRfU0VMRUNUT1IsYz1lLnJvb3REb2N1bWVudCxsPWUuTG9hZGVyLHU9ZS5PYnNlcnZlcixkPWUucGFyc2VyLHA9e2RvY3VtZW50czp7fSxkb2N1bWVudFByZWxvYWRTZWxlY3RvcnM6cyxpbXBvcnRzUHJlbG9hZFNlbGVjdG9yczpbc10uam9pbihcIixcIiksbG9hZE5vZGU6ZnVuY3Rpb24oZSl7aC5hZGROb2RlKGUpfSxsb2FkU3VidHJlZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLm1hcnNoYWxOb2RlcyhlKTtoLmFkZE5vZGVzKHQpfSxtYXJzaGFsTm9kZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucXVlcnlTZWxlY3RvckFsbCh0aGlzLmxvYWRTZWxlY3RvcnNGb3JOb2RlKGUpKX0sbG9hZFNlbGVjdG9yc0Zvck5vZGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vd25lckRvY3VtZW50fHxlO3JldHVybiB0PT09Yz90aGlzLmRvY3VtZW50UHJlbG9hZFNlbGVjdG9yczp0aGlzLmltcG9ydHNQcmVsb2FkU2VsZWN0b3JzfSxsb2FkZWQ6ZnVuY3Rpb24oZSxuLHIsYSxzKXtpZihpLmxvYWQmJmNvbnNvbGUubG9nKFwibG9hZGVkXCIsZSxuKSxuLl9fcmVzb3VyY2U9cixuLl9fZXJyb3I9YSx0KG4pKXt2YXIgYz10aGlzLmRvY3VtZW50c1tlXTt2b2lkIDA9PT1jJiYoYz1hP251bGw6byhyLHN8fGUpLGMmJihjLl9faW1wb3J0TGluaz1uLHRoaXMuYm9vdERvY3VtZW50KGMpKSx0aGlzLmRvY3VtZW50c1tlXT1jKSxuLl9fZG9jPWN9ZC5wYXJzZU5leHQoKX0sYm9vdERvY3VtZW50OmZ1bmN0aW9uKGUpe3RoaXMubG9hZFN1YnRyZWUoZSksdGhpcy5vYnNlcnZlci5vYnNlcnZlKGUpLGQucGFyc2VOZXh0KCl9LGxvYWRlZEFsbDpmdW5jdGlvbigpe2QucGFyc2VOZXh0KCl9fSxoPW5ldyBsKHAubG9hZGVkLmJpbmQocCkscC5sb2FkZWRBbGwuYmluZChwKSk7aWYocC5vYnNlcnZlcj1uZXcgdSwhZG9jdW1lbnQuYmFzZVVSSSl7dmFyIGY9e2dldDpmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO3JldHVybiBlP2UuaHJlZjp3aW5kb3cubG9jYXRpb24uaHJlZn0sY29uZmlndXJhYmxlOiEwfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsXCJiYXNlVVJJXCIsZiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsXCJiYXNlVVJJXCIsZil9ZS5pbXBvcnRlcj1wLGUuaW1wb3J0TG9hZGVyPWh9KSx3aW5kb3cuSFRNTEltcG9ydHMuYWRkTW9kdWxlKGZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyc2VyLG49ZS5pbXBvcnRlcixyPXthZGRlZDpmdW5jdGlvbihlKXtmb3IodmFyIHIsbyxpLGEscz0wLGM9ZS5sZW5ndGg7Yz5zJiYoYT1lW3NdKTtzKyspcnx8KHI9YS5vd25lckRvY3VtZW50LG89dC5pc1BhcnNlZChyKSksaT10aGlzLnNob3VsZExvYWROb2RlKGEpLGkmJm4ubG9hZE5vZGUoYSksdGhpcy5zaG91bGRQYXJzZU5vZGUoYSkmJm8mJnQucGFyc2VEeW5hbWljKGEsaSl9LHNob3VsZExvYWROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiAxPT09ZS5ub2RlVHlwZSYmby5jYWxsKGUsbi5sb2FkU2VsZWN0b3JzRm9yTm9kZShlKSl9LHNob3VsZFBhcnNlTm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGUmJm8uY2FsbChlLHQucGFyc2VTZWxlY3RvcnNGb3JOb2RlKGUpKX19O24ub2JzZXJ2ZXIuYWRkQ2FsbGJhY2s9ci5hZGRlZC5iaW5kKHIpO3ZhciBvPUhUTUxFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzfHxIVE1MRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yfHxIVE1MRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxIVE1MRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yfHxIVE1MRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3J9KSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7d2luZG93LkhUTUxJbXBvcnRzLmltcG9ydGVyLmJvb3REb2N1bWVudChyKX12YXIgbj1lLmluaXRpYWxpemVNb2R1bGVzO2UuaXNJRTtpZighZS51c2VOYXRpdmUpe24oKTt2YXIgcj1lLnJvb3REb2N1bWVudDtcImNvbXBsZXRlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlfHxcImludGVyYWN0aXZlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlJiYhd2luZG93LmF0dGFjaEV2ZW50P3QoKTpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLHQpfX0od2luZG93LkhUTUxJbXBvcnRzKSx3aW5kb3cuQ3VzdG9tRWxlbWVudHM9d2luZG93LkN1c3RvbUVsZW1lbnRzfHx7ZmxhZ3M6e319LGZ1bmN0aW9uKGUpe3ZhciB0PWUuZmxhZ3Msbj1bXSxyPWZ1bmN0aW9uKGUpe24ucHVzaChlKX0sbz1mdW5jdGlvbigpe24uZm9yRWFjaChmdW5jdGlvbih0KXt0KGUpfSl9O2UuYWRkTW9kdWxlPXIsZS5pbml0aWFsaXplTW9kdWxlcz1vLGUuaGFzTmF0aXZlPUJvb2xlYW4oZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KSxlLmlzSUU9L1RyaWRlbnQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZS51c2VOYXRpdmU9IXQucmVnaXN0ZXImJmUuaGFzTmF0aXZlJiYhd2luZG93LlNoYWRvd0RPTVBvbHlmaWxsJiYoIXdpbmRvdy5IVE1MSW1wb3J0c3x8d2luZG93LkhUTUxJbXBvcnRzLnVzZU5hdGl2ZSl9KHdpbmRvdy5DdXN0b21FbGVtZW50cyksd2luZG93LkN1c3RvbUVsZW1lbnRzLmFkZE1vZHVsZShmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCl7bihlLGZ1bmN0aW9uKGUpe3JldHVybiB0KGUpPyEwOnZvaWQgcihlLHQpfSkscihlLHQpfWZ1bmN0aW9uIG4oZSx0LHIpe3ZhciBvPWUuZmlyc3RFbGVtZW50Q2hpbGQ7aWYoIW8pZm9yKG89ZS5maXJzdENoaWxkO28mJm8ubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERTspbz1vLm5leHRTaWJsaW5nO2Zvcig7bzspdChvLHIpIT09ITAmJm4obyx0LHIpLG89by5uZXh0RWxlbWVudFNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLG4pe2Zvcih2YXIgcj1lLnNoYWRvd1Jvb3Q7cjspdChyLG4pLHI9ci5vbGRlclNoYWRvd1Jvb3R9ZnVuY3Rpb24gbyhlLHQpe2koZSx0LFtdKX1mdW5jdGlvbiBpKGUsdCxuKXtpZihlPXdpbmRvdy53cmFwKGUpLCEobi5pbmRleE9mKGUpPj0wKSl7bi5wdXNoKGUpO2Zvcih2YXIgcixvPWUucXVlcnlTZWxlY3RvckFsbChcImxpbmtbcmVsPVwiK2ErXCJdXCIpLHM9MCxjPW8ubGVuZ3RoO2M+cyYmKHI9b1tzXSk7cysrKXJbXCJpbXBvcnRcIl0mJmkocltcImltcG9ydFwiXSx0LG4pO3QoZSl9fXZhciBhPXdpbmRvdy5IVE1MSW1wb3J0cz93aW5kb3cuSFRNTEltcG9ydHMuSU1QT1JUX0xJTktfVFlQRTpcIm5vbmVcIjtlLmZvckRvY3VtZW50VHJlZT1vLGUuZm9yU3VidHJlZT10fSksd2luZG93LkN1c3RvbUVsZW1lbnRzLmFkZE1vZHVsZShmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCl7cmV0dXJuIG4oZSx0KXx8cihlLHQpfWZ1bmN0aW9uIG4odCxuKXtyZXR1cm4gZS51cGdyYWRlKHQsbik/ITA6dm9pZChuJiZhKHQpKX1mdW5jdGlvbiByKGUsdCl7YihlLGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsdCk/ITA6dm9pZCAwfSl9ZnVuY3Rpb24gbyhlKXtTLnB1c2goZSksX3x8KF89ITAsc2V0VGltZW91dChpKSl9ZnVuY3Rpb24gaSgpe189ITE7Zm9yKHZhciBlLHQ9UyxuPTAscj10Lmxlbmd0aDtyPm4mJihlPXRbbl0pO24rKyllKCk7Uz1bXX1mdW5jdGlvbiBhKGUpe0U/byhmdW5jdGlvbigpe3MoZSl9KTpzKGUpfWZ1bmN0aW9uIHMoZSl7ZS5fX3VwZ3JhZGVkX18mJiFlLl9fYXR0YWNoZWQmJihlLl9fYXR0YWNoZWQ9ITAsZS5hdHRhY2hlZENhbGxiYWNrJiZlLmF0dGFjaGVkQ2FsbGJhY2soKSl9ZnVuY3Rpb24gYyhlKXtsKGUpLGIoZSxmdW5jdGlvbihlKXtsKGUpfSl9ZnVuY3Rpb24gbChlKXtFP28oZnVuY3Rpb24oKXt1KGUpfSk6dShlKX1mdW5jdGlvbiB1KGUpe2UuX191cGdyYWRlZF9fJiZlLl9fYXR0YWNoZWQmJihlLl9fYXR0YWNoZWQ9ITEsZS5kZXRhY2hlZENhbGxiYWNrJiZlLmRldGFjaGVkQ2FsbGJhY2soKSl9ZnVuY3Rpb24gZChlKXtmb3IodmFyIHQ9ZSxuPXdpbmRvdy53cmFwKGRvY3VtZW50KTt0Oyl7aWYodD09bilyZXR1cm4hMDt0PXQucGFyZW50Tm9kZXx8dC5ub2RlVHlwZT09PU5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSYmdC5ob3N0fX1mdW5jdGlvbiBwKGUpe2lmKGUuc2hhZG93Um9vdCYmIWUuc2hhZG93Um9vdC5fX3dhdGNoZWQpe2cuZG9tJiZjb25zb2xlLmxvZyhcIndhdGNoaW5nIHNoYWRvdy1yb290IGZvcjogXCIsZS5sb2NhbE5hbWUpO2Zvcih2YXIgdD1lLnNoYWRvd1Jvb3Q7dDspbSh0KSx0PXQub2xkZXJTaGFkb3dSb290fX1mdW5jdGlvbiBoKGUsbil7aWYoZy5kb20pe3ZhciByPW5bMF07aWYociYmXCJjaGlsZExpc3RcIj09PXIudHlwZSYmci5hZGRlZE5vZGVzJiZyLmFkZGVkTm9kZXMpe2Zvcih2YXIgbz1yLmFkZGVkTm9kZXNbMF07byYmbyE9PWRvY3VtZW50JiYhby5ob3N0OylvPW8ucGFyZW50Tm9kZTt2YXIgaT1vJiYoby5VUkx8fG8uX1VSTHx8by5ob3N0JiZvLmhvc3QubG9jYWxOYW1lKXx8XCJcIjtpPWkuc3BsaXQoXCIvP1wiKS5zaGlmdCgpLnNwbGl0KFwiL1wiKS5wb3AoKX1jb25zb2xlLmdyb3VwKFwibXV0YXRpb25zICglZCkgWyVzXVwiLG4ubGVuZ3RoLGl8fFwiXCIpfXZhciBhPWQoZSk7bi5mb3JFYWNoKGZ1bmN0aW9uKGUpe1wiY2hpbGRMaXN0XCI9PT1lLnR5cGUmJihUKGUuYWRkZWROb2RlcyxmdW5jdGlvbihlKXtlLmxvY2FsTmFtZSYmdChlLGEpfSksVChlLnJlbW92ZWROb2RlcyxmdW5jdGlvbihlKXtlLmxvY2FsTmFtZSYmYyhlKX0pKX0pLGcuZG9tJiZjb25zb2xlLmdyb3VwRW5kKCl9ZnVuY3Rpb24gZihlKXtmb3IoZT13aW5kb3cud3JhcChlKSxlfHwoZT13aW5kb3cud3JhcChkb2N1bWVudCkpO2UucGFyZW50Tm9kZTspZT1lLnBhcmVudE5vZGU7dmFyIHQ9ZS5fX29ic2VydmVyO3QmJihoKGUsdC50YWtlUmVjb3JkcygpKSxpKCkpfWZ1bmN0aW9uIG0oZSl7aWYoIWUuX19vYnNlcnZlcil7dmFyIHQ9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoaC5iaW5kKHRoaXMsZSkpO3Qub2JzZXJ2ZShlLHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0pLGUuX19vYnNlcnZlcj10fX1mdW5jdGlvbiB3KGUpe2U9d2luZG93LndyYXAoZSksZy5kb20mJmNvbnNvbGUuZ3JvdXAoXCJ1cGdyYWRlRG9jdW1lbnQ6IFwiLGUuYmFzZVVSSS5zcGxpdChcIi9cIikucG9wKCkpO3ZhciBuPWU9PT13aW5kb3cud3JhcChkb2N1bWVudCk7dChlLG4pLG0oZSksZy5kb20mJmNvbnNvbGUuZ3JvdXBFbmQoKX1mdW5jdGlvbiB2KGUpe3koZSx3KX12YXIgZz1lLmZsYWdzLGI9ZS5mb3JTdWJ0cmVlLHk9ZS5mb3JEb2N1bWVudFRyZWUsRT13aW5kb3cuTXV0YXRpb25PYnNlcnZlci5faXNQb2x5ZmlsbGVkJiZnW1widGhyb3R0bGUtYXR0YWNoZWRcIl07ZS5oYXNQb2x5ZmlsbE11dGF0aW9ucz1FLGUuaGFzVGhyb3R0bGVkQXR0YWNoZWQ9RTt2YXIgXz0hMSxTPVtdLFQ9QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKSxNPUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYWRvd1Jvb3Q7TSYmKEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYWRvd1Jvb3Q9ZnVuY3Rpb24oKXt2YXIgZT1NLmNhbGwodGhpcyk7cmV0dXJuIHdpbmRvdy5DdXN0b21FbGVtZW50cy53YXRjaFNoYWRvdyh0aGlzKSxlfSksZS53YXRjaFNoYWRvdz1wLGUudXBncmFkZURvY3VtZW50VHJlZT12LGUudXBncmFkZURvY3VtZW50PXcsZS51cGdyYWRlU3VidHJlZT1yLGUudXBncmFkZUFsbD10LGUuYXR0YWNoZWQ9YSxlLnRha2VSZWNvcmRzPWZ9KSx3aW5kb3cuQ3VzdG9tRWxlbWVudHMuYWRkTW9kdWxlKGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXtpZihcInRlbXBsYXRlXCI9PT10LmxvY2FsTmFtZSYmd2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQmJkhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGUmJkhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGUodCksIXQuX191cGdyYWRlZF9fJiZ0Lm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciBvPXQuZ2V0QXR0cmlidXRlKFwiaXNcIiksaT1lLmdldFJlZ2lzdGVyZWREZWZpbml0aW9uKHQubG9jYWxOYW1lKXx8ZS5nZXRSZWdpc3RlcmVkRGVmaW5pdGlvbihvKTtpZihpJiYobyYmaS50YWc9PXQubG9jYWxOYW1lfHwhbyYmIWlbXCJleHRlbmRzXCJdKSlyZXR1cm4gbih0LGkscil9fWZ1bmN0aW9uIG4odCxuLG8pe3JldHVybiBhLnVwZ3JhZGUmJmNvbnNvbGUuZ3JvdXAoXCJ1cGdyYWRlOlwiLHQubG9jYWxOYW1lKSxuLmlzJiZ0LnNldEF0dHJpYnV0ZShcImlzXCIsbi5pcykscih0LG4pLHQuX191cGdyYWRlZF9fPSEwLGkodCksbyYmZS5hdHRhY2hlZCh0KSxlLnVwZ3JhZGVTdWJ0cmVlKHQsbyksYS51cGdyYWRlJiZjb25zb2xlLmdyb3VwRW5kKCksdH1mdW5jdGlvbiByKGUsdCl7T2JqZWN0Ll9fcHJvdG9fXz9lLl9fcHJvdG9fXz10LnByb3RvdHlwZToobyhlLHQucHJvdG90eXBlLHRbXCJuYXRpdmVcIl0pLGUuX19wcm90b19fPXQucHJvdG90eXBlKX1mdW5jdGlvbiBvKGUsdCxuKXtmb3IodmFyIHI9e30sbz10O28hPT1uJiZvIT09SFRNTEVsZW1lbnQucHJvdG90eXBlOyl7Zm9yKHZhciBpLGE9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobykscz0wO2k9YVtzXTtzKyspcltpXXx8KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGksT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLGkpKSxyW2ldPTEpO289T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pfX1mdW5jdGlvbiBpKGUpe2UuY3JlYXRlZENhbGxiYWNrJiZlLmNyZWF0ZWRDYWxsYmFjaygpfXZhciBhPWUuZmxhZ3M7ZS51cGdyYWRlPXQsZS51cGdyYWRlV2l0aERlZmluaXRpb249bixlLmltcGxlbWVudFByb3RvdHlwZT1yfSksd2luZG93LkN1c3RvbUVsZW1lbnRzLmFkZE1vZHVsZShmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIGM9cnx8e307aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50OiBmaXJzdCBhcmd1bWVudCBgbmFtZWAgbXVzdCBub3QgYmUgZW1wdHlcIik7aWYodC5pbmRleE9mKFwiLVwiKTwwKXRocm93IG5ldyBFcnJvcihcImRvY3VtZW50LnJlZ2lzdGVyRWxlbWVudDogZmlyc3QgYXJndW1lbnQgKCduYW1lJykgbXVzdCBjb250YWluIGEgZGFzaCAoJy0nKS4gQXJndW1lbnQgcHJvdmlkZWQgd2FzICdcIitTdHJpbmcodCkrXCInLlwiKTtpZihvKHQpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdyZWdpc3RlckVsZW1lbnQnIG9uICdEb2N1bWVudCc6IFJlZ2lzdHJhdGlvbiBmYWlsZWQgZm9yIHR5cGUgJ1wiK1N0cmluZyh0KStcIicuIFRoZSB0eXBlIG5hbWUgaXMgaW52YWxpZC5cIik7aWYobCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGVEZWZpbml0aW9uRXJyb3I6IGEgdHlwZSB3aXRoIG5hbWUgJ1wiK1N0cmluZyh0KStcIicgaXMgYWxyZWFkeSByZWdpc3RlcmVkXCIpO3JldHVybiBjLnByb3RvdHlwZXx8KGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoSFRNTEVsZW1lbnQucHJvdG90eXBlKSksYy5fX25hbWU9dC50b0xvd2VyQ2FzZSgpLGMubGlmZWN5Y2xlPWMubGlmZWN5Y2xlfHx7fSxjLmFuY2VzdHJ5PWkoY1tcImV4dGVuZHNcIl0pLGEoYykscyhjKSxuKGMucHJvdG90eXBlKSx1KGMuX19uYW1lLGMpLGMuY3Rvcj1kKGMpLGMuY3Rvci5wcm90b3R5cGU9Yy5wcm90b3R5cGUsYy5wcm90b3R5cGUuY29uc3RydWN0b3I9Yy5jdG9yLGUucmVhZHkmJnYoZG9jdW1lbnQpLGMuY3Rvcn1mdW5jdGlvbiBuKGUpe2lmKCFlLnNldEF0dHJpYnV0ZS5fcG9seWZpbGxlZCl7dmFyIHQ9ZS5zZXRBdHRyaWJ1dGU7ZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSxuKXtyLmNhbGwodGhpcyxlLG4sdCl9O3ZhciBuPWUucmVtb3ZlQXR0cmlidXRlO2UucmVtb3ZlQXR0cmlidXRlPWZ1bmN0aW9uKGUpe3IuY2FsbCh0aGlzLGUsbnVsbCxuKX0sZS5zZXRBdHRyaWJ1dGUuX3BvbHlmaWxsZWQ9ITB9fWZ1bmN0aW9uIHIoZSx0LG4pe2U9ZS50b0xvd2VyQ2FzZSgpO3ZhciByPXRoaXMuZ2V0QXR0cmlidXRlKGUpO24uYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBvPXRoaXMuZ2V0QXR0cmlidXRlKGUpO3RoaXMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJiZvIT09ciYmdGhpcy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soZSxyLG8pfWZ1bmN0aW9uIG8oZSl7Zm9yKHZhciB0PTA7dDxfLmxlbmd0aDt0KyspaWYoZT09PV9bdF0pcmV0dXJuITB9ZnVuY3Rpb24gaShlKXt2YXIgdD1sKGUpO3JldHVybiB0P2kodFtcImV4dGVuZHNcIl0pLmNvbmNhdChbdF0pOltdfWZ1bmN0aW9uIGEoZSl7Zm9yKHZhciB0LG49ZVtcImV4dGVuZHNcIl0scj0wO3Q9ZS5hbmNlc3RyeVtyXTtyKyspbj10LmlzJiZ0LnRhZztlLnRhZz1ufHxlLl9fbmFtZSxuJiYoZS5pcz1lLl9fbmFtZSl9ZnVuY3Rpb24gcyhlKXtpZighT2JqZWN0Ll9fcHJvdG9fXyl7dmFyIHQ9SFRNTEVsZW1lbnQucHJvdG90eXBlO2lmKGUuaXMpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZS50YWcpO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pfWZvcih2YXIgcixvPWUucHJvdG90eXBlLGk9ITE7bzspbz09dCYmKGk9ITApLHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pLHImJihvLl9fcHJvdG9fXz1yKSxvPXI7aXx8Y29uc29sZS53YXJuKGUudGFnK1wiIHByb3RvdHlwZSBub3QgZm91bmQgaW4gcHJvdG90eXBlIGNoYWluIGZvciBcIitlLmlzKSxlW1wibmF0aXZlXCJdPXR9fWZ1bmN0aW9uIGMoZSl7cmV0dXJuIGIoTShlLnRhZyksZSl9ZnVuY3Rpb24gbChlKXtyZXR1cm4gZT9TW2UudG9Mb3dlckNhc2UoKV06dm9pZCAwfWZ1bmN0aW9uIHUoZSx0KXtTW2VdPXR9ZnVuY3Rpb24gZChlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYyhlKX19ZnVuY3Rpb24gcChlLHQsbil7cmV0dXJuIGU9PT1UP2godCxuKTpPKGUsdCl9ZnVuY3Rpb24gaChlLHQpe2UmJihlPWUudG9Mb3dlckNhc2UoKSksdCYmKHQ9dC50b0xvd2VyQ2FzZSgpKTt2YXIgbj1sKHR8fGUpO2lmKG4pe2lmKGU9PW4udGFnJiZ0PT1uLmlzKXJldHVybiBuZXcgbi5jdG9yO2lmKCF0JiYhbi5pcylyZXR1cm4gbmV3IG4uY3Rvcn12YXIgcjtyZXR1cm4gdD8ocj1oKGUpLHIuc2V0QXR0cmlidXRlKFwiaXNcIix0KSxyKToocj1NKGUpLGUuaW5kZXhPZihcIi1cIik+PTAmJnkocixIVE1MRWxlbWVudCkscil9ZnVuY3Rpb24gZihlLHQpe3ZhciBuPWVbdF07ZVt0XT1mdW5jdGlvbigpe3ZhciBlPW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBnKGUpLGV9fXZhciBtLHc9ZS5pc0lFLHY9ZS51cGdyYWRlRG9jdW1lbnRUcmVlLGc9ZS51cGdyYWRlQWxsLGI9ZS51cGdyYWRlV2l0aERlZmluaXRpb24seT1lLmltcGxlbWVudFByb3RvdHlwZSxFPWUudXNlTmF0aXZlLF89W1wiYW5ub3RhdGlvbi14bWxcIixcImNvbG9yLXByb2ZpbGVcIixcImZvbnQtZmFjZVwiLFwiZm9udC1mYWNlLXNyY1wiLFwiZm9udC1mYWNlLXVyaVwiLFwiZm9udC1mYWNlLWZvcm1hdFwiLFwiZm9udC1mYWNlLW5hbWVcIixcIm1pc3NpbmctZ2x5cGhcIl0sUz17fSxUPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLE09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudC5iaW5kKGRvY3VtZW50KSxPPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUy5iaW5kKGRvY3VtZW50KTttPU9iamVjdC5fX3Byb3RvX198fEU/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSBpbnN0YW5jZW9mIHR9OmZ1bmN0aW9uKGUsdCl7aWYoZSBpbnN0YW5jZW9mIHQpcmV0dXJuITA7Zm9yKHZhciBuPWU7bjspe2lmKG49PT10LnByb3RvdHlwZSlyZXR1cm4hMDtuPW4uX19wcm90b19ffXJldHVybiExfSxmKE5vZGUucHJvdG90eXBlLFwiY2xvbmVOb2RlXCIpLGYoZG9jdW1lbnQsXCJpbXBvcnROb2RlXCIpLHcmJiFmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmltcG9ydE5vZGU7ZG9jdW1lbnQuaW1wb3J0Tm9kZT1mdW5jdGlvbigpe3ZhciB0PWUuYXBwbHkoZG9jdW1lbnQsYXJndW1lbnRzKTtpZih0Lm5vZGVUeXBlPT10LkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtyZXR1cm4gbi5hcHBlbmRDaGlsZCh0KSxufXJldHVybiB0fX0oKSxkb2N1bWVudC5yZWdpc3RlckVsZW1lbnQ9dCxkb2N1bWVudC5jcmVhdGVFbGVtZW50PWgsZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TPXAsZS5yZWdpc3RyeT1TLGVbXCJpbnN0YW5jZW9mXCJdPW0sZS5yZXNlcnZlZFRhZ0xpc3Q9XyxlLmdldFJlZ2lzdGVyZWREZWZpbml0aW9uPWwsZG9jdW1lbnQucmVnaXN0ZXI9ZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50fSksZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe2kod2luZG93LndyYXAoZG9jdW1lbnQpKSx3aW5kb3cuQ3VzdG9tRWxlbWVudHMucmVhZHk9ITA7dmFyIGU9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oZSl7c2V0VGltZW91dChlLDE2KX07ZShmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt3aW5kb3cuQ3VzdG9tRWxlbWVudHMucmVhZHlUaW1lPURhdGUubm93KCksd2luZG93LkhUTUxJbXBvcnRzJiYod2luZG93LkN1c3RvbUVsZW1lbnRzLmVsYXBzZWQ9d2luZG93LkN1c3RvbUVsZW1lbnRzLnJlYWR5VGltZS13aW5kb3cuSFRNTEltcG9ydHMucmVhZHlUaW1lKSxkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcIldlYkNvbXBvbmVudHNSZWFkeVwiLHtidWJibGVzOiEwfSkpfSl9KX12YXIgbj1lLnVzZU5hdGl2ZSxyPWUuaW5pdGlhbGl6ZU1vZHVsZXM7ZS5pc0lFO2lmKG4pe3ZhciBvPWZ1bmN0aW9uKCl7fTtlLndhdGNoU2hhZG93PW8sZS51cGdyYWRlPW8sZS51cGdyYWRlQWxsPW8sZS51cGdyYWRlRG9jdW1lbnRUcmVlPW8sZS51cGdyYWRlU3VidHJlZT1vLGUudGFrZVJlY29yZHM9byxlW1wiaW5zdGFuY2VvZlwiXT1mdW5jdGlvbihlLHQpe3JldHVybiBlIGluc3RhbmNlb2YgdH19ZWxzZSByKCk7dmFyIGk9ZS51cGdyYWRlRG9jdW1lbnRUcmVlLGE9ZS51cGdyYWRlRG9jdW1lbnQ7aWYod2luZG93LndyYXB8fCh3aW5kb3cuU2hhZG93RE9NUG9seWZpbGw/KHdpbmRvdy53cmFwPXdpbmRvdy5TaGFkb3dET01Qb2x5ZmlsbC53cmFwSWZOZWVkZWQsd2luZG93LnVud3JhcD13aW5kb3cuU2hhZG93RE9NUG9seWZpbGwudW53cmFwSWZOZWVkZWQpOndpbmRvdy53cmFwPXdpbmRvdy51bndyYXA9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9KSx3aW5kb3cuSFRNTEltcG9ydHMmJih3aW5kb3cuSFRNTEltcG9ydHMuX19pbXBvcnRzUGFyc2luZ0hvb2s9ZnVuY3Rpb24oZSl7ZVtcImltcG9ydFwiXSYmYSh3cmFwKGVbXCJpbXBvcnRcIl0pKX0pLFwiY29tcGxldGVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGV8fGUuZmxhZ3MuZWFnZXIpdCgpO2Vsc2UgaWYoXCJpbnRlcmFjdGl2ZVwiIT09ZG9jdW1lbnQucmVhZHlTdGF0ZXx8d2luZG93LmF0dGFjaEV2ZW50fHx3aW5kb3cuSFRNTEltcG9ydHMmJiF3aW5kb3cuSFRNTEltcG9ydHMucmVhZHkpe3ZhciBzPXdpbmRvdy5IVE1MSW1wb3J0cyYmIXdpbmRvdy5IVE1MSW1wb3J0cy5yZWFkeT9cIkhUTUxJbXBvcnRzTG9hZGVkXCI6XCJET01Db250ZW50TG9hZGVkXCI7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIocyx0KX1lbHNlIHQoKX0od2luZG93LkN1c3RvbUVsZW1lbnRzKSxmdW5jdGlvbihlKXtGdW5jdGlvbi5wcm90b3R5cGUuYmluZHx8KEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHI9bi5zbGljZSgpO3JldHVybiByLnB1c2guYXBwbHkocixhcmd1bWVudHMpLHQuYXBwbHkoZSxyKX19KX0od2luZG93LldlYkNvbXBvbmVudHMpLGZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTt0LnRleHRDb250ZW50PVwiYm9keSB7dHJhbnNpdGlvbjogb3BhY2l0eSBlYXNlLWluIDAuMnM7IH0gXFxuYm9keVt1bnJlc29sdmVkXSB7b3BhY2l0eTogMDsgZGlzcGxheTogYmxvY2s7IG92ZXJmbG93OiBoaWRkZW47IHBvc2l0aW9uOiByZWxhdGl2ZTsgfSBcXG5cIjt2YXIgbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKTtuLmluc2VydEJlZm9yZSh0LG4uZmlyc3RDaGlsZCl9KHdpbmRvdy5XZWJDb21wb25lbnRzKSxmdW5jdGlvbihlKXt3aW5kb3cuUGxhdGZvcm09ZX0od2luZG93LldlYkNvbXBvbmVudHMpOyIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gQmFzZWQgaW4gcGFydCBvbiBjb2RlIGZyb20gQXBhY2hlIFJpcHBsZSwgaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9pbmN1YmF0b3ItcmlwcGxlXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG5cbnZhciBpbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfWE1MSHR0cFJlcXVlc3QgPSBYTUxIdHRwUmVxdWVzdDtcbiAgICB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgX1hNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICBvcmlnTWV0aG9kcyA9IHtcbiAgICAgICAgICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiB4aHIuc2V0UmVxdWVzdEhlYWRlcixcbiAgICAgICAgICAgICAgICBvcGVuOiB4aHIub3BlblxuICAgICAgICAgICAgfTtcblxuICAgICAgICB4aHIub3BlbiA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCkge1xuICAgICAgICAgICAgdmFyIHNhbWVPcmlnaW4gPSB1dGlscy5pc1NhbWVPcmlnaW5SZXF1ZXN0KHVybCk7XG5cbiAgICAgICAgICAgIGlmICghc2FtZU9yaWdpbikge1xuICAgICAgICAgICAgICAgIHVybCA9ICcveGhyX3Byb3h5P3J1cmw9JyArIGVzY2FwZSh1cmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcmlnTWV0aG9kcy5vcGVuLmFwcGx5KHhociwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgd2UgcmV0YWluIGFsbCBzdGF0aWMgcHJvcGVydGllcywgc3VjaCBhcyBET05FXG4gICAgd2luZG93LlhNTEh0dHBSZXF1ZXN0Ll9fcHJvdG9fXyA9IF9YTUxIdHRwUmVxdWVzdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6IGluaXRcbn07XG4iXX0=
